<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Blogue do Caloni</title>
    <link>http://www.caloni.com.br/tags/blog/</link>
    <description>Recent content in blog on Blogue do Caloni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sun, 17 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.caloni.com.br/tags/blog/" rel="self" type="application/rss+xml" />
    
     
        <item>
  <title>Um Delduca no Pedaço</title>
  <link>http://www.caloni.com.br/um-delduca-no-pedaco/</link>
  <pubDate>2021-01-17</pubDate>
  
  <guid>http://www.caloni.com.br/um-delduca-no-pedaco/</guid>
  <description>Esta série de anime obscura iniciou há mais de três décadas. Na época na região de Mococa, interior do estado de São Paulo, nasciam os primeiros computadores pessoais e esta é a história de um jovem que aprendeu a usá-los como ninguém.
Se renovando a cada nova temporada, a série foi se adaptando com o surgimento da internet e, principalmente, dos stickers. Foi nesse momento que a gama de espectadores aumentou consideravelmente. Até otakus desavisados acabavam assistindo, mal entendendo que a série criticava justamente esse comportamento nocivo de inanição social e incapacidade profissional.
Hoje a série ainda é exibida, mas poucos a conhecem. E é assim que toda obra de arte visionária costuma se manter: com um grupo de fãs coesos que nunca deixarão de ver conteúdo inteligente para ligar a Netflix.
</description>
</item>

     
        <item>
  <title>Degustações esporádicas de cervejas</title>
  <link>http://www.caloni.com.br/cervejas/</link>
  <pubDate>2020-12-27</pubDate>
  
  <guid>http://www.caloni.com.br/cervejas/</guid>
  <description> 2020-11-08 A Ambev lança a versão &amp;quot;Puro Malte&amp;quot; para suas &amp;quot;cervejas&amp;quot;. Experimentei a Skol e agora a Bohemia, que já era um tanto espumenta e doce para meu paladar. Ela continua espumenta, mas menos doce. São tantas gradações de mediocridade que se torna difícil diferenciar. Logo estaremos como naquele vídeo paródia de degustação de águas. 2020-11-08 Não tenho mais minhas anotações de cervejas, mas sempre posso começar de novo. E vou aproveitar agora, que fazia uns dois meses que não ia ao mercado e tive essa oportunidade. Peguei alguns rótulos de mercadinho de bairro, mesmo. Alguns ouvi falar bem dos amigos e conhecidos, outros por pura curiosidade. E um dos mais acessíveis foi essa Skol Puro Malte, a versão plus da cerveja conhecidíssima do pessoal de boteco e fãs de derivados de milho. O site da Ambev diz que esta edição é &amp;quot;leve e democrática&amp;quot;, tentando sugerir que agrada todos os gostos. De fato ela não é amarga o suficiente para não afastar os bebedores das cervejas doces e baratas do mercado, como a própria Skol tradicional. No entanto, é possível sentir um certo amargor a mais. É bem leve, mas se eu tiver que escolher entre a tradicional e esta, esta com certeza é preferência. 2019-07-01 IPA Gorillaz, da cervejaria homônima de Poços de Caldas, tem corpo parrudo, amargor amigo com os snacks de mandioca e batata fritas cortadas fininhas e sequinhas do Justo no Terraço, um lugar bom para música ao vivo mais tranquila e papear sem pressa de ir embora. 2019-07-01 Dama Bier IPA que é aquele amargor simples que sempre é sucesso quando não se quer prestar muita atenção à cerveja e mais à pizza do 430o em Jundiaí, massa feita com fermentação de 24 horas e estilo napolitana, com pizzas individuais pra comer com a mão. 2019-05-30 Goose Midway Session IPA é amargada com lúpulos aromáticos e vem para acompanhar um queijo mais parrudo ou alguma comida picante. 2019-05-30 Faxe IPA é uma IPA mais fortinha, com amargor sólido. É interessante, mas ainda prefiro as outras cores da latinha. 2019-04-13 Degustação no Kloser revelou cerveja com gosto de sorvete da infância. 2019-02-28 Praya Wit Bier é uma cerveja do Rio de Janeiro com corpo muito leve e desnecessariamente valorizada. Ignore. 2019-02-03 PS: A Carmen Cerveja Forte Clara com Laranja e Maracujá você acha essa cerveja nas Empanadas La Guapa em Pinheiros. 2019-02-03 Carmen Cerveja Forte Clara com Laranja e Maracujá já diz tudo pelo seu nome. O consumidor não deve intepretar pois não possui senso crítico. Nada melhor que uma cerveja forte, clara, com laranja, com maracujá e sem exigir cérebro do degustador. Um brinde! 2019-01-04 Colorado ICI 02 French IPA (chope) é amargurado na medida com lúpulos aromáticos franceses, o que a torna menos amarga (porque franceses são bixas) mas mais fácil de beber sozinha, o que lhe dá um ótimo atrativo para esse verão dos infernos em terras tupiniquins. 2019-01-02 Vixnu é uma Imperial IPA, o que quer dizer um soco no estômago., mas por ser uma Colorado também quer dizer que esse soco está equilibradíssimo entre as doses de malte e lúpulo, com aromas detectáveis só de cheirar. Aprecie com comidas fortes. 2018-12-30 Minerva Viena de Guadalajara é uma cerveja artesanal mexicana que vende dentro do aeroporto da Cidade do México. E não é aguada, é bem saborosa enquanto leve. 2018-11-23 Blue Moon IPA possui corpo médio e é cítrico em vez de lupulado aromático, fácil de beber. 2018-11-21 Minerva artesanal do México é uma draft de corpo médio pra fraco com final de café por causa do malte tostado. Fica bom com nachos do lugar onde comemos no aeroporto. 2018-11-05 Tupiniquim Session IPA tem amargor, mas é constante e médio, como seu corpo; para um kebab seja demais, mas foi com ele que eu tomei. 2018-11-05 Tupiniquim Chocolate é uma cerveja escura tipo stout cujo sabor lembra mais café, apesar de não ter café em sua composição (é só a torra do malte). Bom pra tomar sem nada embora a dica é com algum doce à base de chocolate. 2018-11-05 Tupiniquim Anunciação IPA é porradinha no estômago, mas seu lúpulo parece de respeito. Sinceramente, minha memória alcoólica deteriora na velocidade da luz. 2018-11-05 Invicta Saison tem aroma de coentro e não é soco no estômago como todas as Invictas que já provei (inclusive na própria cervejaria). É leve, clara, aromática e gasosa. 2018-11-05 Faxe Royal Export é uma dinamarquesa com malte leve, mas menos leve que uma pilsen: tem presença enquanto você bebe. Foi a porta de entrada da nova casa do Incrível. 2018-11-05 Burgman Midnight Riders é surpreendentemente uma Weiss, mas não tão doce como costumam ser as Weisses, nem tão gasosa. A palavra chave é: surpreendente. 2018-11-05 Burgman Fun Weiss é menos weiss ainda que a Midnight Riders. Eu não me lembro mais que isso. 2018-10-28 Colorado Okto Session tem pouco álcool, lembra Tubaína e vem com caju. O amargor é sereno com corpo fraco pra médio; boa pedida com castanhas de caju. 2018-10-02 Exterminador de trigo American Wheat. Essa receita da Três Lobos com Capim Limão poderia ser melhor. Mal misturado, gosto ameno, tem corpo médio demais para um wheat. 2018-09-25 O chope Putz IPA têm lúpulos cheirosos e corpo leve, pouco alcoólico e bem agradável gelado. Ou seja, nem parece IPA. 2018-09-25 Coruja Pilsen é uma... pilsen? Bom, tem um salgadinho próximo de uma witbier prestes a ser esquecida. 2018-09-23 O chope da Strappa Gingerberry é um chá preto fermentado com gengibre e gradação alcoólica ridícula de 0.6%. Ele é ainda frutado (possui morango) e deixa a garganta quentinha. Ótima opção entre bebidas mais fortes. Dá uma pausa etílica e estilosa na balada. 2018-09-22 Kairós Sol Poente é uma West Coast IPA de respeito. Equilibrada de corpo leve, seu chope é aromático e um pouco salgado com amargor presente sem exageros. 2018-09-20 O Saint Golden Ale é ligeiramente melado, corpo médio com pouca espuma. Artesanal da região de Floripa, bom custo/benefício. Primeira cerveja da viagem do Native Floripa. 2018-08-26 Dogfish Head Namaste White Belgian-Style Witbier. Com esse nome longuíssimo é óbvio que não é legal. Se trata de uma Witbier esquecível, cítricazinha, levezinha, espumazinha. Tudo inha para uma cerveja que se chamacomo é o nome, mesmo? 2018-08-09 Colorado Ithaca é selada com um material plástico/borracha vermelho e uma produção limitada e inacessível nos grandes mercados. Ela é preta, densa, intomável em vários goles (tente para ver como estragar uma garrafa). O sabor de rapadura se mistura com o lúpulo agressivo, e a bebida merece o mais forte e gorduroso dos pratos com louvor. 2018-08-08 Ruddles County English Ale. Uma Cream Ale porcamente estocada pelo OMalleys, o pub que faz um tempo não sabe muito bem o que está fazendo (se continua enchendo a culpa é dos Paulistanos, imagino). É uma cerveja da promoção da semana, que contém equilíbrio no lúpulo e pouco gás. Fácil de ingerir e de esquecer. 2018-08-08 Double Hop Monster IPA. Mais uma amostra do OMalleys, mas essa nem eles conseguiram estragar. Essa Double IPA é intensa na medida certa para quem quer apenas um copo para degustar por uma hora. Um gole é uma memória. Corpo médio para forte com intensidade de sabores que vai te fazer bebericar novamente assim que puder. 2018-08-06 Tripel Karmeliet é uma blonde Belgian beer bem alcoólica, mas que você não sente, pois seu aroma cítrico é mais potente sempre. Ela desce tão fácil e vai liberando novos aromas conforme a temperatura sobe de 4 a 15. Para quem não gosta do amargor da cerveja. 2018-08-06 Mafiosa Consiglieri Double India Pale Ale é, de acordo com o rapaz da Cervejoteca, a melhor IPA do mercado. E ela possui aquele equilíbrio que gostamos quando não queremos apenas sentir lúpulo. Às vezes o negócio da cerveja lupulada não é o amargor sem fim, mas apenas a impressão de estar bebendo algo que encaixa em nossa vida. 2018-08-06 La Guapa Carmen é a cerveja do restaurante anônimo produzida pela ZalaZ, de Paraisópolis (mineira), que é leve o suficiente para ser degustada e pesada o suficiente para ser degustada com empanadas. Seu aroma de laranja e maracujá do rótulo dá um tom cítrico, mas pouco perceptível por conta de seu corpo leve. 2018-08-06 Colorado Murica é mais um dos experimentos da cervejaria do urso com frutas. Dessa vez a escolhida é a graviola, e, rapaz, o Sr. Laércio Shiya, Mestre Cervejeiro desde sempre, sabe fazer as coisas bem feitas em pequena e grande escala. 2018-08-06 Bierland Witbier. Nunca me decepciono com os resultados dessa cervejaria de Blumenau. Aqui eles te entregam uma Witbier tão equilibrada que ela arrisca agradar gregos e troianos, no sentido que há pouquíssimo amargor, mas ele é sólido, e seus tons cítricos e sua espuma conferem o corpo e maciez. 2018-07-26 1681 Schloss Eggenberg Flopfen Rönig é de uma cervejaria bem antiga da Áustria, feita em um castelo, e que nessa edição nos traz um sabor rapidamente intenso, um pouco de sal, cítrico e aromas que se esvaem rapidamente. É uma cerveja boa para tomar sozinha se quiser. 2018-07-16 A Colorado Cauim 016, que mantenho algumas garrafas em estoque, é uma Pilsen, mas não é uma Pilsen qualquer. Ela não é tão amarga, possui corpo fraco a médio, ou talvez até médio, e também frescor no aroma e um toque cítrico no sabor, com after que lembra manga, tangerina, ou algo próximo. 2018-07-15 A Brewdog Punk IPA, essa sim, vale a pena. Lupulada com aroma, amarga na medida certa e com um after completo, que cobre a boca toda, essa versão da cervejaria do Reino Unido merece palmas pela conquista em latinha. 2018-07-13 A Brewdog que o Incrível achou na lojinha da liberdade se chama Indie Pale Ale, o que parece uma brincadeira, pois no fundo se trata de um pilsen leve, que embora aromático e um tanto com certos tons condimentados, seu corpo é muito leve e amargor inexistente (ou some tão rápido que não se constrói um after sensível). 2018-07-07 O chope da Colorado Demoiselle na degustação ao final visita da Toca do Urso, demonstrando o sistema de auto tap (My Tap, acho que é o nome), revela uma cerveja surpreendentemente aromática, algo difícil de sentir nas engarrafadas. O colarinho é delicioso e o sabor misto da cerveja e da espuma sugerem fortemente o café. Amargor um pouco enjoativo, mas saboroso. 2018-07-07 Este foi o grande achado na visita da Toca do Urso. A pilsen com Dry Hopping Cauim 016, parte da degustação, é uma pilsen aromática e equilibrada. Chega a ter o corpo quase médio, mas peca um pouco pelo after. De qualquer forma, o chope vale muito à pena. 2018-07-07 Colorado Eugênia fez parte da degustação da visita da Toca do Urso e me ganhou pelo frescor que ela oferece em detrimento às mais potências. O corpo é médio para forte, mas o tom cítrico compensa. 2018-07-07 Assim como o Colorado Murica, que tem um creme aromático e um sabor igualmente cítrico, mas mais frutado, pois vem da graviola. 2018-06-20 Grolsch Premium Lager. Cerveja de corpo leve para média, acompanha bem comida árabe desse restaurante inusitado de Tucumán na Argentina. 2018-05-26 Ashby Pale Ale. Essa cerveja de Amparo é bem melada para uma Pale Ale e tem um final de amargo adoçante que não me agrada. Mas é consistente e pode combinar bem com pratos semi doces, como o ensopado de curry que a mulher fez para harmonizar. Consumir em ritmo médio porque tem corpo médio e é cerveja para assistir standup na Netflix. 2018-05-20 Old Specked Hen é uma Ale meio sem graça para temperaturas frias (pela falta de gás) e sem graça em temperaturas quentes (pela falta de gosto). Pode estar choca, mas mesmo choca teria que ter potência. Seu corpo é uma pilsen glorificada com uma coloração bonita. Não serve para acompanhar séries fortes como Happy é muito menos para gastar em conversas animadas com amigos. Deixe na prateleira (exceto se for sensível). 2018-04-19 Eisenbahn Pale Ale. Tem no mercado da frente de casa, é um bom custo/benefício; então sempre tem na geladeira; seu amargor é desequilibrado demais, e um tanto aguada, mas melhor que a maioria das pilsen, então 2018-04-06 Wäls Petroleum. Sinceramente, esta passou do ponto; intensamente intensa, feita para quem gosta de café forte e está muito bêbado para perceber nuances; harmonizar com socos na cara. 2018-04-06 Insana APA. Segunda prova desta APA nacional deu a sensação dela ser mais aromática que saborosa; mas continuemos tentando. 2018-03-16 Schornstein Witbier. Esta Witbier combina perfeitamente com o peixe do Uokatsu, que começou a oferecer a linha dessa pequena e consistente cervejaria de Pomerode; corpo fraco pra médio, amargor quase inexistente; uma pilsen com sabor, elegância e refrescância. 2018-03-15 Mohave Yucca Witbier. Mais uma Witbier interessante dessa cerejaria artesanal carioca que nasceu entre amigos; em corpo médio é um ótimo começo de noite com comidinhas. 2018-03-10 Madalena Double IPA. É forte, densa, corpo violento, mas que não mantém um amargor; o lúpulo vira outra coisa, toma forma própria e te ataca ou te abraça; um dos dois irá acontecer. 2018-03-10 Goose IPA. Um pequeno soco no estômago que te manda acordar da vida e saborear esta cerveja lupulada com intensidade sem perder o frescor; colarinho de respeito. 2018-03-10 Colorado Appia. Uma nuvem de bitter e frescor que se aproxima da mescla entre uma Pilsen e algo a mais que ela e a Serra Malte possuem. 2018-02-23 RedCor Intrigante American Wheat Rye. A cervejaria de Maringá que agora produz suas cervejas em Blumenau oferece um ponto de entrada entre uma Blonde e uma IPA com esta Wheat Rye frutada de corpo médio e amargor constante; é difícil não perceber que ela consegue ser refrescante mesmo mais forte que uma pilsen. 2018-01-30 Serra Malte. Semi gelada em um dia gelado ela oferece a manutenção da temperatura do corpo um pouco abaixo; seu amargo maltado é agradável e perene. Tomando no japonês da Bom Pastor com carne e gengibre. 2018-01-08 Ouropretana Pale Ale. Não havia a Ouropretana mais amarga, mas essa quebrou o galho no pub de Ouro Preto. 2018-01-07 Wee Heavy Bodebrown Strong Scotch Ale. Cerveja que o Rodrigo da Kelly guardou por um ano e maio. Uma cerveja com xarope forte, amargo e levemente doce com corpo médio. Bom com torresmo que trouxemos do Recanto do Antônio. 2018-01-07 Diamantina Blonde Ale. Com IBU 20, é bem leve e equilibrada. Uma das cervejas mais equilibradas, embora de corpo fraco, dessa viagem. Uma das cervejas de presente pro Rodrigo que ele abriu conosco. 2018-01-05 Dos Caras American Wheat. Para um trigado não muito doce nem denso. Tomado no Pub Catedral. 2018-01-03 Dos Caras California Common. Uma das cervejas dessa cervejaria de Nova Lima, próximo de BH, mas tomado em Diamantina (no restaurante de esquina próximo da descida). 2018-01-03 Ashby Pale Ale. Um pale ale de Minas (Amparo) com corpo fraco para médio como uma Lagger e ligeiramente amarga. Primeira visita no restaurante Recanto do Antônio tomado com o PF do dia (frango). 2018-01-02 Krug Bier Chope. Um blonde equlibrado, denso, corpo médio. Produzido artesanalmente na região de Diamantina e tomado primeira tarde na viagem do ano-novo de 2018 no Pub Catedral, sentado no bar. 2017-10-20 Paulaner Salvator Doppelbock. Boa, mas acho que doce além do que gosto. Tomando com pão e carne louca. 2017-10-07 Bohemia 838 Pale Ale Corpo leve demais para um Pale Ale, chega a ser Pilsen. Com salsicha e queijo na airfryer. 2017-10-05 Bohemia 14-Weiss. Doce, equilibrada, aromáticas; corpo fraco pra uma Weiss, perde gás fácil. Tomei com pizza que achamos perto de casa. 2017-09-28 Colorado Indica Pale Ale. Amarga ligeiramente acima do ponto, corpo médio pra forte. Acompanhando batatas ao forno com bacon, salsichão e alho. 2017-09-13 Eisenbahn Extra Escura Dunkel. Combina perfeitamente com carne reduzina na pressão, como a que a Mitiko fez no almoço de hoje. 2017-09-12 Eisenbahn Extra Escura Dunkel. Não tão doce quanto a última vez que provei; uma dunkel que tem gosto de café por conta do malte cerrado; bom corpo e não-enjoativo. Almoço com bifum e purê apimentado. 2017-09-09 Chope Gonçalvez IPA Poços de Caldas. Não tão forte, mas muito equilibrada. Tomada direto na cervejaria na avenida em Poços. 2017-09-08 Chope Gorillaz Lager Poços de Caldas. Encorpada e não tão doce; colarinho cheio de aromas. Tirada perfeitamente no Justo no Terraço em Poços. 2017-08-07 Paulistânia IPA Caminho das Índias. Forte quase além do limite... mas aguenta bem. No Recanto encontro da BF owners. 2017-08-07 Hacker-Pschorr Munich Gold. Para uma cerveja puro malte ainda falta bastante malte; voltar para a Proibida. Bebi com o Strauss na reunião de acionistas no laguinho. 2017-07-27 Colorado Indica Pale Ale. Amarga no ponto, corpo médio pra forte. Acompanhou bem as azeitonas pretas pós-hambúrguer com chips de batata-doce. 2017-07-25 Ravache Puro Malte. Corpo leve demais para um puro malte; muita propaganda para nada. 2017-07-20 Wäls Session Citra. Refrescante, leve, fácil de tomar com comidinhas. Como no almoço com o Taz no Chez. 2017-07-20 Wäls Hop Corn IPA. Encorpado e um pouco além de amargo. Não acompanhou muito bem com a comida do Chez, onde eu e o Taz almoçamos. 2017-06-07 Colorado Appia. Ele tem um doce sutil, assim como amargo; lembrar de tomar por inteiro, como Weiss. Em casa, não lembro o que comia. 2017-06-07 Baden Baden American IPA. O doce sobrepõe o amargo e não fica agradável, mesmo com amendoim de wassabi. Em casa com amendoim de wassabi. 2017-06-01 Baden Baden American IPA. Muito doce para uma IPA; sobressai ao amargo e fica enjoativo. 2017-05-31 Chope Guiness. Equilíbrio entre doce, amargo e um toque de café. 2017-05-29 London Pride (garrafa). Um amargor intenso sem agredir o paladar. 2017-05-24 Wild River Double Hopped Pale Ale. Red Ale que parece Pale Ale não tão amarga. 2017-05-15 Imperial Lager. Meio refrescante, meio amarga. Penúltimo almoço no Dubai, restaurante árabe de Salta. 2017-05-14 Salta Negra. Gosto de café, pouco doce, after espumoso. Primeiro jantar no Dubai, restaurante árabe de Salta. 2017-03-25 Kirin Ichiban Puro Malte. Uma cerveja pilsen maltada que rivaliza com a Proibida. 2017-03-25 Dom Casmurro IPA. Excelente equilíbrio de amargor, frutado e muito aromático. 2017-03-21 Lohns Bier IPA. Bem amargo, quase demais. 2017-01-05 Patagonia Weiss. Doce, mas não tanto. Agradável. 2017-01-05 Cervejaria Nacional Stout. Equilíbrio entre amargo e doce. 2016-12-27 Chimay Pères Trappistes. Ela é bem amarga para uma trigada, mas possui um equilíbrio interessante. 2016-12-04 Patagonia Amber Lager. Pouco densa, pouco amarga e pouco doce; uma combinação equilibrada. 2016-12-04 Ashby Ganesha IPA Ambar. Cor âmbar densa, amargor constante, bem pesada para tomar desacompanhado. 2016-11-24 Budweiser Lager. Tem um ótimo custo benefício. Parece ter voltado a ser levemente mais forte que as outras. 2016-06-01 Ipaipim. É uma IPA com aipim (mandioca), mas quase não dá pra notar com esse amargor todo. 2016-05-29 Shorstein Pale Ale. Amargor equilibrado, não muito intenso. Não muito barato. 2016-05-29 Shorstein Imperial Stout. Gosto de defumado, pouco melado e amargo. Bem caro. 2016-03-05 Serra Malte. A pequena é ótima, pois enjoa mais devagar, e é tão intensa... 2016-01-31 Löwenbräu. Um pouco fraca, mas agradável; um pouco espumosa demais. 2016-01-30 Bäcker Pale Ale. Balanceada, um ótimo custo/benefício. 2015-11-09 Caá Yari. Doce com o amargor característico de uma Belgian Blonde Ale. 2015-10-27 Jabutipa IPA. O amargo da Boemia, cujo amargor não tem muito aroma ou sensação, mas foda-se: É amargo pra caralho. 2015-09-28 Eisenbahn Pilsen. Mais consistente, menos aguada que a maioria; não muito forte. 2015-09-24 Hoegaarden trigada. É trigada, mas não tão doce; bem encorpada. 2015-09-13 Colorado Café. Equilibrando doce e amargo, um pouco aguada (sem lúpulo), e talvez lembre café. 2015-08-30 Therezopolis Gold Malte Dunkel. Um pouco doce demais, o amargo no ponto; não tomar muito gelado, nem quente; vai bem com Yakissoba. 2015-08-06 Original. Tomei com o Strauss no almoço PF, meio aguado e incha demais. 2015-07-25 Serra Malte. Experimentei ao visitar a tia Margarete, muito bom ainda. 2015-07-17 Brahma. Aguada, muito gás, depois de um tempo é impossível tomar mais. 2015-07-10 Serra Malte. Experimentei de novo em Minas, é muito bom e forte (e lá barato). 2015-06-21 Therezopolis Gold. Agradável, mas bem forte; não combina muito bem com comida apimentada. 2015-06-21 Ravache Pale Ale. Bem amarga, bom para acompanhar algo, mas sozinha fica um pouco demais. 2015-05-01 1906. Importada, um amargo que dá pro gasto. 2015-01-27 Tiradentes: Áustria Krug Bier Premium 100% Malte. Uma Pilsen equilibrada, que não parece aguada, e um ótimo custo-benefício (se não estivesse em Tiradentes) 2015-01-13 Ouro Pretana Americana Brown Porter. Muito equilibrada, pouco doce e pouco amargo com pouca espuma; ímpar. 2015-01-07 3 Lobos Bravos. Muito espumoso, e o gosto de açúcar não é muito bom, é enjoativo; não aguentei. 2015-01-04 Ouro Pretana Pale Ale. Bem equilibrado; refrescante com amargor e um pouco de doce.  </description>
</item>

     
        <item>
  <title>TIL: Today I Learned</title>
  <link>http://www.caloni.com.br/til/</link>
  <pubDate>2020-12-08</pubDate>
  
  <guid>http://www.caloni.com.br/til/</guid>
  <description>Se você guardar o mínimo de conhecimento que aprendeu em um dia de sua vida e relembrá-lo ao longo dos anos não vai perceber qualquer diferença, pois com a internet fica fácil recuperar o conhecimento com nova pesquisa. No entanto, na internet está também você e seu conhecimento em forma de posts, comentários, podcasts ou qualquer tipo de conteúdo que você produziu. Não custa manter a rotina de gravar o que foi aprendido em um dia para tentar capturar a essência de cada um deles. Quem sabe algo de esclarecedor sobre nós mesmos não pode surgir disso.
  2020-08-07: ao usar ponto (.) antes de rodar um comando no terminal Linux é possível definir variáveis de ambiente. Com isso consigo definir o ambiente para fazer cross compiling em Golang no Linux para Windows, gravando as variáveis em um arquivo executável &amp;quot;export GOOS=windows; export GOARCH=amd64; etc&amp;quot; e chamando com &amp;quot;. meu_arquivo&amp;quot; no terminal.
  2020-10-22: para desabilitar expiração de senhas no Oracle o comando alter user user_name identified by new_password account unlock; resolve. Para as senhas não expirarem novamente em ambiente de desenv é só usar o comando ALTER PROFILE &amp;quot;DEFAULT&amp;quot; LIMIT PASSWORD_VERIFY_FUNCTION NULL; uma vez no banco.
  2020-10-22: para apagar tags dos posts é possível usar o seguinte comando sed -e &amp;quot;s/\[ \&amp;quot;tag\&amp;quot;[,]*/[/&amp;quot; -e &amp;quot;s/[,]* \&amp;quot;tag\&amp;quot; ]/ ]/&amp;quot; -e &amp;quot;s/, \&amp;quot;tag\&amp;quot;, /, /&amp;quot;.
  2020-10-26: para dar sleep em C&#43;&#43; moderno com resolução de milissegundos é std::this_thread::sleep_for(std::chrono::milliseconds(200));. É tão intuitivo que achei preciso anotar.
  2020-11-21: para eliminar qualquer nova-linha em uma string C após ler uma linha da entrada usar uma desconhecida função padrão: buffer[strcspn(buffer, &amp;quot;\r\n&amp;quot;)] = 0;.
  2020-12-08: é possível abrir uma VPN pelo WSL e direcionar a porta RDP de uma máquina remota para uma porta local no Windows e acessar máquinas via RDP em uma porta local. Para a VPN uso o Openvpn. Para o redirect um projeto no GitHub chamado rinetd.
  </description>
</item>

     
        <item>
  <title>Transmatrix</title>
  <link>http://www.caloni.com.br/transmatrix/</link>
  <pubDate>2020-12-06</pubDate>
  
  <guid>http://www.caloni.com.br/transmatrix/</guid>
  <description>Os irmãos Wachowski hoje são irmãs. Ambos passaram por cirurgias de mudança de sexo. Recentemente, durante entrevistas sobre a produção de Matrix 4, foi comentado por uma delas que o primeiro Matrix era uma alegoria sobre transexualidade.
De fato. Ao reassistir com essa visão é possível observar a dedicação dos diretores em mostrar o esforço sobrehumano do resgate de Neo. Antes de ser abduzido pela nave comandada por Morpheus ele era um ser do underground sem nenhuma marca de injeção de drogas ou substâncias alteradoras de humor. Logo após isso vemos o lento e doloroso processo em transformá-lo em um ser humano funcional fora da realidade virtual mantida pelas máquinas. Ele possui vários orifícios em torno do corpo, nos membros e tórax, sendo o principal deles, o mais sensível, na nuca, em uma conexão direta com o cérebro.
A analogia é forte demais com os transexuais. Dispostos a ir em busca da verdade eles submetem seu corpo a todo tipo de manipulação e humilhação. O resultado é alguém que aprendeu sobre a realidade em um outro nível, mas que nunca mais poderá se tornar um ser humano completo. Sua existência é ser um mutilado vivendo no esgoto.
Claro que Matrix permite fazer analogias com várias filosofias diferentes, pois o conceito, desde A Caverna de Platão, é muito vasta. Peço apenas que note o quão a produção é dedicada a esmiuçar o processo de transformação de Neo. É um foco que havia passado despercebido por muita gente porque ninguém imaginou a reviravolta na vida das agora irmãs diretoras, nem sabe a desgraça que é viver vilipendiado em nossa realidade. É uma dor nunca antes mostrada em uma ficção científica com tanto afinco.
</description>
</item>

     
        <item>
  <title>Festa de Família</title>
  <link>http://www.caloni.com.br/festa-de-familia/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/festa-de-familia/</guid>
  <description>O Dogma 95 foi um movimento iniciado por diretores escandinavos como Lars von Trier (conhecido fã de Hitler e seu trabalho) que &amp;quot;prega&amp;quot; que um filme para fazer parte do Dogma deve seguir uma série de limitações em sua produção, como ausência de sons inseridos, a câmera deve acompanhar os atores onde eles forem (então ausência de iluminação artificial também). Ausência de qualquer peça de cenário que já não fizesse parte da locação. A lista é bem extensa e torna a tarefa do diretor mais desafiadora e interessante.
E por isso que este representante do Dogma 95 até que é bem feito, o que faz pensar se não estamos saturados de efeitos no cinema que nos impedem de ver a coisa real. A edição, os diálogos e o movimento da câmera fazem todo o serviço de não sentirmos falta de ver algum filtro específico para dramas familiares. E neste filme o que mais pesa é o seu drama de família escancarado para todos verem. É um vexame a céu aberto. E ele escala como você nunca viu em suas festas de fim de ano com os cunhados que gostam de falar de política junto das piadas de pavê.
</description>
</item>

     
        <item>
  <title>Kaynã</title>
  <link>http://www.caloni.com.br/kayna/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/kayna/</guid>
  <description>Doce, pouco ácido. Feito em uma fazenda orgânica que visitei com amigos há um ou dois anos, a fazenda produz alimentos sustentáveis e tentam diminuir ao máximo as pegadas de carbono. A torra deste café é média, mas possui bom corpo e amargor leve. Você pode encontrá-lo moído ou em grãos no mercado Santa Luzia em São Paulo. Eles entregam na capital de bike. É muito esforço para deixar de ser admirável. E é um bom café de verdade.
</description>
</item>

     
        <item>
  <title>Mr. Bean</title>
  <link>http://www.caloni.com.br/mr-bean/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/mr-bean/</guid>
  <description>Apesar das ideias e piadas ultrapassadas, o que não acometeu o experimental Monty Python, por exemplo, essa série britânica dos anos 90 brilha mais pelo humor físico de seu protagonista, Mr. Bean, que brinca de referenciar as piadas internas sobre os comportamentos condenáveis de um britânico. Bean faz um Chaplin da Rainha com um timing e expressões admiráveis. Figura no imaginário popular até hoje, mais até que Jim Carrey. É difícil lembrar de como Carrey era bom no humor físico porque suas piadas eram muito boas. É fácil lembrar de Mr. Bean porque sendo as piadas medíocres o ator tinha todo o palco para ele. E brilhava.
</description>
</item>

     
        <item>
  <title>Parks and Recreation</title>
  <link>http://www.caloni.com.br/parks-and-recreation/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/parks-and-recreation/</guid>
  <description>Já vi episódios espalhados dessa série em alguns momentos nos últimos dez anos. A primeira ou segunda temporada já concluí com certeza. Mas ainda estou incerto se vale a pena assistir até o final, assim como The Office, embora este arrisque um pouco mais nos perder (uma coisa boa em séries e filmes que geralmente é menosprezado). Amy Poehler é tudo de bom, mas os personagens secundários empalidecem. Inexplicável como alguns deles se deram bem no show business, seja como comediante de standup e série netflixiana ou como heróis de sagas multimilionárias. Já a série é uma comédia leve para passar o tempo e pensar em como o governo ser inútil não é uma questão de opinião, mas de tempo.
</description>
</item>

     
        <item>
  <title>Seinfeld</title>
  <link>http://www.caloni.com.br/seinfeld/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/seinfeld/</guid>
  <description>Seinfeld é um comediante nerd: passou boa parte de sua carreira atrás dos holofotes criando piadas diariamente e catalogando sua estreia na TV. Já nele ele encaixa boa parte delas em episódios que misturam sua vida como o personagem do comediante de standup. Ou estou confundindo com o modelo de Louie, que é infinitamente melhor? Ele não é ator, está longe de ser, e a série é de improviso. Funciona médio, mas se tornou cult, assim como Friends, ou qualquer série que você assista demais e simpatize com aquelas pessoas como velhos amigos de sofá. Hoje é uma curiosidade.
</description>
</item>

     
        <item>
  <title>The Boys</title>
  <link>http://www.caloni.com.br/the-boys/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/the-boys/</guid>
  <description>Quando você assiste uma série com quase uma hora o episódio você espera o mínimo de profundidade. Mas todos moram na mesma vizinhança em The Boys, e isso me entedia em uma série com heróis inseridos em uma realidade Watchmen em uma fase mais trumpiana, menos pesada que Nixon (ou como Watchmen entendia esse período da história americana). O cinismo e mal-caratismo também faz parte do pacote do que significa ser um herói nesta realidade, que envolve ser uma celebridade acima de tudo, mas por detrás das câmeras um político. Quando um deles mata uma cidadã inocente por estar passando em velocidade super-sônica isso desencadeia a aparição de todos os personagens que veremos na série, que se conectam logo no primeiro episódio, como deve ser, mas de maneira preguiçosa, como só o streaming faz por você. Porque todos moram na mesma rua e podem se encontrar casualmente no Personal Central Park da vizinhança. Até Homem-Aranha e sua Nova-York bairrista soa mais realista. Não sei, estou rimando hoje.
</description>
</item>

     
        <item>
  <title>The Feed</title>
  <link>http://www.caloni.com.br/the-feed/</link>
  <pubDate>2020-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/the-feed/</guid>
  <description>Um thriller futurista meio dark. O mistério no ar no primeiro episódio não é tão eficiente para querermos ver mais, e o universo concebido para a trama minimalista. O conceito, no entanto, é curioso. Ainda que pouco explorado. Um elenco britânico misturado com outras etnias são um plus, mas não convence. Nem os atores negros, claramente escalados por cotas de diversidade (mas competentes, só que sem função na narrativa). Todas as ideias que constrõem as teorias do mundo conspiratório de hoje traduzidas nesse conceito de mentes conectadas. Daria um bom episódio de Black Mirror, mas não uma série inteira.
</description>
</item>

     
        <item>
  <title>Bispo e Cavalo</title>
  <link>http://www.caloni.com.br/bispo-e-cavalo/</link>
  <pubDate>2020-09-05</pubDate>
  
  <guid>http://www.caloni.com.br/bispo-e-cavalo/</guid>
  <description>Já havia estudado este final há muito tempo e nem lembrava mais. Ter empatada uma partida porque não consegui dar mate forçado com bispo e cavalo é o que me fez rever o estudo. Assisti alguns vídeos e pratiquei com alguns estudos no Lichess. Por fim, me pus a jogar com o computador até entender a dinâmica de cercar o rei e realizar o movimento de W com o cavalo. Eu sei que ainda terão partidas que me sentirei acuado por conta do tempo, mas é bom agora voltar a ter o mínimo de arcabouço lógico por trás desse fascinante e difícil final. Tão difícil que até GMs não conseguem aplicar às vezes.
</description>
</item>

     
        <item>
  <title>Jejum de Dopamina</title>
  <link>http://www.caloni.com.br/jejum-de-dopamina/</link>
  <pubDate>2020-08-29</pubDate>
  
  <guid>http://www.caloni.com.br/jejum-de-dopamina/</guid>
  <description>Na verdade é um jejum de super estímulos, que tem por objetivo apagar o incêndio causado pelos neuroreceptores de dopamina de hábitos compulsivos em busca de prazer fácil para uma vez estabilizado em níveis saudáveis observarmos os gatilhos que nos faz voltar para esses hábitos, observando nossos impulsos para voltar a essas atividades, geralmente associados ao nosso estado emocional interno. Apenas dessa forma, seguindo o modelo de terapia cognitiva, para que o equilíbrio do sistema dopamínico se mantenha, e possamos apreciar como se deve atividades vistas hoje como chatas, como ler, escrever, meditar, passear ao ar livre. Ouvir.
</description>
</item>

     
        <item>
  <title>CPU Fritando com Intel Turbo Boost</title>
  <link>http://www.caloni.com.br/cpu-fritando/</link>
  <pubDate>2020-08-24</pubDate>
  
  <guid>http://www.caloni.com.br/cpu-fritando/</guid>
  <description>É a segunda vez que isso acontece e esqueci quando foi a primeira. O cooler do notebook começa a assoprar que nem louco e em poucos minutos o computador desliga. O processo se repete, sempre que faço alguma atividade que exige mais processamento. Baixo o HW Monitor da CPUID e verifico que a CPU está alcançando limites acima de 90 graus celsius, e para segurança ela se auto-desliga. A solução? Ir em opções de energia do SO e trocar o limite máximo que a CPU pode ser usada de 100% para 99%. Isso mesmo, apenas abaixe um por cento. Com isso você está desabilitando o Intel Turbo Boost, que aparentemente não conhece limites físicos e sai fritando a CPU quando é necessário. Mas isso desgasta os chips e destrói a vida útil do sistema. E minha máquina já é rápida o suficiente para conseguir viver sem mais um Boost na minha vida.
</description>
</item>

     
        <item>
  <title>Pacotes Nuget Again</title>
  <link>http://www.caloni.com.br/pacotes-nuget-again/</link>
  <pubDate>2020-08-04</pubDate>
  
  <guid>http://www.caloni.com.br/pacotes-nuget-again/</guid>
  <description>Agora que mexo com .net no trabalho surgem problemas de &amp;quot;marinheiro de primeira viagem&amp;quot; (na verdade já mexi com o framework, mas há muitos anos). O que me fez gastar mais horas à toa sem dúvida é o versionamento dos pacotes nuget que viram dependências simples de colocar e difíceis de mexer.
Nesse problema em específico de tratava da lib Castle.Core na versão 4.4.0. Durante a compilação tudo estava lindo e maravilhoso. Porém, na hora de rodar, a exceção de I/O dizendo que não conseguiu carregar o assembly na versão certa pula na minha frente.
Pesquisa de lá, pesquisa de cá, fuça de cá, fuça de lá, encontrei acho que pela segunda vez a solução. Se trata mesmo da versão errada sendo utilizada, mas não na compilação, mas na execução. É preciso definir a versão correta no arquivo de configuração.
Feito isso todo o mundo maravilhoso de .nerd volta a fazer sentido.
</description>
</item>

     
        <item>
  <title>Close Remote Socket</title>
  <link>http://www.caloni.com.br/close-remote-socket/</link>
  <pubDate>2020-07-05</pubDate>
  
  <guid>http://www.caloni.com.br/close-remote-socket/</guid>
  <description>I got used to close sockets in Windows using TCP View, but I haven&#39;t learned yet how to do this in Linux. Some Google and now I know. It is kinda simple in terminal mode, as any task a programmer needs to do in your system.
You just need to find the process using netstat, find the socket descriptor using lsof, debug the process with gdb, close the socket using call command, close the debugger. You done. How simple is that, right?
</description>
</item>

     
        <item>
  <title>Find Path ou Por Que O Vcpkg Não Colocou o Path da Minha Biblioteca?</title>
  <link>http://www.caloni.com.br/find-path/</link>
  <pubDate>2020-07-01</pubDate>
  
  <guid>http://www.caloni.com.br/find-path/</guid>
  <description>Algumas bibliotecas portadas para o vcpkg, gerenciador de pacotes direto do fonte da Microsoft, não vêm exatamente como esperamos que elas venham em ambientes mais estáveis como UNIX-like. A GLib, por exemplo, uma biblioteca fenomenal se você deseja trabalhar com um framework puramente em C, está disponível pelo vcpkg através do pacote glib, mas vem encapsulado no namespace unofficial::glib::glib. Isso ocorre porque este não é um port oficial.
Se você estivesse em um ambiente UNIX precisaria fazer malabarismos com o PkgConfig, o gerenciador de pacotes do GTK (onde a GLib pertence). No entanto, depois de configurado, tudo o que precisaria fazer é incluir uma macro para os diretórios de include e outra macro para os diretórios de libraries e o programa compilaria. No caso do Windows essa macros não existem.
Lendo a documentação de como instalar o SQLite na documentação do vcpkg me deparei com uma informação até então oculta para mim: &amp;quot;Unlike other platforms, we do not automatically add the include directory to your compilation line by default. If you&#39;re using a library that does not provide CMake integration, you will need to explicitly search for the files and add them yourself using find_path and find_library.&amp;quot;
Então tá. Feito isso, e rodando o cmake com o -DCMAKE_TOOLCHAIN_FILE passando o diretório de instalação do vcpkg, tudo se resolve. O solution do Visual Studio finalmente consegue encontrar os includes e libraries da glib. Ou qualquer outra biblioteca portada que você queira usar.
</description>
</item>

     
        <item>
  <title>Pgn2art</title>
  <link>http://www.caloni.com.br/pgn2art/</link>
  <pubDate>2020-06-27</pubDate>
  
  <guid>http://www.caloni.com.br/pgn2art/</guid>
  <description>Meu sonho de consumo para acompanhar partidas de xadrez é às cegas, apenas lendo ou ouvindo o próximo lance e imaginando em minha cabeça o tabuleiro. Porém, enquanto não tenho essa habilidade, um meio-termo aceitável é ver um tabuleiro em ascii art se modificando a cada lance. É possível acompanhar uma partida dessa forma como se estivesse lendo um livro, e por isso esse formato é prático, também, pois posso jogar esse ascii art no meu Kindle.
Usando a biblioteca python-chess fiz um pequeno script que recebe o endereço de PGNs (o formato com que se grava partidas de xadrez) por URL ou path local e cospe esses tabuleiros em ascii art. Com isso pode redirecionar para um arquivo texto e enviar para o Kindle ou ler de qualquer lugar, em formato estático, a tradução da partida.
O próximo passo, antes de ler às cegas, é transformar a leitura do tabuleiro bidimensional para a leitura do formato FEN, que é o formato usado para gravar posições de um tabuleiro.
</description>
</item>

     
        <item>
  <title>C&#43;&#43; Co Routines</title>
  <link>http://www.caloni.com.br/cpp-co-routines/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/cpp-co-routines/</guid>
  <description>Entre os gêneros mais famosos do cinema e da programação está o terror, esse estado mental que se caracteriza pelo medo ou pela aversão a uma situação que envolve a perda de controle. Nesse quesito se encaixam as novas corrotinas que serão adotadas pelo padrão C&#43;&#43;.
No último Caloni Bode Cast Live Privado, aqueles que não estão publicados no YouTube, conversei com um amigo por mais uma vez (já perdi a conta quantas foram) sobre a famigerada implementação, mas acho que dessa vez detectei melhor o que torna essa nova biblioteca de C&#43;&#43; tão repugnante para os amantes de boas soluções de engenharia e do padrão da linguagem.
A primeira ressalva diz respeito à alocação dinâmica. Ao usar esse modelo de rotinas cooperativas o programador é obrigado a alocar espaço para o estado dinamicamente, o que fere duas premissas da linguagem: o controle absoluto do modelo de execução para o programador e a certeza que ele irá apenas pagar em performance o que ele usar. Se os fãs da linguagem fossem religiosos, eles diriam agora que esta não foi uma decisão muito cristã do comitê.
Eu continuo defendendo que a linguagem C seja usada caso surjam contra-indicações na prática da STL.
</description>
</item>

     
        <item>
  <title>Oscar</title>
  <link>http://www.caloni.com.br/oscar/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/oscar/</guid>
  <description>Quando o chefão do Oscar faz um discurso dizendo que agora oficialmente serão dez os indicados a melhor filme para promover representatividade, diversidade e todos os ades de quem é ista, ele não está sendo um cara legal. Ele está apenas revelando o quanto o Oscar e/ou a sociedade como um todo funciona e o que irão fazer a respeito: nada. Porque nada é o que este povo que se diz politicamente consciente está acostumado a fazer para mostrar que sabe de algo que você, alienado, não sabe, e farão algo a respeito. Bom, resumo da história como sempre: não, não sabem e não, não farão. Não sabem matemática e não farão uma revolução. Provarão ignorância na arte dos números e hipocrisia e conveniência na arte política.
Vamos abrir o discurso para a lógica: eu tenho mil filmes disputando a lista entre os indicados. Apenas cinco poderão ser escolhidos. Os cinco imediatamente abaixo destes cinco ficarão de fora. Pelas novas regras esses cinco também entrariam pelo tapete vermelho, e com isso, de acordo com o resto da divulgação, aumentaria a representatividade para o prêmio principal da noite. Essa palavra, diversidade, vale lembrar, atualmente quer dizer indicar não apenas homens héteros brancos, mas também mulheres e homens de todas as cores, sexualidade e planeta.
Bom, essa conta não vai fechar. Não existem apenas dez tipos combinados de gênero, cor e sexualidade (e planeta) para que todos estejam de fato representados na premiação. Se já não é suficiente entre os cinco mais votados, qual a mágica estatística que reza que os dez primeiros o serão suficientes? Vou repetir com outras palavras e deixar a pergunta no ar: se os cinco indicados de hoje são de homens héteros brancos por que os cinco imediatamente abaixo na colocação serão com gêneros, cores e sexualidade diversos?
Se você é de humanas não precisa responder, mas continue levantando suas bandeiras para outro canto.
</description>
</item>

     
        <item>
  <title>Teoria, Prática e Código</title>
  <link>http://www.caloni.com.br/teoria-pratica-codigo/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/teoria-pratica-codigo/</guid>
  <description>Quando se está aprendendo programação é muito bom praticar escrevendo código. Muitos querem aprender a programar e não começam programando, e se você já começou colocando a mão na massa, parabéns por isso.
Agora, para avançar nos estudos, além da prática, a teoria tem que avançar. E teoria vai além dos estudos de livros e vídeo-aulas. É possível aprender muito mais rápido lendo o código dos outros, disponível aos milhões pela internet. A vinda do GitHub veio para democratizar esse acesso e descomplicar os caminhos de colaboração. Agora você pode encontrar um bug no código de uma pessoa do outro lado do mundo e mandar a correção para todos envolvidos no projeto validarem. O quão sensacional é isso?
Ler código de outra pessoa pode ser desafiador no começo porque é necessário seguir um raciocínio diferente, que não saiu de sua cabeça. Não é a maneira que você resolveria um problema, mas, se o código estiver correto, é uma maneira igualmente válida. E possivelmente melhor. Por estar fora da zona de conforto se torna uma oportunidade para aprender coisas que não estão exatamente nem na teoria nem na prática. É a experiência de outra pessoa traduzida em código.
Note que não digo essas coisas apenas do meu código, que não é perfeito nem exemplar, mas de qualquer código que resolva um problema que você está estudando resolver. Ler código é como ter o texto de um livro, mas compactado. Tem muitas ideias legais para copiar e usar, uma vez que você aprendeu o que o código faz.
Mas para isso é necessário quase o mesmo esforço usado para programar. Parece fácil, mas está longe disso. A boa notícia é que vai economizar muito tempo se persistir em entender.
</description>
</item>

     
        <item>
  <title>Printf</title>
  <link>http://www.caloni.com.br/printf/</link>
  <pubDate>2020-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/printf/</guid>
  <description>Entre os segredos escondidos das funções básicas da lib padrão da linguagem C o printf e o scanf lideram o ranking. O printf possui a capacidade de alinhamento de colunas das string impressas com tamanho variável. Sabia disso? Pois é, isso não se ensina nas escolas.
A impressão básica de uma string passada como argumento com printf deve ser feita usando na string de formatação os caracteres &amp;quot;%s&amp;quot;. Agora, se você colocar um sinal de menos entre esses dois caracteres essa string será alinhada à esquerda. Mas o que é direita e esquerda se o tamanho usado pela impressão vai ser exatamente o tamanho da string? Aí é que entra o especificador de tamanho, logo após o opcional sinal de menos e antes do s que determina o tipo string. Dessa forma a string de formatação final para uma string variável alinhada à esquerda em uma coluna de trinta caracteres de tamanho seria &amp;quot;%-30s&amp;quot;.
Porém, existe um problema com essa abordagem: a string variável pode ter mais de trinta caracteres. Nesse caso existe mais uma opção &amp;quot;escondida&amp;quot; do printf, que é especificar esse trinta em um argumento passado junto dos valores. Para isso basta trocar o número por asterisco e passar o tamanho como se passa qualquer outro valor à função, seguindo a ordem de recebimento. Por exemplo, um printf(&amp;quot;%-30s&amp;quot;, &amp;quot;minha_string&amp;quot;) poderia virar printf(&amp;quot;%-*s&amp;quot;, 30, &amp;quot;minha_string&amp;quot;). Note que agora o tamanho trinta não está mais fixo no código e pode ser uma variável inteira.
Fiz um exemplo bem sucinto, que pede o nome das branches master e slave de um controle de fonte e imprime as duas no final, alinhando o nome das branches à esquerda e o número de commits de cada uma à direita, incluindo um header. É assim que o printf resolve esse tipo de problema de saída formatada: de maneira simples e elegante, sem inventar moda nem querer &amp;quot;revolucionar&amp;quot; a computação.
</description>
</item>

     
        <item>
  <title>Historical Price</title>
  <link>http://www.caloni.com.br/historical-price/</link>
  <pubDate>2020-06-13</pubDate>
  
  <guid>http://www.caloni.com.br/historical-price/</guid>
  <description>Havia um job esta semana de um assunto que me encanta desde a época de investidor: base histórica de cotações. Estamos falando de ações da Bovespa. Na época que era investidor frequente mantinha uma base que era atualizada por um programinha em Java (esqueci o nome), mas nunca tive certeza se os ajustes feitos pelo programa eram os corretos. Surgiu agora a possibilidade de eu realizar código que converte uma base histórica recebida com um minuto por linha em campos divididos por ponto-e-vírgula (o CSV do Windows) para candles de várias periodicidades. E isso justo agora que ando estudando awk. Então não deu outra: usei esta linguagem clássica como ferramenta para esta conversão.
O código ficou, em minha humilde opinião, elegante e pequeno, pois se aproveita da composição das periodicidades. Ou seja, o período de cinco minutos é a consolidação de cinco linhas de um minuto, mas a de quinze minutos não são quinze linhas de um minuto, mas três de cinco minutos, que já estão sendo calculados a cada cinco linha. E assim por diante. Usando os arrays associativos do awk é possível manter o estado de cada candle até o momento de gerar a saída desejada, que no exemplo que codifiquei ficou como um comando SQL de insert em um banco fictício que grava cada tipo de candle em uma tabela.
O uso de um array por candle simplificou o código, pois ao criar uma função que manipula o candle que está finalizando e o próximo eu posso simplesmente passá-los como argumentos. Dessa forma eu só preciso compor os filtros de linhas de acordo com o resto da divisão do seu número. No exemplo inicial, o candle de cinco minutos está finalizando quando RN é igual a cinco ou múltiplos de cinco, enquanto um novo candle se inicia em múltiplos de seis.
</description>
</item>

     
        <item>
  <title>The Eyes of Fritz Lang</title>
  <link>http://www.caloni.com.br/the-eyes-of-fritz-lang/</link>
  <pubDate>2020-06-13</pubDate>
  
  <guid>http://www.caloni.com.br/the-eyes-of-fritz-lang/</guid>
  <description>Um documentário chato, cheio de pessoas elogiando a figura de Fritz Lang em sua fase nos EUA sem substância. Meia-hora quase insuportável de velhos babando ovo para este alemão que narrou sua fuga da Alemanha nazista quando se descobriu que ele fugiu &amp;quot;aos poucos&amp;quot;, e que dizem ser judeu quando apenas sua avó era (e se converteu católica). Sua visão cinematográfica não está descrita aqui, apenas opiniões pessoas sobre este cineasta. Uma perda de tempo para os que buscam informação, e uma curiosidade boba para os fãs desse cinema.
</description>
</item>

     
        <item>
  <title>Leak de Memória</title>
  <link>http://www.caloni.com.br/leak-de-memoria/</link>
  <pubDate>2020-06-07</pubDate>
  
  <guid>http://www.caloni.com.br/leak-de-memoria/</guid>
  <description>Esse fim de semana vi um programa, sem leak de memória, que só de ficar alocando e desalocando apresentava um consumo crescente no Process Explorer. Imaginando que poderia ser alguma lib externa, como o redis, fui eliminando uma por uma as variáveis do sistema, até chegar em um loop em que a única coisa feita no corpo do código era alocar e desalocar memória. E ela apenas subia.
Essa memória é alocada para um objeto acessível por uma interface. Abaixo dessa abstração reside uma mensagem do protocol buffers, ainda na versão 2. Isso quer dizer que cada new e delete construía uma nova mensagem protobuf, além da vtable da interface, e destruía em seguida. Apenas um campo int era preenchido como teste. Para monitorar melhor a memória usei um segundo campo string, pois daí posso alocar quantos bytes quiser para ele e o gráfico do Process Explorer fica dando um berro que não dá para ignorar.
Então me veio o pensamento sobre a versão debug, que não é confiável. Uma versão debug de uma lib pode decidir que é importante manter coisas na memória que o programa não pediu, mas que é importante para diagnóstico. Então compilei a versão release. O padrão de consumo se repetiu, embora em um ritmo menor porque versão release é mais performática. O consumo crescente ainda estava aí.
O jeito foi ir destroçando o código, classe por classe, até fazer o padrão de consumo crescente estabilizar. Este projeto tem uma arquitetura complexa, cheia de interfaces e classes que manipulam dados internos através delas. É complicado destrinchar e me custou o domingo inteiro. E quando finalmente encontrei o problema, não tinha nada a ver com o que eu imaginava. Se tratava da fila de linhas de log que não eram apagadas porque o servidor de log não havia sido configurado no componente, e como ele nunca conectava, a lib de log decidia manter as linhas em memória até conseguir. Pode ser um erro de arquitetura ou uma decisão de segurança. De qualquer forma, não há leak. Apenas um sintoma.
Essa sessão de debugging me deu alguns insights, entre eles um que é sempre mais frequente: nunca supor nada antes de analisar um problema. Minha estratégia de dividir para conquistar sempre foi a única que gerou resultados rápidos, ainda que às custas de não confiar em minha intuição. A longo prazo essa estratégia é vencedora, pois a intuição não utilizada sem critérios fica mais afiada conforme você acumula conhecimento. É como o cara dos Axiomas de Zurique (o livro) dizia, intuição é um quase-conhecimento. Saber cada vez mais irá fazer com que você consiga caminhar mais rapidamente por onde quer chegar.
</description>
</item>

     
        <item>
  <title>Azure Missing Lines: Submodules no Git (SSH Version)</title>
  <link>http://www.caloni.com.br/azure-missing-lines/</link>
  <pubDate>2020-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/azure-missing-lines/</guid>
  <description>É curioso como os problemas mais triviais não são resolvidos em ferramentas feitas para resolver esses problemas. No Azure Pipelines existe um fluxo padrão para configurar um build em que você primeiro cria uma tarefa para obter o código de um repositório git remoto e em seguida configura, compila e empacota através de uma máquina chamada de agente. O problema surge logo nesses primeiros passos, para desespero do iniciante.
Para se autenticar no repositório remoto é claro que a ferramenta irá se integrar por algum endpoint com o serviço, seja BitBucket, GitHub ou outros. Uma conta desse serviço é usada e o acesso está liberado. Porém, se o repositório possui submodules, e estes foram configurados como acessos via ssh, a automação do Azure já para de funcionar neste momento.
A causa desse bug é simples: não existe ambiente para as chaves SSH estarem configuradas antes de existir um agente (uma máquina) onde o build irá acontecer. A correção, felizmente, também é simples, apesar de inapropriada: primeiro deve-se baixar o repo sem submodules, instalar a chave SSH, e apenas agora iniciar e atualizar os submodules.
</description>
</item>

     
        <item>
  <title>Transmission</title>
  <link>http://www.caloni.com.br/transmission/</link>
  <pubDate>2020-06-01</pubDate>
  
  <guid>http://www.caloni.com.br/transmission/</guid>
  <description>Dia de fazer funcionar o download automágico de legendas depois que o Transmission baixou meu Netflix caseiro. O download funcionou, mas não foi dos melhores, pois o sincronismo e o encoding veio errado, e o rename de _pb para o nome do arquivo não está acontecendo rodando pelo transmission-daemon. Fora isso tá com tudo em cima.
No final do dia a correção era mais simples que imaginava: eu só precisava desabilitar duas flags: o uso de sufixo no nome do arquivo salvo e a flag que força todo arquivo a ser salvo como utf8 (os arquivos em português do Brasil são salvos no encoding do Windows, o ISO-8859-1 ou Windows 1252 para os mais íntimos).
No final do dia todos os bugs conterão uma correção trivial escondida do outro lado do muro chinês.
</description>
</item>

     
        <item>
  <title>A Padeira do Bairro</title>
  <link>http://www.caloni.com.br/a-padeira-do-bairro/</link>
  <pubDate>2020-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/a-padeira-do-bairro/</guid>
  <description>Este curta de Éric Rohmer veio de brinde no DVD de A Carreira de Suzane, mas é até bem longo, com 20 minutos de duração. É uma sessão dupla, praticamente, pois com a atração principal tendo menos de uma hora é natural assistir esse em seguida. E ele trata também da análise de mulheres a partir do pensamento de um homem obcecado por uma dama alta e que se veste bem que sempre encontra pelos seus caminhos no bairro. Após o primeiro contato ela some por três semanas, o que faz com que ele desenvolva o péssimo hábito de comer todo dia um doce da padaria da esquina. Se a moça demorasse mais ele muito provavelmente teria engordado muito e ela nem o reconheceria.
Este é um filme que se constrói na tensão da espera. Possui assim como a atração principal um narrador protagonista. E há algumas brincadeiras cinematográficas de Rohmer o suficiente para nos entreter. Como o corte abrupto para acelerar os passos de um homem na rua. Um curta sobre relacionamentos nunca pode ser ruim. Esse tem o jeito de um causo contado por um amigo. Ou seja, delicioso de acompanhar. Como um doce da padaria do bairro quando não temos nada mais o que fazer.
</description>
</item>

     
        <item>
  <title>Fechado Para Reformas</title>
  <link>http://www.caloni.com.br/fechado-para-reformas/</link>
  <pubDate>2020-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/fechado-para-reformas/</guid>
  <description>Quase três mil posts durante quinze anos nessa vida de blogue e percebo que chegou a hora de atingir a maioridade. Escrever um rascunho e publicá-lo na internet não me torna melhor escritor que qualquer YouTuber de primeira viagem que não edita seu conteúdo ou tuítes que simplificam o pensamento humano de tal forma que ele parece totalmente válido ou inválido. Perde-se as nuances. A voz do autor fica solta demais para ser relevante nesse mar de informação que nos afogamos todos os dias (e noites).
Para me tornar um escritor profissional eu devo revisar. Revisar é o que irá extrair valor dos meus textos. Brutos como estão nem eu consigo mais enxergar a virtude de escrever. O conteúdo não é nada se não for seguido pela arte da composição. E essa arte só se conquista compondo, lapidando, com o esforço de conseguir acabar uma obra com esmero e excelência, e ainda que não se consiga por completo esse é o caminho a ser seguido.
Portanto, coloquei todos meus textos antigos para revisão, e os novos nascem no repositório como rascunhos, o que quer dizer que o texto não aparecerá em sua primeira versão no blog. O bebê não está pronto ainda. É durante a gestação que ele irá ganhar corpo e desenvolver sua mente. A edição, além de correções gramaticais, reorganiza o pensamento contido já no rascunho, mas não totalmente consolidado para ser consumido por outro ser humano que não seja o autor.
Escrever é coisa séria. Depois de tanto praticar, acredito que seja a hora de constatar este fato, tirar a poeira das milhares de páginas que já compus e tentar arrumar tempo para me atualizar na arte de criar telepatia para leitores do futuro.
</description>
</item>

     
        <item>
  <title>Bode Caloni Cast Live</title>
  <link>http://www.caloni.com.br/bode-caloni-cast-live/</link>
  <pubDate>2020-05-14</pubDate>
  
  <guid>http://www.caloni.com.br/bode-caloni-cast-live/</guid>
  <description>Alguns caras em uma noite de quinta-feira falando sobre aleatoriedades que giram em torno de cinema, social justice (justiça social), anime e o melhor filme de todos: The Room. O primeiro bodecast live do grupo C/C&#43;&#43; Brasil foi sucesso de participantes e fracasso de público (só veio o Matheus e o Elias). Descobrimos que o Gianni, fundador do grupo do Telegram, tem o péssimo costume de largar os filmes pela metade. Também descobrimos que Cosmos é o projeto secreto de @drmadera para criar vida no fundo de seu home-office. E de quebra houve uma invasão de neo-São-Joseenses, um povo muito simpático que citou alguns filmes malucos para comentarmos.
Infelizmente a live terminou mais cedo porque o Gianni não pagou a conta de internet o sinal caiu e nos derrubou a todos ao mesmo tempo. Se quiser que façamos mais como esse dê um curtir no vídeo e comente com sugestões, críticas, etc. Comente por lá. Aqui só eu tenho voz.
</description>
</item>

     
        <item>
  <title>Bug no Calonibot Rodando Como Serviço</title>
  <link>http://www.caloni.com.br/bug-no-calonibot-rodando-como-servico/</link>
  <pubDate>2020-05-10</pubDate>
  
  <guid>http://www.caloni.com.br/bug-no-calonibot-rodando-como-servico/</guid>
  <description>Esse não é o primeiro bug, nem será o último, mas serve de lição. Se quiser rodar um daemon no seu raspberrypi que atualize seu repo git de tempos em tempos ele poderá falhar, já que que roda em conta de root e essa conta não possui suas credenciais. Nem deveria, para ser sincero...
Uma maneira de tornar a leitura de seu repo relativamente segura é entregar credenciais de somente leitura para seu serviço. Foi o que eu fiz no caso do calonibot, que atualiza seu próprio repositório de tempos em tempos porque nele está contido o index.xml principal do site para ele realizar uma busca mais completa quando você pedir a ele (que é atualizado sempre que publico um novo artigo).
Para que isso funcione para repositórios configurados com chave ssh você terá que copiar essa chave para o diretório /root/.ssh, como se fosse a home do seu usuário. Depois de feito isso reinicie o serviço e ele deverá funcionar como novo.
</description>
</item>

     
        <item>
  <title>O Bug Mais Bizarro que já Resolvi</title>
  <link>http://www.caloni.com.br/o-bug-mais-bizarro-que-ja-resolvi/</link>
  <pubDate>2020-05-10</pubDate>
  
  <guid>http://www.caloni.com.br/o-bug-mais-bizarro-que-ja-resolvi/</guid>
  <description>Máquina IBM velha e empoeirada. Criptografia blowfish. Assembly 16 bits. Programa residente. E nenhum depurador funcionando. Tudo o que eu tinha se resumia em dois itens de inventário: o conhecimento, adquirido aos poucos do sistema, e minha imaginação. Era uma amena semana de abril em 2008 isolado em uma sala. Tudo que havia em volta eram papéis com anotações feitas. Observava uma nova pista todo dia, embora sem ter muita certeza. Àquela altura qualquer coisa serviria.
Do outro lado da sala, uma estagiária recém-chegada na empresa observava de longe, talvez com uma certa curiosidade, ou medo, daquele rapaz ligar e desligar um desktop empoeirado enquanto a cada aperto do botão de ligar ele olhava fixamente para a tela por uma ou às vezes duas horas seguidas. Ficava a manhã inteira observando um único boot em câmera lenta. A câmera mais lenta possível, dessas que capturam o bater de asas de um beija-flor. Cada movimentação de um registrador demorava vários minutos de reflexão.
Toda essa odisseia começou com o cara do suporte, um sujeito bonachão que atraía os bugs mais bizarros para nossos sistemas só de olhar para eles. Não eram os piores bugs, mas com certeza os mais bizarros. E quando digo bizarro estou falando de bugs que não dá para imaginar acontecendo na vida real. Quando esse sujeito aparecia junto surgiam bugs na própria Matrix; um gato preto passa duas vezes seguidas pela porta, mas não caminhando: flutuando próximo do teto.
O sujeito chegou na sala de desenvolvimento falando dessa máquina que tinha acabado de chegar do cliente. Haviam instalado a criptografia de disco. Os dados não estavam perdidos, pois o Windows ainda mostrava o seu logo esvoaçante segundos depois de ligarmos o velho desktop de guerra, que já havia vivido pelo menos duas décadas a vida de escritório e não seria agora que deixaria seus dados sumirem sem mais nem menos. Nada disso. O problema era que se você desligasse e ligasse de novo, nada mais aparecia. Tela preta. Sem logo esvoaçante ou cursor piscando. O disco rígido não se mexia. Era um mistério completo.
Mas o bizarro mesmo não era isso, mas o que vinha depois. Você desligava a pobre máquina, novamente. Apertava o botão de ligar. E como uma mulher nos seus trinta ainda não vividos, ela subia com tudo no lugar: logo do Windows, barulhinho irritante da sua tela de boas vindas e as agulhas do disco magnético piscando freneticamente. Tudo certo mais uma vez na terra do Tio Bill. Era possível logar na máquina e usá-la o resto do dia com todos os dados criptografados íntegros.
Agora, sim, o bug está completamente descrito: nos boots ímpares a máquina não bootava. Nos boots pares não havia nada de errado (ou vice-versa). Antes que você comece a confabular o que poderia ser, um cacoete que todos nós, programadores, costumamos ter, já aviso que nesse bug não há relação com energia ou memória RAM. Você podia desligar a máquina e tirar da tomada. Ir tomar um café. Uma hora depois coloca a tomada de novo e a liga. A bendita não funciona. Tire a tomada novamente. Mais um café. Desenergizada novamente, botão de ligar. E tudo estava certinho.
A criptografia desse sistema operava em dois níveis, necessários naquela época. O PC é uma monstruosidade construída em camadas legadas, uma em cima da outra. Abaixo de tudo existe a BIOS que controla todo mundo. Até um certo ponto, pelo menos. O que importa é que nesse primeiro momento do boot não existe sistema operacional. Não existe a querida proteção de memória que os SOs implementam (com a ajuda da arquitetura) para isolar os programas, onde qualquer violação de memória é tratada graciosamente com uma mensagem de erro. Não, mano. Aqui é o modo real. Fica esperto, que se um ponteiro ficar doido você vai levar tiro pra tudo quanto é lado. Ou como diria Morpheus: &amp;quot;Welcome... to the desert... of the real.&amp;quot;
Nesse ambiente pesadão e promíscuo, onde as memórias se encostam e trocam de valores sem qualquer pudor, programas residentes se mantém em memória através do famigerado hook de interrupções. Interrupções é como chamamos as funções originais escritas e armazenadas na BIOS. Ponteiros de funções com código carregado da sua memória. Fazer um hook de uma interrupção é se colocar na frente de uma função dessas, trocando o ponteiro de função pelo endereço de sua função na memória. Então, por exemplo, se um programa roda e consegue sobrescrever o endereço da interrupção responsável por escrever na tela, esse programa pode ligar e desligar pixels que o programa original nem imagina. E em vez do logo esvoaçante e inofensivo do Windows, você poderia escrever o que seria o antepassado do gemidão do zap, versão ASCII Art.
No caso de um programa de criptografia de disco a interrupção mais importantes é... acertou: a de disco. Uma interrupção de disco é responsável por ler e escrever dados de e para o disco. No primeiro momento do boot é vital para o sistema operacional que ele consiga ler setores do disco onde ele próprio está armazenado. Ele deve conseguir ler seus dados do disco, mesmo criptografados, e esses dados precisam ser descriptografados antes que exista um driver de criptografia instalado no Sistema Operacional no ar. É o dilema do ovo e da galinha. É aí que entra o que chamamos de programa residente, o que contém a função de criptografia e cujo endereço é colocado no lugar da interrupção da BIOS para comandos de disco.
É claro que contando isso para vocês a posteriori parece mais fácil, mas meu primeiro instinto foi espetar o WinDbg, o depurador de sistema do Windows, nessa máquina. Porém, rapidamente descobri que não existia sistema operacional para ser depurado. O Windows nem conseguiu subir ainda, quanto mais deixar as pessoas depurarem ele. Então a solução foi apelar para o SoftIce 16 bits, um depurador em modo real, que funciona até que bem sozinho. Porém, o próprio depurador já é um programa residente, e não funciona tão bem quando existem outros programas residentes querendo espaço no disco. Como o programa de criptografia instalava um hook na int13 (essa é a interrupção de disco), as sessões de depuração nessa fase ficavam estranhas rapidamente. O depurador de modo real travava nas primeiras passadas de código. Não havia memória o suficiente ou as chamadas das ints entravam em conflito. De qualquer forma, quando memória entra em conflito no modo real, o barato fica loko, e o jeito é começar tudo de novo em um novo boot (par ou ímpar, mas sempre o segundo).
Então o jeito foi usar o debug.com. Este era um programa que vinha no pacote MS-DOS e em alguns Windows mais velhos que consistia em um depurador de modo real. Era possível carregar um segmento de um arquivo ou da memória real para este depurador e ele seguia passo a passo para você a execução do programa. Em assembly de modo real, claro. Esse foi o jeito que eu consegui ir entendendo o fluxo de execução, pois eram muitos valores e variáveis. Eventualmente até o debug.com também travava, mas isso não importava tanto, pois era possível ir mapeando seu funcionamento aos poucos, anotando as descoberta uma a uma em um pedaço de papel. Uma técnica que pode ser interessante se você se encontrar em tal situação é escrever as ints 3 (interrupção de breakpoint) diretamente na memória do programa e deixar ela ser ativada para depois que capotar sobrescrever com o código antigo. Eventualmente isso também travava. Daí nesse momento o jeito era fingir que estava tudo bem e continuar a execução de um outro ponto, anotando em um pedaço de papel o estado dos registradores e da memória até o momento, para depois ir ligando os pontos.
Depois de alguns dias nesse modus operandi o mundo externo importava cada vez menos. Eu só enxergava registradores sendo movidos, valores sendo empilhados e desempilhados. Na hora do café, esse era o meu tema favorito, para desespero dos meus colegas. Comecei a vislumbrar a possibilidade de existir um bug no código do algoritmo de criptografia. O algoritmo usado se chama Blowfish, um cifrador simétrico em bloco. Seu funcionamento é basicamente pegar um bloco de dados a serem criptografados, aplicar uma chave, e cuspir o mesmo tamanho do bloco de volta. Ele se chama simétrico porque aplicando a mesma chave a um bloco criptografado obtém-se o bloco original.
Não lembro como tive esse insight, mas essa alternância típica dos algoritmos simétricos fazia tocar alguns sinos na minha cabeça de que o bug bizarro dos boots ímpares e pares poderia estar relacionado de alguma forma. Só não sabia ainda como.
Pois bem: bora aprender como funciona esse algoritmo, passo a passo, pois o código usado no sistema estava obviamente escrito em assembly. Não é um código difícil em C, mas um tanto extenso em Assembly. De qualquer forma, tudo é possível se você está trancado em uma sala sem ninguém para importunar. Tudo que você precisa é de tempo e paciência. E café. Não se esqueça do café.
A semana passou rápido. Tudo que me lembro é que de fato foi uma semana de 40 ou mais horas, embora para mim o tempo tivesse parado. A mágica de estar compenetrado em um problema e fazer parte do problema, e eventualmente da solução, me fez descobrir a origem do bug. E a semana inteira se condensou em alguns poucos momentos de prazer em ter capturado esse desgraçado. Irei descrevê-lo agora.
Tudo começa com o IV: o Initialization Vector. Ele é um array de bytes usado em algoritmos criptográficos para diminuir a previsibilidade da série de bytes resultantes do algoritmo. Sem o IV pode-se usar força bruta com várias chaves até encontrar a certa. Com o IV, que é alterado de maneira previsível, mas difícil de rastrear, a mesma chave gera séries de bytes completamente diferentes, impedindo esse tipo de ataque.
O que estava acontecendo nesse caso para o boot estar intermitente era que, como comentado no commit que gloriosamente assinei, as escritas em disco durante o boot gravavam a série de bytes com um IV invertido. Portanto, na hora de ler bytes do disco ele entregaria os dados errados, obviamente, e a máquina não bootaria. Porém, como o algoritmo blowfish é simétrico, e pelo boot conter sempre os mesmos dados no disco, uma segunda escrita feita em um segundo boot inverteria o IV já invertido, gravando os dados originalmente invertidos da maneira correta, e a vida nessa versão de boot seguia feliz e contente, com logo esvoaçante até a música de boas vindas do Windows. Bootando pela terceira vez era repetido o problema do boot pela primeira vez, e assim por diante. Essa era a mágica do boot bizarro desta máquina, a única máquina que descobrimos que escrevia nos setores do disco durante o boot. A maioria apenas lia setores onde estava o sistema operacional para carregá-lo.
Descrevendo a descoberta desse bug hoje, doze anos após o ocorrido, ainda não entendo como consegui descobri-lo. Porém, ele exigiu tanta concentração que me lembro com um prazer indescritível de ter sido capaz de fazê-lo. Todo o tempo despendido se tornou uma marca de felicidade em minha memória, gravada em meu HD temporário desta vida. Lembrarei desses momentos com carinho, e como ela está criptografada também, entenderei que em alguns momentos ela irá soar amarga, mas em vários outros irei ter certeza de ter sido um feito e tanto para um ser humano entender uma máquina em seus detalhes mais obscuros. Esta é a verdadeira felicidade da profissão.
</description>
</item>

     
        <item>
  <title>A Pista (La Jetée)</title>
  <link>http://www.caloni.com.br/la-jetee/</link>
  <pubDate>2020-04-26</pubDate>
  
  <guid>http://www.caloni.com.br/la-jetee/</guid>
  <description>Este curta de Chris Marker ficou conhecido como um dos melhores filmes já feitos pela lista de críticos consecutivas vezes. E não é à toa. Sua história é uma poesia do começo ao fim, uma ode à fragilidade da existência humana e aos seus sentimentos e desejos. É uma narrativa pautada em fotos desastrosa no sentido humano, e igualmente aterradora. Nos faz pensar sobre as próprias escolhas da vida, sobre o passado e o futuro, e como o tempo, o nosso tempo, se dissolve a olho nu.
</description>
</item>

     
        <item>
  <title>Cast Operator</title>
  <link>http://www.caloni.com.br/cast-operator/</link>
  <pubDate>2020-04-22</pubDate>
  
  <guid>http://www.caloni.com.br/cast-operator/</guid>
  <description>O código abaixo não é C&#43;&#43; moderno. É 98. Porém, ele já demonstra alguns problemas na linguagem que foram aumentados desde então. Não se sabe exatamente qual a tradução semântica de construções tão parecidas quanto o operador-função e o operador-cast. Enquanto o primeiro serve para transformar objetos em funções chamáveis o segundo serve para extrair tipos de maneira educada.
struct T{explicitoperator int(){return 10;}};int main(){T t;// error: term does not// evaluate to a function// taking 0 argumentst();int i = (int) t;} O operador de cast só funciona se um cast estiver envolvido. Caso ele seja um método com explicit o cast precisa ser explícito como no exemplo. Se ele não fosse bastaria uma atribuição normal.
int i = t; Ele não pode simplesmente ser chamado como um operador-função. Até porque podem haver vários deles. Enquanto o operador de função trabalha com overload nos parâmetros o operador de cast trabalha com o retorno. Uma vez eu fiz uma brincadeira que meu amigo Fernando tinha me pedido: como fazer sobrecarga de função pelo retorno. Acredito que o exemplo desse post antigo possa exemplificar melhor o que quero dizer.
Já a diferença sintática e semântica dos operadores de função e cast é sutil, quase inexistente. Como muitas coisas em C&#43;&#43; moderno:
// cast-operatoroperator int();// function-operatorint operator(); </description>
</item>

     
        <item>
  <title>Minha Palestra Sobre Windbg</title>
  <link>http://www.caloni.com.br/mbconf-at-home-2020-palestra-windbg/</link>
  <pubDate>2020-04-18</pubDate>
  
  <guid>http://www.caloni.com.br/mbconf-at-home-2020-palestra-windbg/</guid>
  <description>A MBConf@Home2020 foi um sucesso. Parabéns aos organizadores, palestrantes e apoiadores. Eu nunca fui em um evento de tecnologia em que tudo funcionou do começo ao fim. Simplesmente fantástico o nível de qualidade da organização. Fora que trezentas pessoas ficaram em casa e participaram conosco dessa troca de conhecimento =).
Minha palestra foi a seguinte: dei uma pincelada no que é o WinDbg para os que ainda não conhecem e realizei algumas manobras pouco usuais de depuração, tentando fugir um pouco da rotina do programador e me enfiando no que seriam minhas sessões antigas de hacking ou cracking da época que analisava trojans ou depurava serviços que saíam depois que meu depurador remoto já tinha ido embora. Segue mais ou menos o roteiro e os pontos levantados.
Hoje em dia o caminho mais fácil é pelo Visual Studio Community, que instala por padrão um Windows SDK. Nessa instalação é possível modificar os itens checando o &amp;quot;Debugging Tools for Windows&amp;quot;, que é o pacote que contém o ecossistema do WinDbg.
Pulei essa parte. Tempo curto e me enrolei um pouco. E não era o caso de ficar focado na rotina de programador.
Não fui eu que escrevi o MessageBox... juro. E nesse caso não ter o código-fonte é a rotina do crackudo, que vai ter que explorar no assembly o funcionamento de um programa. Depuramos um que chama MessageBox alterando a mensagem exibida (em 32 bits). Foi legal essa diferença entre Ansi e Unicode que me perdi no começo, pois serviu para exemplificar questões de API que precisam ser conhecidas.
void chama_eu(){MessageBox(NULL,&amp;quot;Welcome to &amp;quot;&amp;quot;MBConf@Home2020&amp;quot;,&amp;quot;MBConf2020&amp;quot;, 0);} Abordamos o boot do Windows com NT, o uso do kd.exe por baixo dos panos do WinDbg (o DarkMode) e configuramos o cabo. Cabo? Cabo virtual, sargento. Usamos a VMWare, pré-configurada após alguns pesadelos de impressora se metendo no meio do caminho. Configuramos a porta serial, que é a melhor ever. E apontamos como named pipe para o WinDbg &amp;quot;de fora&amp;quot; conectar. Ou o kd.exe. As linhas abaixo são equivalentes.
windbg.exe -b -k com:pipe,port=\\.\pipe\com_1,resets=0kd.exe -b -k com:pipe,port=\\.\pipe\com_1,resets=0 Para exemplificar a depuração de um serviço bem no início (ou fim) ou o load de processos antes dele existir checamos uma flag na gflags.exe da máquina depurada para que quando o notepad.exe subisse o ntsd fosse depurá-lo e passasse o controle para o debug do sistema. E com isso fechamos o círculo sagrado da depuração holística.
Não. Para depurar a BIOS local há o caminho do debug.com (um depurador bem simples da época do Windows 95) ou o Softice DOS, embora eu me lembre que tive umas dores de cabeça com ele por causa dos conflitos entre interrupções e programas residentes. A depuração estática acaba ganhando nesse quesito, que é basicamente abrir o assembly, papel e caneta. E imaginação.
Já para debug de BIOS em rede. Bem... esse é um nível hackudo. Sei que a Intel tem desenvolvido chips para diagnóstico e obtenção de dados de hardware pela rede antes mesmo do SO estar ligado, mas não cheguei a pesquisar a fundo.
Sim. Como o Mercês me ajudou a lembrar, existe um rundll32.exe, um executável que já vem no Windows e que pode carregar a DLL para você. Daí tudo que você precisa fazer é colocar o breakpoint das funções exportadas que deseja chamar. Dá para especificar essas funções pelo rundll32.exe também: rundll32.exe project.dll,chama_eu
Recomendo sempre o WinDbg.info como cheat sheet e docs.microsoft.com em seus artigos &amp;quot;Getting Started with WinDbg (User-Mode)&amp;quot; e &amp;quot;Getting Started with WinDbg (Kernel-Mode)&amp;quot; (sorry, m$, vcs mudam os links demais para eu colocar aqui).
</description>
</item>

     
        <item>
  <title>Ilha das Flores</title>
  <link>http://www.caloni.com.br/ilha-das-flores/</link>
  <pubDate>2020-04-15</pubDate>
  
  <guid>http://www.caloni.com.br/ilha-das-flores/</guid>
  <description>Esse curta passava na escola. Muitos de vocês devem lembrar. Eu me lembro. O que eu mais me lembro era o uso cômico das palavras. A cadência em definir o que é um ser humano, um porco, um tomate, e repetir essas definições, cria humor, uma quase conexão com o espectador, e ao final se torna intenso, choca e nos faz, ou deveria fazer, pensar na pobreza, miséria, etc. É um curta sociológico, do pessoal de humanas, e pode impactar crianças e pessoas de humanas. Mas por trás da emoção há Jorge Furtado e seu jogo de palavras em seu primeiro curta documental. É um roteiro esperto, dinâmico e didático. E enviesado. Aquelas questões que pairam no ar quando abaixo desse ar repousa um cérebro condicionado de humanas. Ainda assim, uma ótima reflexão. Reflete até hoje em nossos pensamentos. Quase parece que tem algo a dizer.
</description>
</item>

     
        <item>
  <title>Barbosa</title>
  <link>http://www.caloni.com.br/barbosa/</link>
  <pubDate>2020-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/barbosa/</guid>
  <description>Barbosa foi o goleiro que deixou passar o segundo gol do Uruguai na Copa do Mundo no Brasil em 1950, arrebatando a taça de nossas mãos nos últimos minutos do campeonato. Certos da vitória, os duzentos mil espectadores e todo o Brasil por tabela saíram do estádio boquiabertos. A magia deste curta de Jorge Furtado e Ana Luiza Azevedo é explorar gêneros e possibilidades em uma história auto-contida que usa trucagens para disfarçar seu baixo orçamento, como uma profundidade de campo reduzidíssima. A história se passa em um estádio, e é difícil conseguir dezenas de milhares de figurantes para esta tarefa. De qualquer forma, o resultado é ainda melhor, pois mescla com filmagens da época, e realiza na montagem uma brincadeira que nos deixa imersos naquele pesadelo dos 2x1.
</description>
</item>

     
        <item>
  <title>O Dia em que Dorival Encarou a Guarda</title>
  <link>http://www.caloni.com.br/o-dia-em-que-dorival-encarou-a-guarda/</link>
  <pubDate>2020-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/o-dia-em-que-dorival-encarou-a-guarda/</guid>
  <description>Filme conceitual que brinca com as voltas que a vida dá. É o segundo curta-metragem do diretor Jorge Furtado junto de José Pedro Goulart e nele já podemos ver algumas ideias de recursividade, de como o homem se olha no espelho e vê ele mesmo. Nada muda nesta vida, e as brincadeiras de metalinguagem que Furtado escreve com Giba Assis Brasil e Ana Luiza Azevedo contém a semente dos seus longas, assim como seu próximo curta, que fala sobre a inevitabilidade do nosso passado por sermos parte de tudo isso.
</description>
</item>

     
        <item>
  <title>Temporal</title>
  <link>http://www.caloni.com.br/temporal/</link>
  <pubDate>2020-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/temporal/</guid>
  <description>Este curta capenga foi o primeiro assinado por Jorge Furtado, diretor sulista de O Homem Que Copiava. Ele mistura toda a miscelânea de pensamentos pseudo-liberais-progressitas da juventude que faz faculdade de artes. Essa tentativa de ridicularizar a sociedade brasileira tradicional cristã pode dar bons frutos, mas Furtado e Goulart estão mais interessados em tentar ridicularizar ambos os lados. Uma festa a fantasia nos faz pensar quem está vestindo fantasia de fato: uma congregação cristã ou um bando de jovens desmiolados. E no âmago desse simples curta, os efeitos visuais são de péssima qualidade. Digno de um trabalho de conclusão de curso e para se divertir com os amigos, passando para eles e para impressionar as menininhas.
</description>
</item>

     
        <item>
  <title>Winmock</title>
  <link>http://www.caloni.com.br/winsock-mock/</link>
  <pubDate>2020-04-10</pubDate>
  
  <guid>http://www.caloni.com.br/winsock-mock/</guid>
  <description>Testar sistemas com rede simulada pode ser muito complexo ou muito simples. Se for feito em C ou se os endpoints forem em C é muito simples: basta trocar as funções originais pelas suas. Como tudo em C são funções com nome bem definido e assinatura flexível você não precisa declarar a assinatura da função, ou pode mudar no meio do caminho.
Existe um recurso interessante da winsock, um define chamado INCLWINSOCKAPIPROTOTYPES, que pode desabilitar a publicação das assinaturas das funções de socket do header winsock2.h. E por que isso é importante? Porque essas assinaturas já possuem a informação que essas funções deverão ser importadas de uma DLL (no caso a Ws232.dll). Isso muda o nome da função C. Além disso, a convenção de chamada da API do Windows é baseada em Pascal, e não cdecl, sendo a desvantagem não existir número de argumentos variáveis na pilha.
As funções C do winsock/socket, connect, send, recv, select, etc, são apenas funções C cujos nomes são conhecidíssimos. Elas são linkadas com programas que usam alguma biblioteca de socket. Nada impede que nós mesmos sobrescrevamos essas funções para implementá-las em nosso programa. É isso o que o uso do define acima possibilita: ele evita a importação direto da DLL da Microsoft e com isso você pode usar uma implementação de terceiros ou a sua própria, que não precisa se comunicar com a rede.
</description>
</item>

     
        <item>
  <title>Callback Hell</title>
  <link>http://www.caloni.com.br/callback-hell/</link>
  <pubDate>2020-04-09</pubDate>
  
  <guid>http://www.caloni.com.br/callback-hell/</guid>
  <description>Foi aprendendo sobre kernel do Windows que eu descobri que a linguagem C suporta todas as abstrações que um homem crescido precisa para desenvolver sistemas. Também aprendi que você precisa ser um homem crescido para saber usar direito.
A linguagem C possui 32 palavras-chave e nenhuma parafusadeira elétrica. Existe um motivo para isso: fazer tudo na mão desenvolve o caráter. Se não desenvolve, pelo menos escancara a má pessoa que você é.
Olhe para o sistema de callbacks, por exemplo. É uma ferramenta poderosa. Com ponteiros de função e endereços de estrutura você pode chamar quem você quiser a hora que quiser. Há tantas possibilidades que é muito fácil errar.
Aí que surge o famigerado Callback Hell.
Esse termo se popularizou através da linguagem Javascript por causa que em Javascript é muito fácil deixar a coisas pra depois. Você deixa seu callback pra ser chamado uma outra hora e esquece dele. E ele faz o mesmo. E mais uma vez. E de novo. Você entendeu a ideia.
No final das contas, depurar código Javascript escrito por outra pessoa seria uma sala no inferno reservada para aqueles programadores que acharam durante a vida que resolveriam todos os problemas do mundo até às 18:00. Tudo que eles precisavam fazer era criar mais um pequeno callback no finalzinho daquela função. Como se diz em Go Horse Power, &amp;quot;commit e era isso&amp;quot;.
A linguagem C permite você fazer a mesma coisa. Basta que o endereço da estrutura que você passou como contexto do seu callback tenha um ponteiro de função que vai ser chamado passando mais um membro dessa estrutura como contexto, que irá conter outro ponteiro de função que... você entendeu a ideia.
No final das contas, depurar um código em C escrito por uma pessoa que evita resolver problemas de arquitetura criando mais um callback deve demonstrar como existem pessoas sem caráter que sabem declarar um ponteiro de função. Cuidado com essas pessoas. Elas podem te levar até uma salinha reservada no inferno.
</description>
</item>

     
        <item>
  <title>Meu Try Lock de Pelúcia</title>
  <link>http://www.caloni.com.br/try-lock-de-pelucia/</link>
  <pubDate>2020-04-07</pubDate>
  
  <guid>http://www.caloni.com.br/try-lock-de-pelucia/</guid>
  <description>Alguns implementam o famigerado &amp;quot;mutex pero no mucho&amp;quot;, que é aquele mutex que não faz nada porque ele sabe que só tem uma thread rodando no processo. É uma solução elegante para abstrair o uso de lock em um processo que pode ou não rodar multithread.
Mas isso é uma coisa. Outra coisa é o try lock de pelúcia de um driver de uma empresa que trabalhei certa vez. Como havia situações onde o lock não era nunca liberado, e a thread estava rodando em um nível de interrupção que não poderia mais voltar, ou ela agendava uma execução menos prioritária ou obtia o lock. Mas baixar a prioridade não era uma opção para o programador MacGyver. Então o código acabou pegando o lock na marra.
if( ! try_aquire_mutex() )// dá um tempo...if( ! try_aquire_mutex() )// dá um tempo...// ...// ah, dane-se,// eu vou pegar esse mutex!aquire_mutex(); </description>
</item>

     
        <item>
  <title>Code Jam 2020</title>
  <link>http://www.caloni.com.br/code-jam-2020/</link>
  <pubDate>2020-04-05</pubDate>
  
  <guid>http://www.caloni.com.br/code-jam-2020/</guid>
  <description>O Code Jam esse ano terminou rápido para mim. Estou enferrujado? Nem tanto. Apenas dei menos atenção ao evento no seu início, mas apesar de me concentrar nas últimas 11 horas não tive um resultado satisfatório, obtendo 24 pontos ao total, o que não me dá direito para o torneio, que exige pelo menos 30.
Minha abordagem no primeiro problema foi o feijão com arroz de ir lendo os valores e verificando para cada novo elemento da linha se havia repetição nos valores já lidos da mesma linha. Eu me compliquei na hora de fazer a mesma coisa para as colunas, pois inseri essa checagem dentro do loop da linha, evitando, assim, sempre a última coluna. Foi a parte que mais perdi tempo útil de todo o torneio (não li todos os exercícios antes).
O segundo problema foi o mais simples de todos para mim. Entendendo o enunciado, em que o título dá uma dica valiosa sobre o comportamento do algoritmo (aninhado), foi só usar a mesma lógica que nós programadores usamos na hora de aninhar parênteses.
O terceiro exercício me parecia fácil no começo. Desenhei na minha janela um esboço da ideia inicial, que era manter um registro de todos os minutos de um dia e a cada nova tarefa popular cada minuto. Meu erro principal foi não considerar que todos os minutos de uma tarefa devem estar sob a responsabilidade de apenas uma pessoa. Corrigido isso, meu código passou nos poucos testes disponíveis no problema, mas não passou na hora de submeter. Estou sem saber até agora o que fiz de errado.
E, por fim, o último foi o mais divertido porque envolveu mexer em ambiente. O script iterativo do Google não funcionou direito no Windows, mas depois de uns testes no WSL percebi que o erro mesmo é não dar flush nos printf do meu lado. Sempre haverá problemas de buffer em stdin/stdout.
De qualquer forma, não consegui resolver mais do que 10 bits. Já estava ficando tarde e eu me perdi em digressões de como tornar o código maleável para adivinhar mais que duas viradas quânticas. Deixei esse código experimental de lado e fui ler o próximo.
Apenas li o enunciado. Ele falava sobre o quadrado latino, assim como o problema original. E como tive dores de cabeça por causa desse primeiro exercício, e faltava apenas uma hora e meia para terminar a prova, dei por satisfeito mais um ano brincando de programar.
</description>
</item>

     
        <item>
  <title>MBConf</title>
  <link>http://www.caloni.com.br/mbconf/</link>
  <pubDate>2020-04-05</pubDate>
  
  <guid>http://www.caloni.com.br/mbconf/</guid>
  <description>Daqui a 12 dias acontecerá um evento online com palestras organizadas pela Mente Binária, uma galera muito afiada nos SOs, ferramentas e programação mais baixo nível. Estarei colaborando com algumas dicas de uso do WinDbg. O custo é zero. Para se inscrever, basta ir no site do evento e... se inscrever? No vemos lá =).
</description>
</item>

     
        <item>
  <title>Git Subtree</title>
  <link>http://www.caloni.com.br/git-subtree/</link>
  <pubDate>2020-03-22</pubDate>
  
  <guid>http://www.caloni.com.br/git-subtree/</guid>
  <description>É a segunda vez que uso subtrees no Git. Não é algo que me acostumei usar por rotina, mas é uma técnica que eu recomendo que todo programador conheça para unir repositórios que não dependa dos pesadelos de configurar submodules.
Há vários tutoriais na internet sobre seu uso (como o da Atlasian), além do próprio manual do Git e sua ajuda. Só quero enfatizar neste post que ele existe, é fácil de usar, e pode resolver alguns problemas de gerenciamento de projeto:
 Unir repositórios que foram separados em algum momento ou que nasceram separados. Unir dependências que não estão online, mas que precisam estar caminhando em paralelo. Compor árvores de histórico distintas e não se preocupar muito de onde elas vieram (exceto quando for necessário juntar de novo, e nesse caso o commit que as une possui algumas informações).  </description>
</item>

     
        <item>
  <title>What Did Jack Do?</title>
  <link>http://www.caloni.com.br/what-did-jack-do/</link>
  <pubDate>2020-03-22</pubDate>
  
  <guid>http://www.caloni.com.br/what-did-jack-do/</guid>
  <description>O diretor David Lynch coloca à prova nossa capacidade de avaliação de um trabalho cinematográfico. A Netflix coloca no ar este curta experimental desse diretor experimental em que um macaco é interrogado por um investigador (o próprio Lynch) e sua boca se mexe através de um truque dos mais baratos de colocar uma boca humana falando em cima da boca do animal. Funciona? Eu não me arrisco dizer. Não há nada para se ver por aqui senão uma cópia barata digital que brinca com noir e diálogos que tentam fugir do comum. Mas não adianta: o trabalho de Lynch com o macaquinho é fofinho demais para sair algo além disso.
</description>
</item>

     
        <item>
  <title>Projeto Hu Cpp: Not Fast Enough</title>
  <link>http://www.caloni.com.br/projeto-hu-cpp-not-fast-enough/</link>
  <pubDate>2020-03-17</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-hu-cpp-not-fast-enough/</guid>
  <description>Continuando minhas aventuras em tentar ser mais rápido que o Hugo, fiz uma versão que gera um html porco com os parágrafos obtidos no parser porco de markdown, rodando em cima dos meus 2740 posts. Este é o resultado.
Hugo: 16.527 msHu-Cpp: 89.573 s Noventa segundos para 2700 posts! É uma vergonha! Programadores C&#43;&#43;/Boost/Asio, vamos nos matar.
</description>
</item>

     
        <item>
  <title>Projeto Hu Cpp</title>
  <link>http://www.caloni.com.br/projeto-hu-cpp/</link>
  <pubDate>2020-03-15</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-hu-cpp/</guid>
  <description>Utilizo o Hugo como renderizador do meu saite já faz um tempo. Depois que juntei os posts do finado Cine Tênis Verde e do meu blogue técnico a soma dos textos ultrapassou a marca dos dois mil. Atualmente levo cerca de quinze segundos para renderizar todo o saite antes de publicá-lo.
Não é uma marca ruim, considerando que estamos com quase três mil textos, e embora o leiaute do saite seja muito simples, é justamente o que eu desejo para rápido carregamento e busca. Não tenho do que reclamar.
Porém, um programador C nunca fica satisfeito com uma solução Golang.
Sabe esses pensamentos que não saem da cabeça? Estava devaneando há uns dias sobre se não seria interessante renderizar meu saite usando uma solução em C ou C&#43;&#43; e ver qual seria o resultado. Claro que seria uma solução in house, cheia de bugs e completamente limitado. Mas quem liga? Meu único objetivo é a diversão, e não pretendo criar um produto genérico. Hugo já satisfaz até o mais exigente dos programadores (exceto o Elias), pois resolve vários problemas do interminável conflito entre conteúdo e design.
Por falar no dito cujo, me lembrei da nossa disputa no saite Os Programadores. Era uma resolução de exercício envolvendo leitura e parseamento de um arquivo json. Tive o insight de usar algo parecido com o que desenvolvi naquela vez.
O código que bolei lê um arquivo markdown e divide o header nos campos que eu utilizo e o texto em parágrafos. Esse é o começo mínimo para começar a converter os arquivos em html. Ele usa o mapeamento de arquivo em memória como no desafio do saite. Não precisaria, mas já que a diversão é fazer mais rápido que o Hugo, por que não?
Meu próximo passo é pegar esse parser e converter todos os arquivos para html, da maneira mais porca possível. Quer dizer, quase da maneira mais porca. Não estou usando Pascal.
</description>
</item>

     
        <item>
  <title>Vcpkg: openssl.cnf</title>
  <link>http://www.caloni.com.br/vcpkg-openssl-cnf/</link>
  <pubDate>2019-09-17</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg-openssl-cnf/</guid>
  <description>Mais uma aventura em vcpkg. Dessa vez o projeto openssl, a biblioteca de SSL open-source multiplataforma. O vcpkg divide esse port por SO, sendo o openssl-windows o port que alterei. A alteração foi enviada como PR para a Microsoft, mas no momento está apenas no repo da BitForge.
O que acontece é que alguns comandos executados no openssl.exe compilado e instalado do vcpkg precisam conter o arquivo de configuração disponível, como o genrsa. A compilação do openssl-windows pelo vcpkg gera o arquivo, mas o apaga após o build. Há uma checagem pós-build no vcpkg.exe que verifica se há arquivos sobrando na estrutura de diretórios que será copiada para a pasta installed/triplet após a conclusão da instalação no módulo postbuildlint. A função checknofilesindir verifica se há arquivos sobrando nos diretórios onde eles não deveriam estar e cancela a instalação. Por isso que originalmente o openssl-windows/portfile.cmake apaga o openssl.cnf gerado na pasta raiz e na subpasta debug do build.
Minha mudança foi apenas não apagar o arquivo openssl.cnf release e movê-lo para a pasta onde está localizado o openssl.exe. Dessa forma fica simples de detectá-lo, mas ainda assim é necessário apontar para a ferramenta onde ele está, definindo a variável de ambiente OPENSSLCONF ou passando como parâmetro.
</description>
</item>

     
        <item>
  <title>A Maneira Errada de Começar um Projeto é com Visual Studio</title>
  <link>http://www.caloni.com.br/a-maneira-errada-de-comecar-um-projeto-e-com-visual-studio/</link>
  <pubDate>2018-12-11</pubDate>
  
  <guid>http://www.caloni.com.br/a-maneira-errada-de-comecar-um-projeto-e-com-visual-studio/</guid>
  <description>Estava eu trabalhando com um sample e resolvi colocar controle de fonte para analisar as mudanças. E a mudança mais inesperada que eu vi quando digitei git diff foi que ele achou que meus arquivos de código-fonte estivessem em binário.
&amp;gt;git diff&amp;gt;Binary files differ&amp;gt;xxd -l 10 -g 1 -c 4 -u source.cpp00000000: FF FE 23 00 ÿ##.00000004: 69 00 6E 00 i.n.00000008: 63 00 6C 00 c.l. Essa lambança ocorreu com uma versão atual do Visual Studio 2017 após eu resolver ser preguiçoso e deixar o template dele criar o projeto para mim.
Particularmente não sou fã de deixar as IDEs criarem arquivos, porque geralmente elas estão cheias de más intenções disfarçadas de boas envolvendo alguma tecnologia proprietária. No caso da Microsoft há os precompiled headers, que sujam o projeto antes mesmo do tempo de compilação ser um problema. E agora descobri que os arquivos estão sendo gerados em UNICODE Windows.
Se você tiver o mesmo problema e quiser corrigir segue o passo-a-passo: salve os arquivos com um encoding de gente grande como utf8. Fim do passo-a-passo.
Isso pode ser obtido na janela de &amp;quot;Save As&amp;quot; do Visual Studio. Há uma flecha para baixo do lado do botão Save onde você pode abrir a opção &amp;quot;Save with Encoding&amp;quot;.
Na prática, troque possivelmente de &amp;quot;Unicode - Codepage 1200&amp;quot; para &amp;quot;Unicode (UTF-8 without signature) - Codepage 65001&amp;quot;. A partir do segundo commit o git começará a entender que você atingiu a maioridade e vai comparar os arquivos como gente grande para você.
A partir do segundo commit o git começará a entender que você atingiu a maioridade e vai comparar os arquivos como gente grande para você.
</description>
</item>

     
        <item>
  <title>Ativando Ubuntu No Windows 10</title>
  <link>http://www.caloni.com.br/ativando-ubuntu-no-windows-10/</link>
  <pubDate>2017-08-29</pubDate>
  
  <guid>http://www.caloni.com.br/ativando-ubuntu-no-windows-10/</guid>
  <description>Pensei que o Ubuntu já estivesse na Windows Store disponível para qualquer gamer instalar (não sei por que um gamer faria isso). Mas não. Ainda é necessário fazer os passos de desenvolvedor expert de Windows para ativar esta opção.
Primeiro, vá nas configurações e ative o Developer Mode:
Depois vá em Adicionar/Remover Programas e ative o Windows Subsystem for Linux (Beta):
Reinicie a máquina, abra o prompt de comando, digite bash e enter. Ele irá perguntar se quer instalar o Ubuntu, diga que sim, e depois de um tempo já terá o melhor dos dois mundos: o melhor ambiente gráfico com o melhor ambiente de programação.
Cywgin quem?
</description>
</item>

     
        <item>
  <title>Entrando na Zona com Vim</title>
  <link>http://www.caloni.com.br/entrando-na-zona-com-vim/</link>
  <pubDate>2017-01-05</pubDate>
  
  <guid>http://www.caloni.com.br/entrando-na-zona-com-vim/</guid>
  <description>Se você é programador é bem provável que já tenha ouvido falar em Flow ou The Zone. Se for leitor assíduo do Hacker News, então, nem se fala. De qualquer forma, uma das maneira mais produtivas do programador programar é entrar na famosa &amp;quot;zona&amp;quot;. É lá que muito de nós nascemos. Lembra a primeira vez que mexeu em um computador ou afim e ficou tão obcecado que não viu o tempo passar? Pois bem. Você esteve na zona. E estar nela é um bom lugar para trabalhar.
Na zona, principalmente resolvendo problemas complexos, o importante é poder construir uma estrutura em sua mente com a ajuda de alguns aparatos, como um caderno de anotações, stickers, lousa ou seu editor preferido. Meu editor preferido para navegar (flow) por um código é sem sombra de dúvida o Vim, pois ele é apenas uma tela que preenche todo meu campo de visão e possui comandos em que eu consigo facilmente acessar o conteúdo que preciso relembrar. Quando estou obtendo o diagnóstico de um log, por exemplo, posso rapidamente ir construindo um modelo mental da solução navegando entre arquivos de log e código-fonte através de tags e buscas em regex.
A primeira vantagem do Vim em relação a outros editores é sua capacidade de abrir arquivos grandes. Um log de 1GB pode ser um desafio para um Notepad da vida, e até para um Visual Studio, mas no Vim tudo que você precisa é de memória disponível. E mesmo que não tenha, o Windows se vira bem no gerenciamento de swap (ou Linux, tanto faz).
Para navegar no código, existem duas técnicas que não necessitam de nenhum plugin. A primeira é a busca por regex, que pode ser feita com os comandos :vimgrep ou :grep, sendo que o primeiro busca em um padrão de arquivos (usando wildcard) e o segundo dentro dos buffers já abertos (útil se você já tiver uma sessão ativa; mais sobre isso depois).
O bom é que, no caso de logs, se você buscar por expressões unívocas, isso já fica no histórico de seus comandos e você pode usar quando quiser para voltar para esses logs (ou se você for maluco e guardar de cabeça seus marks, pode criar um mark de vez).
A segunda técnica de navegar no código é através das tags que são montadas pela ferramenta ctags. Ela é genérica o suficiente para suportar várias linguagens, mas pode ser usada até para qualquer sequência de palavras. Há plugins que realizam essa varredura do fonte automática, mas particularmente não gosto de encher meu Vim de plugins, sendo que o único que uso que me lembro é o MRU (porque o Vim ainda não suporta algo do gênero internamente). De qualquer forma, tudo que eu preciso fazer para atualizar as tags de um projeto é abrir o readme do projeto (que geralmente fica na pasta raiz) e rodar meu atalho.
Isso vai gerar um arquivo ctags na pasta do projeto que será usada automaticamente para procurar pelas tags que eu preciso. O pulo do gato é o ponto-e-vírgula após o nome do arquivo ao setar a variável tags. Isso faz com que o Vim não busque apenas o arquivo tags na pasta atual, mas em toda hierarquia. Então se você estiver na pasta Projects, SomeProject, Folder1, Folder2, Folder3, File.cpp e tiver gerado o arquivo tags na pasta SomeProject para todo o projeto, ao usar o comando de busca de tag ele eventualmente vai abrir esse arquivo tags, pois ele vai procurando em Folder3, Folder2, Folder1 e cair em SomeProject.
set tags=tags; Como no Windows o atalho padrão do comando tag do Vim (C-]) não funciona também preciso fazer uma pequena adaptação técnica (e de quebra já uso para navegar nos próximos resultados).
map &amp;lt;C-K&amp;gt; &amp;lt;C-]&amp;gt; Depois de dar uma olhada no log, encontrar os métodos que você precisa analisar, seu fluxo, etc, você terá um monte de buffers relevantes abertos nas linhas relevantes. Seria muito bom se tudo isso pudesse ser guardado em um estado para que você continue amanhã ou em sua próxima sessão de flow. Para isso existe o comando :mksession.
Por último: o comando :source roda um script vim que possui comandos guardados. Ele é um arquivo texto semelhante ao vimrc.
Basicamente é isso. Tudo o que você precisa em sua análise de fonte e de log se encontra na ponta de seus dedos. Não é necessário abrir nenhuma pasta nem terminal. Simplesmente navegue através do Vim para descobrir o problema e seja feliz em sua zona.
</description>
</item>

     
        <item>
  <title>Guardando Senhas com Vim</title>
  <link>http://www.caloni.com.br/guardando-senhas-com-vim/</link>
  <pubDate>2016-10-05</pubDate>
  
  <guid>http://www.caloni.com.br/guardando-senhas-com-vim/</guid>
  <description>Eu já sabia que havia um sistema de criptografia de arquivos no Vim. Isso pode ser útil para textos secretos, ou para enviar qualquer bobagem para outra pessoa que sabe de uma senha que só vocês conhecem. Porém, o método default de criptografia dele não me animava. O pkzip é usa um algoritmo fraco, e os inúmeros programas que quebram zips encriptados estão aí para demonstrar. Além do mais, o blowfish da versão 7 do Vim tem problemas em gerar seu salt que favorece ataques de força bruta tão baratos quanto um XOR. E é aí que entra em cena o Vim 8.
A nova versão do meu editor favorito não apresenta o defeito do algoritmo blowfish anterior, ou apresenta, mas dessa vez fornece uma versão atualizada (claro que, por razões de compatibilidade, foram mantidos os algoritmos anteriores).
O que eu gosto no modelo do Vim de encriptar arquivos é que eles são encriptados apenas na escrita, e na leitura o usuário deve digitar a senha. Se a senha não correponder ao que foi usado para encriptá-lo, não há mensagem de erro: o editor irá simplesmente exibir o lixo gerado pela sua senha errada. Isso gera uma situação vantajosa e uma perigosa.
A vantajosa é que não há como automatizar um brute force em cima de arquivos encriptados pelo Vim, pois não há muitos sinais de que o arquivo foi desencriptado. Claro, por amostragem de texto é possível saber se a senha foi ou não satisfatória, mas a beleza está em não existir nada específico na estrutura do editor que diga se a senha foi ou não bem sucedida.
A perigosa é que uma vez que você digite a senha errada, muito cuidado com o lixo que você verá no seu buffer. Se por força do hábito for salvar o conteúdo, poderá perder o conteúdo do arquivo original, que estava encriptado com uma senha que você conhecia, mas que agora foi salvo após ter sido desencriptado com a senha errada. Ou seja, não há como reaver o conteúdo original a não ser com muito suor.
O mais prático de tudo é usar esse modelo de arquivo encriptado pelo Vim para salvar senhas. Um arquivo de senhas pode ser tão simples quando login/senha de todas as senhas que você deseja guardar, e tão bem protegido quanto a força de sua senha master. Nada mais, nada menos. De quebra, um arquivo pequeno cujo backup pode ser sincronizado instantaneamente na nuvem (usando Google Drive, Dropbox ou One Drive), ou até mantido em um controle de fonte (embora ele seja tratado como binário).
Se você gostou desse modelo, pesquise na ajuda do editor pelos comandos e opções &amp;quot;cm&amp;quot; e &amp;quot;:X&amp;quot;. Leia com atenção. Este post foi inspirado em meu próprio uso do Vim, mas mais inspirado ainda depois de ler um artigo da invert (não me lembro o link).
</description>
</item>

     
        <item>
  <title>A resolução do bitcoin</title>
  <link>http://www.caloni.com.br/a-resolucao-do-bitcoin/</link>
  <pubDate>2016-01-18</pubDate>
  
  <guid>http://www.caloni.com.br/a-resolucao-do-bitcoin/</guid>
  <description>Recentemente está havendo fuxicos sobre o último texto de Mike Hearn, um dos desenvolvedores do projeto &amp;quot;Bitcoin Core&amp;quot;, que desenha o comportamento da blockchain e acessórios. Nele Mike, que está sendo já há um tempo crítico das mudanças que tem ocorrido no projeto (incluindo um fork pra lá de controverso), pondera sobre o que pode ser o início do fim do experimento bitcoin, graças perifericamente à mudança mais estúpida já feita talvez no projeto, o RBF (replace by fee), que distorce completamente a visão original do paper do Satoshi, criador do Bitcoin, mas principalmente ao já conhecido controle massivo dos servidores atrás do Grande Firewall da China. O detalhe é que nem um nem outro acontecimento deveria se tornar decisivo para o futuro do Bitcoin, cujo teor é ser descentralizado &amp;quot;by design&amp;quot;. Porém, quando as questões técnicas caem no colo dos humanos, eles tendem como primatas a jogar merda para tudo que é bom e moral.
Meus amigos já sabem que considero a criação de moedas digitais um próximo passo prá lá de grande em direção a um mundo mais justo e livre, principalmente das amarras de um sistema jurássico de controle coercitivo de indivíduos chamado Estado ou governo. Falo especificamente do bitcoin, o mais famoso e o mais popular das moedas digitais. Portanto, não deixa de ser um baque entender como esses projetos poderão sucumbir mais cedo ou mais tarde ao mundo real.
De qualquer forma, como costumo dizer, serão anos interessantes no reino das criptomoedas e na economia em geral. Com isso, não quero dizer necessariamente que elas irão dominar o sistema financeiro e em breve veremos o fim do dinheiro estatal. Pode querer dizer isso, o que seria ótimo. No entanto, pode também querer dizer, como estamos presenciando hoje, que teremos dados mais concretos dos motivos por trás de por que moedas digitais são impossíveis de escalar no nível tecnológico atual. O mais provável IMHO é que no futuro vejamos algo no meio entre esses dois extremos. Mas não exatamente no meio =)
Por enquanto, resta seguir se informando sobre como o projeto do bitcoin vai evoluindo, e como as moedas alternativas, criadas ou a ser criadas, vão se adaptando a essas notícias. Uma boa fonte de conhecimento sempre é o Hacker News, que contém os links direto ao ponto e os comentários de pessoas geralmente com algo a acrescentar. Diferente de mim, mero curioso de plantão.
</description>
</item>

     
        <item>
  <title>Novos Atalhos Aprendidos no Vim</title>
  <link>http://www.caloni.com.br/novos-atalhos-aprendidos-no-vim/</link>
  <pubDate>2012-06-09</pubDate>
  
  <guid>http://www.caloni.com.br/novos-atalhos-aprendidos-no-vim/</guid>
  <description>Sempre é bom reler as referências e tentar melhorar o que já está bom. No momento minha inspiração é o excelente Vim: From Essentials to Mastery, uma coleção de slides bem-humorada que a cada releitura fornece dicas importantes para aprimorar o dia-a-dia com um dos editores mais poderosos do planeta.
A lista abaixo é pessoal e, como disse Bram Moolenar, &amp;quot;You should not try to learn every command an editor offers. That would be a complete waste of time. Most people only need to learn 10 to 20 percent of the commands for their work. But it&#39;s a different set of commands for everybody&amp;quot; (grifo meu).
 &amp;lt;C-W&amp;gt;&amp;lt;C-W&amp;gt; Alterna entre janelas. &amp;lt;C-W&amp;gt;-c Fecha a janela atual. &amp;lt;C-W&amp;gt;-o Fecha todas as janelas menos a atual. :ball Abre todos os buffers em janelas distintas. g &amp;lt;C-G&amp;gt; Conta linhas, palavras, etc, no texto todo ou na seleção atual.  </description>
</item>

     
        <item>
  <title>À procura de vida extraterrestre</title>
  <link>http://www.caloni.com.br/a-procura-de-vida-extraterrestre/</link>
  <pubDate>2009-07-20</pubDate>
  
  <guid>http://www.caloni.com.br/a-procura-de-vida-extraterrestre/</guid>
  <description>Faz uns bons dez anos que eu instalei pela primeira vez em meu Pentium 133 MHz o seti@home, um programinha que se propunha a localizar vida extraterrena através de emissões de rádio capturadas pelas nossas potentes antenas de Arecibo. Ele dizia fazer isso durante o tempo ocioso do meu processador. Como eu sou uma pessoa que costuma costumava confiar bastante nas pessoas, além de ser fã incondicional do filme Contato, instalei sem medo.
Algum tempo se passou e hoje volto a instalar o mesmo programa, agora envolto em um invólucro de programas de mesmo teor chamado Boinc, que junta todas essas redes de trabalho em equipe. O computador é usado hoje em dia para diversos trabalhos que exigem um certo esforço no processamento que torna proibitivo alocar máquinas somente para isso (se não impossível do ponto de vista geográfico).
Eis uma lista dos principais projetos disponíveis através do Boinc que me chamaram a atenção:
 Climateprediction.net busca prever as possíveis consequências para o mundo das futuras transformações no clima. CPUGrid.net é uma simulação molecular de proteínas otimizada para as GPUs da NVidia e o Playstation 3. Superlink@Technion e ajude os cientistas a encontrar os prováveis genes causadores de fatalidades como câncer, a diabetes, hipertensão e esquizofrenia. Chess960@home para análise de uma variante do xadrez tradicional que sempre coloca as peças iniciais em posições aleatórias. PrimeGrid é um gerador de uma base de dados pública de números primos sequenciais, além de procurar por números primos gêmeos gigantes (vai saber). Quantum Monte Carlo at Home não é o que parece: Estudo da estrutura e da reatividade de moléculas usando a Química Quântica (?).  Dentre eles, acabei ficando mesmo com o bom e velho seti@home. Pode me chamar de egoísta, mas mesmo que encontrem a cura do câncer, não será muito produtivo para mim, que possuo questões existenciais que, acredito eu, facilitariam a compreensão das pessoas acerca da nossa extrema pequenez nesse universo, nos colocando cada vez mais no cantinho de nossa existência.
Escolha o seu!
</description>
</item>

     
        <item>
  <title>A Alça Dentro do Fio Gerou um Bloqueio da Morte</title>
  <link>http://www.caloni.com.br/a-alca-dentro-do-fio-gerou-um-bloqueio-da-morte/</link>
  <pubDate>2008-10-21</pubDate>
  
  <guid>http://www.caloni.com.br/a-alca-dentro-do-fio-gerou-um-bloqueio-da-morte/</guid>
  <description>Estava folheando um livro fenomenal que meu amigo havia pedido emprestado para ler quando me deparei com algumas traduções no mínimo curiosas. O exemplar em questão era o primeiro Windows Internals, publicado após o lançamento da primeira versão do Windows NT, uma plataforma escrita (quase) inteiramente do zero para suplantar as versões 9x (Windows 95 e 98), que herdaram do DOS algumas partes indesejáveis em sistemas operacionais modernos.
Sabe-se lá por que essa edição foi traduzida. É interessante notar que naquela época foi dado um tratamento especial a alguns termos e conceitos já comuns no dia-a-dia do programador americano, apesar de quase nenhum desses termos ter se mantido em sua versão original. Os exemplos mais gritantes são as threads (fios ou linhas), os dead locks (bloqueios da morte) e os handles (alças). Apesar de não ter nada contra traduzir termos do inglês para português (e vice-versa) algumas coisas incomodam em tradução de livros técnicos.
Um bom exemplo são ponteiros. Ler em um dado capítulo &amp;quot;(...) é muito importante inicializar seus ponteiros antes de usá-los&amp;quot; para, depois de nos acostumarmos com o termo, ler em outro capítulo &amp;quot;(...) sabe-se que a pior desgraça para um programador C são os famigerados apontadores selvagens&amp;quot;. Você resolveria esse tipo de problema definindo um vocabulário em comum com todo o livro (importantíssimo se ele está sendo traduziro por mais de uma pessoa) e ainda informaria o leitor qual o termo original, caso ele precise pesquisar sobre ele fora do livro. Com essa informação, que pode ser usada apenas nos primeiros usos da palavra ou em um glossário à parte, agradaria gregos e troianos: &amp;quot;os ponteiros em C (pointers) são um recurso rico e necessário para a escrita de programas de baixo/médio nível&amp;quot;.
Um exemplo notável é o famoso livro de algoritmos em C da O&#39;Reilly, que mesmo na nova edição com uma errata de 49 itens foi possível detectar mais erros. Um exemplo que me lembro era de uma função do algoritmo bitree. Nele havia uma variável com o nome orig que três linhas abaixo estava &amp;quot;traduzida&amp;quot; para original. É importante aqui diferenciar que no original não consta esse erro da troca do nome da variável.
Isso acaba sendo pior do que não colocar a versão em inglês, pois dá a impressão que não existe significado a ser explicado. Por exemplo, ver antes do capítulo sobre threads a passagem &amp;quot;... quando um fio espera o outro e vice-versa, acontece o terrível bug da trava da morte&amp;quot;. Para quem não descobriu o que foi escrito no original, se trata de duas threads (fios) causando um deadlock (trava da morte), cujo termo inclusive é usado no seu original na Wikipédia em português.
Esses exemplos, salvo o exemplo do livro de algoritmos, foram criados para ilustrar os tipos de erros mais comuns em traduções de livros técnicos, e não estão relacionados com qualquer livro em específico. Então o que era inicialmente para ajudar as pessoas que estão iniciando alguns conceitos acaba por prejudicar ainda mais o aprendizado, gerando aquele tipo de confusão que só com ajuda extra (internet, professor, colega) pode ser resolvida.
Assim como no vocabulário comum corrente, em que existem palavras dificilmente adaptáveis ou traduzíveis em um termo comum, como shopping e show, no meio técnico brotam as mais variadas expressões &amp;quot;estrangeirísticas&amp;quot;. Algumas são muito difíceis de encontrar seu primo lusófono, como link e login. Outros, no entanto, exageram um pouco as coisas, a ponto de conjugarmos um verbo em inglês usando nosso sistema gramatical: se você &amp;quot;stopar&amp;quot; o &amp;quot;debugador&amp;quot; vai &amp;quot;crashear&amp;quot; todo o sistema, porque esse software tá &amp;quot;bugado&amp;quot;! 1
O fato é que não há escapatória para quem trabalha nessa área, e no fundo isso é uma coisa boa, pois é da leitura técnica em inglês que podemos estender o nosso conhecimento além das barreiras do ponto com ponto br e encontrar conteúdo extremamente interessante (e inédito em nossa língua) para aprender. Se não estivéssemos abarrotados de estrangeirismos talvez fosse um pouco mais difícil fazer o switch entre essas duas linguagens.
  Ironicamente 12 anos depois deste artigo ser escrito o verbo bugar virou uma gíria corrente entre jovens. &amp;#x21a9;&amp;#xfe0e;
   </description>
</item>

     
        <item>
  <title>Aprendizado em kernel mode</title>
  <link>http://www.caloni.com.br/aprendizado-em-kernel-mode/</link>
  <pubDate>2008-08-07</pubDate>
  
  <guid>http://www.caloni.com.br/aprendizado-em-kernel-mode/</guid>
  <description>Hoje terminei minha primeira leitura de Memory Dump Analysis Vol. 1, e qual não foi a minha surpresa ao encontrar entre os últimos posts justamente o que eu estava precisando: um guia de livros que se deve ler para começar a programar em kernel mode.
O melhor de tudo nem é a lista de livros, cujos títulos já estão batidos na minha cabeça de tanto meu amigo Ferdinando comentar a respeito. A grande sacada foi ele ter feito um roteiro no estilo &amp;quot;leia esse livro primeiro, depois comece com esse e ao mesmo tempo acompanhe aquele, sempre atento ao Windows Internals&amp;quot;. As coisas não ficam mais fáceis (ler 8 livros, todos com média de 700 páginas), mas pelo menos ficam mais organizadas, tem começo, meio e fim (será?).
Claro, esse é o método Dmitry Vostokov, o que não quer dizer que funciona com qualquer um. No entanto, gosto de suas buscas de padrão, analogias de dumps com o mundo real, abstrações filosóficas e, principalmente, as explicações das telas azuis em UML. Se entendo facilmente essa forma de explicar, é possível que esse método facilite um poucos as coisas não-tão-fáceis de fazer para mim.
Agora só falta começar =).
</description>
</item>

     
        <item>
  <title>Estranho</title>
  <link>http://www.caloni.com.br/estranho/</link>
  <pubDate>2008-03-06</pubDate>
  
  <guid>http://www.caloni.com.br/estranho/</guid>
  <description>Bom, é hora de dizer tchau. Essa é minha última semana escovando bits na empresa onde estava por três anos. É estranho e esquisito dizer isso, mas me sinto um tanto aliviado. Nessa empreitada, porém, aprendi algumas coisas que valem a pena colocar na bagagem. Sempre é melhor entender do que criticar.
Por exemplo, vejamos a palavra estranho: quantas vezes você já pronunciou essa palavra quando estava diante de um problema daqueles esotéricos? Muitas vezes, não foi? E os problemas não-esotéricos?
Quando nos acostumamos a usar uma palavra para aliviar a dor de não entendermos o que está acontecendo diante de nós, visto pelos nossos próprios olhos, estamos nos condicionando a parar de cutucar nosso cérebro para encontrar uma resposta rápida e racional para o que está acontecendo. Em suma: nos fechamos ao mundo falando &amp;quot;estranho&amp;quot;.
Não por esse motivo, mas por estarmos cansados de tanto ouvir falar essa palavra, eu e meu amigo Thiago começamos a instituir uma &amp;quot;taxa simbólica&amp;quot; de 1 (um) real para os que proferirem a dita cuja, e passamos a usar o dinheiro arrecadado para o bem da comunidade, comprando o que nós, programadores, mais veneramos nos momentos de debugging: bolachas!
Essa &amp;quot;medida provisória&amp;quot; aos poucos foi se alastrando pelas mesas do departamento, ao ponto máximo de todos da área técnica, além do diretor comercial, colaborar para a nossa &amp;quot;caixinha de um real&amp;quot;.
Criamos um ambiente livre de estranhos. E criamos um trauma em nossas cabeças. A partir das primeiras semanas, toda vez que estávamos em algum lugar em que uma pessoa desconhecida (um estranho) dizia a palavra, soava um sino em nossas cabeças, quase fazendo com que nossa mão acusadoramente se erguesse e fizesse o gesto com o dedo indicando que a pessoa, a partir daquele momento, estava devendo um real para nossa caixinha comunitária.
E assim fomos indo, meses a fio, sem falar essa palavra na presença dos fiscais do um real, que éramos todos nós. A proibição foi linear e englobou todas as situações de vida social em que poderíamos nos expressar: no trabalho, no almoço, por mensagem instantânea, por e-mail, pelo celular, fora do trabalho, nos artigos do blogue...
Pois é, caro leitor, nos artigos do blogue. Se você procurar nestes últimos três anos qualquer menção à palavra &amp;quot;estranho&amp;quot; por aqui com certeza não irá encontrar.
Até agora, quando finalmente foi quebrado o encanto. Quer dizer, oficialmente a cobrança está extinta, mas nossas mentes sempre irão conter esse sino acusador tocando no ônibus, nas ruas, no cinema, no shopping, em casa. Enfim, nos códigos estranhos de nossa vida.
</description>
</item>

     
        <item>
  <title>Engenharia reversa para principiantes</title>
  <link>http://www.caloni.com.br/engenharia-reversa-para-principiantes/</link>
  <pubDate>2007-10-10</pubDate>
  
  <guid>http://www.caloni.com.br/engenharia-reversa-para-principiantes/</guid>
  <description>Dei uma reformada em minha última palestra sobre engenharia reversa. O tema escolhido foi tentar abranger os níveis de conhecimento que uma pessoa disposta a se dedicar à engenharia reversa de programas deveria ter, desde programação, passando pelo sistema operacional e terminando no uso de ferramentas. Achei interessante abordar esse tipo de conteúdo pelo fato de existirem pessoas que gostariam de começar ou já começaram e não sabem para onde ir.
Outra coisa que fiquei receoso de colocar (mas coloquei) foi a lista de tarefas para usar o conhecimento aprendido. Pode ser frustrante tentar procurar emprego nessa área aqui no Brasil e não adianta nada aprender e não usar. A engenharia reversa, assim como a área de segurança da informação, para ser efetiva, deve levar em conta como as coisas são feitas, o que quer dizer que fazer vírus e quebrar proteção de software faz parte do aprendizado.
Se houverem interessados o suficiente poderei ministrar uma palestra online, para ilustrar os slides e tirar dúvidas. Lembrando que isso não inclui as perguntas &amp;quot;como eu quebro o programa X&amp;quot; ou &amp;quot;faz um vírus pra mim&amp;quot;.
</description>
</item>

     
    
  </channel>
</rss>
