<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>essays on Blogue do Caloni</title>
    <link>http://www.caloni.com.br/tags/essays/</link>
    <description>Recent content in essays on Blogue do Caloni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sun, 21 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.caloni.com.br/tags/essays/" rel="self" type="application/rss+xml" />
    
     
        <item>
  <title>C&#43;&#43; Co Routines</title>
  <link>http://www.caloni.com.br/cpp-co-routines/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/cpp-co-routines/</guid>
  <description>&lt;p&gt;Entre os gêneros mais famosos do cinema e da programação está o terror, esse estado mental que se caracteriza pelo medo ou pela aversão a uma situação que envolve a perda de controle. Nesse quesito se encaixam as novas corrotinas que serão adotadas pelo padrão C++.&lt;/p&gt;
&lt;p&gt;No último Caloni Bode Cast Live Privado, aqueles que não estão publicados no YouTube, conversei com um amigo por mais uma vez (já perdi a conta quantas foram) sobre a famigerada implementação, mas acho que dessa vez detectei melhor o que torna essa nova biblioteca de C++ tão repugnante para os amantes de boas soluções de engenharia e do padrão da linguagem.&lt;/p&gt;
&lt;p&gt;A primeira ressalva diz respeito à alocação dinâmica. Ao usar esse modelo de rotinas cooperativas o programador é obrigado a alocar espaço para o estado dinamicamente, o que fere duas premissas da linguagem: o controle absoluto do modelo de execução para o programador e a certeza que ele irá apenas pagar em performance o que ele usar. Se os fãs da linguagem fossem religiosos, eles diriam agora que esta não foi uma decisão muito cristã do comitê.&lt;/p&gt;
&lt;p&gt;Eu continuo defendendo que a linguagem C seja usada caso surjam contra-indicações na prática da STL.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Oscar</title>
  <link>http://www.caloni.com.br/oscar/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/oscar/</guid>
  <description>&lt;p&gt;Quando o chefão do Oscar faz um discurso dizendo que agora oficialmente serão dez os indicados a melhor filme para promover representatividade, diversidade e todos os ades de quem é ista, ele não está sendo um cara legal. Ele está apenas revelando o quanto o Oscar e/ou a sociedade como um todo funciona e o que irão fazer a respeito: nada. Porque nada é o que este povo que se diz politicamente consciente está acostumado a fazer para mostrar que sabe de algo que você, alienado, não sabe, e farão algo a respeito. Bom, resumo da história como sempre: não, não sabem e não, não farão. Não sabem matemática e não farão uma revolução. Provarão ignorância na arte dos números e hipocrisia e conveniência na arte política.&lt;/p&gt;
&lt;p&gt;Vamos abrir o discurso para a lógica: eu tenho mil filmes disputando a lista entre os indicados. Apenas cinco poderão ser escolhidos. Os cinco imediatamente abaixo destes cinco ficarão de fora. Pelas novas regras esses cinco também entrariam pelo tapete vermelho, e com isso, de acordo com o resto da divulgação, aumentaria a representatividade para o prêmio principal da noite. Essa palavra, diversidade, vale lembrar, atualmente quer dizer indicar não apenas homens héteros brancos, mas também mulheres e homens de todas as cores, sexualidade e planeta.&lt;/p&gt;
&lt;p&gt;Bom, essa conta não vai fechar. Não existem apenas dez tipos combinados de gênero, cor e sexualidade (e planeta) para que todos estejam de fato representados na premiação. Se já não é suficiente entre os cinco mais votados, qual a mágica estatística que reza que os dez primeiros o serão suficientes? Vou repetir com outras palavras e deixar a pergunta no ar: se os cinco indicados de hoje são de homens héteros brancos por que os cinco imediatamente abaixo na colocação serão com gêneros, cores e sexualidade diversos?&lt;/p&gt;
&lt;p&gt;Se você é de humanas não precisa responder, mas continue levantando suas bandeiras para outro canto.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Teoria, Prática e Código</title>
  <link>http://www.caloni.com.br/teoria-pratica-codigo/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/teoria-pratica-codigo/</guid>
  <description>&lt;p&gt;Quando se está aprendendo programação é muito bom praticar escrevendo código. Muitos querem aprender a programar e não começam programando, e se você já começou colocando a mão na massa, parabéns por isso.&lt;/p&gt;
&lt;p&gt;Agora, para avançar nos estudos, além da prática, a teoria tem que avançar. E teoria vai além dos estudos de livros e vídeo-aulas. É possível aprender muito mais rápido lendo o código dos outros, disponível aos milhões pela internet. A vinda do GitHub veio para democratizar esse acesso e descomplicar os caminhos de colaboração. Agora você pode encontrar um bug no código de uma pessoa do outro lado do mundo e mandar a correção para todos envolvidos no projeto validarem. O quão sensacional é isso?&lt;/p&gt;
&lt;p&gt;Ler código de outra pessoa pode ser desafiador no começo porque é necessário seguir um raciocínio diferente, que não saiu de sua cabeça. Não é a maneira que você resolveria um problema, mas, se o código estiver correto, é uma maneira igualmente válida. E possivelmente melhor. Por estar fora da zona de conforto se torna uma oportunidade para aprender coisas que não estão exatamente nem na teoria nem na prática. É a experiência de outra pessoa traduzida em código.&lt;/p&gt;
&lt;p&gt;Note que não digo essas coisas apenas do meu código, que não é perfeito nem exemplar, mas de qualquer código que resolva um problema que você está estudando resolver. Ler código é como ter o texto de um livro, mas compactado. Tem muitas ideias legais para copiar e usar, uma vez que você aprendeu o que o código faz.&lt;/p&gt;
&lt;p&gt;Mas para isso é necessário quase o mesmo esforço usado para programar. Parece fácil, mas está longe disso. A boa notícia é que vai economizar muito tempo se persistir em entender.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Fechado Para Reformas</title>
  <link>http://www.caloni.com.br/fechado-para-reformas/</link>
  <pubDate>2020-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/fechado-para-reformas/</guid>
  <description>&lt;p&gt;Quase três mil posts durante quinze anos nessa vida de blogue e percebo que chegou a hora de atingir a maioridade. Escrever um rascunho e publicá-lo na internet não me torna melhor escritor que qualquer YouTuber de primeira viagem que não edita seu conteúdo ou tuítes que simplificam o pensamento humano de tal forma que ele parece totalmente válido ou inválido. Perde-se as nuances. A voz do autor fica solta demais para ser relevante nesse mar de informação que nos afogamos todos os dias (e noites).&lt;/p&gt;
&lt;p&gt;Para me tornar um escritor profissional eu devo revisar. Revisar é o que irá extrair valor dos meus textos. Brutos como estão nem eu consigo mais enxergar a virtude de escrever. O conteúdo não é nada se não for seguido pela arte da composição. E essa arte só se conquista compondo, lapidando, com o esforço de conseguir acabar uma obra com esmero e excelência, e ainda que não se consiga por completo esse é o caminho a ser seguido.&lt;/p&gt;
&lt;p&gt;Portanto, coloquei todos meus textos antigos para revisão, e os novos nascem no repositório como rascunhos, o que quer dizer que o texto não aparecerá em sua primeira versão no blog. O bebê não está pronto ainda. É durante a gestação que ele irá ganhar corpo e desenvolver sua mente. A edição, além de correções gramaticais, reorganiza o pensamento contido já no rascunho, mas não totalmente consolidado para ser consumido por outro ser humano que não seja o autor.&lt;/p&gt;
&lt;p&gt;Escrever é coisa séria. Depois de tanto praticar, acredito que seja a hora de constatar este fato, tirar a poeira das milhares de páginas que já compus e tentar arrumar tempo para me atualizar na arte de criar telepatia para leitores do futuro.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Terrace House</title>
  <link>http://www.caloni.com.br/terrace-house/</link>
  <pubDate>2020-04-15</pubDate>
  
  <guid>http://www.caloni.com.br/terrace-house/</guid>
  <description>&lt;p&gt;Como o fato dos participantes saberem que se trata de um programa televisionado faz com que a verdade saia pelas beiradas, revelando como personagens são criados e mantidos em rede mundial. A maior crítica que se pode fazer de um reality show é que a parte &amp;quot;reality&amp;quot; nunca consegue se sobrepor ao &amp;quot;show&amp;quot;. Se a própria vida já é um show, em que todos estamos apresentando e cuidando de nossos egos quando em público, o que dirá com dezenas de câmeras apontadas para você, interagindo com pessoas que nunca viu na vida.&lt;/p&gt;
&lt;p&gt;A série japonesa se destaca das demais por não possuir muito controle sobre o desenrolar da história, da entrada e saída dos convidados e das tramas românticas e da vida. Nesse sentido é uma das séries que mais tenta se aproximar da vida, se esquecermos que na vida real não podemos nos dar ao luxo de viver em mansões como as que vemos no programa (talvez dividindo entre seis pessoas...).&lt;/p&gt;
&lt;p&gt;A análise que é feita pelos anfitriões também é um ponto positivo, pois assim como textos e vídeos nos ajudam a raciocinar trazendo à tona o óbvio que estava em nossas mentes, quando eles comentam o que acabamos de ver é como se nossa percepção fosse organizada e verbalizada sem a nossa ajuda. Deixe isso para os especialistas em relacionamento. Ou entretenimento.&lt;/p&gt;
&lt;p&gt;Mas a grande questão filosófica que surge vendo programas como Terrace House é qual versão dessas pessoas estamos vendo, qual elas escolheram para apresentar, e quais ficaram de fora, na sala de edição, ou longe das câmeras? E como as pessoas que nos conhecem alimentam suas impressões e opiniões sobre nós baseadas tão somente nos momentos em que estamos juntos, interagindo ou não? (Quase) ninguém sabe de que forma você vai ao banheiro ou tomar banho. Ou fazer sexo. Até pessoas diferentes com quem você faz sexo devem ter visões bem diferentes sobre como você se sai nesse quesito.&lt;/p&gt;
&lt;p&gt;Não influenciar ou se deixar influenciar quando vamos apresentar uma versão de nós mesmos para o mundo não é algo que podemos evitar. Sem um outro ser humano para nos dizer algo, nós praticamente não existimos. Seríamos animais na luta pela sobrevivência. Talvez um pouco mais só pelo fato de existir uma voz interna chamada consciência para conversarmos de vez em quando. Porém, essa vozinha é bem enviesada.&lt;/p&gt;
&lt;p&gt;Como as edições de programas de reality.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Callback Hell</title>
  <link>http://www.caloni.com.br/callback-hell/</link>
  <pubDate>2020-04-09</pubDate>
  
  <guid>http://www.caloni.com.br/callback-hell/</guid>
  <description>&lt;p&gt;Foi aprendendo sobre kernel do Windows que eu descobri que a linguagem C suporta todas as abstrações que um homem crescido precisa para desenvolver sistemas. Também aprendi que você precisa ser um homem crescido para saber usar direito.&lt;/p&gt;
&lt;p&gt;A linguagem C possui 32 palavras-chave e nenhuma parafusadeira elétrica. Existe um motivo para isso: fazer tudo na mão desenvolve o caráter. Se não desenvolve, pelo menos escancara a má pessoa que você é.&lt;/p&gt;
&lt;p&gt;Olhe para o sistema de callbacks, por exemplo. É uma ferramenta poderosa. Com ponteiros de função e endereços de estrutura você pode chamar quem você quiser a hora que quiser. Há tantas possibilidades que é muito fácil errar.&lt;/p&gt;
&lt;p&gt;Aí que surge o famigerado Callback Hell.&lt;/p&gt;
&lt;p&gt;Esse termo se popularizou através da linguagem Javascript por causa que em Javascript é muito fácil deixar a coisas pra depois. Você deixa seu callback pra ser chamado uma outra hora e esquece dele. E ele faz o mesmo. E mais uma vez. E de novo. Você entendeu a ideia.&lt;/p&gt;
&lt;p&gt;No final das contas, depurar código Javascript escrito por outra pessoa seria uma sala no inferno reservada para aqueles programadores que acharam durante a vida que resolveriam todos os problemas do mundo até às 18:00. Tudo que eles precisavam fazer era criar mais um pequeno callback no finalzinho daquela função. Como se diz em Go Horse Power, commit e era isso.&lt;/p&gt;
&lt;p&gt;A linguagem C permite você fazer a mesma coisa. Basta que o endereço da estrutura que você passou como contexto do seu callback tenha um ponteiro de função que vai ser chamado passando mais um membro dessa estrutura como contexto, que irá conter outro ponteiro de função que... você entendeu a ideia.&lt;/p&gt;
&lt;p&gt;No final das contas, depurar um código em C escrito por uma pessoa que evita resolver problemas de arquitetura criando mais um callback deve demonstrar como existem pessoas sem caráter que sabem declarar um ponteiro de função. Cuidado com essas pessoas. Elas podem te levar até uma salinha reservada no inferno.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Circles and Squares</title>
  <link>http://www.caloni.com.br/circles-and-squares/</link>
  <pubDate>2019-11-17</pubDate>
  
  <guid>http://www.caloni.com.br/circles-and-squares/</guid>
  <description>&lt;p&gt;Retirado do blog Keeping My Brain Alive.&lt;/p&gt;
&lt;p&gt;...It takes extraordinary intelligence and discrimination and taste to use any theory in the arts, and that without those qualitites, a theory becomes a rigid formula (which is indeed what is happening among auteur critics). The greatness of critics like Bazin in France and Agee in America may have something to do with their using their full range of intelligence and intuition, rather than relying on formulas. Criticism is an art, not a science, and a critic who follows rules will fail in one of his most important functions: perceiving what is original and important in new work and helping others to see.&lt;/p&gt;
&lt;p&gt;...the first premise of the auteur theory is the technical competence of a director as a criterion of value.&lt;/p&gt;
&lt;p&gt;‘A great director has to be at least a good director.’ But this commonplace, though it sounds reasonable and basic, is a shaky premise: sometimes the greatest artists in a medium bypass or violate the simple technical competence that is so necessary for hacks. For example, it is doubtful if Antonioni could handle a routine directorial assignment of the type at which John Sturges is so proficient (Escape from Fort Bravo or Bad Day at Black Rock), but surely Antonioni’s L’Avventura is the work of a great director. And the greatness of a director like Cocteau has nothing to do with mere technical competence: his greatness is in being able to achieve his own personal expression and style.&lt;/p&gt;
&lt;p&gt;An artist who is not a good technician can indeed create new standards, because standards of technical competence are based on comparisons with work already done.&lt;/p&gt;
&lt;p&gt;[from Cocteau] ‘The only technique worth having is the technique you invent for yourself.’&lt;/p&gt;
&lt;p&gt;I would amend Sarris’s premise to, ‘In works of a lesser rank, technical competence can help to redeem the weaknesses of the material.’&lt;/p&gt;
&lt;p&gt;...the second premise of the auteur theory is the distinguishable personality of the director as a criterion of value.&lt;/p&gt;
&lt;p&gt;The smell of a skunk is more distinguishable than the perfume of a rose; does that make it better? Hitchcock’s personality is certainly more distinguishable in Dial M for Murder, Rear Window, Vertigo than Carol Reed’s in The Stars Look Down, Odd Man Out, The Fallen Idol, The Third Man, An Outcast of the Islands, if for no other reason than because Hitchcock repeats while Reed tackles new subject matter. But how does this distinguishable personality function as a criterion for judging the works?&lt;/p&gt;
&lt;p&gt;Often the works in which we are most aware of the personality of the director are his worst films - when he falls back on the devices he has already done to death. When a famous director makes a good movie, we look at the movie, we don’t think about the director’s personality; when he makes a stinker we notice his familiar touches because there’s not much else to watch.&lt;/p&gt;
&lt;p&gt;It is an insult to an artist to praise his bad work along with his good; it indicates that you are incapable of judging either... It’s like buying clothes by the label: this is Dior, so it’s good. (This is not so far from the way the auteur critics work, either.)&lt;/p&gt;
&lt;p&gt;[Sarris] wants to see artists in a pristine state - their essences, perhaps? - separated from all the life that has formed them and to which they try to give expression.&lt;/p&gt;
&lt;p&gt;The third and ultimate premise of the auteur theory is concerned with interior meaning, the ultimate glory of the cinema as an art. Interior meaning is extrapolated from the tension between a director’s personality and his material.&lt;/p&gt;
&lt;p&gt;These critics work embarrassingly hard trying to give some semblance of intellectual respectability to a preoccupation with mindless, repetitious commercial products.&lt;/p&gt;
&lt;p&gt;‘Interior meaning’ seems to be what those in the know know. It’s a mystique - and a mistake. . . They’re not critics; they’re inside dopesters. There must be another circle that Sarris forget to get to - the one where the secrets are kept.&lt;/p&gt;
&lt;p&gt;The role of the critic is to help people see what is in the work, what is in it that shouldn’t be, what is not in it that could be. He is a good critic if he helps people understand more about the work than they could see for themselves; he is a great critic, if by his understanding and feeling for the work, by his passion, he can excite people so that they want to experience more of the art that is there, waiting to be seized. He is not necessarily a bad critic if he makes errors in judgment. (Infallible taste is inconceivable; what could it be measured against?) He is a bad critic if he does not awaken the curiosity, enlarge the interests and understanding of his audience. The art of the critic is to transmit his knowledge of and enthusiasm for art to others.&lt;/p&gt;
&lt;p&gt;I daresay... the new breed of specialists know more about movies than some people and could serve at least a modest critical function if they could remember that art is an expression of human experience. If they are men of feeling and intelligence, isn’t it time for them to be a little ashamed of their “detailed criticism” of movies like River of No Return?&lt;/p&gt;
&lt;p&gt;Those, like Sarris, who ask for objective standards seem to want a theory of criticism which makes the critic unnecessary. And he is expendable if categories replace experience; a critic with a single theory is like a gardener who uses a lawn mower on everything that grows. Their desire for a theory that will solve all the riddles of creativity is in itself perhaps an indication of their narrowness and confusion; they’re like those puzzled lost people who inevitably approach one after a lecture and ask, “But what is your basis for judging a movie?” . . . They want a simple answer, a formula; if they approached a chef they would probably ask for the one magic recipe that could be followed in all cooking.&lt;/p&gt;
&lt;p&gt;And it is very difficult to explain to such people that criticism is exciting just because there is no formula to apply, just because you must use everything you are and everything you know that is relevant, and that film criticism is particularly exciting just because of the multiplicity of elements in film art . . . they seem to view movies, not merely in isolation from the other arts, but in isolation even from their own experience . . . And if they don’t have interests outside films, how can they evaluate what goes on in films? Film aesthetics as a distinct, specialized field is a bad joke.&lt;/p&gt;
&lt;p&gt;Vulgar melodrama with a fast pace can be much more exciting - and more honest, too - than feeble pretentious attempts at drama - which usually meant just putting ‘ideas’ into melodrama, anyway.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Is There a Cure for Film Criticism? by Pauline Kael (excerpts)</title>
  <link>http://www.caloni.com.br/is-there-a-cure-for-film-criticism/</link>
  <pubDate>2019-11-17</pubDate>
  
  <guid>http://www.caloni.com.br/is-there-a-cure-for-film-criticism/</guid>
  <description>&lt;p&gt;Retirado do blog Keeping My Brain Alive.&lt;/p&gt;
&lt;p&gt;There is, in any art, a tendency to turn one&#39;s own preferences into a monomaniac theory; in film criticism, the more confused and single-minded and dedicated (to untenable propositions) the theorist is, the more likely he is to be regarded as serious and important and &amp;quot;deep&amp;quot; - in contrast to relaxed men of good sense whose pluralistic approaches can be disregarded as not fundamental enough.
Often the worst and most embarrassing part of a film is the accidental, the uncontrolled, the amateurish failure which exhibits its unachieved intentions; and the finest moment may be a twitch of the actress&#39;s cheek achieved on the fiftieth take. There are accidents which look like art and there is art that looks accidental; but how can you build an aesthetic on accident - on the ripple of the leaves?... How can you say &#39;accidents were the very soul of slapstick&#39;? In comedy what looks accidental is generally the result of brilliant timing and deliberate anarchy and wild invention and endless practice.&lt;/p&gt;
&lt;p&gt;The look of so many good movies during the period [Kracauer] was gestating this book becomes his definition of cinema itself.&lt;/p&gt;
&lt;p&gt;&amp;quot;Film,&amp;quot; he tells us, &amp;quot;gravitates towards unstaged reality&amp;quot; and &amp;quot;the artificiality of stagy settings or compositions runs counter to the medium&#39;s declared preference for nature in the raw.&amp;quot; How and when did the medium declare its preference, I wonder? The trouble with this kind of Hegelian [philosophy of Hegel in which the dialectic of thesis, antithesis, and synthesis is used as an analytic tool in order to approach a higher unity or a new thesis] prose is that the reader is at first amused by what seem to be harmless metaphors, and soon the metaphors are being used as if they were observable historical tendencies and aesthetic phenomena, and next the metaphor becomes a stick to castigate those who have other tastes, and other metaphors.&lt;/p&gt;
&lt;p&gt;The cruiser Potemkin and the oil derrick in Louisiana Story, are less feasible on stage, but how does that make them more cinematic than something which is easy to put in a theater? Both are, incidentally, much less interesting objects on the screen than they are generally asserted to be: the exciting action in Potemkin has little reference tot he cruiser itself (extras can run around on a stage, too) . . . Who started this divide and conquer game of aesthetics in which the different media are assigned their special domains like salesmen staking out their territories - you stick to the Midwest and I&#39;ll take Florida?&lt;/p&gt;
&lt;p&gt;Film aestheticians are forever telling us that when they have discovered what the motion picture can do that the other arts can&#39;t do, they have discovered the &amp;quot;essence,&amp;quot; the &amp;quot;true nature&amp;quot; of motion picture art. It is like the old nonsense that man is what differentiates him from the other animals . . . And what motion picture art shares with other arts is perhaps even more important than what it may, or may not, have exclusively. . . Except for the physical presence of the actors in a theater, there is almost no &amp;quot;difference&amp;quot; between stage and screen that isn&#39;t open to question; there is almost no effect possible in one that can&#39;t be simulated, and sometimes remarkably well achieved, in the other.&lt;/p&gt;
&lt;p&gt;Perhaps the most lovable side of Kracauer is his desperate attempt to make musicals, which he obviously adores, fit his notion of cinema as nature in the raw. . . As if our delight in the performance of a song or dance depended on the degree to which it grew out of the surrounding material - as if our pleasure had to be justified! This is a variant of the pedagogical Puritan notion that you mustn&#39;t enjoy a poem or a story unless it teaches you a lesson: you mustn&#39;t enjoy a movie unless it grows out of &amp;quot;nature.&amp;quot; . . . Phew! Our pleasure in song and dance, as in motion picture itself, is in the ingenuity with which man uses the raw material of his existence - not in the raw material itself, or in a visible link with it. . . It is this clumsy effort to make things look &amp;quot;natural&amp;quot; instead of accepting the stylization of song and dance which helps to make so many musicals seem simpering and infantile.&lt;/p&gt;
&lt;p&gt;In the fall of 1961 New Politics, Ernest Callenbach writes &amp;quot;a letter to a young film maker&amp;quot; and says &amp;quot;Get thee to Cuba, and after that to Latin America elsewhere, and then Africa.&amp;quot; Would the same advice be given to a young writer or painter? Why are moviemakers obliged to make history? . . . But suppose the young film maker doesn&#39;t know Spanish, can&#39;t stand the sight of blood, was drawn to the elliptical scenario on the uneventful life of Emily Dickinson? He&#39;ll probably make a terrible movie, but surely the first prerogative of an artist in any medium is to make a fool of himself.&lt;/p&gt;
&lt;p&gt;Films are not made by cameras, though many of them look as if they were, just as a lot of dialogue sounds as if it were written by typewriters.&lt;/p&gt;
&lt;p&gt;Art is the greatest game, the supreme entertainment, because you discover the game as you play it. There is only one rules, as we learned in Orphee: Astonish us! In all art we look and listen for what we have not experienced quite that way before. We want to see, to feel, to understand, to respond a new way. Why should pedants be allowed to spoil the game?&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Por que esses Coringa e Pantera se tornaram fenômenos de bilheteria?</title>
  <link>http://www.caloni.com.br/coringa-e-pantera-negra/</link>
  <pubDate>2019-11-16</pubDate>
  
  <guid>http://www.caloni.com.br/coringa-e-pantera-negra/</guid>
  <description>&lt;p&gt;Muitos dizem que Coringa e Pantera Afro-Descendente se tornaram fenômenos de bilheteria por causa da identificação do público com esses dois personagens ou universos, mas se esquecem que muitos outros filmes campeões de bilheteria surgiram nas últimas décadas e que há uma correlação muito mais forte do que a mera identificação com protagonistas: são os filmes com o maior número de fundo verde da história do cinema.&lt;/p&gt;
&lt;p&gt;O público de hoje em dia quer estar cada vez mais longe da realidade que o cerca. Vemos isso já nos smartphones. A massa de alienados percorrendo megalópoles grudados no celular e evitando pensar muito a respeito do verdadeiro caos, solidão, impessoalidade que a cidade grande gera. O mundo reluzente e piscante que nos mostra uma vida perfeita e inalcançável é mil vezes melhor do que pensar em procurar um emprego melhor, ou melhor, procurar um emprego.&lt;/p&gt;
&lt;p&gt;No cinema não é diferente. Anualmente são lançados inúmeros dramas, norte-americanos ou não, intimistas, potentes, que nos fazem repensar nossa própria existência ou as nossas relações muito reais que nos cercam. E eles não são campeões de bilheteria. O motivo mais óbvio é que ingressos de cinema custam dinheiro demais para todos assistirem todos os filmes que estreiam, então há de haver um critério. E entre assistir uma reflexão sobre a própria vida real que compartilhamos todos os dias do ano (exceto férias), a imensa massa que só irá poder ver um ou dois filmes por ano na telona irá escolher o escapismo mais glorioso que ela já ouviu falar.&lt;/p&gt;
&lt;p&gt;Isso explica porque as maiores bilheterias deste século são filmes de super-heróis, de viagens no espaço ou qualquer variante que envolva cada vez menos filmagens fora de estúdio. Avatar, Star Wars, Vingadores, Harry Potter e até Velozes e Furiosos 7, que deixou de ser sobre carros potentes e passou a ser uma versão medíocre de espionagem e conspiração, constam na lista de maiores bilheterias.&lt;/p&gt;
&lt;p&gt;E se ainda resta dúvida sobre o que move o grande público para as salas, repousa atualmente em sétimo lugar O Rei Leão em sua versão live action, apontado por vários críticos como uma adaptação estranha da animação por conter animais &amp;quot;reais demais&amp;quot;. Paradoxalmente, reais demais é o maior atrativo para alguém que deseja escapar da realidade do mundo cruel, pois por mais real que seja, esta é uma animação feita totalmente em estúdios, utilizando zero animais reais, e o espectador sabe disso, e ele quer visitar este mundo.&lt;/p&gt;
&lt;p&gt;E aí entra Wakanda, a terra dos contos de fadas que todo afro-descendente quis que em algum momento da história fosse verdade. Isso é motivo de sobra para o inesperado sucesso de bilheteria deste filme da Marvel, e não podemos reduzir a explicação com identificação nem representatividade. O morador do gueto quer sonhar pelo menos uma vez na vida com um mundo onde ele e seus vizinhos detém a substância mais rica e poderosa do universo, e se sentir o povo escolhido.&lt;/p&gt;
&lt;p&gt;Mas voltando ao Coringa, é óbvio que Gothan City/Nova York da década de 70 e 80 não é um ambiente irreal. Ela realmente existiu e é em uma versão Scorsese light para o cinema que o filme de Todd Phillips se passa. Porém, essa Nova York não existe mais, e nem Taxi Driver nem O Rei da Comédia são versões fantasiosas da cidade vindas da mente de um psicopata. As versões de Scorsese são reais demais, porque para um católico como Martin o drama (e a culpa) deve ser bem real.&lt;/p&gt;
&lt;p&gt;Realidade não é o forte na mente de Todd Phillips, a quem foi dada liberdade criativa o suficiente para que o universo do seu filme e o seu &amp;quot;herói&amp;quot; tivessem os desvios morais tão conhecidos dos fãs do diretor de Se Beber Não Case e Um Parto de Viagem. Esse desvio moral pode não harmonizar muito bem com o resto dos filmes citados neste texto que elencam o top 20 de maiores vendas, mas é um escapismo de qualquer forma. Todo cidadão de bem já se cansou alguma vez de ouvir as reportagens do Datena e quis dar um tiro na cabeça do sujeito responsável por trazer sempre desgraças para seu lar. E eventualmente também já se sentiu na necessidade de questionar o que ocorre com o mundo onde tantos pobres engraçados pagam o pato e humoristas medíocres, de Jô Soares a Danilo Gentili, ganham milhões por fazer piadas de tio em rede nacional. E pensou em dar um tiro na cabeça de ambos, também, claro.&lt;/p&gt;
&lt;p&gt;De qualquer forma, ninguém se identifica com o Coringa, pois isso é simplista demais até para a grande massa. O que todos compartilham é essa incompreensão do mundo em que vivemos, um mundo que acelerou demais sua tecnologia, onde as crianças que já nasceram com internet são versão diferentes demais da geração anterior. Esse gap crescente entre gerações causa um desconforto e uma alienação com a vida real que as opressora mentes de primatas com quem somos obrigados a fazer as pazes precisamos de um escap... ismo.&lt;/p&gt;
&lt;p&gt;Se você quer chamar isso de identificação ou representatividade, vá em frente. Reciclar nomes para significarem o que bem quisermos também é um traço do novo século. Portanto, se empodere, e tente ser feliz.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Anti-Spoilers e o Escudo Pró-Hype</title>
  <link>http://www.caloni.com.br/anti-spoilers-e-o-escudo-pro-hype/</link>
  <pubDate>2019-07-20</pubDate>
  
  <guid>http://www.caloni.com.br/anti-spoilers-e-o-escudo-pro-hype/</guid>
  <description>&lt;p&gt;Este texto não possui começo nem fim. Ele é uma mera continuação, assim como as da Marvel, que vai se perder no tempo e no espaço. Mas enquanto estamos aqui e enquanto você está disposto a ler sobre o ponto de vista de um velho: eu me lembro de uma época em que o lançamento de um blockbuster era um evento anual. Eu me lembro porque eu vivi essa época, então analiso a realidade atual sob a ótica de alguém que sentiu a mudança surgindo até um momento que o contraste ficou aparente demais para não ser notado.&lt;/p&gt;
&lt;p&gt;Comecemos com o tradicional advérbio de velho: &amp;quot;antigamente&amp;quot;, quando nossos pais nos levavam para assistir filmes no cinema sem ou com pouca pipoca, quando no espaço inteiro de uma infância víamos meia-dúzia de filmes, lançamentos como De Volta para o Futuro 2 era O evento, ápice do ápice, para não ser notado e comentado.&lt;/p&gt;
&lt;p&gt;Porém, diferente de hoje, esse evento não era antecedido por meses e meses de espera ansiosa. Por quê? Bom, em primeiro lugar porque nós nem sabíamos que esse evento existiria. Não havia internet; apenas jornais noticiando brevemente, e isso nas últimas semanas antes da estreia. Nos jornais impressos (você ainda lembra o que é isso?) as críticas surgiam um pouco antes do dia D, e apenas na edição de domingo. Havia, portanto, uma surpresa legítima para uma produção que gasta em média um ano entre ser idealizada e produzida, seguida por pelo menos alguns meses em cartaz até o próximo arrasa-quarteirões (curiosidade inútil: essa é a nossa aportuguesada expressão de blockbuster, que nos anos 90 virou também no Brasil o nome da novidade entre as locadoras de VHS; PS: não vou explicar o que é VHS: Google for it).&lt;/p&gt;
&lt;p&gt;Naquela época os bons filmes também se destacavam pelo que eles eram: roteiros coerentes e completos, com começo, meio e fim. Ironicamente De Volta para o Futuro 2 não é uma história completa, mas uma continuação, que foi filmada junto de uma segunda continuação que finalizaria uma trilogia [1]. O exemplo de uma continuação bem-sucedida vem bem a calhar para eu explicar que o problema que estou analisando não é sobre continuações, que sempre existiram, mas sobre as serialização de filmes que não pediriam por continuações se não tivessem sido concebidos como capítulos de uma série em primeiro lugar. O exemplo mais marcante do momento são os famigerados filmes da Marvel [2], que nunca começam nem terminam e, por conta disso, são menos do que incompletos: são incoerentes.&lt;/p&gt;
&lt;p&gt;Roteiros coerentes entregam para o espectador, mesmo que em uma continuação, o início de um conflito, seu desenvolvimento e sua resolução. Ao final da catarse cinematográfica íamos todos de volta para casa satisfeitos pela experiência e dispostos a ver de novo se tivéssemos gostado muito, o que geralmente era o que acontecia um ano depois, na TV, pois os filmes que eram assistidos no cinema eram escolhidos a dedo, baseados em boca-a-boca ou baseados na opinião de algum conhecido metido a intelectual que lia a coluna de Luis Carlos Merten no Estadão ou aquele outro cara da Folha. Roteiros incoerentes dividem nossa atenção entre diferentes histórias. Há o Homem-Aranha e seu conflito em crescer, mas há os interesses da Shield, há as consequências de Vingadores: O Ultimato, há os outros heróis que precisam ser engavetados para não interferir nesta história. Há muitos poréns que devem se encaixar, e nem todos eles conseguirão nos satisfazer.&lt;/p&gt;
&lt;p&gt;Compare os dois extremos. De um lado um ou dois filmes por ano de sensação entregues sem muita expectativa mas muito resultado. A surpresa de haver um filme novo que gostaríamos de ver era o primeiro prazer que o filme proporcionaria, seguido talvez de comentários de alguém que já viu o filme, eventualmente com alguns pontos-chave e possivelmente até com o final, se a pessoa não achasse que isso iria estragar a experiência do ouvinte. E, finalmente, o prazer final de estar no escurinho no cinema testemunhando um dos momentos máximos de quem desejava a experiência pela experiência.&lt;/p&gt;
&lt;p&gt;No outro extremo, cerca de duas dezenas de arrasa-quarteirões sendo lançados todo ano. Todos eles já possuem cronograma antes do início do projeto, mesmo que não se tenha ideia da história por trás, já que a história é a menor das preocupações dos grandes estúdios. Isso acontece porque são continuações, remakes, spin-offs e adaptações já adquiridas. Há um cálculo tão meticuloso neste produto que nos EUA sabe-se a data exata da estreia de todos esses filmes (no Brasil não: há poucas salas e é um caos mercadológico). Durante um ano ou dois acompanhamos entrevistas com os produtores, atores, diretores, qualquer um que queira falar um pouquinho que seja sobre o que virá e esteja autorizado. Nossa sede por novidade é alimentada antes mesmo da concepção do filme, ainda em seu estado larva, sendo artisticamente especulado, testes de atores, teorias de fãs.&lt;/p&gt;
&lt;p&gt;&amp;quot;Quando eu era criança, falava como criança, pensava como criança, raciocinava como criança&amp;quot; e adoraria testemunhar o surgimento de tantos filmes de super-heróis maravilhosamente produzidos pelos milagres da computação em tempo recorde em uma quantidade e velocidade próximas dos próprios gibis que os originaram. Porém, &amp;quot;desde que me tornei homem, eliminei as coisas de criança&amp;quot;. No mundo atual do entretenimento infantil para adultos com dinheiro de sobra, os momentos mágicos que antes se limitavam a dois ou três por ano do qual elas irão se lembrar daqui a 10, 20 anos como eu me lembro se tornaram uma versão audiovisual da pipoca amanteigada que adoramos mastigar na mesma sala onde consumimos efeitos que nos anestesiam pela mais nova tecnologia 3D e som surround. E algumas poltronas até chacoalham. Mas infelizmente deixei as coisas de criança para trás.&lt;/p&gt;
&lt;p&gt;Quando digo que esses espectadores ficam anestesiados eu digo de uma forma positiva, mas com um efeito negativo. É positivo sentir a pura emoção de uma luta, uma perseguição, explosões, movimentos frenéticos e nossos super-heróis vivendo momentos fantásticos em suas aventuras, mas é negativo quando a única coisa que os filmes hoje em dia têm a oferecer é basicamente isso empacotado em uma trama que pode ser resumida em uma pequena discussão entre os antagonistas, um mal-entendido que seja, que é resolvido em meio às explosões, fogo e fumaça como se não fosse nada demais. Não me parece mais aquele momento memorável em que Marty McFly e Emmett Brown decidem que precisam voltar a 1955 e resgatar o almanaque de ambas as versões dos Biffs, fazendo com que McFly entre novamente na festa de formatura de seus pais e vendo sua primeira versão que viajou no tempo arrasando na guitarra.&lt;/p&gt;
&lt;p&gt;E se De Volta Para o Futuro 2 tivesse estreado esse ano, nesse momento você me acusaria de soltar um belo de um spoiler, estragando completamente a surpresa deste filme, quando ironicamente o motivo desse filme de Robert Zemeckis ser tão icônico ainda hoje é que mesmo sabendo de toda sua história de cabo a rabo assisti-lo novamente gera sensações igualmente positivas, embora não as mesmas, pois já sabemos o que acontece no filme. O que permanece é a estrutura do seu roteiro traduzida em uma direção impecável, que nos faz olhar a viagem no tempo de diversos ângulos e quando menos nos damos conta estamos descobrindo algo que não tínhamos visto nas 20 vezes anteriores que assistimos ao filme.&lt;/p&gt;
&lt;p&gt;O que aconteceria se você assistisse por 20 vezes, por exemplo, Homem Aranha: Longe De Casa, lançamento deste mês? Provavelmente lá pela quinta vez você saberia a história de cabo a rabo, talvez até os diálogos, e no lugar de novas sensações revendo as cenas o filme entregaria um vazio existencial. Isso porque não há beleza inerente na estrutura de seu roteiro, que segue fórmulas já inventadas há décadas pela TV para nos manter interessados em uma história que é passageira e que apenas nos transporta de uma cena de ação para a próxima.&lt;/p&gt;
&lt;p&gt;O que mantém o interesse nesses inúmeros filmes que são lançados todo ano é justamente as dezenas de trailers, teasers, entrevistas e teorias sobre como será o filme que ainda não foi visto. Há tantas possibilidades já pensadas e repensadas que surge um paradoxo: os que mais acompanham as expectativas da produção são os que mais se revoltam quando alguém lhes diz algo que não foi ainda citado em todo material de divulgação disponibilizado antes da estreia. Você pode dizer tudo o que foi dito pela imprensa para um amigo que se comporta da mesma maneira em relação aos próximos filmes, mas, por favor, não revele aquela reviravolta mortal, ainda que ela seja boba, previsível e completamente esquecida antes do final dos créditos. O que aconteceu com a indústria para produzir filmes em que o prazer racional de assisti-los é tão escasso que a experiência pela experiência acabou se tornando o que menos importa no final das contas? Como cereja do bolo, o clímax da história é visto tão de passagem que os espectadores ainda aguardam por uma cena boba após os créditos, como uma forma de prêmio de consolação por vir ao cinema captar aqueel último fiapo de mistério que restava sobre o filme.&lt;/p&gt;
&lt;p&gt;Para uma geração que consome todos seus filmes antes de realmente vê-lo, o spoiler é uma arma letal. Ele queima esse último fiapo de mistério antes da experiência cinematográfica, sem o qual o filme perde completamente seu valor de mercado, um valor que já não era muita coisa, pois daqui a algumas semanas já é lançado novo arrasa-quarteirões, que hoje em dia está mais para chuta o portão do vizinho. É uma regra de ouro entre o novo público que os dados de uma estreia da semana fiquem em sigilo. Nem que seja por alguns meses após a estreia. Até porque a próxima estreia irá revelar inevitavelmente o desenrolar da história. E é claro que será uma continuação.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/Back-to-back_film_production&#34;&gt;https://en.wikipedia.org/wiki/Back-to-back_film_production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Marvel_Cinematic_Universe&#34;&gt;https://en.wikipedia.org/wiki/Marvel_Cinematic_Universe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

     
        <item>
  <title>Como o Sistema de Estrelas como Nota Funciona</title>
  <link>http://www.caloni.com.br/como-o-sistema-de-estrelas-como-nota-funciona/</link>
  <pubDate>2018-12-15</pubDate>
  
  <guid>http://www.caloni.com.br/como-o-sistema-de-estrelas-como-nota-funciona/</guid>
  <description>&lt;p&gt;Não é a primeira vez que me questionam que apesar de ter escrito no meu blogue muito mal sobre um filme eu tenha dado três estrelas como nota, como se três estrelas fosse admissível apenas para trabalhos minimamente positivos. Bom, é uma questão complicada. Imagine você compactar todo o texto analisando uma obra em apenas um número entre 1 e 5.&lt;/p&gt;
&lt;p&gt;A história das estrelas, ou ranking de filmes, começa em 1928 quando a crítica Irene Thirer decide colocar uma escala de zero a três estrelas na sua coluna sobre filmes do New York Daily News. O primeiro filme que se tem registro de ter sido rankeado dessa forma foi A Entrevista das Cinco (1928).&lt;/p&gt;
&lt;p&gt;De acordo com a própria Thirer, três estrelas significavam &amp;quot;excelente&amp;quot;, duas estrelas &amp;quot;bom&amp;quot; e uma estrela &amp;quot;medíocre&amp;quot;. Quando não havia nenhuma estrela isso significada que o filme é bem ruim. Caso esteja se perguntando, A Entrevista das Cinco recebeu uma estrela. =)&lt;/p&gt;
&lt;p&gt;Mas esse foi apenas o início, que só se popularizou nos anos 50 quando a famosa revista francesa Cahiers du cinéma começa a fazer o mesmo, agora com uma escala de cinco estrelas no máximo e um ponto para acentuar nenhuma estrela. Esse negócio de não atribuir nenhuma nota, zerar mesmo, é um detalhe que a Wikipedia#Films) ressalta exageradamente, pois cada crítico parece ter uma opinião bem diversa do que seja um filme muito ruim.&lt;/p&gt;
&lt;p&gt;A própria questão de rankear filmes já dividiu e divide críticos e jornais, pois o argumento dos que são contra é no mínimo louvável: não se resume uma análise em um sistema de notas. O que acontece na prática, ainda mais na correria do dia-a-dia, é que as pessoas frequentemente olham mais a nota e se esquecem de ler o texto na hora de contra-argumentar, o que resume toda a questão em uma guerrinha de estrelas, que, vale lembrar, não diz absolutamente nada sobre o filme em si.&lt;/p&gt;
&lt;p&gt;Eu tendo a concordar com isso não apenas em relação a filmes, mas a vinhos também. Talvez vinhos até mais. Construído em uma junção de tempo, sorte, terreno, clima e um controle não-tão absoluto do enólogo, as vinícolas estão sempre tentando criar diferentes formas de expressar a arte de fazer vinhos. Os sistemas de ranking ignoram a diversidade de aromas e sabores e categoriza tudo através de um número de 0 a 100, fazendo com que todo o mercado de vinhos se concentre mais em atender o sistema (para vender mais) e menos o consumidor final (que pode muito bem gostar de vinhos com pontuação baixa por alguma particularidade não capturada por um número).&lt;/p&gt;
&lt;p&gt;Mas voltando aos filmes. O melhor artigo que conheço sobre rankings é do Roger Ebert (&amp;quot;You Give Out Too Many Stars&amp;quot;), onde ele cita o Pequeno Homem do San Francisco Chronicle como o melhor sistema de ranking já criado. Ele consistia em um homemzinho sentado na poltrona do cinema. Dependendo da nota o pequeno homem estaria empolgado na poltrona, prestando atenção, aplaudindo ou... dormindo!&lt;/p&gt;
&lt;p&gt;O que interessa-nos aqui é a posição do meio, as &amp;quot;três estrelas&amp;quot;, que é um homenzinho sentado e prestando atenção no filme. Como nesse sistema de rankings eles também não tinham meia-estrelas, o homenzinho prestando atenção é um range, que vai desde quase-OK-mas-nem-tanto até quase-não-OK-mas-nem-tanto. Ou seja, pode ser tanto um filme que é quase ruim ou um que é quase bom. O que importa é que é possível que muitos gostem dele e muitos desgostem, o que é perfeitamente possível, pois gosto é subjetivo. E as estrelas, assim como o texto, vale lembrar, é a visão subjetiva de apenas uma pessoa. A explicação do Pequeno Homem também leva em conta que se uma pessoa gosta do gênero de um filme três estrelas ela possivelmente vai gostar desse filme; já alguém que não gosta do gênero não vai ver nada de mais.&lt;/p&gt;
&lt;p&gt;Ao finalizar o texto Ebert se lembra de um fato importantíssimo sobre a nota do meio: as pessoas não gostam. Elas precisam que o polegar esteja virado para cima ou para baixo, mas nunca para o lado. Essa indecisão denota que o objetivo da estrela é basicamente como guia de consumo ou como uma forma não-racional de se conectar com a opinião do crítico. Bom, a resposta para isso é simples: cada pessoas terá seu sistema de notas, e as notas vão refletir esse sistema e não o dos outros. Por isso uma estrela pairando abaixo do título de um filme será sempre, na melhor das hipóteses, apenas um chute educado sobre o valor do tempo para se ver um filme.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Argentina vs França e o Fim da Geração dos Autistas</title>
  <link>http://www.caloni.com.br/argentina-franca-autismo/</link>
  <pubDate>2018-07-01</pubDate>
  
  <guid>http://www.caloni.com.br/argentina-franca-autismo/</guid>
  <description>&lt;p&gt;A tecnologia e o profissionalismo chegaram na copa em um nível nunca antes visto. Se compararmos com o que o atacante que fez o primeiro gol na primeira copa, o francês Lucien Laurent, notamos o abismo entre o ontem e o hoje do Planeta Futebol:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Estávamos jogando contra o México e estava nevando, já que era inverno no hemisfério sul. Um dos meus companheiros de equipe recebeu a bola e eu segui seu caminho com cuidado, finalizando com meu pé direito. Todos ficaram satisfeitos, mas não houve uma grande comemoração - ninguém percebeu que estavam fazendo história. Um aperto de mão rápido e nós voltamos ao jogo. E nenhum bônus também, todos nós éramos amadores naquela época, até o fim.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mas houve uma transição. Ela foi lenta, passaram grandes gerações pelo caminho (Brasil que o diga), e grandes paixões acabaram levantando a taça ou chegando muito próxima dela. Não importa. O futebol ganha pelo que se passa no gramado, e as seleções apenas acumulam história em seus títulos e sub-títulos.&lt;/p&gt;
&lt;p&gt;Hoje é o dia que termina esta geração de autistas no futebol. Messi e Cristiano Ronaldo, dentre outros, pertencem a uma geração super auto-centrada, mas nada criativa dentro de um esporte coletivo. Estas pessoas não parecem viver, mas tecnicamente são tão impecáveis que embalam os torcedores não-autistas, com a resposta emocional de robôs empenhados em trazer o máximo de... do quê, mesmo?&lt;/p&gt;
&lt;p&gt;A Argentina é um time de sofredores, e Diego Maradona, gordo e acabado, é o símbolo do segundo país do futebol do hemisfério. Quando a câmera nos mostra dieguito é uma cena deplorável. Quando a câmera nos mostra o melhor atacante atual do seu país, Messi, a cena é daquele jogo de vídeo-game, Fifa 2018. O jogador de carne-e-osso nunca esteve tão próximo de sua versão robotizada.&lt;/p&gt;
&lt;p&gt;E aqui a máquina perde o equilíbro. Tanto Argentina quanto Portugal estruturaram suas seleções baseadas no fato que o gênio marcador de seus jogadores-robôs resolveria qualquer impasse. E deram um salto para a mediocridade. Mais ou menos como está acontecendo com as nações, a economia, as finanças, entregando decisões sobre a pensão de viúvas nas mãos de psicopatas capitalistas especulando bilhões de um lado a outro do globo. Se tudo der errado, basta eles formatarem. Não o computador, o cérebro.&lt;/p&gt;
&lt;p&gt;O futebol da França e do Uruguai, por outro lado, não possuem exatamente um cérebro para coordenar a equipe. Eles são um coração que bombeia garra de ponta a ponta do campo. E a pressão parece que sempre acaba mais forte no lado do ataque, bombeando e bombardeando a soma de seus talentos rede adentro. Até a França, européia, pode se vangloriar de um futebol jovem e romântico. Talvez seja a Marselhesa tocada no início de cada jogo. Vai saber... O que sabemos é que a seleção da França é jovem, é mista, e não parece disposta a diminuir sua muralha. Bom para o futebol.&lt;/p&gt;
&lt;p&gt;Já outro país do continente, Portugal, é outra história. Bom para os Uruguaios, que festejam junto da França. Dois países muito diferentes, de mundos distintos, unidos pelo bem do coletivo. E conseguem. Mais do que a Alemanha de quatro anos atrás. O jogo segue, mas a paixão pelo futebol deu uma respirada de alívio em quatro horas inesquecíveis deste sábado de férias. Já o autismo...&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>A Pior e Mais Ridícula Crítica de Todos os Tempos</title>
  <link>http://www.caloni.com.br/pauline-kael-a-pior-e-mais-ridicula-critica/</link>
  <pubDate>2018-05-07</pubDate>
  
  <guid>http://www.caloni.com.br/pauline-kael-a-pior-e-mais-ridicula-critica/</guid>
  <description>&lt;p&gt;Estava lendo um dos livros de Pauline Kael, uma das poucas coletâneas disponíveis dessa escritora que é considerada a melhor da história do Cinema, 5001 Nights at the Movies. Nesse livro em questão há resenhas rápidas que eram publicadas nos rodapés do jornal onde Kael escrevia. São texto curtos, de um parágrafo no máximo, mas que fluem, embora condensados em uma ou duas impressões no máximo sobre o filme analisado. Apesar de ser divertido de ler, falta textura, conteúdo, nesses recortes. Portanto procurei por esta textura que tanto falam a respeito dos textos de Kael pela internet. Por um bom tempo me perguntei onde estariam esses textos completos e mais densos dessa escritora, e por que eles não viraram relevantes coletâneas para a análise da crítica cinematográfica. E no meio dessas minhas pesquisas eis que surge o texto de Alex Sheremet.&lt;/p&gt;
&lt;p&gt;Sheremet esmiuça o contexto circunstancial em que Kael se tornou relevante não apenas para o Cinema, mas para todo tipo de crítica. Em Pauline Kael: one of film&#39;s worst and most ridiculous critics o escritor analisa como atualmente diversos críticos uma vez considerados importantes autoridades no assunto estão sendo desbancados por uma análise minuciosa de seu conteúdo. Sheremet tem um bom motivo para fazer esta análise. Ele é o autor de Woody Allen: Reel To Real, um livro que analisa a cinematografia de Allen que Pauline Kael tanto fazia questão de desbancar. No entanto, indo a fundo nos textos de Kael, Sheremet consegue de lá escavar a irrelevâncias das críticas de Kael ao cineasta nova-iorquino.&lt;/p&gt;
&lt;p&gt;No texto em que critica outro autor, Jonathan Rosenbaum, ele diz o seguinte: &amp;quot;The problem, however, is not that Rosenbaum is negative or dismissive, but that, like Pauline Kael before him, he rarely offers any real evidence for his claims  many of his reviews are a mere four to five sentences long  and when he does, they simply dont align with the assertions made. So, for a purportedly comprehensive essay titled &amp;quot;Some Notes Toward a Devaluation of Woody Allen&amp;quot;, there is remarkably little evaluation, to start, and even less Woody Allen, the essays purported subject.&amp;quot;&lt;/p&gt;
&lt;p&gt;E é exatamente isso que vemos em 5000 Nights. São textos que acertam algumas vezes sobre o filme em questão, e erra tantas outras. Assim como no Cinema, onde o espectador precisa ajudar o filme a criar textura, os textos de Kael precisam que o leitor use a imaginação para inserir as percepções da escritora no filme de fato. Mas isso nem sempre funciona. Sheremet também comenta que ele não foi o primeiro crítico de Kael que surgiu. Contemporâneo a ela temos Renata Adler, sua maior crítica, e que Alex comenta que ela &amp;quot;não bateu forte em Kael quanto poderia&amp;quot;.&lt;/p&gt;
&lt;p&gt;Enfim, o texto é longo e minucioso e não cabe aqui abri-lo. É um primeiro passo interessante nesse mundo da &amp;quot;crítica da crítica&amp;quot;, pois abre um terreno poderoso e frutífero na nossa era da internet: onde ninguém, absolutamente ninguém, está a salvo de ser duramente e propriamente criticado.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Matrix: Ghost in The Shell</title>
  <link>http://www.caloni.com.br/matrix-ghost-in-the-shell/</link>
  <pubDate>2017-09-18</pubDate>
  
  <guid>http://www.caloni.com.br/matrix-ghost-in-the-shell/</guid>
  <description>&lt;p&gt;De todas as teorias malucas criadas em torno da trilogia das Irmãs Wachowski, acredito que esta que tenho para lhes falar supera em simplicidade e elegância. Por isso mesmo acredito que esta seria a solução empregada por elas caso quisessem deixar toda a trama às claras. Felizmente, não quiseram, o que deu vazão para um esoterismo e obscurantismo que torna o conjunto de três filmes indecifrável. Mas, fala sério. Sou programador. Depois de Ghost in the Shell as coisas têm se tornado mais claras ainda. Quer ver como toda essa fábula é explicada por ela mesma?&lt;/p&gt;
&lt;p&gt;Preciso dizer que Spoilers irão ser enviados pelas máquinas nos próximos parágrafos?&lt;/p&gt;
&lt;p&gt;A primeira e principal pista para entendermos o que se passa em Matrix Reloaded é o discurso final do Arquiteto. Ele explica sobre o código malicioso que é colocado de propósito na Matrix para que haja um movimento de revolta dos humanos, uma profecia, e que tudo isso se concentre na figura do Escolhido. É o Escolhido que carrega este código, e já houve vários deles. Neo é apenas mais um, com sutis diferenças que apontarão para uma mudança drástica no caminho delineado pelo personagem de Helmut Bakaitis (que, claro, também é um programa de computador).&lt;/p&gt;
&lt;p&gt;No entando, como este discurso é muito complexo, cheio de detalhes feitos para confundir o espectador, peço que preste atenção não a ele, mas à fuga do Agente Smith da realidade virtual para a qual foi criado. Ele vira um vírus e uma de suas cópias escapa para o cérebro de um dos humanos de Zion. A partir daí é ele que toma controle desse humano e as máquinas o respeitam. Ele é um agente infiltrado, apesar de ser um bug. Ele não é herói nem vilão, mas um problema a ser resolvido por ambos os lados.&lt;/p&gt;
&lt;p&gt;O que ocorre no final de Reloaded e em todo Revolutions é que Neo aparentemente consegue controlar as máquinas do lado de fora da Matrix e também enxergá-las, apesar de ter ficado cego. Isso não deveria ser uma surpresa se nos lembrássemos que, uma vez que vimos que é possível a programas como Smith se infiltrar no cérebro de humanos e assim controlá-los direto na realidade, nada mais justo que os humanos presos no gigante casulo estejam à mercê do mesmo procedimento.&lt;/p&gt;
&lt;p&gt;E é exatamente esse o procedimento de injetar código que o Arquiteto se refere quando se dirige a Neo.&lt;/p&gt;
&lt;p&gt;Imaginemos, então, que um processo semelhante foi feito em Neo. Código de um programa da Matrix foi injetado nele, assim como o programa Smith foi injetado no outro humano. Porém, não totalmente, mas apenas uma parte. Neo manteve sua consciência. Não precisamos tirar isso dele. Porém, ele também ganhou a capacidade de mudar as regras físicas da Matrix e de controlar as máquinas pelo lado de fora (além de enxergá-las sem precisar de olhos humanos). Tudo isso graças a código de computador inserido em seu cérebro.&lt;/p&gt;
&lt;p&gt;Dessa forma, toda a fábula de realidade virtual vira uma maneira do romance Ghost in The Shell de se expressar por caminhos mais obscuros. Humanos são escravizados por máquinas, que possuem Inteligência Artificial, e que descobre que conseguem realizar elas também patchs de atualização no cérebro de humanos, que viram parte humano, parte máquina. Ou até totalmente máquina.&lt;/p&gt;
&lt;p&gt;Se bem que o que eu chamo aqui de máquina é simplesmente código que não foi gerado por DNA. Tanto o cérebro humano quanto a IA das máquinas é o mesmo processo. Todos estão conectados. E é aí que reside a beleza da trilogia. Ela não tem uma conclusão correta, nem interpretações para a trama fechadas. Estamos falando sobre consciência e inteligência, mas não apenas de humanos. É uma guerra de consciências, e entender que máquinas com IA somos como nós é vital para entender como Matrix ainda continua milênios à frente do que nossa vã filosofia tecnológica tenta imaginar para o nosso futuro.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Escopo Fechado: Receita De Fracasso</title>
  <link>http://www.caloni.com.br/escopo-fechado-receita-de-fracasso/</link>
  <pubDate>2017-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/escopo-fechado-receita-de-fracasso/</guid>
  <description>&lt;p&gt;Quando questionado por clientes se haveria uma forma de fechar o escopo de um projeto maior que 20 horas, dessa forma limitando a interação em uma entrega única já com os requisitos definidos por ele, geralmente nossa resposta é: &amp;quot;isso nunca vai funcionar; ou se funcionar, vai sair bem caro&amp;quot;.&lt;/p&gt;
&lt;p&gt;Sinto muito, mas não trabalhamos dessa forma. Já tivemos várias experiências ruins no passado em que o cliente jurava de pé junto que o escopo estava fechado e detalhado no máximo, mas na hora de desenvolver a história foi muito diferente. Isso não é falha de projeto, é como desenvolvimento de software funciona.&lt;/p&gt;
&lt;p&gt;Agora, se você, como cliente, preferir trabalhar em um modelo mais tradicional, é possível sim levantar todos os requisitos. Mas imagine o drawback: já seriam cobradas as horas do levantamento como horas de trabalho (sem nada entregue), sairia mais caro pois demoraria o dobro do tempo e eu te asseguro que cobraríamos o triplo de horas, para nossa segurança (já que o cliente também quer ter a segurança do lado dele).&lt;/p&gt;
&lt;p&gt;O que funciona melhor, de acordo com nossa experiência, acaba sendo uma combinação de elementos da metodologia ágil: estimamos o backlog de vocês e com isso as entregas semanais (ou uma frequência desejada, mas com tempo curto). Haverá uma interação mínima entre o gerente de projeto de nosso lado e um ponto focal do lado de vocês para verificar o progresso e modificar o backlog se necessário.&lt;/p&gt;
&lt;p&gt;O risco que os clientes geralmente imaginam do escopo aberto será diluído conforme o desenvolvimento avança, permitindo tomar decisões muito rapidamente antes que a entrega vá por água abaixo. Um escopo fechado é um risco para ambos os lados e que não compensa para nenhum deles. Essa foi a nossa conclusão depois de muitos projetos fracassados. Portanto, se você pretende fracassar com seu projeto, segue a dica: use escopo fechado.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Física Quântica para Filósofos</title>
  <link>http://www.caloni.com.br/fisica-quantica-para-filosofos/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/fisica-quantica-para-filosofos/</guid>
  <description>&lt;p&gt;O filósofo Michael Huemer explica o mecanismo de manipulação e medição do spin dos elétrons. Há infinitos spins, sendo que ele se foca no que ele chama x-spin e y-spin, spins separados em 90 graus.&lt;/p&gt;
&lt;p&gt;A primeira noção é que ao ser colocado em contato com um divisor magnético o elétron pode seguir duas direções distintas e diametralmente opostas à inclinação do dispositivo. Não há como saber de antemão qual sentido o elétron irá seguir.&lt;/p&gt;
&lt;p&gt;Porém, após sabermos o sentido de um elétron, o mesmo teste feito para esse mesmo elétron irá gerar o mesmo resultado. Ou seja, ele irá seguir sempre pelo mesmo sentido.&lt;/p&gt;
&lt;p&gt;Ao fazer, contudo, o mesmo teste em outro ângulo -- digamos, 90 graus de inclinação do teste inicial, ou qualquer um que desejar -- o elétron não mais terá seu sentido previsto para o teste original. De alguma forma o segundo teste altera o estado atingido pelo primeiro.&lt;/p&gt;
&lt;p&gt;É feito então um teste conjunto, onde uma &amp;quot;caixa&amp;quot; com esse aparato no ângulo que chamaremos x-spin divide os elétrons que saem nos dois sentidos opostos e redireciona-os para a mesma entrada de outra caixa que faz o teste para outro ângulo, que iremos chamar de y-spin.&lt;/p&gt;
&lt;p&gt;O curioso aqui é que enquanto as duas saídas estão conectadas e não possuem nenhuma forma de medir para onde o elétron saiu pela primeira caixa, o estado de y-spin, ou seja, a segunda caixa, é determinada com certeza. Seu estado nunca é alterado. Se todos os elétrons estiverem saindo por apenas um sentido y-spin no começo do experimento, todos continuarão saindo pelo mesmo sentido após passar por ambas as caixas.&lt;/p&gt;
&lt;p&gt;Mais curioso é quando se resolve bloquear uma das saídas da primeira caixa, a x-spin, ou medir o estado de uma de suas saídas. Feito isso, qualquer um dos dois e apenas um, o estado de y-spin é alterado e não se sabe mais qual será a saída da segunda caixa.&lt;/p&gt;
&lt;p&gt;Até aqui há resultados estranhos para esse experimento, mas isso não contradiz a realidade ou a lógica clássica, já que os experimentos são realizados em tempos distintos, podendo ter resultados diferentes.&lt;/p&gt;
&lt;p&gt;A contradição tem que existir na forma de interpretação desses fenômenos, que é o que acontece através da CI, ou Copenhagen Interpretation, a forma oficial mais usada para interpretar os fenômenos quânticos.&lt;/p&gt;
&lt;p&gt;Ela afirma não que o elétron está em um dos dois caminhos desse experimento, mas que ele está em um dos dois e não está em nenhum deles ao mesmo tempo. Isso sim é contraditório.&lt;/p&gt;
&lt;p&gt;No entanto, toda a mecânica quântica, a série de cálculos precisos em uma matemática criada para resolver a trajetória de elétrons nesses experimentos, foi criada e está sendo utilizada sob essa ótica. Ainda que ela consiga prever com precisão os movimentos dos elétrons, sua interpretação é contraditória sob a ótica da lógica clássica.&lt;/p&gt;
&lt;p&gt;Além disso, a CI confere um aspecto diferente de todas as partículas da realidade comparadas com as partículas que formam os medidores de elétrons e nosso próprio corpo, ou olhos humanos, o que é um tanto incômodo em uma teoria física.&lt;/p&gt;
&lt;p&gt;Há uma interpretação mais simples onde faltam ainda lacunas criada pelo físico Niehs Bohr. Ele analisa esses fenômenos pela dualidade partícula/onda e cria uma abstração matemática para explicar como o elétron tem seu caminho influenciado pelas medidas feitas e pelo bloqueio do caminho de uma das ondas do que ele chama de &amp;quot;espaço configuracional&amp;quot;, uma abstração que divide a onda associada à partícula em duas (ainda que a partícula seja apenas uma).&lt;/p&gt;
&lt;p&gt;Ainda há de nascer uma teoria que explique melhor os efeitos descobertos na física quântica, mas por enquanto é necessário um pouco de ceticismo sobre qualquer explicação atual, principalmente a que precisa negar a própria lógica que tornou possível chegar às conclusões dos experimentos e da própria ciência como um todo.&lt;/p&gt;
&lt;p&gt;Original: &lt;a href=&#34;http://www.owl232.net/qm.htm&#34;&gt;http://www.owl232.net/qm.htm&lt;/a&gt;&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Programa, Mãe Foca!</title>
  <link>http://www.caloni.com.br/programa-mae-foca/</link>
  <pubDate>2016-08-30</pubDate>
  
  <guid>http://www.caloni.com.br/programa-mae-foca/</guid>
  <description>&lt;p&gt;A história das metodologias de desenvolvimento de software segue mais ou menos as oscilações naturais do próprio software: caminha em direção ao caos (e as sessões de refactory buscam desacelerar essa inevitável tendência). Assim como aquela classe que parecia perfeita assim que foi feita, uma metodologia irá se desmanchar frente à lei da mediocridade. Você não consegue software bom com programadores ruins seguindo a melhor metodologia do planeta.&lt;/p&gt;
&lt;p&gt;Então a solução nunca parece ser a metologia, já que programadores ruins não melhorarão seguindo qualquer metologia que seja.&lt;/p&gt;
&lt;p&gt;Porém, existe um método infalível. Um método que transforma os programadores mais UML do mundo em fazedores de código inquebrável. Programadores acostumados a 15 horas de reunião semanal fritando o processador de produtividade, esbanjando atalhos no Vim, coordenando threads como um maestro que coordena uma orquestra sinfônica tocando a trilha sonora da sua vida.&lt;/p&gt;
&lt;p&gt;Esse método chama-se: Programa, Filho da PATA&lt;/p&gt;
&lt;p&gt;Ou, do inglês, PMF.&lt;/p&gt;
&lt;p&gt;E o que o PMF tem a oferecer? Esse cara parece ter o esboço da resposta:&lt;/p&gt;
&lt;p&gt;E como ele pretende fazer isso? Bom, existe um algoritmo, é claro:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Escreva uma lista da droga que você tem que fazer, usando software escrito por algum programador filho da pata&lt;/li&gt;
&lt;li&gt;Faça algumas dessas drogas, novamente usando &amp;quot;programação, filho da pata&lt;/li&gt;
&lt;li&gt;Teste se essa droga está boa, e se não estiver então conserte com programação, filho da pata&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;E se você está preocupado com o foco muito no código, e não nos resultados para seu cliente, existe até um &amp;quot;capítulo&amp;quot; sobre gerência, a &amp;quot;Gerência, Coisão&amp;quot;:&lt;/p&gt;
&lt;p&gt;Para fazer Gerência, Coisão, você deve fazer o seguinte:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ache o que os clientes querem perguntando para eles.&lt;/li&gt;
&lt;li&gt;Arrume a droga que os Programadores Filhos da PATA precisam fazer.&lt;/li&gt;
&lt;li&gt;Fale para os Programadores Filhos da PATA quando as drogas que eles fizeram não está boa o suficiente para vender.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simples e conciso. Acho que até a gerência deve conseguir se lembrar desses três passos.&lt;/p&gt;
&lt;p&gt;Não há nada de errado em usar outras metologias em cima da PMF, mas há tudo de errado em substituir uma coisa por outra. A PMF é primordial para terminar alguma coisa. É o suprasumo da eficiência. Com ela todas as coisas eventualmente são solucionadas. Usar apenas a metologia do seu coração sem aplicar PMF não irá entregar nada.&lt;/p&gt;
&lt;p&gt;E por mais curioso que seja, há de fato uma tendência nas pessoas de enxergar a solução de todos os seus problemas não fazendo absolutamente nada. Apenas preenchendo cartões em um dashboard. Não é bem por aí. Claro que há uma parcela de nada que pode ajudar a organizar a bagunça que é uma equipe de programadores batucando código, mas esse nada nunca pode atrapalhar os... programadores batucando código!&lt;/p&gt;
&lt;p&gt;Afinal, é com código que se constrói algo, certo? Seja aumentando, modificando ou apagando código. Seja transformando código em um passo-a-passo em um txt. Ou em um papel de pão. Código é apenas uma abstração de resolução de problemas. O quão bem você resolver o problema é o que conta, não a sua linguagem de programação do coração. Muitos problemas podem ser solucionados apenas com papel e caneta (ou lápis). Linguagens de programação, até certo ponto, podem virar também metodologias mágicas que prometem entregar soluções mágicas sem dor.&lt;/p&gt;
&lt;p&gt;Mas adivinha, só? Seu cliente está cantando e andando sobre qual é a linguagem, a ferramenta, o tamanho da fonte. Ele só quer seu problema resolvido.&lt;/p&gt;
&lt;p&gt;Então o jeito é: &amp;quot;Puroguramingu, Mazaafakkaa!&amp;quot; =)&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Se não está funcionando direito, mexa!</title>
  <link>http://www.caloni.com.br/se-nao-esta-funcionando-direito-mexa/</link>
  <pubDate>2016-08-17</pubDate>
  
  <guid>http://www.caloni.com.br/se-nao-esta-funcionando-direito-mexa/</guid>
  <description>&lt;p&gt;Uma breve história de um chuveiro: O de casa às vezes inventa de dar choque. Isso desde que me mudei (uns 2 anos e meio). Não são choques brabos, daqueles de fazer a pessoa tremer. É apenas uma quase estática ao tocar no registro para abrir ou fechar a água. No entanto, já é motivo para pessoas mais sensíveis, como minha sobrinha de oito anos, se recusar a encostar no registro. Frecura.&lt;/p&gt;
&lt;p&gt;(Pensando bem, quando eu era criança, tinha até medo de ficar no mesmo quarto onde havia fiação desencapada, mesmo sem energia.)&lt;/p&gt;
&lt;p&gt;De uma semana pra cá, agora o chuveiro tem &amp;quot;aprontado&amp;quot; outra: ele desliga. Do nada. Não há nada de errado com a resistência, nem com os fios, e depois descobri, nem com a energia (não tinha um testador de tensão antes). Aliás, de vez em quando, ele liga de novo. Quando fui reclamar com o zelador, minutos atrás tentando fazê-lo ligar, adivinha quem ficou com cara de bobo demonstrando como o chuveiro estava funcionando perfeitamente?&lt;/p&gt;
&lt;p&gt;No entanto, ele me deu uma &amp;quot;dica&amp;quot;: é o disjuntor. Pensei comigo mesmo: &amp;quot;agora os choques fazem sentido; ele desligar (e ligar) do nada faz sentido; a vida faz sentido!&amp;quot;.&lt;/p&gt;
&lt;p&gt;Dito e feito. No dia seguinte fui comprar um novo. Mesmo modelo, tudo certinho (aproveitei e comprei o tal testador de tensão). Quando fui retirar o velho, notei que havia um fio desencapado muito próximo de uma das entradas de energia do dito cujo.&lt;/p&gt;
&lt;p&gt;É nessa entrada que se conecta um pino de onde vem a energia da central. Do lado deste pino havia um fio, como quem não quer nada, &amp;quot;passeando&amp;quot; bem próximo do pino. Notei também que havia outro do lado, no disjuntor do microondas.&lt;/p&gt;
&lt;p&gt;O apartamento onde estou é novo e sou o primeiro morador. Recebi com garantia e tudo. Para mim não fazia sentido que houvesse algo de errado com as instalações elétricas, principalmente porque já habitava o local há mais de dois anos.&lt;/p&gt;
&lt;p&gt;Mas não é que estava errado, mesmo?&lt;/p&gt;
&lt;p&gt;Depois de algumas horas sofrendo em tentar entender a lógica por trás das conexões -- pois obviamente eu troquei o disjuntor e nada mudou -- descobri que o parafuso que faz o aperto do pino de energia no disjuntor original estava meio frouxo, e às vezes ele não empurrava a barra usada para fixar o pino, ficando o pino frouxo. Imediatamente (tipo duas horas depois, já escurecendo e eu sem energia a não ser a luz do notebook sem internet) deduzo que quando o eletricista foi fazer a instalação, ou na última manutenção feita, esse fio desencapado muito próximo do pino de tensão deve ter ficado de fora da conexão do disjuntor, mas próximo o suficiente para coseguir uma conexão eventual. Muito provavelmente este fio é o terra, e a falta dele deve ter originado os choques eventuais, além de agora, por algum desarranjo na posição capenga em que estava, ele começou a se separar do pino/disjuntor e gerar todo esse rebuliço.&lt;/p&gt;
&lt;p&gt;Então eu finalmente tomo coragem, decido que a instalação está errada, e coloco o fio desencapado junto do pino da corrente (até porque agora o disjuntor novo não tinha esse problema do parafuso, facilitando a operação). E ligo a central (esperando uma explosão, tipo aquelas de filmes de ação).&lt;/p&gt;
&lt;p&gt;E tudo funciona!&lt;/p&gt;
&lt;p&gt;A essa altura do campeonato, se você ainda está lendo isso, deve estar se perguntando o que tudo isso tem a ver com desenvolvimento de software. Ora, achei que a analogia fosse clara. Quando vamos mexer em código de terceiros, há uma mania muito sadia, mas algumas vezes traiçoeira, de acreditar que tudo o que está ali está obviamente funcionando, já que usuários estão usando e provavelmente a equipe original passou pelos perrengues necessários para colocar tudo nos eixos.&lt;/p&gt;
&lt;p&gt;Certo? Certo?&lt;/p&gt;
&lt;p&gt;Na maioria dos casos, certo. Porém, todo software tem bugs. E quando mexemos em código dos outros, em toda nossa humildade, nunca esperamos que haja um problema grave no comportamento principal do programa (ex: o Excel não fazer um cálculo direito). Talvez pela falsa impressão que o simples passar do tempo já valida qualquer possível bug escondido (se esquecendo da história do BSD e seu bug de 25 anos). Ledo engano. É aí que o bug fica difícil de ser corrigido, pois não há mais programadores desconfiadinhos do lado do código, e a nova leva sabe que ele está rodando faz tempo, então mais respeito...&lt;/p&gt;
&lt;p&gt;A mensagem é clara. Antes de tirar qualquer conclusão precipitada a respeito da suposta qualidade do código que irá mexer (mesmo que esse software rode em milhões de máquinas por milhões de anos), faça um check-list de que tudo o que está vendo faz realmente sentido. Se não fizer, dobre sua atenção e valide suas premissas. Se ainda assim não fizer sentido, talvez seja hora de fazer alguma coisa. Do contrário, esse código corre o sério risco de ter aqueles comentários &amp;quot;não mexa aqui ou para de funcionar&amp;quot;, e ninguém mais sabe por quê.&lt;/p&gt;
&lt;p&gt;E você corre o risco de levar choques sem saber por quê.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Não Atualize seu Sistema</title>
  <link>http://www.caloni.com.br/nao-atualize-seu-sistema/</link>
  <pubDate>2016-01-28</pubDate>
  
  <guid>http://www.caloni.com.br/nao-atualize-seu-sistema/</guid>
  <description>&lt;p&gt;De quem é o interesse que você atualize constantemente seu sistema? Muito provavelmente não é seu. Sistemas -- operacionais ou não -- costumam ser escritos por programadores, que não fogem muito do que você conhece como ciclo de desenvolvimento, o que quer dizer que o sistema que atualiza sempre estará sempre testando suas novas features no seu dispositivo (computador, celular, tablet), verificando as mais nova correções e, claro, lhe fornecendo o que há de mais novo e mais difícil de contornar no que diz respeito a bugs, já que quase não haverá páginas no Stack Overflow te dizendo o que fazer sobre o bug que foi instalado em todas as máquinas do mundo há cinco minutos. Muito menos páginas descrevendo o SEU problema específico, com o SEU driver específico e hardware específico. Sim, Windows, eu estou falando com você.&lt;/p&gt;
&lt;p&gt;Porém, quando se trata de atualizações na velocidade do commit, a Microsoft não é um monopólio. Praticamente todos os apps, desktop ou web, precisam atualizar constantemente, freneticamente. Todos eles, sem exceção, nunca perguntam se você gostaria de fazer isso, ou se perguntam continuarão te enchendo o saco por toda a eternidade. Nenhum se preocupa em retornar ao estado anterior quando as coisas vão mal, o que triplicaria o problema de atualização global para eles. A Google nunca sai do beta, e por um bom motivo: no final do Sprint quinzenal, lá está o código novo em folha rodando na máquina do usuário. Um código que passou por milhões de testes unitários, bilhões de testes caixa-preta, menos o seu teste específico, coisa mínima, que irá lhe deixar um software capenga até (talvez) o próximo Update. Você não precisa daquela opção do menu, certo? Basta usar só mais um app adicional para isso.&lt;/p&gt;
&lt;p&gt;Não estamos falando de programadores medíocres ou sistemas legados. Todos sabemos que, por mais habilidosa a equipe e por mais bem estruturado o código, o estado natural de um software é a sua complexidade crescente engolir aos poucos seu funcionamento, até o próximo refactory que irá começar tudo de novo. É um ciclo sem fim. Porém, antes havia um tempo de respiro entre uma correção bem sucedida e a próxima bomba. Hoje você vai dormir sem saber se sua máquina vai bootar amanhã. Não há mais o prazer de usar uma nova versão e constatar, de fato, que ela é melhor que a anterior. A mais nova sempre será pior, justamente pela falta de cicatrizes de guerra para o código novo que está nascendo sem passar algum tempo sendo lustrado.&lt;/p&gt;
&lt;p&gt;O software não é mais versionado. Pelo menos não para o usuário. Passamos por tantas semi-versões diferentes que mesmo que mude o Major em algum momento, já estamos desgastados por todos os beta tests que fomos obrigados a fazer.&lt;/p&gt;
&lt;p&gt;E ainda por cima o novo modelo de precificação acha que está lhe fazendo um favor em entregar uma versão quentinha toda sexta-feira e lhe cobra um valor mensal. Para sempre. E nunca a satisfação de usar um software no &amp;quot;estado da arte&amp;quot;. Usuários de apps já se acostumaram a conviver com o estado do caos.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>A resolução do bitcoin</title>
  <link>http://www.caloni.com.br/a-resolucao-do-bitcoin/</link>
  <pubDate>2016-01-18</pubDate>
  
  <guid>http://www.caloni.com.br/a-resolucao-do-bitcoin/</guid>
  <description>&lt;p&gt;Recentemente está havendo fuxicos sobre o último texto de Mike Hearn, um dos desenvolvedores do projeto &amp;quot;Bitcoin Core&amp;quot;, que desenha o comportamento da blockchain e acessórios. Nele Mike, que está sendo já há um tempo crítico das mudanças que tem ocorrido no projeto (incluindo um fork pra lá de controverso), pondera sobre o que pode ser o início do fim do experimento bitcoin, graças perifericamente à mudança mais estúpida já feita talvez no projeto, o RBF (replace by fee), que distorce completamente a visão original do paper do Satoshi, criador do Bitcoin, mas principalmente ao já conhecido controle massivo dos servidores atrás do Grande Firewall da China. O detalhe é que nem um nem outro acontecimento deveria se tornar decisivo para o futuro do Bitcoin, cujo teor é ser descentralizado &amp;quot;by design&amp;quot;. Porém, quando as questões técnicas caem no colo dos humanos, eles tendem como primatas a jogar merda para tudo que é bom e moral.&lt;/p&gt;
&lt;p&gt;Meus amigos já sabem que considero a criação de moedas digitais um próximo passo prá lá de grande em direção a um mundo mais justo e livre, principalmente das amarras de um sistema jurássico de controle coercitivo de indivíduos chamado Estado ou governo. Falo especificamente do bitcoin, o mais famoso e o mais popular das moedas digitais. Portanto, não deixa de ser um baque entender como esses projetos poderão sucumbir mais cedo ou mais tarde ao mundo real.&lt;/p&gt;
&lt;p&gt;De qualquer forma, como costumo dizer, serão anos interessantes no reino das criptomoedas e na economia em geral. Com isso, não quero dizer necessariamente que elas irão dominar o sistema financeiro e em breve veremos o fim do dinheiro estatal. Pode querer dizer isso, o que seria ótimo. No entanto, pode também querer dizer, como estamos presenciando hoje, que teremos dados mais concretos dos motivos por trás de por que moedas digitais são impossíveis de escalar no nível tecnológico atual. O mais provável IMHO é que no futuro vejamos algo no meio entre esses dois extremos. Mas não exatamente no meio =)&lt;/p&gt;
&lt;p&gt;Por enquanto, resta seguir se informando sobre como o projeto do bitcoin vai evoluindo, e como as moedas alternativas, criadas ou a ser criadas, vão se adaptando a essas notícias. Uma boa fonte de conhecimento sempre é o Hacker News, que contém os links direto ao ponto e os comentários de pessoas geralmente com algo a acrescentar. Diferente de mim, mero curioso de plantão.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Como ser um hacker</title>
  <link>http://www.caloni.com.br/como-ser-um-hacker/</link>
  <pubDate>2015-11-18</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-hacker/</guid>
  <description>&lt;p&gt;Talvez as pessoas estejam com preguiça de ler. Talvez estejam apenas inundadas por tanta informação que temos hoje. Talvez seja apenas falta de foco pelas interrupções consecutivas de novos &amp;quot;espertofones&amp;quot; ou nossas redes sociais viciantes, pois oferecem muito a troco de nada.&lt;/p&gt;
&lt;p&gt;O fato é: se você precisa perguntar para alguém (no caso, eu) o que é preciso fazer para se tornar um hacker, algo como um guia passo-a-passo, eu vou encarar o desafio numa boa, pensar por alguns dias, semanas e talvez meses, e chegar à conclusão que a pessoa que precisa que alguém lhe ensine está percorrendo o caminho errado. Ela nunca vai aprender o suficiente para se tornar algo que possa ser chamado de hacker.&lt;/p&gt;
&lt;p&gt;E o que é hacker, que mal lhe pergunte? Há uma definição curta e simplista, há a definição do botão (que eu nunca mais vou me esquecer) e há o Jargon. O que é o Jargon? É um guia dos primórdios da web que contém tudo que você precisa saber sobre o jargão hacker. Duvida? Leia ele primeiro.&lt;/p&gt;
&lt;p&gt;Falar em jargão me faz lembrar do nostálgico e muito curioso (e que já falei em outros artigos) Barata Elétrica, o fanzine jurássico de Derneval Ribeiro que consistia em copy&amp;amp;paste de partes interessantes da rede, em inglês e português, e um pouco da cultura hacker na América do Sul (sobretudo Buenos Aires) e sobre a vivência de seu editor no ambiente uspiano. Derneval pode até não ser um &amp;quot;hacker de verdade&amp;quot; (só pra citar a falácia do escocês), mas ler o Barata Elétrica me deu não conhecimentos técnicos, mas muito sobre a nossa era da informação, como informação é vital hoje em dia, além de outros conceitos interessantes que nos fazem ficar atentos para privacidade, governos, política, economia, filosofia, etc. Acho que foi lá a primeira vez que tive contato com 1984, PGP, Mitnick. Enfim, curiosidade, piadas e um pouco do clima social que a web tinha (para mais disso, nada como saudoso mIRC...).&lt;/p&gt;
&lt;p&gt;Para quem pretende se tornar um hacker, já deve ficar claro que não existe receita de bolo, nem lista de conhecimentos desejáveis. Isso não e uma vaga para preenchimento de currículo. Isso é a vida real. Se existe uma receita, ela é vaga e de auto-ajuda:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Primeiro você aprende a gostar de viver de acordo com a definição abaixo.&lt;/li&gt;
&lt;li&gt;Viver é a busca incessante de conhecimento em todas as suas formas, uma autodescoberta e a busca da felicidade pessoal e instransferível, subjetiva e inalienável.&lt;/li&gt;
&lt;li&gt;Com base nisso, comece a aprender profundamente sobre tudo o que deseja, em todas as áreas, sobre qualquer assunto, pessoa, lugar.&lt;/li&gt;
&lt;li&gt;Repita o passo anterior até que a inescapável morte aconteça; o resto é mistério.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Parece meio poético e filosófico, mas não é. Se eu te disser que para ser hacker precisa aprende a crackear programas no Windows, fuçar no WinDbg e esmiuçar a API Win32, disassemblar códigos em binário com o IDA e usar no percurso todas as ferramentas, sistemas operacionais, linguagens de programação e conhecimentos periférios necessários, vai ser apenas uma descrição pessoal que não te levará à satisfação que talvez você deseja nessa jornada. Se sua única satisfação será poder dizer que é um hacker, sinto muito, isso é inútil. Você não está procurando viver por si mesmo, mas se auto-promover sem conhecimento de causa do que realmente a palavra significa. Esqueça o assunto e vá ler um livro. Ou melhor dizendo, vá navegar em sua rede social favorita...&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Fundamentos</title>
  <link>http://www.caloni.com.br/fundamentos/</link>
  <pubDate>2015-10-21</pubDate>
  
  <guid>http://www.caloni.com.br/fundamentos/</guid>
  <description>&lt;p&gt;Um amigo meu costumava dizer que qualquer conhecimento precisa ter bases sólidas. &amp;quot;Os fundamentos&amp;quot;, dizia ele. Sem os fundamentos, o prédio do conhecimento vai abaixo em pouco tempo. Mas com eles, construídos de cimento armado, reforçados e com alicerces bem planejados, não há informação demais suficiente para abalar o prédio do conhecimento.&lt;/p&gt;
&lt;p&gt;Esse meu amigo demorou um pouco mais que o que as pessoas costumam demorar para entender o conceito de if na programação. Se não me engano, ele passou semanas revisando a abstração, mas depois que entendeu, nunca mais perguntou uma vírgula para mim sobre o assunto. Eu escrevi uma &amp;quot;ode ao if&amp;quot; dividida em duas partes, pois ele merece. Para mim é o conceito-chave por trás de toda a lógica da programação, tal qual os flip flops constituem o alicerce da programação em hardware. Para mim, Ada Lovelace, a primeira programadora da história, que apostou na invenção maluca de Charles Babbage, sabia muito bem onde estava pisando. Escreveu diversos programas no papel antes que o computador saísse dele. Na época, o projeto falhou miseravelmente. Mas manteve-se seu legado, e seu sonho de um dia conseguir implementar em uma máquina mecânica o saldo condicional. A chave para o universo.&lt;/p&gt;
&lt;p&gt;E é através desse salto condicional, esse alicerce do nosso prédio, que se construiu todas as firulas abstratas que são fontes de discussões intermináveis no grupo de C/C++ Brasil e discussões ainda mais malucas nas nossas reuniões mensais do ChoPP. É entendendo esse conceito tão &amp;quot;básico&amp;quot; (lembre-se que básico vem de base) que todas as outras abstrações fazem sentido. E assim por diante. É entendendo o conceito de tipo, rvalue, lvalue, precedência, gramática, templates, recursividade e STL que pode-se entender com louvor as construções mais malucas já inventadas e padronizadas em C++: os padrões 11, 14, 17!&lt;/p&gt;
&lt;p&gt;E é por isso que, quando for estudar algo, por mais complexo que seja, não se deve abrir mão da introdução daquele primeiro livro, do capítulo básico em que o autor explica as motivações por trás das criações da lógica computacional. Pois é nesse básico que se escondem os fundamentos, os alicerces, o concreto armado. É lá que está a fonte de todo o conhecimento, a pedra angular dos maiores arranha-céus que programadores já fizeram, do maior conjunto de milhões de linhas de código que continuam funcionando. Esse é o segredo. E nunca é difícil. Afinal, tudo aquilo é muito básico para ser deixado de lado.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>É o fonte, idiota!</title>
  <link>http://www.caloni.com.br/e-o-fonte-idiota/</link>
  <pubDate>2015-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/e-o-fonte-idiota/</guid>
  <description>&lt;p&gt;Saiu um artigo recente no The Old New Thing (thanks Strauss pelo tuíte) que fala sobre não misturar runtimes do C de diferentes versões do compilador (especialmente se essas versões estão separadas pelo tempo em nada mais nada menos que dezenove anos!). Concordo. Aliás, a cultura Microsoftiana do uso de binários carece em C/C++ de um fundamento que facilite o reúso e compartilhamento de código exatamente por essa incompatibilidade inerente de uma biblioteca, se não em constante evolução, em constante aprimoramento pontual (como a STL). Como compartilhar código cujo fonte esteja indisponível e cujas bibliotecas sejam incompatíveis porque o projeto não é atualizado há dois pares de anos? Fiz uma vez um artigo explicando como usar a LIBC nativa do sistema operacional (nem sei se isso funciona ainda, provavelmente não). No entanto, essa é uma solução sub-ótima para um problema latente.&lt;/p&gt;
&lt;p&gt;É por isso que nesse caso a cultura Linux de compartilhamento do código-fonte acaba por ser a mais flexível e melhor adaptável à mudança dos tempos. Se você encontrou uma LIB que pode te ajudar, baixe e compile usando o último compilador. Se o compilador não consegue mais gerar binário sem gerar erros antes, configure os parâmetros de compilação como eram na época que a LIB foi gerada. A runtime do C (e de qualquer outro framework) que será usado é o da sua máquina. Afinal de contas, é o que faz mais sentido, não? Por que hoje existem diferentes conjuntos de DLLs de runtime de diferentes versões do Visual Studio instalados em sua máquina? Por que os instaladores precisam se preocupar em compartilhar essas DLLs corretamente?&lt;/p&gt;
&lt;p&gt;Questões de um passado remoto que voltam a bater à porta sempre que a Microsoft resolve lançar um novo Visual Studio. E isso irá se tornar cada vez mais constante, já que versões com começo e fim bem-definidos são um conceito também antigo, quando comprávamos pela licença de uma versão específica do programa. E hoje, no modelo de assinaturas, como fica?&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Por que as startups brasileiras precisam de outsourcing</title>
  <link>http://www.caloni.com.br/por-que-as-startups-brasileiras-precisam-de-outsourcing/</link>
  <pubDate>2015-08-04</pubDate>
  
  <guid>http://www.caloni.com.br/por-que-as-startups-brasileiras-precisam-de-outsourcing/</guid>
  <description>&lt;p&gt;Não é novidade que uma boa ideia, na área de informática, muitas vezes não precisa de apenas boas intenções. Na verdade, acho que quase nunca. Saber com quem se fala, ter os contatos certos e o investidor-chave, simplesmente não irão trazer sucesso a nenhuma empresa se esta não conseguir sequer engatinhar tecnologicamente e mostrar que seu core business vale a pena.&lt;/p&gt;
&lt;p&gt;Para isso que empresas como a Bit Forge estão começando a desenvolver software sob o modelo catalisadora de startups.&lt;/p&gt;
&lt;p&gt;Basicamente quando uma startup tem uma ideia inovadora, mas não sabe como conseguir ter uma demo básica, mínima e fundamental de forma rápida, simples e indolor, para que mostre aos potenciais clientes e investidores, ela precisa ligar para o nosso escritório e fechar um contrato de desenvolvimento inicial.&lt;/p&gt;
&lt;p&gt;O que é feito a partir daí é uma análise enxuta de requisitos, definição de escopo mínimo e o custo inicial para que a ideia saia do chão e crie as primeiras asinhas. A partir daí a empresa já tem uma solução funcional que pode ser demonstrada. Depois disso, com o sucesso dos testes no mercado, essa nova startup já pode contratar os programadores iniciais que irão dar manutenção em um sistema que acabou de nascer através de um treinamento da catalisadora -- no caso, nós -- ou, caso o mercado ainda precise de mais inputs, uma nova rodada de desenvolvimento e/ou uma manutenção básica que irá trazer estabilidade para a solução enquanto ela cresce de maneira orgânica.&lt;/p&gt;
&lt;p&gt;Em suma: você só paga até onde conseguir validar sua ideia. O que, convenhamos, sai bem mais barato do que contratar uma equipe, alugar um escritório ou, dependendo da complexidade de sua ideia, investir em head hunters que irão tentar encontrar talentos dispostos a despender tempo para seu projeto.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Vestindo a Camisa da Minha Empresa</title>
  <link>http://www.caloni.com.br/vestindo-a-camisa-da-minha-empresa/</link>
  <pubDate>2014-07-30</pubDate>
  
  <guid>http://www.caloni.com.br/vestindo-a-camisa-da-minha-empresa/</guid>
  <description>&lt;p&gt;Pois é, o tempo passou, e desde 2011 eu passei mais de três anos nessa minha nova empreitada no Mercado Financeiro. Bom, tudo que é bom acaba, para começar algo melhor ainda. No caso da minha experiência com a EzMarket (hoje UOL/Diveo Broker) foi algo quase que surreal trabalhar em um ambiente tão formidável com pessoas mais formidáveis ainda, tanto pessoalmente quanto tecnicamente. Aprendi muito sobre análise de risco e um tanto sobre conexões e protocolos de rede, e mais ainda sobre serialização e desempenho. Tive momentos prazerosos em reuniões de definição de arquitetura, (poucas) madrugadas de debugging e testes no cliente, (muitas) idas ao café da esquina para um ótimo papo e vários outros momentos que não me lembro agora, mas que não me arrependarei jamais, e sempre sentirei saudades.&lt;/p&gt;
&lt;p&gt;E já que é pra começar algo melhor ainda, me sinto feliz em anunciar minha parceria societária com o meu amigo de longa data Rodrigo Strauss, primeiro blogueiro escovador de bits do país (antes disso nós escovávamos bits em uma empresa de segurança da informação) e co-fundador da comunidade C/C++ Brasil. O Strauss passou também um bom tempo no Mercado Financeiro, trabalhando dentro da BM&amp;amp;F Bovespa fazendo o ajuste fino de servidores transacionando centenas de milhares de zillhões de negócios diários e gerenciando uma equipe. Seus projetos pessoais sempre o levaram a questionar qual a maneira mais rápida, simples e eficiente de realizar tarefas repetitivas, de preferência prontas para alta escalabilidade, o que o fez dedicar uns bons anos a resolver essas questões a fundar enfim a Intelitrader, uma empresa focada em soluções para o Mercado Financeiro e que possui a grande vantagem de ser pequena. Sim, ser pequena pode ser uma vantagem, principalmente para o cliente, que possui um atendimento mais que personalizado com nenhuma burocracia.&lt;/p&gt;
&lt;p&gt;E essa busca pela otimização de soluções me fez repensar o que eu estava fazendo com minha própria vida, pulando de emprego em emprego, de escritório em escritório, cada um com sua cultura organizacional disassociada muitas vezes dos objetivos reais de uma vida de desenvolvedor. Para mim, um desenvolvedor é alguém que desenvolve soluções. Por outro lado, um empreendedor ou empresário é alguém que vende essas soluções. Unir ambas as coisas nesse mundo onde um software complexo e complicado tende a morrer e um software simples e rápido de implantar é a chance de sucesso começou a fazer todo sentido. Lógico que esse tipo de conclusão só se tem passando alguns meses ociosos fazendo código just for fun e retomando sua fila de coisas a assistir até começar a fazer guerrinha imaginária de bolinhas de papel, mas eventualmente todos pensam que há coisas melhores para fazer na vida do que trabalhar para alguém.&lt;/p&gt;
&lt;p&gt;Por isso que, mais do que a parceria com o Strauss, a Intelimarket agora faz parte do grupo BitForge, fundada pelo igualmente conhecido Gianni (se você frequenta o grupo de discussão do Grupo C/C++ com certeza conhece o Gianni), especializado em soluções de IPTV, mas que conhece absurdos de várias outras coisas, especialmente do mundo Linux.&lt;/p&gt;
&lt;p&gt;Enfim, um pequeno if (ou dois) para o código, mas um grande deploy de soluções inovadoras na área de tecnologia da informação. Para essa nova e empolgante empreitada, eu visto, com certeza, a camisa da minha empresa.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Real Programmers Don&#39;t Use Java</title>
  <link>http://www.caloni.com.br/real-programmers-dont-use-java/</link>
  <pubDate>2014-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/real-programmers-dont-use-java/</guid>
  <description>&lt;p&gt;When I was a newbie (and a wanna-be) I enjoyed reading &amp;quot;Real Programmers Don&#39;t Use Pascal&amp;quot;, a satiric text that influenced and encouraged me into the path of &amp;quot;C/C++ enlightenment&amp;quot;, most even than K&amp;amp;R&#39;s book. Since then I thought that being a &amp;quot;Real Programmer&amp;quot; was something close to everything one needs to know to get (hard) things done (quickly). Being a &amp;quot;Quiche Eater&amp;quot; was, in couterpart, comparable to nothing. Real Programmers solve real problems! Quiche Eaters are losers who study the academic concepts of computer science and never do a damn useful and/or working program (maybe you know some guy like this).&lt;/p&gt;
&lt;p&gt;Jokes apart, the spirit of the text can also be used by those who already find them very good programmers and believe no longer have to grow professionally. The times my ego inflates I still remember that my code use child APIs and an operating system that is a joke. I also remember that there are some people out there designing a starship that will leave the orbit of the Solar System!&lt;/p&gt;
&lt;p&gt;On the other hand, many people that just got out of CS course still find programming a difficult matter. This text reminds us that life was difficult 20, 40, 70 years ago, when engineers and programmers were the same person and when you didn&#39;t know that what you were doing could put millions at risk in a project.&lt;/p&gt;
&lt;p&gt;Hence, the Real Programmer live in the past. And he always will be worthier than young folks, because he knows how to solve that blue screen problem that nobody else does. As I always say, paraphrasing an illustrious figure in Brazilian television, who is afraid to open Visual Studio and is eternally designing the software instead does not go very far: &amp;quot;who knows to do, do it right way!&amp;quot; .&lt;/p&gt;
&lt;p&gt;Here follows a brief summary of the original text adapted to the current times and with my prejucided view of thinking about it. If you wish to use your politically correct piece of mind and criticize me, be my guest!&lt;/p&gt;
&lt;p&gt;Languages. Remember: the need to invent more languages/resources to do your job is to remind yourself about your own incompetence to invent such excuse. You are one of those who says &amp;quot;every problem has a specific tool&amp;quot; or something like that. In other words: an inefficient programmer. Don&#39;t you see that everything you need is C. If C won&#39;t do, then assembly will. If none of them, then is isn&#39;t worth doing.&lt;/p&gt;
&lt;p&gt;Structured Programming. It is the first and last paradigm to be applied. After all, Object Orientation is another excuse to not program. They are more abstractions that, once you are a dead weight, you are unable to solve a problem using just functions and variables. No, you need classes, inheritance, templates and whatever the hell that will transform your simple and straight code into a magical horn of plenty that will only impress others at the futility and complexity of the solution.&lt;/p&gt;
&lt;p&gt;Data structure. Another great concept to fool yourself. Today are many who enslave us to weird SQL layouts and weird frameworks that do all the work. We all know that the only really useful to know the structure is the array. The rest are variants of the same theme: queues and stacks.&lt;/p&gt;
&lt;p&gt;Operating system. Mac and Windows are just toys and Linux is a video game that takes more work to set up than playing. The programmer actually uses something like mainframes or other beta operating system, which are too weird and can make a real mess in the hands of those who have not read the WHOLE manual. And knowing all known major kernel bugs and its location by heart at the time of booting is vital.&lt;/p&gt;
&lt;p&gt;Tools. If you depend on an IDE that have Code Completion and other fancy stuff or any other editor that depends on your favorite 17,459 plugins installed, then you are not a Real Programmer. A Real Programmer actually use what he have on hand at the time, like notepad, hexdump or even some beeps . The tool is no limit to one that can really code.&lt;/p&gt;
&lt;p&gt;Debugging. Are you saying that you need the source code in order to debug? So you do not have a clue of what the program does. Just a few glances at call stack and the registers can make a Real Programmer solve a bug that Quiche Eaters would not get after analyzing those charts with boxes inside UML and use cases for months.&lt;/p&gt;
&lt;p&gt;The Real Programmers Work is certainly not doing trivial databases to trivial programs that access SQL with trivial queries. Neither are those horrible websites with PHP/Apache and scripts and more scripts written by kids. No, sir. These are programs that deal with the OS in a more intimate way (HD encryption, file system drivers, critical communication services, etc.), or are programs that do something really useful (compilers, the operating system itself). Or maybe those programs that deal directly with hardware (complex microcontrollers, robots, ships, medical devices, etc.).&lt;/p&gt;
&lt;p&gt;The Fun of every Real Programmer is actually chat with friends (about programming), read something (about programming) and watch intelligent movies (about programming or people who have some kind of intellectual challenge to solve &amp;quot;the hard way&amp;quot;). Is there anything more fun than that?&lt;/p&gt;
&lt;p&gt;And, finally, in their Natural Habitat, we can find pages and pages of assembly code scattered around the table, a computer locked by a remote kernel debugging serial cable, some notes in hex on a piece of paper, a few dozen browser pages openned about the behavior of functions in BIOS SATA HDDs with 500 GB working on RAID4, coffee (of course), chips, stains on the carpet. When there&#39;s nothing to do the environment is pretty tidy and one cannot notice the presence of Real Programmers in sight.&lt;/p&gt;
&lt;p&gt;And the Future of Real Programmer? Well, C may even be dying. But so what? It seems C++ supports pointers as well. The rest of the useless abstractions like classes and inheritance may be totally ignored. The basics will always exist. Forget versions with multiple inheritance and enigmatic concepts. Be a (wo)man!&lt;/p&gt;
&lt;p&gt;The real, happy, final truth is: regardless of how much more the world becomes &amp;quot;managed&amp;quot; behind frameworks and programmers who prefer to &amp;quot;do projects&amp;quot; behind their office packages and use cases, when problems pop up, some bug murky life threatening useful for a project, a Real Programmer will be there to save the day, because only a programmer really knows how to do his job well done and have a good night of sleep knowing that everything will just be OK.&lt;/p&gt;
&lt;p&gt;If it doesn&#39;t, there will be always a Real Programmer to save the day.&lt;/p&gt;
&lt;p&gt;&amp;quot;As long as there are ill-defined goals, bizarre bugs, and unrealistic schedules, there will be Real Programmers willing to jump in and Solve The Problem, saving the documentation for later. Long live FORTRAN!&amp;quot;&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Vida e Software</title>
  <link>http://www.caloni.com.br/vida-e-software/</link>
  <pubDate>2011-10-22</pubDate>
  
  <guid>http://www.caloni.com.br/vida-e-software/</guid>
  <description>&lt;p&gt;Desenvolver software está bem longe de ser uma ciência exata e muito próxima de ser uma ciência humana. Eu, pessoalmente, considero um ramo esotérico, onde vale muito mais ter a atitude de reconhecer que não temos muito controle sobre como as coisas funcionam do que querer ter as rédeas de algo desgovernado.&lt;/p&gt;
&lt;p&gt;Não sei bem o motivo. Talvez por existirem muitas camadas o software não consegue ser normalizado como as propriedades físicas dos blocos que montam um prédio ou um transatlântico. Ou simplesmente existem variáveis demais na própria camada da aplicação que impedem a compreensão total do problema (como sabemos se estamos dentro da Matrix? Como o software sabe se está em um ambiente virtualizado?).&lt;/p&gt;
&lt;p&gt;Para os piores casos, o software sempre vai ter que confiar em seu ambiente e as regras, aparentemente imutáveis, que o regem. Ele precisar confiar não o exime de controlar seus próprio limites, e é aí que recai a atitude do programador, atitude essa que reflete diretamente nossa visão sobre a vida.&lt;/p&gt;
&lt;p&gt;Já vi muitos programadores (eu me incluo) deixando o código pronto para o melhor dos mundos e dando a tarefa por concluída. Otimismo demais? Desleixo? Ou arrogância? Qualquer que seja o motivo, ele está incrustado na própria visão de vida do programador e de como ele se vê no mundo. Eu, particularmente, fico horrorizado com código assim. Não com todos, mas com os que são visivelmente importantes e que necessitam de um carinho especial. São os alicerces para outros códigos, de repente.&lt;/p&gt;
&lt;p&gt;Outra atitude igualmente deformada é achar que o mundo vai acabar se não existirem todos os sanity checks (até os mais bizarros) em qualquer meia-dúzia de linhas. É o paranóico, que pode se dar bem no tipo de código importante já citado, mas que nunca vai conseguir entregar um projeto trivial se for baseado em libs escritas pelos outros e cujo código nunca deu uma &amp;quot;lida rápida&amp;quot;. Aliás, essa mesma atitude &amp;quot;deu uma lida&amp;quot; demonstra que o pessimista pode ser ainda mais arrogante, pois acredita conseguir capturar toda a complexidade do sistema apenas lendo seu código en passant.&lt;/p&gt;
&lt;p&gt;De uma forma ou de outra, como toda atividade humana, escrever código nos define não apenas como bons programadores, mas como bons humanos, com seu conjunto de crenças e valores. O que, de certa forma, é um bom sinal, pois melhorando como seres humanos, melhoramos como programadores. E vice-versa.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Para quê filosofia?, por Marilena Chauí.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

     
        <item>
  <title>Cronogramas baseados em fatos reais</title>
  <link>http://www.caloni.com.br/cronogramas-baseados-em-fatos-reais/</link>
  <pubDate>2011-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/cronogramas-baseados-em-fatos-reais/</guid>
  <description>&lt;p&gt;Já falei sobre cronogramas por aqui e tudo que disse ainda se aplica. Contudo, comentei brevemente sobre entender seu próprio ritmo, que, instintivamente, sabia ser verdade. Depois que li um pouco mais sobre técnicas XP/Scrum (que nada mais são do que formalizações do que os programadores Agile perceberam no decorrer dos seus projetos) achei uma fórmula simples para transformar o tempo estimado em tempo realista.&lt;/p&gt;
&lt;p&gt;Vejamos o texto original (auto-plágio):&lt;/p&gt;
&lt;p&gt;Regra # 5: não inclua o ócio no cronograma&lt;/p&gt;
&lt;p&gt;Seja honesto consigo mesmo e com seu chefe: você realmente trabalha 8 horas por dia? É lógico que não! E não é nenhuma vergonha admitir isso. Todos nós temos emails para ler e responder, reuniões para presenciar e bloques importantes para acompanhar. Portanto, ignore essa conversa fiada de 8 horas e admita: não se deve contar os dias como se eles tivessem 8 horas.&lt;/p&gt;
&lt;p&gt;Qual o valor de um dia, então? Cada um sabe o valor que deve ser decrementado desse valor simbólico de 8 horas, mas esse valor sempre será menor. Não se iluda!&lt;/p&gt;
&lt;p&gt;Exatamente. Não se iluda! Isso tem seu reflexo na metodologia Agile. Basicamente quer dizer que você precisa aplicar índices que reflitam a realidade do seu próprio ritmo. Além disso:&lt;/p&gt;
&lt;p&gt;Regra # 4: uma tarefa estimada é uma tarefa completada&lt;/p&gt;
&lt;p&gt;É muito simples ilustrar e entender esse conceito com código. Voltando ao caso da função, digamos que você consiga terminar a bendita função em exata uma hora. Você é bom, hein?&lt;/p&gt;
&lt;p&gt;Porém, essa função ainda 1) não foi comentada,  2) não foi testada e  3) não foi testada em release.&lt;/p&gt;
&lt;p&gt;Logo, essa é uma tarefa em que você termina o mais importante em uma hora... mas não termina tudo. Deve-se sempre considerar a tarefa por completo, pois no final de quinze tarefas vai faltar comentar e testar tudo isso, o que aumentará consideravelmente a imprevisiblidade no seu cronograma.&lt;/p&gt;
&lt;p&gt;O que, novamente traduzindo, é mais um indicador a ser aplicado sobre seus números.&lt;/p&gt;
&lt;p&gt;E o que são seus números?&lt;/p&gt;
&lt;p&gt;Basicamente, o que a própria metodologia ensina: meça o esforço necessário para fazer código (mas é pra isso mesmo que somos contratados, não?) como se pudéssemos programar por todo esse tempo sem parar por um momento sequer (mesmo que sejam dezenas de horas). Lógico, aprenda a dividir o esforço em pequenos passos, mas estime o tempo considerando APENAS o esforço de fazer o código.&lt;/p&gt;
&lt;p&gt;Pronto? Agora é hora de aplicar os indicadores.&lt;/p&gt;
&lt;p&gt;Mais uma vez, admita: programadores raramente conseguem manter o foco por muito tempo. São pessoas ao redor te desviando a atenção, o tweet que salta de uma janela ou até mesmo as necessidades orgânicas que todo ser humano tem. São elementos, enfim, que, em conjunto, nunca te possibilitarão ter 100% do foco durante todo o trabalho.&lt;/p&gt;
&lt;p&gt;Portanto, criemos um indicador: foco. Ele é um valor entre 0 e 1 e estima a porcentagem de foco que você consegue obter, em média, durante o dia. Por exemplo: eu consigo me focar 70% do dia inteiro em apenas codificar e o resto é perdido em reuniões e e-mails. OK. Esse número é, então, 0,7. Aplique sobre seu total de horas e terá o tempo real para codificar a tarefa:&lt;/p&gt;
&lt;p&gt;Levarei 35 horas para codificar todo o processo de autenticação por reconhecimento de face, trabalhando sem parar.&lt;/p&gt;
&lt;p&gt;No entanto, como consigo apenas 70% de foco em média, sei que essa tarefa irá levar 50 horas na verdade.&lt;/p&gt;
&lt;p&gt;Já temos o tempo para o código ficar pronto, mas... é apenas código. Temos que reescalonar o tempo do projeto inserindo testes, retrabalho, comentários e documentação. Tudo ainda nas mãos do programador, que está ainda &amp;quot;aquecido&amp;quot; e que pode resolver retrabalhos em questões de segundos, se ninguém mais passar nada pra ele.&lt;/p&gt;
&lt;p&gt;Mesmo assim,é um indicador importante. Sem ele, a qualidade do serviço final fica muito restrita e sensível a testes de caixa preta, gerando a revolta da equipe de testes.&lt;/p&gt;
&lt;p&gt;Vamos supor, então, que, historicamente, essa fase tem sido, digamos, 20% do período de codificação (um chute bem otimista). Agora é fácil dizer o tempo final:&lt;/p&gt;
&lt;p&gt;Levarei 50 horas para codificar tudo considerando o quesito foco.&lt;/p&gt;
&lt;p&gt;Porém, para poder entregar, preciso dedicar cerca de 20% aos testes, retrabalho e uma documentação mínima. Nesse caso, 60 horas é o prazo de entrega.&lt;/p&gt;
&lt;p&gt;Note que, se quiser, pode fazer a análise contrária também, tanto de um quanto de outro. Assim, se geralmente você gasta 20% a mais na codificação do que estima, então use o fator foco como 1.2 e multiplique em vez de dividir. Da mesma forma, se codificar é 60% de todo o trabalho, o fator finalização é 0.6 e deve-se dividir as horas pós-indicador de foco.&lt;/p&gt;
&lt;p&gt;O número de horas ficou muito maior que o esperado? Não me admira que os projetos geralmente atrasem, então. Por pior que pareça o cálculo final, ele foi construído com base na realidade. E não há nada melhor do que nos basearmos na realidade para estimar seriamente o quanto pode custar à empresa um projeto qualquer.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Então você ainda não usa controle de fonte?</title>
  <link>http://www.caloni.com.br/entao-voce-ainda-nao-usa-controle-de-fonte/</link>
  <pubDate>2010-11-02</pubDate>
  
  <guid>http://www.caloni.com.br/entao-voce-ainda-nao-usa-controle-de-fonte/</guid>
  <description>&lt;p&gt;Não há nada de errado nisso. Projetos robustos com uma equipe moderada ¿ 5 a 10 programadores ¿ precisam desse tipo de organização, e tornam a resolução dos problemas do dia-a-dia mais problemática sem esse controle. A questão reside para o programador solitário ou a equipe minúscula ¿ 2 a 4 programadores. Esses geralmente questionam o custo-benefício de terem o trabalho de configurar e manter mais um sistema. Além disso, isso implica em uma mudança de grandes proporções em cada membro da equipe: uma mudança cultural.&lt;/p&gt;
&lt;p&gt;Portanto, a primeira decisão que deve ser tomada pelo programador que quer mudar as coisas é instalar um controle de fonte moderno para seus projetos caseiros. Quando digo moderno, digo distribuído.Distribuído porque 1) é possível começar desde já com três comandos simples, 2) quando alguém copia a pasta do projeto está levando todo o histórico junto e 3) pastas duplicadas são branches distintos que podem interagir no futuro.&lt;/p&gt;
&lt;p&gt;Os três comandos simples não são nada do outro mundo: criar o repositório, adicionar arquivos e fazer commit.&lt;/p&gt;
&lt;p&gt;Dica: Um commit é uma maneira de dizer ao controle de fonte: &amp;quot;já modifiquei o que tinha pra modificar, então mande tudo que tenho de novo para o controle&amp;quot;.&lt;/p&gt;
&lt;p&gt;Tanto faz qual controle você pretende usar. No meu exemplo usarei o Bazaar, que é a ferramenta que uso no dia-a-dia com minha pequena equipe e serve bem para programadores solitários também. Basicamente para ter o Bazzar instalado basta baixá-lo, next next e finish.&lt;/p&gt;
&lt;p&gt;Marcar para usar o PATH pode ser uma boa pra quem é fã de linha de comando.&lt;/p&gt;
&lt;p&gt;Apesar de existirem firulas gráficas, gosto de usar o Bazaar na linha de comando porque faz você pensar direito antes de fazer commits, mas esteja livre para experimentar a maneira que achar melhor.&lt;/p&gt;
&lt;p&gt;Isso vale para qualquer projeto que você esteja trabalhando. Pela linha de comando, navegue até o diretório do projeto. Digite os comandos abaixo seguidos de enter:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;bzr init&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bzr add&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bzr commit -m &amp;quot;Primeiro commit no controle de fonte&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pronto! Você está oficialmente com seu projeto dentro de um controle de fonte.&lt;/p&gt;
&lt;p&gt;Os passos seguintes seguem o mesmo padrão, exceto o passo 1, que é substituído pelo seu trabalho:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;trabalho&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bzr add&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bzr commit -m &amp;quot;Comentário sobre modificação que fiz&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Basicamente, sim. É claro que um controle de fonte não se baseia apenas em commits. Existem arquivos a serem ignorados (os obj da vida) e eventualmente algum trabalho paralelo ou com mais programadores. No futuro poderá comparar versões diferentes do código. Porém, apenas seguindo essa simples receita acima você já pode se gabar de ter um controle de fontes confiável em seus projetos. Já estará se aproveitando desse controle no futuro, quando aprender mais sobre ele.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Analogicamente perfeito</title>
  <link>http://www.caloni.com.br/analogicamente-perfeito/</link>
  <pubDate>2010-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/analogicamente-perfeito/</guid>
  <description>&lt;p&gt;É possível explicar tudo no mundo da informática através de analogias? Pela minha singela experiência de professor informal, eu acredito que sim. Durante esses dois anos, explanei diversos assuntos e, em todos eles, difíceis ou não, consegui um certo grau de sucesso graças ao uso de metáforas e parábolas.&lt;/p&gt;
&lt;p&gt;De memória (ou buscando no meu blogue) consigo lembrar alguns tópicos e a forma como os expliquei. Em alguns até fiz um artigo sobre o assunto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ponteiros 16 bits: rua e número de uma casa.&lt;/li&gt;
&lt;li&gt;Typedefs: apelidos para nomes de pessoas.&lt;/li&gt;
&lt;li&gt;Depuração: a ciência médica de House.&lt;/li&gt;
&lt;li&gt;Passagem de argumentos por valor e por referência: e-mails com anexo e com linques.&lt;/li&gt;
&lt;li&gt;Ponteiros: armário de gavetas.&lt;/li&gt;
&lt;li&gt;Programadores: programadores de verdade não usam Java (brincadeira).&lt;/li&gt;
&lt;li&gt;Agendamento de threads: guichê de CPUs.&lt;/li&gt;
&lt;li&gt;Seções críticas: fila de threads dentro de uma sala.&lt;/li&gt;
&lt;li&gt;Funções com retorno booleano: o dedo polegar dos romanos.&lt;/li&gt;
&lt;li&gt;Pilha: uma pilha, só que de pratos e não bytes.&lt;/li&gt;
&lt;li&gt;Binário: bichos-preguiça contando com seus únicos dois dedos.&lt;/li&gt;
&lt;li&gt;Tipos: uma forma de bolo que só faz bolos com um único formato.&lt;/li&gt;
&lt;li&gt;Definições x declarações de variáveis: hardware e software; OK, podemos chamar esse de meta-analogia =)&lt;/li&gt;
&lt;li&gt;Depuração 2: séries de investigação forense como CSI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Acredito ser essa a melhor forma de desmistificar esse pequeno mundinho que parece incompreensível aos outros mortais. Até porque tudo que é criado no mundo dos computadores são abstrações do mundo real, que por sua vez são abstrações da mente humana.&lt;/p&gt;
&lt;p&gt;É por isso que sempre digo que ciência da computação é uma arte-ciência da área de humanas.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Correção de bugs instantânea</title>
  <link>http://www.caloni.com.br/correcao-de-bugs-instantanea/</link>
  <pubDate>2010-02-01</pubDate>
  
  <guid>http://www.caloni.com.br/correcao-de-bugs-instantanea/</guid>
  <description>&lt;p&gt;Um programador tarimbado sabe que a melhor situação da vida dele para corrigir um bug é quando esse bug acontece em sua máquina de desenvolvimento, na versão Debug e ainda passo-a-passo. Como nessa situação a correção é um verdadeiro &amp;quot;passeio no parque&amp;quot; (ou na mesa do café) ela tende a quase nunca acontecer. Isso é Murphy Aplicado.&lt;/p&gt;
&lt;p&gt;Para quem programa para sistemas, então, só o fato de acontecer no mesmo processo toda vez que ele for executado já é o máximo (quem já programou serviços, plugins, GINAs e afins sabe do que eu estou falando).&lt;/p&gt;
&lt;p&gt;Porém, saber que uma determinada situação é mel na chupeta (by Thiago) por si só não adianta de muita coisa. É preciso conhecer as verdadeiras técnicas ninjas que conseguem resolver um bug escabroso num instante, coisa de deixar seu gerente de projetos tão feliz ao ponto dele não botar nenhum defeito na solução.&lt;/p&gt;
&lt;p&gt;Dentre as mais conhecidas entre os malloqueiros, temos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comenta-descomenta-comenta&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Faz do zero&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essas duas técnicas são tão úteis e tão fáceis de usar que merecem um artigo a respeito.&lt;/p&gt;
&lt;p&gt;Essa técnica milenar corresponde em tirar pedaços do código-fonte que poderiam estar causando o problema até que seja possível criar uma versão em que o problema não ocorra mais. Quando chega-se nesse nível, então volta-se a descomentar o código retirado até que o problema ocorra novamente. O processo é um fluxo de tira-código com volta-código, sendo que é necessário o bom conhecimento do projeto para não gerar outros problemas com a mutilação temporária do projeto.&lt;/p&gt;
&lt;p&gt;Se o código começa a ser tão mutilado que chegamos quase em uma versão vazia (sem código), então talvez a melhor forma de atacar o problema seja criar um esqueleto que contenha apenas o código necessário para que ele não faça nada. Isso mesmo. Não fazendo nada, mas instalado. Com isso prova-se que é possível estar lá sem fazer cagadas. A partir daí vai colocando-se o código do projeto real aos poucos no projeto-esqueleto, até que ele apresente o problema. Ou não. Já vi casos em que todo o código foi migrado e o problema sumiu. Ce la vie.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>House</title>
  <link>http://www.caloni.com.br/house/</link>
  <pubDate>2010-01-25</pubDate>
  
  <guid>http://www.caloni.com.br/house/</guid>
  <description>&lt;p&gt;Depois da analogia entre depuração e CSI, nada como fazer o mesmo com o seriado estilo House.&lt;/p&gt;
&lt;p&gt;Quais as semelhanças com a profissão de programador-depurador?&lt;/p&gt;
&lt;p&gt;Em primeiro lugar, a busca por pistas. Se algo está errado com o programa, vivemos criando teorias mirabolantes a respeito do porquê tal função estar retornando zero. No entanto, como não temos tanta capacidade adivinhatória assim, geralmente nossos palpites estão errados, e o fundo do poço irá nos mostrar uma outra função que nem estava ainda na história.&lt;/p&gt;
&lt;p&gt;Mas existem alguns pontos-comuns de conhecimento que sempre desenvolvemos no decorrer da carreira:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Se a última instrução do código é zero (ou algo próximo disso), provavelmente a pilha foi corrompida por alguém que tentou zerar uma variável, e junto dela o ponto de retorno de alguma função chamadora.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se um programa trava em um determinado momento, voltando após um período previsível de tempo (30 segundos), automaticamente sabemos que existe algum evento/mutex usado de forma errada que, dadas as circunstâncias, apresentou uma espera longa demais.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se uma versão nova capota em um procedimento em que a versão antiga nunca capotou, podemos divagar rapidamente quais as características da nova versão que fizeram com que isso acontecesse, ainda sem olhar para o código.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dessa forma é possível criar teorias a partir da análise mental do que o programa normal deveria estar fazendo, mas não está. É esse tipo de análise que é feita no seriado.&lt;/p&gt;
&lt;p&gt;Porém, o lado bom: podemos testar todas nossas hipóteses. Na vida real! Se, por enquanto, matar pacientes para depois ressuscitá-los é coisa de ficção, matar sistemas e reiniciá-los não é. E, dependendo do problema, podemos sempre replicá-lo em &amp;quot;outro paciente&amp;quot;.&lt;/p&gt;
&lt;p&gt;Talvez isso faça a profissão tão realizadora e viciante: para resolver um problema, geralmente temos todas as cartas na mão, e se não temos, fazemos ter. Afinal de contas, somos nós que iremos ressuscitar o sistema perdido.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Ciência Médica de House&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

     
        <item>
  <title>Aprendendo um terceiro idioma</title>
  <link>http://www.caloni.com.br/aprendendo-um-terceiro-idioma/</link>
  <pubDate>2009-12-11</pubDate>
  
  <guid>http://www.caloni.com.br/aprendendo-um-terceiro-idioma/</guid>
  <description>&lt;p&gt;Inspirado pelo texto de Chad Fowler que explica como o aprendizado de um segundo idioma mudou sua vida (sua língua-mãe é o inglês americano), resolvi descrever brevemente o que foi o momento da minha vida que decidi que iria tentar aprender Russo. Lógico, sem todo o folclore e a experiência de vida do autor do original.&lt;/p&gt;
&lt;p&gt;Primeiro, meus motivos primários:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estava escutando Tatu;&lt;/li&gt;
&lt;li&gt;Costumava conversar pelo ICQ com uma amiga de Moscou (em inglês, apesar dela falar mais três ou quatro idiomas; e ela só tinha 19 anos!);&lt;/li&gt;
&lt;li&gt;Estava querendo aproveitar parte do meu cérebro que fica inerte a maior parte do tempo porque meu emprego basicamente só mexe com coisas (quase) lógicas, como programação;&lt;/li&gt;
&lt;li&gt;Achava uma língua bem bonita e exótica;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Gosto de jogar xadrez (o que isso tem a ver?)&lt;!-- raw HTML omitted --&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bom, no início comecei aprendendo o alfabeto. Alguns podem dizer que não há nenhum segredo no cirílico, e de fato não há. Porém, uma coisa é saber interpretar mais ou menos aquelas letrinhas derivadas do grego; outra completamente diferente é saber escrever em letra de base e em letra de mão todos os 33 caracteres, e ainda saber de cor o leiaute do teclado russo. Isso leva um pouco de tempo, e é bem divertido!&lt;/p&gt;
&lt;p&gt;A partir daí passei cerca de seis meses apenas treinando a escrita e leitura do cirílico, aprendendo a diferença de som dependendo do contexto, um caderno a tiracolo no meio do ônibus, do trem e do metrô escrevendo infinitas linhas incompreensível provavelmente por 99% das pessoas que cruzavam meu caminho e olhavam curiosas.&lt;/p&gt;
&lt;p&gt;Depois, o idioma em si. Nessa fase resolvi apelar para um curso disponível no mosteiro S. Bento ministrado por uma russa autência, de S. Petersburgo. Ela não falava muito bem português, o que para mim era um &amp;quot;plus&amp;quot;.&lt;/p&gt;
&lt;p&gt;Passei mais seis meses de curso com ela e com alguns textos que ia baixando da internet. Depois do curso comprei um curso em áudio e texto que fui acompanhando morosamente pelo resto dos dois anos que passei me aventurando pelo idioma.&lt;/p&gt;
&lt;p&gt;No meio do caminho um amigo meu achou o podcast Spoonful of Russian, o que foi uma diversão só, especialmente pelo conhecimento cultural e musical do povo russo. Minha amiga também me enviou alguns CDs de bandas russas famosas, e fiquei especialmente encantando com Ivan Kupala, que até hoje escuto. Se trata de uma banda que pegou músicas do folclore russo e adaptou para os tempos atuais, mas cantado ainda por velhinhas e velhinhos que aparentemente parecem ter saído de uma aldeia dos Montes Urais.&lt;/p&gt;
&lt;p&gt;O cinema e a BBC russa também representaram um instrumento de aprimoramento do listening do dia-a-dia. Uma coisa é escutar um russo falando devagar durante uma aula de declinação do futuro por aspecto. Outra coisa é ver alguém usando isso enquanto atravessa a rua conversando com um amigo no meio do barulho da cidade grande, ou uma mulher que mais parece uma metralhadora disparando 500 notícias de uma vez no podcast de um jornal da internet.&lt;/p&gt;
&lt;p&gt;Infelizmente, essa fase esmaeceu. Agora estou muito interessado em finanças e isso fez com que o russo ficasse cada vez mais para trás. Se me pedir hoje para falar algo em russo vou conseguir apenas balbuciar as mais &amp;quot;comunzinhas&amp;quot;, pois esqueci todo o resto. Foi perda de tempo? Claro que não! Foi uma experiência que mostra que podemos aprender qualquer coisa a qualquer hora, independente do quão estranho ou bizarro isso seja.&lt;/p&gt;
&lt;p&gt;¿¿ ¿¿¿¿¿¿¿¿!&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Programadores de verdade não usam Java</title>
  <link>http://www.caloni.com.br/programadores-de-verdade-nao-usam-java/</link>
  <pubDate>2009-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/programadores-de-verdade-nao-usam-java/</guid>
  <description>&lt;p&gt;Quando era um newbie (e um wanna-be) gostava de ler o &amp;quot;Real Programmers Don&#39;t Use Pascal&amp;quot;, um texto humorístico que mais me influenciou e encorajou a caminho da iluminação C/C++ do que o livro de K&amp;amp;R. A partir dele, supunha eu, ser um &amp;quot;programador de verdade&amp;quot; era ser tudo. Ser um Quiche Eater (Comedor de Torta) não era nada. Programadores de verdade é que resolvem os problemas de verdade! Quiche Eaters são os losers que estudam os conceitos acadêmicos da ciência da computação e nunca fazem um maldito programa que preste (conhece alguém assim?).&lt;/p&gt;
&lt;p&gt;Piadas à parte, para mim o humor do texto ainda pode ser aproveitado por aqueles que já se acham muito bons e acreditam não terem mais como crescer profissionalmente. Quando meu ego infla demais, ainda me lembro que enquanto programo com APIs de brincadeirinha e um sistema operacional que é uma piada tem gente projetando uma nave que vai sair da órbita do Sistema Solar!&lt;/p&gt;
&lt;p&gt;Por outro lado, muitas pessoas recém-saídas da faculdade de computação ainda acham programação uma matéria difícil. Esse texto nos lembra que difícil era a vida 20, 40, 70 anos atrás, quando engenheiros e programadores eram a mesma pessoa, e quando se você não soubesse o que estava fazendo colocaria projetos de milhões em risco.&lt;/p&gt;
&lt;p&gt;Por consequência, o programador de verdade vive no passado. E ele sempre se valoriza frente ao povão jovem, porque ele sabe resolver aquele problema de tela azul que mais ninguém sabe. E como eu costumo dizer, parafraseando uma figura ilustre da televisão brasileira, quem tem medo de abrir o Visual Studio e em vez disso fica projetando eternamente o software não vai muito longe: &amp;quot;quem sabe faz na hora!&amp;quot;.&lt;/p&gt;
&lt;p&gt;Aqui segue um breve resumo do texto original adaptado para os tempos atuais e com a minha visão preconceituosa de pensar sobre o assunto. Se quiser, use sua parte politicamente correta da mente e critique à vontade!&lt;/p&gt;
&lt;p&gt;Linguagens. Lembre-se: inventar que você precisa de mais linguagens/recursos para fazer seu trabalho é lembrar que você é incompetente o suficiente para inventar esse tipo de desculpinha. Você é daqueles que diz &amp;quot;cada problema tem sua ferramenta específica&amp;quot; ou algo do tipo. Ou seja, um programador politicamente correto e ineficiente. Não vê que tudo o que você precisa está na linguagem C. Se não estiver, então está no assembly. Se não estiver nem no C nem no assembly não vale a pena ser pensado a respeito.&lt;/p&gt;
&lt;p&gt;Programação Estruturada. É o primeiro e último paradigma a ser aplicado. Afinal de contas, Orientação a Objetos é mais uma desculpinha para não programar. São abstrações e mais abstrações para inventar que, uma vez que você é um peso morto que não consegue resolver um problema com funções e variáveis, precisa de classes, herança, templates e outras tranqueiras que vão transformar seu código simples e reto em uma cornucópia mágica que só vai impressionar os outros pela inutilidade e complexidade da solução!&lt;/p&gt;
&lt;p&gt;Estrutura de dados. Outro ótimo conceito para enganar a si mesmo. Hoje são muitos os que se escravizam nos leiautes SQL e classes estranhas de frameworks estranhos que fazem todo o trabalho. Todos sabemos que a única estrutura realmente útil de saber é o array. O resto são variantes do mesmo tema: filas e pilhas.&lt;/p&gt;
&lt;p&gt;Sistema operacional. Mac e Windows são brinquedinhos e Linux é um vídeo-game que dá mais trabalho de configurar do que de jogar. O programador de verdade usa algo como mainframes ou qualquer outro sistema operacional beta, que são bem esquisitos de mexer e que podem fazer um verdadeiro estrago nas mãos de quem não tiver lido TODO o manual. E saber todos os bugs conhecidos e importantes do kernel e sua localização de cor na hora de bootar é vital.&lt;/p&gt;
&lt;p&gt;Ferramentas. Se você depende de uma IDE que tem Code Completion e outros penduricalhos do tipo, ou depende de algum outro editor seu favorito com seus 17459 plugins instalados, então você não é um programador de verdade. um programador de verdade usa o que tiver à mão na hora que precisar, seja um notepad, um hexdump ou até mesmo alguns beeps. A ferramenta não é limite para quem sabe programar de verdade.&lt;/p&gt;
&lt;p&gt;Depuração. Vai dizer que precisa do código-fonte para depurar? Então você não faz a mínima ideia do que o programa faz. Apenas algumas olhadas na call stack e nos registradores podem fazer um programador de verdade solucionar um bug que os comedores de torta não conseguiriam depois de analisar aqueles gráficos UML com caixinhas dentro e casos de uso por meses a fio.&lt;/p&gt;
&lt;p&gt;O Trabalho de programadores de verdade com certeza não é fazer programinhas que acessam basezinhas de SQL com opção de consulta e cadastro. Nem são aqueles saitezinhos com PHP/Apache, scripts e mais scripts. Não, senhor. São programas que lidam com o Sistema Operacional de uma forma mais íntima (criptografia de HD, drivers de File System, serviços de comunicação crítica, etc), ou são programas que fazem algo de verdadeiramente útil (compiladores, o próprio sistema operacional). Ou tavez que mexam diretamente com hardware (microcontroladores complexos, robôs, naves, aparelhagem médica, etc).&lt;/p&gt;
&lt;p&gt;A Diversão de todo programador de verdade é conversar com os amigos (sobre programação), ler alguma coisa (sobre programação) e assistir filmes inteligentes (sobre programação ou pessoas que fizeram algum tipo de desafio intelectual &amp;quot;na marra&amp;quot;). Existe algo mais divertido que isso?&lt;/p&gt;
&lt;p&gt;E, por fim, em seu Habitat Natural, poderemos encontrar páginas de código assembly espalhadas em volta da mesa, um computador travado por uma depuração remota de kernel por cabo serial, algumas anotações em hexa em um pedaço de papel, algumas dezenas de páginas abertas no navegador sobre comportamento das funções BIOS em HDs SATA com mais de 500 GB trabalhando em RAID4, café, salgadinhos, manchas no carpete. Quando não há nada para fazer, o ambiente está arrumadíssimo e não se nota a presença de programadores de verdade à vista.&lt;/p&gt;
&lt;p&gt;E o Futuro do programador de verdade? Bom, a linguagem C pode até estar morrendo. Mas, e daí? Essa tal de C++ ainda suporta ponteiros. O resto das abstrações afeminadas como classes e herança podem ser totalmente ignoradas. O básico sempre existirá. Esqueça as versões com herança múltipla e o enigmático concepts. Seja homem!&lt;/p&gt;
&lt;p&gt;O fato é que, independente de quanto mais o mundo se tornar &amp;quot;gerenciado&amp;quot; por trás de frameworks e programadores que preferem &amp;quot;fazer projetos&amp;quot; atrás de seus pacotes de escritório e casos de uso, quando algum problema pipocar, algum bug tenebroso ameaçar a vida útil de um projeto, um programador de verdade estará lá para salvar o dia, pois só um programador de verdade sabe fazer o seu trabalho. E bem feito.&lt;/p&gt;
&lt;p&gt;PS: Na verdade, me lembrei. Eu peguei esse cacoete de falar &amp;quot;quem sabe faz na hora&amp;quot; do meu amigo Thiago. Ele também dizia &amp;quot;se vira nos 30!&amp;quot;. Bom, se eu citar todas as frases brilhantes que ele usava quando trabalhávamos juntos o texto vai ficar bem longo =)&lt;/p&gt;
&lt;p&gt;Se você gostou desse texto, talvez goste de eXtreme Go Horse!&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Deixe o programador programar</title>
  <link>http://www.caloni.com.br/deixe-o-programador-programar/</link>
  <pubDate>2009-04-09</pubDate>
  
  <guid>http://www.caloni.com.br/deixe-o-programador-programar/</guid>
  <description>&lt;p&gt;Seis meses se passaram desde que defini o cronograma para um projeto importante (mas não urgente) que deveria ser entregue cinco meses atrás. O tempo em dias que estimei na época não havia mudado nada, mas uma série de desventuras (tarefas brotando do chão e umas férias bem merecidas) fizeram com que quase nenhuma linha de código tivesse sido produzida para aquele projeto. No entanto, tenho a consciência tranquila, já que estou em uma de minhas fases mais produtivas e inovadoras.&lt;/p&gt;
&lt;p&gt;Então eis que surge na porta do templo sagrado (a sala de desenvolvimento) um dos mortais que costuma acreditar que &amp;quot;dirige&amp;quot; seus funcionários. Vira-se para mim e &amp;quot;define&amp;quot; que esse projeto não poderá passar desse mês. E todas aquelas tarefas urgentes que estavam furando a fila de prioridades, como a última da semana passada, devem ser postergadas. É lógico que nada disso foi surpresa, visto que outros discursos desse tipo e outras tarefas urgentes já haviam aparecido no decorrer desses seis meses; mas, enfim, esse foi o primeiro deadline oficialmente definido.&lt;/p&gt;
&lt;p&gt;Por isso mesmo, com uma preocupação constante em minha cabeça, decido desestressar um pouco e ter um almoço bem alargado (quatro horas) em um outro bairro, em outro ambiente, com uns velhos amigos para jogar alguma conversa fora. Nada como a vida fluindo devagar para fazer esquecer detalhes menos essenciais, como trabalho e estresse no trabalho. Sou obrigado nessa hora a parafrasear o sócio mais espirituoso de nossa empresa, que coincidentemente estava presente no almoço: &amp;quot;mas, afinal de contas, quem foi que definiu que a vida tem que ter trabalho e estresse?&amp;quot;.&lt;/p&gt;
&lt;p&gt;Eu assino embaixo.&lt;/p&gt;
&lt;p&gt;Porém, terminado o almoço, volto a pensar em como resolverei o impasse do cronograma do tal projeto superimportante, quando, ao passar pela entrada do metrô, colocam na minha mão justamente um desses panfletos de rua com mensagens subliminares. E nele estava, acreditem, leitores, a solução para todos os meus problemas!&lt;/p&gt;
&lt;p&gt;Se você está com algum PROBLEMA DE DIFÍCIL SOLUÇÃO e precisa de AJUDA URGENTE, peça esta ajuda a Santo Expedito que é o Santo dos Negócios que precisam de Pronta Solução e cuja invocação nunca é tardia. (Abaixo segue a oração ao Santo).&lt;/p&gt;
&lt;p&gt;É lógico que toda essa história fantasiosa pode ser pura ficção com um pingo sequer de realidade, e no fundo almocei foi mesmo é com meus amigos imaginários. No entanto, é capaz que esse não seja um cenário incomum em muitas empresas de tecnologia por aí afora, que insistem em fazer duas coisas que, aliadas, podem gerar qualquer coisa, menos um projeto bem feito e testado:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pedir que seus funcionários elaborem um cronograma de um projeto complexo (um mês ou mais de trabalho).&lt;/li&gt;
&lt;li&gt;Pedir que seus funcionários espremam o tempo definido para o projeto de alguma forma mágica.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O problema é que, na área de informática, apesar de ciência esotérica e cheia de mistérios, não existem santos, não existem milagres e não existe mágica que gere um código de qualidade se não for despendido para ele uma soma considerável de tempo e trabalho. E não estou falando de nenhum luxo. É o tempo justo, mesmo.&lt;/p&gt;
&lt;p&gt;Por isso que há eras meu amigo Strauss e o conhecido Joel falam sobre as necessidades básicas de um programador e criticam o resto. As necessidades básicas, na minha opinião, se resumem em três regras de ouro:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dê condições para o programador pensar&lt;/li&gt;
&lt;li&gt;Dê condições para o programador trabalhar&lt;/li&gt;
&lt;li&gt;Dê condições para o programador programar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fora isso, o resto é perfumaria, perda de tempo e enchimento de saco. Os bons programadores não querem ser gerenciados: querem programar. Só isso. Deixe-os com seus problemas e vá tomar conta de algo que não atrapalhe suas vidas. Já estará fazendo um imenso avanço na produtividade de sua empresa.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Provas de conceito... yes!</title>
  <link>http://www.caloni.com.br/provas-de-conceito-yes/</link>
  <pubDate>2009-03-19</pubDate>
  
  <guid>http://www.caloni.com.br/provas-de-conceito-yes/</guid>
  <description>&lt;p&gt;Uma prova de conceito bem feita segue todos os passos em uma forma micro para entender e provar como as coisas irão funcionar no código de produção: a forma macro.&lt;/p&gt;
&lt;p&gt;A consequência interessante disso é que, uma vez que a prova de conceito deva ser um miniprojeto das principais partes de um software, desenvolvê-la significa programar todas as partes que realmente importam, ou seja, centrais para o funcionamento.&lt;/p&gt;
&lt;p&gt;Portanto, conclui-se que desenvolver provas de conceito é a coisa mais divertida do Universo.&lt;/p&gt;
&lt;p&gt;Além de serem extremamente divertidas e disputadas entre os programadores, desenvolver provas de conceito gera uma gama de vantagens para o desenvolvimento &amp;quot;sério&amp;quot; do software como um todo, &amp;quot;rodável&amp;quot; e &amp;quot;vendável&amp;quot;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permite testar as ideias por trás do software antes de gastar todo o tempo desenvolvendo-o.&lt;/li&gt;
&lt;li&gt;Gera conhecimento para os programadores e para que outros produtos sejam desenvolvidos.&lt;/li&gt;
&lt;li&gt;Torna o desenvolvimento algo ainda mais divertido, pois tira a parte chata a respeito de comentar código, testar código, mensurar código, rever código, etc.&lt;/li&gt;
&lt;li&gt;Consegue tornar o milagre do cronograma realista mais perto do provável.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apenas essas vantagens já praticamente obrigam o profissional do software a pensar em produtos novos em termos de como pode-se testar tudo o que se está dizendo antes de realmente começar a trabalhar pra valer.&lt;/p&gt;
&lt;p&gt;Mas antes que se pense que fazer provas de conceito não requer nenhuma responsabilidade e que o que você quer ser quando crescer é desenvolvedor de prova de conceito, é necessário colocar alguns pingos nos is antes de continuar. Para criar provas de conceito realmente agregadoras para o projeto, deve-se sempre:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dividir o software em seus componentes tecnológicos mais críticos e vitais para o sucesso da solução.&lt;/li&gt;
&lt;li&gt;Proteger as provas de conceito contra qualquer tipo de preconceito a respeito da tecnologia em questão: pese somente os fatos!&lt;/li&gt;
&lt;li&gt;Conhecer as limitações do software antes mesmo de provar seu funcionamento (por exemplo, não vai funcionar no Windows NT nem a pau).&lt;/li&gt;
&lt;li&gt;Garantir que esse conhecimento seja sempre compartilhado entre todos do desenvolvimento, pois trata-se de um projeto vazio que formará talvez as bases de um novo produto; se todos conhecerem as bases primeiro, ficará muito mais fácil todos tomarem conta.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por último, deve-se pensar sempre em todos os programadores da equipe desenvolvendo provas de conceito. Um doce tão gostoso não pode ser privilégio apenas dos veteranos ou dos acadêmicos chatos, pois torna a vida dos &amp;quot;corregedores&amp;quot; de bugs chata e enfadonha. E error prone.&lt;/p&gt;
&lt;p&gt;Por isso, desde a estagiária até o mocinho bicentenário merecem mexer em código fresco pelo menos uma vez a cada ciclo de desenvolvimento, que terminará com uma versão nova cheia de melhorias que foram testadas em suas respectivas provas de conceito. Provas de conceito que todos tiveram a honra de brincar um pouquinho.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>A alça dentro do fio gerou um bloqueio da morte</title>
  <link>http://www.caloni.com.br/a-alca-dentro-do-fio-gerou-um-bloqueio-da-morte/</link>
  <pubDate>2008-10-21</pubDate>
  
  <guid>http://www.caloni.com.br/a-alca-dentro-do-fio-gerou-um-bloqueio-da-morte/</guid>
  <description>&lt;p&gt;Estava folheando um livro fenomenal que meu amigo havia pedido emprestado para ler quando me deparei com algumas traduções (o livro estava em português) no mínimo curiosas.&lt;/p&gt;
&lt;p&gt;Se trata do primeiro Windows Internals publicado após o lançamento da primeira versão do Windows NT, uma plataforma escrita (quase) inteiramente do zero para suplantar as versões 9x, que herdaram do DOS algumas partes indesejáveis em sistemas operacionais modernos.&lt;/p&gt;
&lt;p&gt;Sabe-se lá por que, essa edição foi traduzida. É interessante notar que naquela época foi dado um tratamento especial a alguns termos e conceitos já comuns no dia-a-dia do programador americano, apesar de quase nenhum desses termos ter se mantido em sua versão original. Os exemplos mais gritantes são as threads (fios ou linhas), os dead locks (bloqueios da morte) e handles (alças).&lt;/p&gt;
&lt;p&gt;Apesar de não ter nada contra traduzir termos do inglês para português (e vice-versa), algumas coisas incomodam em tradução de livros técnicos.&lt;/p&gt;
&lt;p&gt;Com essa informação, que pode ser usada apenas nos primeiros usos da palavra, agradaria gregos e troianos. Abaixo um exemplo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;os ponteiros em C (pointers) são um recurso rico e necessário para a escrita de programas de baixo/médio nível&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Por exemplo, ler um dado capítulo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... é muito importante inicializar seus ponteiros antes de usá-los.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E, depois de se acostumar com o termo, ler em outro capítulo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... sabe-se que a pior desgraça para um programador C são os famigerados apontadores selvagens.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Um exemplo notável é o famoso livro de algoritmos em C da O&#39;Reilly, que mesmo na nova edição com uma errata de 49 itens foi possível detectar mais erros. O exemplo abaixo consta no item 46 da edição de 2000 (Editora Ciência Moderna):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (opos &amp;gt; 0)
{
    if ( (temp = (unsigned char *)
        realloc(orig, opos + 1)) == NULL)
    {
        bitree_destroy(tree);
        free(tree);
        free(original); /* original??? */
        return -1;
    }

    orig = temp;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obs.: importante notar que no original não consta esse erro da variável original. Entendeu? Entendeu?&lt;/p&gt;
&lt;p&gt;Isso é pior do que não colocar a versão em inglês, pois dá a impressão que não existe significado a ser explicado. Por exemplo, ver antes do capítulo sobre threads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... quando um fio espera o outro e vice-versa, acontece o terrível bug da trava da morte.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para quem não descobriu o que foi escrito no original, se trata de um deadlock, cujo termo inclusive é usado no seu original na Wikipédia em português.&lt;/p&gt;
&lt;p&gt;Esses exemplos, salvo o exemplo do livro de algoritmos, foram criados para ilustrar os tipos de erros mais comuns em traduções de livros técnicos, e não estão relacionados com qualquer livro em específico. Então o que era inicialmente para ajudar as pessoas que estão iniciando alguns conceitos acaba por prejudicar ainda mais o aprendizado, gerando aquele tipo de confusão que só com ajuda extra (internet, professor, colega) pode ser resolvida.&lt;/p&gt;
&lt;p&gt;Assim como no vocabulário comum corrente, em que existem palavras dificilmente adaptáveis ou traduzíveis em um termo comum, como shopping e show, no meio técnico desabrocham as mais variadas expressões estrangeirísticas. Algumas são muito difíceis de encontrar seu primo lusófono, como link e login. Outros, no entanto, exageram um pouco as coisas, a ponto de conjugarmos um verbo em inglês usando nosso sistema gramatical (se você &amp;quot;stopar&amp;quot; o &amp;quot;debugador&amp;quot; vai &amp;quot;crashear&amp;quot; todo o sistema, porque esse software tá &amp;quot;bugado&amp;quot;!).&lt;/p&gt;
&lt;p&gt;O fato é que não há escapatória para quem trabalha nessa área, e no fundo isso é uma coisa boa, pois é da leitura técnica em inglês que podemos estender o nosso conhecimento além das barreiras do ponto com ponto br e encontrar conteúdo extremamente interessante (e inédito em nossa língua) para aprender. Se não estivéssemos abarrotados de estrangeirismos talvez fosse um pouco mais difícil fazer o switch entre essas duas linguagens. Entendeu? Switch? Entendeu?&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>O que acontece com um programador com pressa</title>
  <link>http://www.caloni.com.br/o-que-acontece-com-um-programador-com-pressa/</link>
  <pubDate>2008-10-05</pubDate>
  
  <guid>http://www.caloni.com.br/o-que-acontece-com-um-programador-com-pressa/</guid>
  <description>&lt;p&gt;Eu já sabia, mas é lógico que não ia falar.&lt;/p&gt;
&lt;p&gt;Há um tempo atrás um rapaz me pediu para responder uma série de questões sobre a carreira de programador C++. Era um rapaz empolgado com a idéia de aprender a linguagem em seis meses, com um roteiro, cronograma e um blogue recém-criados.&lt;/p&gt;
&lt;p&gt;Como quase toda uma geração do imediatismo, aconteceu o inevitável: o blogue já não é atualizado há quase dois meses e toda aquela empolgação do começo deve ter virado fumaça assim que a pessoa vira a esquina e aparece uma coisa nova para fazer. E daí surgem as desculpas, o blá-blá-blá de todos aqueles que nunca têm tempo.&lt;/p&gt;
&lt;p&gt;Eu sou um deles, mas de vez em quando atualizo esse meu espacinho =)&lt;/p&gt;
&lt;p&gt;Na experiência de vida que tenho com todas aquelas idéias mirabolantes que as pessoas possuem de fazer alguma coisa, seja um software, aprender algo novo, ou até criar uma rotina qualquer, eu diria que quase todas, se não todas, falharam.&lt;/p&gt;
&lt;p&gt;É natural que no começo, quando a idéia brota, e mais idéias formentam a idéia original, o empolgamento nos dá a falsa impressão que podemos fazer isso facilmente, e que é só planejar, ter vontade e ir em frente que conseguimos. É claro que toda essa impressão muda com o passar do tempo, principalmente para aquelas pessoas que possuem muitas idéias em muito pouco tempo, algo que acontece bastante com programadores, mas que em geral afeta todo mundo.&lt;/p&gt;
&lt;p&gt;Em se tratando de software, a primeira coisa que deve ser feita, sempre, é planejar as tarefas visíveis a serem feitas para esboçar um panorama possível para o futuro do projeto. Eu disse possível no sentido de realizável.&lt;/p&gt;
&lt;p&gt;O segundo passo é esquecer esse negócio de realizável, cair na real e encarar os fatos: o mundo não é perfeito. Comece a colocar defeitos no cronograma, tentar imaginar o que vai sair errado e, principalmente, conhecer você mesmo e as pessoas envolvidas para ter a real expectativa do que pode ser feito em quanto tempo.&lt;/p&gt;
&lt;p&gt;Após jogar água fria o suficiente (às vezes são necessários muitos baldes) sobre suas idéias novas e excitantes, temos um panorama um pouco mais preciso, mais realista e, agora sim, passível de ser feito e acontecer de verdade.&lt;/p&gt;
&lt;p&gt;Só que ainda não acabou.&lt;/p&gt;
&lt;p&gt;É claro que isso tudo é o começo do projeto. Após a primeira semana, o primeiro mês, o segundo mês e o segundo semestre as atividades devem ser revistas e reprojetadas. Mais uma vez entra a regrinha da água fria. Não é porque deu errado no começo que não pode dar mais errado ainda no final.&lt;/p&gt;
&lt;p&gt;Esse pequeno chamado foi apenas um reforço do apelo que Rodrigo Strauss fez em nosso último encontro de C++. Nosso grupo precisa de mais pessoas que escrevam algo. Portanto, façam blogues, mas não os deixem desgarrados!&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Cnasi, geração Y e seus gastos em TI</title>
  <link>http://www.caloni.com.br/cnasi-geracao-y-e-seus-gastos-em-ti/</link>
  <pubDate>2008-09-25</pubDate>
  
  <guid>http://www.caloni.com.br/cnasi-geracao-y-e-seus-gastos-em-ti/</guid>
  <description>&lt;p&gt;Nosso crachá de visitantes dava direito a uma palestra. E haviam muitas. Porém, logo após a hora do almoço, das disponíveis uma era particularmente interessante, pois citava uma expressão que eu e minha colega nunca havíamos escutado: um senhor iria nos falar sobre como lidar com essas novas pessoas que estão cada vez mais invadindo nossas casas e nossos escritórios, pertencentes a esse grupinho, a tão famosa chamada geração Y.&lt;/p&gt;
&lt;p&gt;Agora não sei se a culpa foi dessa tal geração Y, mas o fato é que o folhetim estava errado e caímos em uma outra palestra, essa falando sobre um tema que aí sim nós nunca tínhamos ouvido falar: como gerenciar as finanças na parte de TI da empresa.&lt;/p&gt;
&lt;p&gt;O homem discursou por uma hora falando de como todos os principais frameworks de gerenciamento de custos, projetos e todas aquelas coisas, poderiam ser integrados para facilitar a vida do gestor de projetos que tem como tarefa saber o que irá continuar fazendo e o que irá cortar devido à lucratividade/risco perigosos.&lt;/p&gt;
&lt;p&gt;A grande questão dessa discussão, pelo que eu pude entender, foi que os custos de um projeto e manutenção são difíceis de mensurar se não existir alguém no meio daquele bando de nerds que consiga dizer quais são os recursos usados (quem), para que (tarefa) e por quê (vantagem). Sem contar que é necessário transformar isso em dado contábil. Além de que, como bem disse nosso palestrante, a maioria das empresas ainda considera o departamento de nerds uma despesa sem vantagens. E uma despesa bem cara, se estivermos falando dos salários atualmente pagos para esse pessoal.&lt;/p&gt;
&lt;p&gt;Mas vou parar por aqui antes que alguém levante a bandeira e queira discursar a respeito da justeza com que são pagas nossas mentes, um assunto muito precoce nos dias atuais. (Bom, talvez seja precoce para sempre, do jeito que a economia é ciência aberta.)&lt;/p&gt;
&lt;p&gt;O fato é que acabamos subindo a rua novamente sem saber que tal de geração Y é essa que nos fez entrar na palestra errada. Como sempre, nada que uma boa &amp;quot;googada&amp;quot; não resolva.&lt;/p&gt;
&lt;p&gt;Parênteses. Descobri recentemente que os seguidores do outro lado agora inventaram um novo &amp;quot;termo&amp;quot;: Windows-Live-procurada. Um de seus representantes, anteriormente um homem de respeito e opiniões fortes e imparciais, acredita este ser um termo de uso corrente no dia-a-dia.&lt;/p&gt;
&lt;p&gt;Pelo que pudemos encontrar, a tal da geração Y somos nós mesmo. Que espanto! E eu pensei que estávamos falando de uma raça alienígena ou algo assim. Talvez até seja, mas temos todos os genes da espécie humana.&lt;/p&gt;
&lt;p&gt;Aparentemente existem estudos &amp;quot;sérios&amp;quot; nos EUA que dividem as gerações usando letras e encontrando as principais diferenças entre nós mesmos e nossos pais e avós. Como essa última geração recebeu elogios de diversas partes do estudo, a nominação de geração Y foi se estendendo ao resto do mundo, principalmente nos novos mercados de tecnologia.&lt;/p&gt;
&lt;p&gt;A conclusão a que chego é que existem rótulos demais para as pessoas hoje em dia. As pessoas não podem mais ser simplesmente pessoas. Precisam ser nerds, geeks, ráquers ou geração Y. Se você não é, está de fora. Se está dentro, é antenado. Que é outro rótulo.&lt;/p&gt;
&lt;p&gt;Fim de passeio. Voltamos à empresa e falamos com um outro colega sobre o que havíamos aprendido sobre o uso dos recursos no gerenciamento dos projetos no departamento de TI de uma empresa. Ele disse: &amp;quot;TI pra quê? Só traz despesa esse negócio.&amp;quot;&lt;/p&gt;
&lt;p&gt;E viva a geração Y!&lt;/p&gt;
&lt;p&gt;Adendum. A palestra que participamos foi a &amp;quot;Por que implementar a gestão financeira de TI? Uma abordagem baseada no ITIL, COBIT/VAL IT, e PMBOK&amp;quot;, e queríamos ter visto a palestra &amp;quot;Desafio: Como Gerenciar a Geração Y&amp;quot;, que como pudemos ver não é tarefa fácil, já que essa geração não consegue nem entrar na palestra certa. Veja a grade do evento para mais informações.&lt;/p&gt;
&lt;p&gt;Ah, sim, meu crachá de gerente. Pois então, achei superinteressante o fato de eu ter entrado em um evento de segurança portando um crachá que diz &amp;quot;gerente&amp;quot; no nome quando na verdade eu continuo sendo de fato um programador. Fui eu que disse que era gerente na entrada da feira, como um pequeno teste de acessibilidade.&lt;/p&gt;
&lt;p&gt;Não que isso seja uma falha de segurança muito grave, mas imagine uma empresa suficientemente grande com pessoas mal intencionadas que foram convidadas a visitar a feira e escolheram ser gerentes ou diretores na hora de escolher o cargo. O que poderiam ter feito, em nome da empresa, dentro dessa feira? É algo a se pensar...&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Todo programador é um filósofo em potencial</title>
  <link>http://www.caloni.com.br/todo-programador-e-um-filosofo-em-potencial/</link>
  <pubDate>2008-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/todo-programador-e-um-filosofo-em-potencial/</guid>
  <description>&lt;p&gt;Tivemos uma conversa muito frutífera hoje durante o almoço ao conhecer uma professora que sentava ao nosso lado, exímia conhecedora da mente humana e amante das artes nobres como a filosofia e a lógica.&lt;/p&gt;
&lt;p&gt;O importante dessa colóquio foi ter encontrado um motivo muito mais forte para gostar de programação do que qualquer outro que já me surgira na cabeça desde que mexo com essas coisas:&lt;/p&gt;
&lt;p&gt;O computador não deve dar ordens ao homem e este repeti-las como uma máquina. O homem, como ser pensante, deve dizer ao computador o que fazer, e este responder-lhe diligentemente.&lt;/p&gt;
&lt;p&gt;Para resumir desde o começo essa conclusão, um exemplo paupável: quando fazemos um curso de treinamento, uma especialização, uma faculdadeZINHA ou qualquer outro evento de &amp;quot;aprendizado&amp;quot; que nos propõe a digitar comandos sem fim, repetidamente para um computador, para no final ganharmos um comprovante de que sabemos digitar aqueles comandos decorados e repetitivos como ninguém, isso quer dizer que as coisas vão mal, se e quando tudo se resume a isso.&lt;/p&gt;
&lt;p&gt;Por outro lado, ao aprendermos, por nós mesmos ou pelos outros, a usar o computador como a ferramenta que vai fazer de nossas idéias realidade, e nossas criações se materializam de uma forma inimitável, então, somos criadores e comandantes da máquina, e não uma cópia de uma máquina que repete comandos. Então, nesse caso, temos um motivo para viver: criar sempre coisas novas e interessantes que surgem em nossas cabeças.&lt;/p&gt;
&lt;p&gt;E ser feliz é isso: achar significado para o que fazemos. É criar. Pura e simplesmente. Quem está sempre criando está sempre satisfeito com sua vida. Pois dá sentido a ela todo santo dia. Isso vale para qualquer profissão interessante o suficiente. Não precisa fazer código. Pode construir móveis, ensinar pessoas ou desenhar uma nova peça de roupa.&lt;/p&gt;
&lt;p&gt;Criar é pensar. Programadores pensam em coisas novas todos os dias e as executam. Quando encontram algo repetitivo, organizam o código para não terem que repetir mais a mesma baboseira e voltam a fazer coisas interessantes e originais. Se existe um processo enfadonho e chato, o programador inventa um jeito para o computador fazê-lo, e não ele. E a vida do programador sempre gira em torno desse ciclo: dispensa as coisas chatas mandando o computador fazer e se dedica a fazer coisas novas.&lt;/p&gt;
&lt;p&gt;A discussão não parou por aí, pois me levou a entender o vazio que eu sinto ao estudar coisas que não uso nunca. Porque aprender por aprender não vai me levar a lugar algum. Pode até ser perigoso ler coisas que não servem para nada. Me faz parecer inútil.&lt;/p&gt;
&lt;p&gt;E não livros longos, ricos em detalhes e que fazem perder o fio da meada ao terminá-lo.&lt;/p&gt;
&lt;p&gt;Também me mostra que mais vale a pena aprender a pensar, ou pensar melhor, do que aprender uma nova tecnologia em um livro recém-lançado de 1500 páginas. Quando aprendemos a pensar resolvemos os problemas por nós mesmos, e não por uma formulazinha mágica tirada do saite favorito de bricabraques.&lt;/p&gt;
&lt;p&gt;Ser programador é criar. Criar é bom. Criar nos faz felizes.&lt;/p&gt;
&lt;p&gt;E é por isso, realmente, que amo o que eu faço.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Informação demais é anti-informação?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If Philosophers Were Programmers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

     
        <item>
  <title>Duas pequenas dicas para programar no caos</title>
  <link>http://www.caloni.com.br/duas-pequenas-dicas-para-programar-no-caos/</link>
  <pubDate>2008-08-15</pubDate>
  
  <guid>http://www.caloni.com.br/duas-pequenas-dicas-para-programar-no-caos/</guid>
  <description>&lt;p&gt;Ultimamente não tenho acertado muito bem meus cronogramas, com erros que variam de um dia a uma semana. A causa desse problema, pelo que eu tenho conseguido detectar, está em dois problemas que acredito acontecer de maneira muito freqüente em um ambiente de desenvolvimento que ainda está no caos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mudança constante de prioridade&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Falta de testes básicos no software antes de mexer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Portanto, aí vão algumas dicas empíricas para lidar com esses detalhezinhos que são &amp;quot;faceizinhos de serem esquecidinhos&amp;quot; (by Rafael).&lt;/p&gt;
&lt;p&gt;Simples de dizer, não? No entanto, se o que você está fazendo é tão pequeno quanto duas horas passa a ficar um pouco mais fácil. E isso é possível se você souber fazer direito um cronograma, dividindo suas tarefas em tarefas menores, mais paupáveis e &amp;quot;pausáveis&amp;quot;.&lt;/p&gt;
&lt;p&gt;Um exemplo real serial o de uma mudança em um projeto que envolva três componentes: uma LIB estática, um componente COM e um driver. No caso de ser necessário parar no meio do projeto, é importante que essas três partes estejam bem separadas em tarefas que alteram o código-fonte um a um, sendo a última tarefa a integração entre todos. É interessante notar que, se for bem estruturado o projeto, é possível fazer testes individuais por componente antes da integração de fato, o que torna as coisa bem menos dolorosas. A divisão seria algo incremental e possivelmente paralelizável:&lt;/p&gt;
&lt;p&gt;Você tem certeza que o programa está rodando como deveria, que não existem problemas paralelos e relacionados que podem prejudicar seu desempenho cronogrametal? A última versão funciona realmente como deveria funcionar? Não? Nesse caso, esqueça sua estimativa inicial: ela foi pro espaço. Quer dizer, do ponto de vista otimista, adiada para depois de serem resolvidos os problemas atuais.&lt;/p&gt;
&lt;p&gt;Mais uma vez, os testes individuais (chamados de unit tests) são importantes para a consistência do projeto no decorrer de sua vida. Isso aliado a um processo de build automatizado que detecte erros de funcionamento e compilação pode economizar um tempo enorme na hora de fazer uma &amp;quot;pequena modificaçãozinha&amp;quot; naquele fonte escroto.&lt;/p&gt;
&lt;p&gt;Em empresas onde a qualidade de software é piada, essas duas atitudes podem salvar algumas vidas e projetos no meio do caminho, apesar de parar no meio das tarefas não ser uma das melhores práticas de um desenvolvimento sério.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Resultado do Seminário CCPP</title>
  <link>http://www.caloni.com.br/resultado-do-seminario-ccpp/</link>
  <pubDate>2008-06-03</pubDate>
  
  <guid>http://www.caloni.com.br/resultado-do-seminario-ccpp/</guid>
  <description>&lt;p&gt;Aconteceu nesse fim-de-semana, como era previsto, o nosso primeiro Seminário CCPP Brasil, com direito a pessoas de todas as idades e origens, mas todas com algo em comum: a paixão e o interesse pelas linguagens-mestre do mundo da programação.&lt;/p&gt;
&lt;p&gt;Começo esse artigo agradecendo a todos os que direta e indiretamente participaram para o sucesso do evento, entre eles os organizadores, o carro-chefe responsável por acordar o espírito C++ da galera no início do ano, os palestrantes e, claro, óbvio, toda a comunidade C++ que participou em corpo (vulgo hardware) e alma (vulgo software).&lt;/p&gt;
&lt;p&gt;Termino a introdução fazendo uma minicrítica ao preço pago pelos participantes. Não que eu ache que seja muito, pelo contrário: dado o alto nível técnico das palestras, parece até mentira termos acesso a um evento com essa estrutura por tão pouco. Porém, o muito e o pouco são relativos, e ainda acredito que existam pessoas que não vão aos encontros por falta de recursos. Por isso mesmo vai um apelo para que nos futuros encontros tenhamos alguma forma de permitir às pessoas menos favorecidas de participar democraticamente dessa que é a expressão viva das linguagens C e C++ em nosso país.&lt;/p&gt;
&lt;p&gt;Vamos às palestras!&lt;/p&gt;
&lt;p&gt;Dicas e Truques de Portabilidade, por Wanderley Caloni&lt;/p&gt;
&lt;p&gt;É muito difícil analisar uma palestra feita por você mesmo. É mais difícil ainda quando essa palestra é a primeira de uma batelada de argumentações de alto nível técnico que seguiram o dia. Posso dizer, no entanto, que consegui o que queria quando fui para o evento: demonstrar as dificuldades e as facilidades de tornar um código portável, independente se entre sistemas operacionais, ambientes ou compiladores.&lt;/p&gt;
&lt;p&gt;Foi visto primeiramente o que faz da portabilidade uma coisa difícil. Detalhes como sintaxe e gramática fazem toda a diferença quando o que se almeja é um código limpo de imperfeições trazidas pelo ambiente de desenvolvimento. Também foi dada especial atenção às famigeradas extensões de compiladores, que fazem a linguagem parecer uma coisa que não é.&lt;/p&gt;
&lt;p&gt;Por fim, foram apresentadas algumas sugestões movidas pela experiência e estudo dessas mesmas dificuldades. Para ilustrar, dois exemplos bem vivos de como um código portável deve se comportar, tanto no código-fonte quanto em sua documentação.&lt;/p&gt;
&lt;p&gt;Programação Concorrente com C++, por Fábio Galuppo&lt;/p&gt;
&lt;p&gt;Artigo sobre apresentação&lt;/p&gt;
&lt;p&gt;Para quem está acostumado com os temas geralmente &amp;quot;gerenciados&amp;quot; de Fábio Galuppo com certeza deve ter se surpreendido com a descrição teórica dos inúmeros problemas que cercam a vida do programador multithreading. O palestrante partiu do mais simples, o conceito de threads, conceito que, segundo ele mesmo, pode ser explicado em 15 minutos, para algo mais sutil e que gera muitos erros escondidos: o conceito de locks (semáforos, mutexes, etc).&lt;/p&gt;
&lt;p&gt;Os programadores em nível de sistema devem ter adorado o contexto histórico dos problemas (você sabia que o primeiro lock inventado foi o semáforo?) tanto quanto o contexto teórico (explicação sobre modelo de memória).&lt;/p&gt;
&lt;p&gt;Um destaque especial foram os experimentos com código rodando de verdade no Visual Studio, como o exemplo que tenta criar o maior número de threads possível na arquitetura 64. Simplesmente assustador!&lt;/p&gt;
&lt;p&gt;Se por um lado faltou tempo para explicar os usos e princípios das bibliotecas de programação paralela disponíveis e mais usadas do mercado, por outro a palestra preencheu uma lacuna importante na minha primeira palestra sobre threads em C++, demonstrando os erros mais comuns e o que não se deve fazer em programas que rodam mais de uma thread.&lt;/p&gt;
&lt;p&gt;Mais uma vez voltando à teoria, a palestra foca mais uma vez em bons princípios de design, como o padrão de projeto monitor e a descrição dos modelos onde é justificado o uso de mais de uma thread no programa.&lt;/p&gt;
&lt;p&gt;Programação Multiplataforma Usando STL e Boost, por Rodrigo Strauss&lt;/p&gt;
&lt;p&gt;Artigo sobre apresentação&lt;/p&gt;
&lt;p&gt;Como sempre, Strauss está apaixonado pelo Boost (e a STL). Descrevendo as partes mais importantes que todo programador C++ moderno deve saber sobre essas bibliotecas, ambas modernas, a palestra focou principalmente no uso do dia-a-dia, e as vantagens produtivas que o C++ atual pode ter sobre o velho e tradicional programa em C com listas encadeadas artesanais.&lt;/p&gt;
&lt;p&gt;Entre as coisas mais importantes citadas, que todo programador do novo século deveria saber, estão:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A total falta da necessidade de desalocarmos objetos manualmente em nossos programas, visto que o auto_ptr (STL) e shared_ptr (Boost) dão conta do recado de maneira impecável.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A total falta da necessidade de usarmos aqueles velhos _arrays _em C que quase nunca sabemos o tamanho exato para guardar nossos valores (e que continuamente colocávamos com o tamanho 100, MAX_PATH, ou UM_OUTRO_DEFINE_COMUM_EM_LINUX). A classe boost::array provê todas as funcionalidades básicas, além das avançadas, do uso de _arrays _tradicionais, sem qualquer &lt;em&gt;overhead&lt;/em&gt; adicional de um _array _em C.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A total falta de necessidade de ficar convertendo _strings _e inteiros. Com a ajuda da classe std::string e de construções geniais como lexical_cast (Boost), felizmente podemos deixar nossas velhas funções que precisavam de um &lt;em&gt;buffer&lt;/em&gt;, como _itoa (embora não-padrão).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfim, para quem pôde ver, a palestra focou nos princípios que farão hoje em dia um programador C++ completo, profissional e que, como seus colegas de outras linguagens, se preocupa igualmente com a produtividade de seu código. Ah, sim, e não gosta nem um pouco de reinventar a roda.&lt;/p&gt;
&lt;p&gt;Técnicas de Otimização de Código, por Rodrigo Kumpera &amp;amp; André Tupinambá&lt;/p&gt;
&lt;p&gt;Aparentemente o que pensei que seria, em minha sincera opinião, um desastre (dois palestrantes falando sobre a mesma coisa) se transformou em uma combinação estupenda de teoria e prática aplicadas à arte de otimização de código. Rodrigo e André conseguiram destrinchar o tema harmoniosamente, sempre dividido entre técnicas avançadas (algumas demonstradas pela experiência dos palestrantes) e teoria disciplinar, que visa alertar o wannabe que otimizar pode ser uma coisa boa; porém, preste atenção aos que já fizeram isso têm a dizer.&lt;/p&gt;
&lt;p&gt;Com uma didática impecável, o novato nesse tema (como eu) pôde ver as dificuldades de conseguir determinar o objetivo de todo otimizador de código que, segundo eles, deve estar sempre atento na máxima de que &amp;quot;toda otimização é na verdade uma troca&amp;quot;. Ou seja, se o programador quer melhor processamento, pagará com memória, se quiser otimizar espaço na RAM, irá gastar mais com processamento e/ou disco, e assim por diante.&lt;/p&gt;
&lt;p&gt;Foram apresentados exemplos reais de otimização, além de dicas muito importantes sobre o comportamento das compilaçõe de cada dia.  Você sabia, por exemplo, que ao declarar em escopos mais locais suas variáveis usadas apenas em pequenos trechos de código, estará dando uma poderosa dica ao compilador para que ele consiga usar os registradores no máximo de sua capacidade?&lt;/p&gt;
&lt;p&gt;Ao final, como é de praxe, tivemos um sorteio de ótimos livros sobre programação e C++ em geral, com destaque aos livros do Herb Sutter. Rodrigo Strauss, conhecido fundador dos encontros, recebeu sua mais que merecida homenagem ao receber um de seus livros autografados. É o mais novo MVP da comunidade!&lt;/p&gt;
&lt;p&gt;E por falar em comunidade, e agora podemos ver claramente, estamos com uma força bem maior do que no início do ano. A seqüência de ótimos eventos, além de nossos mestres do conselho Jedi de programadores C++, prova finalmente que, se depender da qualidade dos desenvolvedores, o Brasil pode sim ser uma poderosa fonte de programas de qualidade que façam coisas bem mais interessantes do que acessar um banco SQL. Nós já temos a matéria-prima.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discussão sobre o evento na nossa lista&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Imagens do evento cedidas por Fernando Roberto (valeu, Ferdinando!).&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>CSI: Crashed Server Investigation?</title>
  <link>http://www.caloni.com.br/csi-crashed-server-investigation/</link>
  <pubDate>2008-04-23</pubDate>
  
  <guid>http://www.caloni.com.br/csi-crashed-server-investigation/</guid>
  <description>&lt;p&gt;O artigo de Jeff Dailey em que ele compara a nossa atividade de &amp;quot;cientistas do debugging&amp;quot; com a atividade dos profissionais da análise forense é exatamente o que eu penso sobre nossa profissão. Freqüentemente assisto ao CSI: Las Vegas e mais freqüentemente ainda uso os métodos científicos empregados pela equipe de Gil Grissom para resolver os problemas mais escabrosos que podem ocorrer em um sistema.&lt;/p&gt;
&lt;p&gt;Jeff fez uma divertida comparação entre todas as etapas de uma análise forense com todas as etapas de nossa análise do bug. Aqui vai a tradução livre dessas etapas (em linguagem cinematográfica):&lt;/p&gt;
&lt;p&gt;São duas horas da manhã. A câmera focaliza um pager explodindo sobre um criado-mudo... só pode querer dizer uma coisa: algo de ruim aconteceu e pessoas estão à procura de ajuda. O detetive acorda e diz para sua mulher: &amp;quot;Desculpe, eles precisam de mim... Eu tenho que ir&amp;quot;.&lt;/p&gt;
&lt;p&gt;Engraçado, eu fiz a mesma coisa, só porque alguém encontrou um servidor morto.&lt;/p&gt;
&lt;p&gt;O detetive aparece na cena do crime. Todos os policiais estão confusos, então eles apenas mantém a área isolada até que os experts cheguem. Seus anos de experiência e iluminação única irão permiti-lo ver coisas que os outros não vêem.&lt;/p&gt;
&lt;p&gt;Umm... Isso só me parece apenas familiar. Eu tipicamente uso Live Meeting ou Easy Assist...&lt;/p&gt;
&lt;p&gt;Usando uma combinação de ferramentas especializadas e métodos aprendidos tanto na escola quanto os aprendidos com o tempo, a evidência é coletada na cena para que seja feita uma pesquisa adicional no escritório. Testemunhas são questionadas: &amp;quot;Por volta de que horas isso ocorreu?&amp;quot;, &amp;quot;Você ouviu algum barulho estranho&amp;quot;, e &amp;quot;você viu alguém ou alguma coisa não usual&amp;quot;. Fotos são tiradas, objetos são arquivados, fibras e amostras de DNA são coletadas.&lt;/p&gt;
&lt;p&gt;Ok, então o escopo do problema está determinado e todas as informações disponíveis foram obtidas. Ummm... eu faço isso todo dia.&lt;/p&gt;
&lt;p&gt;O prefeito chama o oficial para que diga ao chefe dos detetives que nós devemos resolver este caso. Isso não pode acontecer de novo.  Nós devemos capturar o vilão!&lt;/p&gt;
&lt;p&gt;Sinta-se livre para substituir &amp;quot;prefeito&amp;quot; com qualquer figura de alto nível gerencial. Uau, isso ou é um cara mau e asqueiroso ou o driver de alguém está causando pool corruption causando um servidor crítico falhar!&lt;/p&gt;
&lt;p&gt;Nós agora cortamos onde o detetive está no laboratório, usando luminárias,  procurando por evidências de DNA, refletindo sobre os fatos principais do caso, pesquisando crimes passados.&lt;/p&gt;
&lt;p&gt;Eu não sei sobre você, mas eu simplesmente me refiro a isso como o processo de depuração.&lt;/p&gt;
&lt;p&gt;Finalmente um progresso: o DNA coletado na cena do crime identifica um suspeito que não deveria estar lá. Ao fazer uma pesquisa adicional, o suspeito tem um histórico desse tipo de atividade. O cara mau é capturado, os custos são arquivados e o caso está resolvido!&lt;/p&gt;
&lt;p&gt;Isso deve ser o mesmo que encontrar a causa principal, preencher um bug, e lançar uma correção.&lt;/p&gt;
&lt;p&gt;Para finalizar, uma frase do artigo original que resume tudo:&lt;/p&gt;
&lt;p&gt;&amp;quot;Ultimately that&#39;s what we do.  We are all detectives looking for the digital DNA of bugs in the wild affecting our customers.  We hunt them down using tools, expertise, and experience.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dmitry Vostokov imaginou siglas mais imaginativas e fiéis a todos os que depuram problemas em software, independente deste rodar em servidores ou máquinas de café. Além, é claro, de uma ótima dica de livro sobre análise forense. Thanks, Dmitry!&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Como ter um melhor blogue em 2008</title>
  <link>http://www.caloni.com.br/como-ter-um-melhor-blogue-em-2008/</link>
  <pubDate>2008-01-08</pubDate>
  
  <guid>http://www.caloni.com.br/como-ter-um-melhor-blogue-em-2008/</guid>
  <description>&lt;p&gt;Não é exatamente uma receita de bolo, tampouco uma lista de regras imutáveis. Na verdade, apenas algumas dicas que o criador do termo (we)blog deu sobre como ele imagina que os blogueiros deveriam se comportar em relação aos seus blogues. Entre os toques, ele inicialmente comenta que o princípio de um weblog é ser um histórico dos sítios que navegamos, e que eventualmente podemos publicar conteúdo original. Bem, esse humilde blogue faz exatamente o oposto, acreditando que o conteúdo publicado aqui em português dificilmente será encontrado na web, além de que me sinto um inútil se não colaborar com o mundo usando o conhecimento que aprendi e aprendo no dia-a-dia.&lt;/p&gt;
&lt;p&gt;Por isso mesmo, aqui vão as dicas traduzidas, que encontrei no blogue de Lino Resende, verbatim (com meus comentários em itálico):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Um blog verdadeiro é um log de todos os sítios que você gostaria de salvar ou dividir. (Então, hoje, o del.icio.us é melhor para os bloggers do que o próprio Blogger). Isso seria como se os blogues fossem sítios de pesquisadores do google, o que não deixa de ser meia-verdade.&lt;/li&gt;
&lt;li&gt;Você pode, é claro, colocar links sobre você fora do seu blog, mas se o blog tem mais posts originais do que links, recomendo aprender um pouco de humildade. É um golpe bem dado ao Caloni.com.br. Bom, espero ser mais humilde em 2008 =).&lt;/li&gt;
&lt;li&gt;Se fizer uma pequena procura antes de postar, vai descobrir que alguém já falou do seu asunto e melhor do que você. Isso eu faço, mas, como já disse, conteúdo em português é mais escasso, o que compensa a publicação de artigos sobre assuntos já tratados em outras línguas.&lt;/li&gt;
&lt;li&gt;Seja você mesmo, sem suprimir links que não o tratem favoravelmente. Seus leitores querem saber quem efetivamente você é. Essa dica é particularmente difícil para blogues técnicos, como o meu e de muita gente. No entanto, nós tentamos não parecer bots, acredite!&lt;/li&gt;
&lt;li&gt;Você pode melhorar o título das páginas que sugere quando as descrever e dar o link. (Assegure-se de sua descrição fará os leitores se lembrarem dela, reconhecendo páginas que já visitaram ou quando a visitarem novamente). Essa é mais fácil de fazer.&lt;/li&gt;
&lt;li&gt;Use sempre algum adjetivo para descrever sua própria reação à página que recomenda (ótima, imaginativa, clara, útil, etc.). Essa dica foi clara e útil. Além de imaginativa e ótima, claro.&lt;/li&gt;
&lt;li&gt;Dê os créditos à fonte que você usou. Assim, seus leitores podem conferi-la e &amp;quot;moverem-se para cima&amp;quot;. Essencial, especialmente, mais uma vez, se tratando de blogues técnicos.&lt;/li&gt;
&lt;li&gt;Cuidado com os problemas - formatação estranha, múltiplas páginas com histórias, textos muito longos, etc. Não esconda o link principal entre outros auxiliares, mal identificados ou pobres. Essa dica é mais para weblogs de fato. Eu passo.&lt;/li&gt;
&lt;li&gt;Escolha alguns autores favoritos ou celebridades e crie um feed no Google News, acompanhando novas menções a eles. Assim, outros fãs podem segui-los através do seu blog. Você pode seguir os que sigo através da minha Home Page. Eventualmente compartilho posts através do Google Reader.&lt;/li&gt;
&lt;li&gt;Reindique seus links favoritos de tempos em tempos para quem os perdeu, esquece ou o está lendo pela primeira vez. Essa é uma coisa que está faltando aqui no Caloni.com.br, que é a manutenção dos artigos antigos. Prometo me esforçar mais em 2008. Promessa de ano-novo =).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;É isso. Concorda, discorda, sem corda? Imagino que a dica que mais me afetou foi aquela sobre humildade, lá no começo. Digo isso porque ainda está martelando na minha cabeça, pronta para transformar este blogue em algo mais democrático e transparente.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Como ser um melhor desenvolvedor em 2008</title>
  <link>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-em-2008/</link>
  <pubDate>2008-01-02</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-em-2008/</guid>
  <description>&lt;p&gt;Aproveitando que está se aproximando meu prazo final para minhas resoluções de seis meses atrás, e o DQ já fez o checklist dele, vou dar uma espiada na minha lista de desejos atual e fazer uma nova lista para 2008.&lt;/p&gt;
&lt;p&gt;Comecei, fiz vários exercícios, mas ainda não acabei todas as aulas. Descobri que a memória pode ser muito mais bem treinada do que realmente é, e existem técnicas bem pensadas que fazem isso sem muito mais esforço do que apenas tempo despendido. De fato todos nós já temos uma memória incrível, só precisamos treiná-la adequadamente.&lt;/p&gt;
&lt;p&gt;Como comecei e ainda não parei considero esta tarefa realizada (começar e ganhar ritmo é o mais difícil) e estendido para 2008 inteiro.&lt;/p&gt;
&lt;p&gt;Comecei, fiz quase todos os exercícios e terminei. De fato melhorou em muito minha capacidade de concentração na hora de ler um texto rápido, embora eu ainda fique com muito sono quando faço isso. O importante agora é nunca deixar de treinar, e melhorar cada vez mais o poder dos movimentos oculares.&lt;/p&gt;
&lt;p&gt;Não existe milagre, mas existem coisas que podemos fazer para ajudá-lo a acontecer. Foi isso que aprendi durante minhas inúmeras tentativas de dominar o tempo e o espaço no desenvolvimento de software. Aprendi muita coisa, inclusive que escritórios não foram criados para serem lugares produtivos, e quase sempre é necessário se defender dos riscos que a internet faz para a saúde.&lt;/p&gt;
&lt;p&gt;Enfim, essa tarefa também terminou. Agora é só manutenção constante e disciplinada.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;Por fim, considero se achar melhor depois de ter melhorado um ou dois itens da vida profissional uma &amp;quot;escrutinisse&amp;quot;, tão inútil quanto achar-se já um desenvolvedor muito bom. Porque a qualquer hora podemos cometer novamente aquelas besteiras que fazíamos há cinco anos, e a qualquer hora podemos ter idéias brilhantes. O importante, na minha opinião, é aprender exatamente por que erramos e por que acertamos. Aprender exatamente, e lembrar-se disso, pode ser um enorme catalisador de anos de depuração aleatória.&lt;/p&gt;
&lt;p&gt;Sem estar na lista previamente concebida, comecei a fazer outras coisas de maneira mais eficiente, seja relacionado ao trabalho ou não:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aprender o leiaute do teclado Dvorak. Treino todo dia cinco minutos há três meses a digitação usando esse leiaute, porque é mais simples, mais rápido e dói menos os dedos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anotar todas as coisas importantes. Seja uma idéia nova, uma idéia sobre uma idéia, ou até mesmo melhoramentos em algum software que dou manutenção, é importante manter tudo anotado, porque sabe-se lá quando isso vai ser usado. Mas, quando for, quem vai se lembrar?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bloguear constantemente. Apesar dos sacrifícios que isso às vezes causa, é edificante nunca &amp;quot;deixar a bola cair&amp;quot;. Minha regra é sempre publicar um artigo dia sim, dia não durante a semana. Em uma semana começo na segunda, em outra na terça, e assim sucessivamente. Tem funcionado desde que reiniciei o blogue há seis meses, e espero que continue assim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usar novo controle de versão em casa. Há um mês mais ou menos conheci o Mercurial, que é um sistema de controle de versão muito leve e não-centralizado, duas coisas que fazem uns sininhos soarem em minha cabeça. Ele é baseado conjunto de modificações e &lt;em&gt;merge&lt;/em&gt;, duas coisas a que não estou acostumado e me forcei a aprender.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Não é muito difícil definir essa lista, pois ela na verdade são as mesmas duas listas que citei anteriormente. Comecei a fazer essas coisas seis meses atrás. Para um fumante de fato parar, uns cinco anos de abstinência é um bom indicador. Acredito que, para um hábito se enraizar, um ano e meio pode ser de bom tamanho.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Cronogramas</title>
  <link>http://www.caloni.com.br/cronograma/</link>
  <pubDate>2007-10-04</pubDate>
  
  <guid>http://www.caloni.com.br/cronograma/</guid>
  <description>&lt;p&gt;Nunca fui muito bom em definir cronogramas e nunca conheci alguém que fosse. Porém, ultimamente, no conforto do lar (férias), estou me saindo razoavelmente bem ao aplicar no meu dia-a-dia algumas regras que estabeleci como sendo boas pra mim. Não são regras que baixei do sítio do Joel nem é um design pattern, mas já me ajudam um bocado. Gostaria de compartilhá-las com meus pontuais leitores, que sempre entregam seus projetos em dia e nunca se esquecem de comentar uma linha de código sequer. Vocês são meu objetivo de vida e motivo de orgulho deste humilde blogue, que se esmera a cada dia que passa para ser fiel à inegável qualidade do meu público. Quando crescer quero ser igual a vocês.&lt;/p&gt;
&lt;p&gt;Mas enquanto não sou, vamos às regras.&lt;/p&gt;
&lt;p&gt;Esse é o primeiro grande passo: admitir que acertar cronogramas é como acertar na loteria: milhões de pessoas tentam toda semana e uns poucos gatos pingados conseguem de vez em quando. E ainda assim por acaso.&lt;/p&gt;
&lt;p&gt;O importante nessa analogia da loteria é perceber que, independente de ser difícil de acertar, isso não impede as pessoas de tentar. Veja você, elas (normalmente) não jogam 1, 2, 3, 4, 5, 6. Por quê? Porque elas tentam jogar no que acreditam ser uma combinação mais provável. E antes que um sábio chinês diga que a chance de sair a seqüência 1, 2, 3, 4, 5, 6 é tão provável quanto qualquer outra, explico que a analogia aqui é psicológica, não matemática. As pessoas tentam acertar, por mais irracional que isso pareça. A mesma filosofia deve ser seguida para cronogramas. Não chute valores que estão dentro da sua zona de conforto, mas tente de fato chegar o mais próximo possível da realidade.&lt;/p&gt;
&lt;p&gt;E, quem sabe um dia, você não é sorteado.&lt;/p&gt;
&lt;p&gt;Resumidamente: você fará uma tarefa em uma hora. Mas, diabos, você não sabe disso antes de fazer e coloca no cronograma três horas. Quanto tempo você vai levar agora? Três horas. Não que você não consiga em menos tempo, mas, ao &amp;quot;alargar&amp;quot; a janela de tempo para três horas, seu ritmo irá seguir essa premissa e será mais lento.&lt;/p&gt;
&lt;p&gt;Obviamente que o inverso não é verdadeiro. Quer dizer, você não vai terminar uma tarefa de uma hora em dez minutos se colocar dez minutos na sua tabela mágica. Isso, mais uma vez, não é matemática: é psicologia.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A mesma analogia absurda serve para valores muito altos. Se estimar três meses para uma tarefa de uma hora, terá três meses para procurar um emprego novo, e não para terminar a tarefa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Atualização: encontrei um artigo no Efetividade explicando sobre esse fenômeno, que já tinha nome e dono registrados antes de eu pensar neles: se chama Lei de Parkinson e reza que &amp;quot;as tarefas se expandem para ocupar todo o tempo disponível&amp;quot;. Vale a pena a leitura.&lt;/p&gt;
&lt;p&gt;Sim, o velho ditado de dividir para conquistar. Afinal, é muito melhor estimar o tempo para fazer uma nova função do que estimar o tempo total para a nova versão do produto. Portanto, trate de dividir o seu elefante. O limite é a partir do momento em que se sentir confortável para prever o tempo necessário a ser gasto em uma subtarefa.&lt;/p&gt;
&lt;p&gt;É muito simples ilustrar e entender esse conceito com código. Voltando ao caso da função, digamos que você consiga terminar a bendita função em exata uma hora. Você é bom, hein?&lt;/p&gt;
&lt;p&gt;Porém, essa função ainda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;não foi comentada,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;não foi testada,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;não foi testada em &lt;em&gt;release&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logo, essa é uma tarefa em que você termina o mais importante em uma hora... mas não termina tudo. Deve-se sempre considerar a tarefa por completo, pois no final de quinze tarefas vai faltar comentar e testar tudo isso, o que aumentará consideravelmente a imprevisiblidade no seu cronograma.&lt;/p&gt;
&lt;p&gt;Seja honesto consigo mesmo e com seu chefe: você realmente trabalha 8 horas por dia? É lógico que não! E não é nenhuma vergonha admitir isso. Todos nós temos emails para ler e responder, reuniões para presenciar e bloques importantes para acompanhar. Portanto, ignore essa conversa fiada de 8 horas e admita: não se deve contar os dias como se eles tivessem 8 horas.&lt;/p&gt;
&lt;p&gt;Qual o valor de um dia, então? Cada um sabe o valor que deve ser decrementado desse valor simbólico de 8 horas, mas esse valor sempre será menor. Não se iluda!&lt;/p&gt;
&lt;p&gt;A maneira com que eu administro meu tempo tenta (eu disse tenta) seguir as regras até aqui dispostas. Além dessas eu adicionei algumas regras minhas, baseadas em valores razoáveis e premissas consideravelmente lógicas. Aliás, isso me lembra uma última regra geral:&lt;/p&gt;
&lt;p&gt;O cronograma costuma (deveria) ser considerado uma coisa pessoal. Por quê? Porque cada um tem seu tempo. O que vale mais ao executar uma tarefa geralmente é (deveria ser) qualidade, e não quantidade. Seu vizinho de baia costuma terminar as coisas na metade do tempo que você? Bom para ele. Porém, se você tenta empregar o mesmo ritmo ao seu dia-a-dia vai ter que gastar depois mais do dobro do tempo que você economizou corrigindo os erros de uma tarefa feita nas coxas. Nada é &amp;quot;de grátis&amp;quot;.&lt;/p&gt;
&lt;p&gt;Encare o trabalho assim como dormir: cada um tem o seu número de horas noturnas para descansar. Se dormir mais ou menos que o normal isso irá influenciar mais tarde, quando acordar. Alguns dormem 4, outros 12 horas. A média é 8. Mas e daí?&lt;/p&gt;
&lt;p&gt;Primeiro eu tento usar um princípio que a maioria das pessoas conhece e a minoria acredita: se chama princípio de Pareto. Ele diz que 20% de uma tarefa resolve 80% dos problemas. Aos poucos eu fui acreditando nele até que cheguei à conclusão que deve funcionar, porém existe um problema: definir quais são esses 20%.&lt;/p&gt;
&lt;p&gt;Voltando novamente no caso da função, é óbvio que a parte mais importante é fazer a função. Mais uma vez, cada caso é um caso, e o importante é desenvolver esse feeling do que é mais importante. Fazendo o que é mais importante o resto virá complementar a solução.&lt;/p&gt;
&lt;p&gt;Essa ordem do que é mais importante deve servir para dividir qualquer tarefa e as tarefas de cada dia, ordenadas por importância. Dessa forma, é fácil começar o dia ou uma tarefa maior pelo que é mais importante. Isso nos leva a um segundo problema: definir o que é importante.&lt;/p&gt;
&lt;p&gt;A maior dificuldade em definir o que é importante é que muitas vezes ele se confunde com o que é urgente, mesmo sendo dois conceitos bem diferentes.&lt;/p&gt;
&lt;p&gt;Por exemplo, para mim foi urgente escrever este artigo, já que estou compromissado com a freqüência do meu blogue. O importante fica por conta do conteúdo. Por exemplo, considero ter tocado em todos os pontos que julgo importantes para esse tema, o que por si só caracterizaria o fim desse artigo. E é isso aí.&lt;/p&gt;
&lt;p&gt;Bons cronogramas!&lt;/p&gt;
&lt;p&gt;PS: para começar a medir seu desempenho ao realizar tarefas tente usar este programa.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Efetividade.net: produtividade pessoal, lifehacking, GTD e dicas espertas&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

     
        <item>
  <title>Developer: you need to know English!</title>
  <link>http://www.caloni.com.br/developer-you-need-to-know-english/</link>
  <pubDate>2007-09-28</pubDate>
  
  <guid>http://www.caloni.com.br/developer-you-need-to-know-english/</guid>
  <description>&lt;p&gt;Eu realmente gostei desse negócio de tagging. =)&lt;/p&gt;
&lt;p&gt;Aproveitando o comentário do Ferdinando sobre o novo sistema de tradução eletrônica do MSDN, lanço aqui algumas dicas para aprender a tão falada língua de Shakespeare. Acredite, se você deseja ser um melhor programador, inglês é fundamental.&lt;/p&gt;
&lt;p&gt;O aprendizado de qualquer idioma deve estar focado em um objetivo. Se o objetivo é se comunicar, conversação é importante. Se você deseja ser um business man, um vocabulário mais específico deve ser aprendido. No nosso caso, em que a santa leitura técnica de cada dia é a necessidade básica, alguns passos básicos em inglês instrumental é um ótimo começo para começar a desvendar 80% da internet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, contudo, que inglês instrumental não é muito bem visto por escolas conceituadas de idiomas, tanto por ensinar um inglês limitado quanto por criar vícios de linguagem. O importante a lembrar nesse caso é: estamos usando o inglês como uma ferramenta de compreensão de textos que são úteis para nosso trabalho. Se o interesse/necessidade do inglês for maior, deve-se passar para as próximas dicas.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seguem alguns primeiros passos para começar a se aventurar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Procure estudar as palavras mais faladas no idioma.&lt;/li&gt;
&lt;li&gt;Aprenda as regrinhas para saber 400 palavras de lambuja.&lt;/li&gt;
&lt;li&gt;Use e abuse dos prefixos e sufixos de ambos os idiomas, pois geralmente seguem as mesmas regras.&lt;/li&gt;
&lt;li&gt;Mantenha um dicionário de expressões mais comuns nos textos que você lê. Aprenda-as.
Como todo bom aprendizado, a parte mais importante é a prática. E nada melhor para praticar do que ler pra caramba, certo? Isso quer dizer que você terá algumas tarefas diárias a partir de agora:&lt;/li&gt;
&lt;li&gt;Compre um dicionário inglês-português dos mais simples, seja o tradicional ou o eletrônico. Se não tiver dinheiro nem para isso, então use os disponíveis na internet.&lt;/li&gt;
&lt;li&gt;Escolha um artigo ou notícia e leia-o em um só dia. Para não desanimar, recomendo que seja relativamente curto e seja de um tema que muito te interesse. Pode até ser uma notícia curta do Slashdot.&lt;/li&gt;
&lt;li&gt;No começo tente traduzir um ou dois parágrafos desse mesmo artigo. Com o tempo, aumente o número de parágrafos até conseguir traduzir o texto inteiro.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se sua necessidade do inglês era apenas ler textos técnicos, pode parar por aqui. Mas nem sempre o conteúdo está escrito. Pode ser que existam palestras interessantíssimas do Channel9 ou podcasts de informática que você simplesmente não pode perder. Nesse caso, não há uma dica melhor do que imitar as crianças quando aprendem suas línguas nativas: ouça pessoas falando em inglês.&lt;/p&gt;
&lt;p&gt;Isso, aliada à sua prática diária de leitura de artigos, pode ser complementada se prestar atenção sempre na pronúncia correta das palavras que vai aprendendo. Muitas pessoas se tornam exímias leitoras de textos em inglês, mas não conseguem entender uma frase comum do dia-a-dia. Isso ocorre porque o inglês escrito difere em muito das regras de pronúncia do português escrito, o que gera muita confusão. Felizmente, na maioria dos dicionários existe sempre a transcrição fonética no início de cada vocábulo. É importante usá-la, e pelo menos uma vez você mesmo tentar pronunciar a palavra de sua boca.&lt;/p&gt;
&lt;p&gt;Nesse momento, o importante é fazer a transição escrito-falado. Por isso, tente ouvir podcasts em que o texto falado está disponível para leitura. Dessa forma é possível acompanhar os dois. Eu costumava ouvir o Word for the Wise da Merriam-Webster, por ser curto e interessante. Mas o ideal é unir o útil ao agradável, e nisso com certeza um podcast de tecnologia seria muito melhor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trapaceando: no começo, é comum haver divergências de pronúncia ou falta da capacidade de ouvir (listening). Você pode sempre apelar para as pronúncias disponíveis nos dicionários online, como o Merriam-Webster. Ouça um milhão de vezes para pegar o jeito.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Depois de obter um feeling básico sobre o que é escrito e o que é falado pode-se partir para estudos mais ousados e voltados para o aprendizado da língua de fato. Sabendo da facilidade que já obtivemos em traduzir textos e ouvir, considero as tarefas abaixo ideais para chegarmos ao tão sonhado language aquisition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ouvir música em inglês e ler a letra (original e traduzida). Uma boa banda para começar são os Beatles, cujo inglês britânico é fácil de entender.&lt;/li&gt;
&lt;li&gt;Assistir filmes em inglês com legenda (traduzida e original). Você pode começar com as comédias românticas que são lançadas quinzenalmente; como esse tipo de filme não prima pelo roteiro, eles se tornam um prato cheio para iniciantes.&lt;/li&gt;
&lt;li&gt;Assistir filmes em inglês sem legenda. Tente assistir filmes falados em diferentes lugares para ir pegando o ponto em comum, ou seja, no meio de todos os sotaques do mundo inteiro o idioma é sempre o mesmo. Descubra-o.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nesse ponto, uma ressalva: é extremamente natural não entender patavina do que as pessoas estão falando no começo do aprendizado. Mas o importante é nunca deixar de ouvir. Com o tempo, nossos ouvidos aos poucos vão sendo treinados para perceber os nuances da língua falada, e começamos a abrir nosso leque de conhecimento linguístico. Experimente!&lt;/p&gt;
&lt;p&gt;Existem inúmeros recursos hoje em dia para que duas pessoas em qualquer lugar do mundo consigam se comunicar pela grande rede. Afinal, depois de tanto aprender a ler e escutar, é hora de soltar o verbo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Participe de fóruns de discussão, de preferência sobre temas que te interessam muito.&lt;/li&gt;
&lt;li&gt;Comece a participar em salas de bate-papo de maneira passiva, apenas &amp;quot;ouvindo&amp;quot; o que os outros digitam.&lt;/li&gt;
&lt;li&gt;Comece a interagir em salas de bate-papo, de preferência com pessoas que também estão aprendendo inglês.&lt;/li&gt;
&lt;li&gt;Tome uma dose de coragem e instale o Skype ou outro programa de conversação e comece a freqüentar salas de conversação.&lt;/li&gt;
&lt;li&gt;Quando perder a vergonha, passe a se corresponder com pessoas que falem inglês em uma conversa mano a mano (&amp;quot;e aê manu, certu?&amp;quot;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como eu disse no começo desse artigo, cada pessoa tem seu objetivo em aprender uma língua. Cumprido esse objetivo, acredito que já podemos nos fazer por satisfeitos. Contudo, quando se começa a aprender de fato uma língua, é comum as pessoas acharem que chegarão na linha de chegada ao final do curso, ou ao conseguirem o tão sonhado certificado de proficiência. São marcos, não tenha dúvida. Mas não são o ponto onde se pode parar e descansar pelo resto da vida. Assim como usamos o português no dia-a-dia, o inglês também deve ser usado diariamente. Se não for usado, ele irá aos poucos perdendo lugar em nossas memórias, até o momento em que será necessário recomeçar de um ponto muito distante da linha de chegada que haviamos acreditado ter alcançado para sempre.&lt;/p&gt;
&lt;p&gt;A última dica que deixo para vocês é: usem sempre o que aprenderam. A falta de uso é desperdício do tempo passado adquirindo o conhecimento.&lt;/p&gt;
&lt;p&gt;Good luck! =)&lt;/p&gt;
&lt;p&gt;Ajuda para iniciantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tecla SAP - dicas de inglês&lt;/li&gt;
&lt;li&gt;Inglês Verde Amarelo - comunidade de brasileiros aprendendo inglês&lt;/li&gt;
&lt;li&gt;S&amp;amp;K - descubra para que lado você quer ir&lt;/li&gt;
&lt;li&gt;Revista Speak Up - textos simples e várias atividades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para aprimorar seus conhecimentos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UsingEnglish.com - recursos para estudantes da segunda língua&lt;/li&gt;
&lt;li&gt;1-language.com - ferramentas para estudar inglês&lt;/li&gt;
&lt;li&gt;Grammar Girl - dicas de gramática em um ótimo &lt;em&gt;podcast&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Advanced English Lessons - gramática avançada, mas muito bem exlicada&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

     
        <item>
  <title>O passado torto de um programador por acaso</title>
  <link>http://www.caloni.com.br/o-passado-torto-de-um-programador-por-acaso/</link>
  <pubDate>2007-09-06</pubDate>
  
  <guid>http://www.caloni.com.br/o-passado-torto-de-um-programador-por-acaso/</guid>
  <description>&lt;p&gt;Obs.: este é um artigo não-técnico, o que quer dizer que você pode se deparar com termos desconhecidos. Procure ter à mão um dicionário de pessoas comuns.&lt;/p&gt;
&lt;p&gt;Sabe aquele senso comum de que adolescente não sabe o que quer da vida? Pois é, naquela época eu não sabia mesmo. Quando iniciei minha vida, queria ser desenhista. Então descobri que não conseguia desenhar sem uma régua, o que me levava a crer que seria engenheiro. Mas engenheiro de quê? Bom, como esse tipo de pergunta tem um nível de complexidade além dos limites de uma criança de 12 anos, decidi que decidiria isso na minha oitava série.&lt;/p&gt;
&lt;p&gt;Então a oitava série chegou. Fascinado com o conceito de átomos e camadas de elétrons, decidi que iria ser químico. Procurei e logo achei um curso técnico de química industrial para o segundo grau. Comecei a estudar para o chamado &amp;quot;vestibulinho&amp;quot;, empolgado com a idéia de vir a trabalhar em uma fábrica usando jaleco.&lt;/p&gt;
&lt;p&gt;Até aquele breve momento, tudo ia bem na mente daquele promissor químico de sucesso.&lt;/p&gt;
&lt;p&gt;Até que num belo dia minha mãe aparece com um folheto onde, escrito em letras garrafais, conseguia-se ler com um pouco de esforço: &amp;quot;curso de computação&amp;quot;. Computação é mexer com computadores. Até então só tinha visto computadores em filmes de ficção científica e nas bibliotecas da cidade (os velhos sistemas Unisyx, ainda de pé na minha velha e boa São Bernardo).&lt;/p&gt;
&lt;p&gt;Mexer com computadores (naquele folheto) até que parecia ser uma coisa legal.&lt;/p&gt;
&lt;p&gt;E lá fui eu ficar algumas horas por semana sentado à frente daquela tela verde digitando comandos em inglês. Wordstar, Lotus 1-2-3 e o tal do MS-DOS. Havia um segundo laboratório na escola, este mais novo, onde repousava intocado um outro sistema operacional. Diziam ser revolucionário, e que vinha com um novo dispositivo futurístico conhecido como mouse (rato, em Portugal): uma pequena caixa com dois botões conectados à CPU por um fio, tecnicamente seu rabo. Mexemos uma única vez no final de nosso curso com o tal de Windows 3.1, o sistema operacional que vinha nesses micros novos. Foi apenas um rápido e impagável  momento de test drive.&lt;/p&gt;
&lt;p&gt;Mas, por um motivo que até hoje desconheço, gostei do tal do MS-DOS. Eu dava comandos para o computador e ele obedecia! Achei fascinante! Me diverti muito durante os três meses do curso.&lt;/p&gt;
&lt;p&gt;E voltei a estudar para o vestibulinho de químico.&lt;/p&gt;
&lt;p&gt;Porém, eis que chega o final de ano e pergunto para o meu amigo o que ele vai fazer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Processamento de Dados!&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Hummm... computadores.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Isso!&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mas que coisa, hein. Balance, balancei, e acabei mudando minha decisão do início do ano: iria tentar o curso de PD.&lt;/p&gt;
&lt;p&gt;E foi assim. Fizemos o vestibulinho. Meu amigo não passou, mas a família dele tinha recursos, colocou ele em uma escola técnica particular. Eu também não passei. A nota de corte era 38. Tirei 37. Por um ponto fiquei sem opções de estudo. Então procurei por vagas em escolas técnicas. Minha mãe encontrou uma, onde existiam dois cursos: magistério e contabilidade.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Magistério é legal. E se não for legal, pelo menos tem um monte de mulher.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mas dessa vez meu lado numérico falou mais alto, e acabei ficando na sala mais chata. Prestei para contabilidade. Passei fácil.&lt;/p&gt;
&lt;p&gt;E agora, após esse breve relapso, tudo estava em paz na mente daquele contador de futuro.&lt;/p&gt;
&lt;p&gt;Dois anos se passaram. Balanços, balancetes, ativos e passivos. Mas nem tudo eram números. Tive uma professora de literatura que era ótima (no sentido bondoso da palavra). Ela me ensinou a ler estes livros não-técnicos que tanto encantam o pessoal de humanas. Também me ensinou a escrever de maneira não-vexatória, já prevendo naquela época que teria que me esforçar para ser um blogueiro de sucesso.&lt;/p&gt;
&lt;p&gt;Naquela época comecei a escrever bastante. Gastei uns dez livros de 100 páginas rabiscando palavras. Desejava ser escritor, ficar rico e famoso e reponder às cartas dos fãs. Então lia e escrevia literatura. Quer dizer, eu acreditava que escrevia literatura. Um contador brincando de escritor.&lt;/p&gt;
&lt;p&gt;O tempo passou, o ano final chegou e começava a despontar a grande dúvida: o que prestar no vestibular?&lt;/p&gt;
&lt;p&gt;Naquele momento, meu lado letrado foi mais forte.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Quero ser escritor, logo, vou fazer letras. Deve ser bem legal! Mas se não for bem legal, pelo menos tem um monte de mulher.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E comecei a estudar para o vestibular. Apenas um vestibular. Fuvest. Se não passasse, ficaria a Deus dará. O que já me importunava bastante àquela época da vida: depois de 13 anos de escola eu havia ficado um tanto condicionado a comparecer em sala de aula todos os dias de semana da minha vida.&lt;/p&gt;
&lt;p&gt;Foi um período interessante. Matemática, Português, História, Geografia, Inglês, Química, Física, Biologia. Livros e mais livros viviam em minha mochila. Para minha sorte, meu emprego era de office-boy, o que me garantia por lei poder ler o dia inteiro, todos os dias, na fila do banco. Algumas noites também. E algumas madrugadas também. Foi um sufoco. Quase não termino meu curso.&lt;/p&gt;
&lt;p&gt;Mas terminei. E passei. E de repente lá estava eu no antro da perdição, o início de tudo: FFLCH (lê-se &amp;quot;fefeléche&amp;quot;). E o subsolo era de fato um antro: xadrez, MPB, sebos, discussões filosóficas e muita fumaça. No meio das revoluções estratégicas do pessoal do CAELL eu me sentia extremamente &amp;quot;humanizado&amp;quot;, seja lá o que isso for. E, sim, pela primeira vez na vida, milhares de mulheres interessantes passarelavam pelos corredores dos pensadores da palavra.&lt;/p&gt;
&lt;p&gt;Viva a linguística!&lt;/p&gt;
&lt;p&gt;Tudo estaria bem na cabeça daquele promissor &amp;quot;professor de português das escolas da rede pública de ensino&amp;quot; se não fosse o meu lado numérico. Comprei um computador, e isso mudou minha vida. Cada vez mais a quantidade de livros de informática que eu carregava comigo ultrapassava o número de sonetos de Camões ou as prosas modernísticas de Guimarães Rosa que estudava no momento.&lt;/p&gt;
&lt;p&gt;Desde aquele dia, o vício tem me acompanhado cronicamente, religiosamente, todo dia.&lt;/p&gt;
&lt;p&gt;Larguei a faculdade. Comecei a me dedicar inteiramente aos livros sobre computadores, programação e &amp;quot;como as coisas funcionam&amp;quot;. E desde então o ser em que me transformei vos fala através deste humilde blogue. E assim foi. Como é que o pessoal de humanas fala mesmo? Ah, sim: o resto é história.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Barata Elétrica e o hacker de antigamente</title>
  <link>http://www.caloni.com.br/barata-eletrica-e-o-hacker-de-antigamente/</link>
  <pubDate>2007-08-31</pubDate>
  
  <guid>http://www.caloni.com.br/barata-eletrica-e-o-hacker-de-antigamente/</guid>
  <description>&lt;p&gt;Os artigos escritos por ele estavam em português, mas sempre em suas edições ele disponibilizava artigos de outras partes do mundo em inglês. Praticamente li todos eles, e muitos fiz questão de ler mais de uma vez. A maioria falava de um mundo que existia antes de eu ter um computador, onde existiam vírus e pirataria de programas em disquetes, BBSs e a tal reserva de mercado. Além, é claro, de dicas de como ser um nerd e não perder a sociabilidade (se é que isso é possível quando se é um nerd adolescente). Existe uma página no zine onde estão listados os melhores artigos de todos os tempos da revista.&lt;/p&gt;
&lt;p&gt;Além do Barata Elétrica existiam outras revistas internacionais &amp;quot;bem conceituadas&amp;quot; na época, como a CCC (Chaos Computer Club), uma comunidade de hackers e crackers (o início do Astalavista!) fundada na Alemanha, e a 2600 Quarterly, constantemente perseguida pela polícia dos Estados Unidos depois das aprontadas do Mitnick. Como ainda eu ainda engatinhava no inglês, tive que me virar com o que tinha, um dicionário na mão e muita vontade de aprender. Não entendia muito, é verdade, mas minha atitude fez com que o inglês aprendido me valesse até hoje.&lt;/p&gt;
&lt;p&gt;Naquela época, além de computadores, programação, muito café e coca-cola, meus interesses estavam bem mais voltados em entender como a sociedade progrediria diante dessa revolução tecnológica que estava acontecendo naquele momento. Como ficariam nossos direitos civis dentro da rede? Quem seria julgado por um crime digital e, talvez mais importante, quem seria o executor desse julgamento? O que seria direito digital? Como fica nossa privacidade? Todas essas questões me levaram a ler livros que recomendo fortemente, como 1984, Revolução dos Bichos e Admirável Mundo Novo. Todos falam de sociedades fictícias, mas cujas características estão muito mais presentes entre nós do que os estereótipos das novelas televisivas. Eles não falam muito sobre computadores nem programação, mas são muito bons para a formação crítica de um indivíduo sobre a sociedade em que ele vive.&lt;/p&gt;
&lt;p&gt;Enfim, acho que já deu pra perceber que esse artigo não é sobre C++, Windows, Engenharia Reversa ou computadores. É muito mais um lapso nostálgico que me ocorreu sobre o que era ser um hacker naquela época: ansiar avidamente por conhecimento, mas não um conhecimento qualquer, que termina nele mesmo, ingurgitado junto das milhares de notícias diárias. É um conhecimento sadio, apreciado e mastigado lentamente, com consciência, com perseverança. Não havia aquele desânimo por falta de tempo em aprender todas as coisas, mas o contrário: o ânimo por existir mais e mais conhecimento a ser apreciado, discutido e refletido. A troca de informações entre as pessoas era muito importante. O adjetivo hacker da época não estava na capacidade em invadir sistemas, mas em sua atitude em aprender coisas novas, ampliar sua visão do mundo e ter humildade o suficiente para concluir que nessa vida só se aprende um grão de areia de uma praia gigantesca. Bons tempos em que não saber não era vergonha de nada, mas uma oportunidade a mais.&lt;/p&gt;
&lt;p&gt;O tempo passa, o mundo gira, e aqui estamos nós: orkut, msn, youtube, blogues, flogues e outros gues inventados a cada dia. As pessoas estão conectadas, e cada vez mais estarão. E para quê? Para trocar mensagens, emoticons, fotos, vídeos, informação. Sobre elas mesmas, sobre onde vivem, sobre onde moram. A tal da privacidade foi por água abaixo. Poucos possuem o discernimento do que podem e não podem fazer sem sofrer as conseqüências de ter sua vida inteira exposta através dos bits e bytes que nunca param de trafegar. A popularidade da rede transformou-a em um second life, literalmente. Para alguns, é até o first life mesmo. Isso é a escolha de cada um.&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Como ser um melhor desenvolvedor nos próximos seis meses</title>
  <link>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-nos-proximos-seis-meses/</link>
  <pubDate>2007-07-18</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-nos-proximos-seis-meses/</guid>
  <description>&lt;p&gt;Graças ao meu amigo Thiago estive acompanhando uma série de posts de gente renomada sobre o tema deste artigo. Eles fazem parte de uma nova modalidade entre os blogueiros (pelo menos para mim) chamada de tagging. Funciona assim: você escreve sobre algo (por exemplo, &amp;quot;como ser um melhor cozinheiro em 6 meses&amp;quot;) e manda uma tag para que outras pessoas também escrevam sobre o mesmo assunto, o que pode ser feito referenciando o sítio dessas pessoas.&lt;/p&gt;
&lt;p&gt;Ainda não tive tempo de ler todos os artigos (nem vou ter, pela velocidade com que isso se espalha), mas acho que dá tempo de escrever um pouco sobre isso.&lt;/p&gt;
&lt;p&gt;Acredito que nós, programadores/desenvolvedores/depuradores, tentamos aprimorar nossos conhecimentos e nossas técnicas com o objetivo de enxergar os problemas do dia-a-dia de todos os ângulos e de encará-los e resolvê-los da melhor maneira possível. Quer dizer, nós achamos que é a melhor maneira possível. E exatamente por acharmos que tentamos melhorar sempre, em busca da inalcançável perfeição.&lt;/p&gt;
&lt;p&gt;O problema existe quando nós, embriagados pela falsa crença de sabermos tudo (ou o suficiente), acreditamos realmente que estamos fazendo o melhor possível e que não há nem haverá maneira de melhorar. É lógico que sempre há. Melhor maneira de ver isso é pegar um código-fonte antigo e observar as mudanças de estilo. E nem precisa ser tão antigo assim. E nem precisa ser código. Pode ser uma idéia antiga de como implementar alguma coisa. A não ser que você seja um teimoso que quer fazer tudo em assembly verá que o que aprendemos ontem influencia nas decisões de amanhã.&lt;/p&gt;
&lt;p&gt;Minha lista não é muito diferente da dos outros. Basicamente se resume em: ler livros e blogs, programar mais e pensar mais ainda. O importante é que já estou ciente das coisas que devo melhorar, e é nelas que devo me focar nos próximos 180 dias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fazer um curso de memorização. Confesso que não ligava muito para isso e agora isso faz um diferença e tanto. Eu sei que hoje temos &lt;em&gt;post-its&lt;/em&gt; e agendas, mas nada substitui a confiança que temos em nossa própria mente. E é frustrante ler um livro três meses atrás e não se lembrar de capítulos inteiros.&lt;/li&gt;
&lt;li&gt;Fazer um curso de leitura dinâmica. Minha velocidade na leitura é deplorável e eu sei disso. Minha vontade de ler sempre ultrapassa o ato (isso deve ter acontecido com alguns de vocês). Mas o objetivo não é apenas ler mais rápido. É ter foco. Ler e absorver. Não estou dizendo isso de livros de ficção, que para mim são um entretenimento prazeroso. São os livros técnicos que pertubam, e urgem pela minha atenção quando os estou lendo.&lt;/li&gt;
&lt;li&gt;Aprender o meu ritmo. Às vezes me impressiono com o meu descaso para comigo mesmo. Por exemplo, eu já sabia que &amp;quot;rendia&amp;quot; bem mais quando lia livros simultaneamente, e não em fila. Mas mesmo assim insistia em querer terminar um livro antes de começar o outro. O resultado? Aproveitamento 60%. Nada mau. Mas poderia ser bem melhor. Bastava seguir o método que melhor se adapte às minhas necessidades. E isso é o que eu chamo de aprender a si mesmo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora que já passei pelo sofrimento de taguear nada como escolher minhas vítimas. Não conheço pessoalmente muitos blogueiros, mas pelo menos essa minha lista é fiel e sincera. Rodrigo Strauss, Fernando Roberto e Thiago Oliveira: o que vocês farão nos próximos seis meses para se tornarem melhores desenvolvedores (ainda)?&lt;/p&gt;
</description>
</item>

     
        <item>
  <title>Desejo insano de programar no kernel</title>
  <link>http://www.caloni.com.br/desejo-insano-de-programar-no-kernel/</link>
  <pubDate>2007-07-12</pubDate>
  
  <guid>http://www.caloni.com.br/desejo-insano-de-programar-no-kernel/</guid>
  <description>&lt;p&gt;Muitas vezes meus amigos (um em particular) me perguntam por que não me interesso em programar em kernel mode, como se isso fosse um objetivo a ser alcançado por qualquer programador em user mode. Bom, não é.&lt;/p&gt;
&lt;p&gt;Claro que sempre me empenho em entender como o sistema funciona, nos menores detalhes e sempre que posso, o que nem sempre me leva para o kernel mode (entender como a CLR funciona, por exemplo). Posso até me considerar um ser privilegiado, já que trabalho com dois experts em kernel mode e .NET, respectivamente. Isso já faz algum tempo, e ambos possuem conhecimento e experiência necessários para sanar minhas dúvidas mais cruéis. Porém, uma coisa é o conhecimento da coisa. Outra coisa é a prática. E a teoria, como já dizia o Sr. Heldai, na prática é outra.&lt;/p&gt;
&lt;p&gt;Existem também aqueles programadores que, entorpecidos pela idéia de que seu software deve ser o mais baixo nível possível porque... bem, porque ele faz coisas muito profundas (?), ou é muito avançado (??), ou talvez até porque ele precisa ser otimizado ao máximo. Baseados nessas premissas (???), antes mesmo de conhecer o sistema operacional e pesquisar o que ele tem a oferecer que já está disponível em user mode partem direto para a programação nua e crua, pelo simples motivo de ser legal ou na ilusão de ser a melhor maneira de se fazer as coisas sob qualquer circunstância.&lt;/p&gt;
&lt;p&gt;Munidos de bons motivos para fazer drivers, o próximo passo seria então pedir ajuda desesperadamente (e urgentemente) em listas de discussões. Talvez esse seja o lugar menos apropriado para procurar por uma palavra amiga. Acompanhei por um tempo uma lista de kernel do Windows. Apenas para efeitos de descrição, o clima e a impressão com que fiquei de lá foi que os programadores em kernel não se dão muito ao trabalho de ajudar aqueles que estão perdidos no ring0. Então para que existe a lista? Aparentemente para aqueles que já sabem fazer o carro andar, já conhecem o motor e um pouco de mecânica dos fluidos.&lt;/p&gt;
&lt;p&gt;Digamos que é uma cultura bem diferente do que estamos acostumados a vivenciar em user mode. Eles estão muito mais ocupados com problemas relacionados especificamente com o desenvolvimento de drivers, e não dúvidas bestas do tipo &amp;quot;como eu faria isso&amp;quot;. Lá não se briga entre linguagens gerenciadas e não-gerenciadas (nem entre linguagens gerenciadas), mas entre linguagens C e C++. Lá não se ajuda a fazer aquelas &amp;quot;gambis&amp;quot; que tanto ajudam o programador na hora do sufoco, mas sim redirecionam os hereges para o desenvolvimento &amp;quot;politicamente correto&amp;quot; (siga a documentação e seja feliz).&lt;/p&gt;
&lt;p&gt;Isso não é uma crítica destrutiva, apenas uma descrição narrativa. Nada que falo aqui é exagero ou blasfêmia. Podem perguntar para o meu amigo de kernel mode. Aliás, use o blog dele para aprender um pouco sobre o kernel.&lt;/p&gt;
&lt;p&gt;O fato é que bons programadores são bons onde quer que eles estejam (e os ruins serão ruins em qualquer lugar). E ser um desenvolvedor de qualidade exige tempo, dedicação, paciência e estudo. Pode ser um designer usando Action Script ou um engenheiro da NASA projetando foguetes. Tanto faz. Fazer as coisas com qualidade sempre exigirá mais tempo do que gostaríamos de despender. Não é uma questão de ser mais difícil em kernel mode ou mais fácil em Javascript. É saber qual dos dois será necessário usar para atingir o nível de funcionalidade e qualidade que o projeto exige. O resto é preconceito.&lt;/p&gt;
</description>
</item>

     
    
  </channel>
</rss>
