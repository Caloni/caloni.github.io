<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Blogue do Caloni</title>
    <link>http://www.caloni.com.br/categories/blog/</link>
    <description>Recent content in blog on Blogue do Caloni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Wed, 09 Jun 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.caloni.com.br/categories/blog/" rel="self" type="application/rss+xml" />
    
     
        <item>
  <title>Cabine Quem Vai Ficar Com Mario</title>
  <link>http://www.caloni.com.br/cabine-quem-vai-ficar-com-mario/</link>
  <pubDate>2021-06-09</pubDate>
  
  <guid>http://www.caloni.com.br/cabine-quem-vai-ficar-com-mario/</guid>
  <description>Sempre fico curioso sobre onde estão as pessoas que escrevem sobre cinema. Uma oportunidade surgiu durante a cabine de imprensa do filme Quem Vai Ficar com Mário, já que foi virtual e todos os espectadores tiveram que se apresentar junto do veículo no chat. Aproveitei e montei uma lista dessas pessoas. Muitas delas deixarão de existir daqui a pouco, e algumas podem ou não ficar por mais um tempo. A vida é tão frugaz nas redes que nem me darei ao trabalho de coletar links. Esta lista é pura e simplesmente para quando estiver entediado e for buscar se existe algum texto que preste hoje em dia na criticosfera.
 Amanda Santos - Entretetizei Amanda Dominguez - Sobre Filme Amanda Marques - Entretetizei Ana Beatriz Garcia - Jornal da Cidade André Lage - @andre.lage André Zuliani - Notícias da TV Armindo Ferreira - Blog do Armindo Armindo Ferreira - Blog do Armindo Bruna Martins - Feliz com Pouco Bruno Vieira - Cinema LGBT Brígida Rodrigues - Broadway Meme Carol Garrôcho - Gossip Do Dia Carolina Caldas - Vivente Andante Carolina Garrôcho de Faria Melo - Gossip do Dia Daniel Mattoso - Rádio Pop FM Denize Macedo - F5 Cultural Fabricio Duque - Vertentes do Cinema Fernanda Cavalcanti - Vitamina Nerd Gabriel - Reserva Cinéfila Giovanna Landucci - Patch Nerd e Dica da Giovanna Guilherme Moreira - Epipoca (Terra) Helen Ribeiro - Site Seja Cult Henrique Vasco - Vida Pós Créditos Isabella Marques da Silva - Séries em Cena Janaina Tifoski - Quarteto Publicitários Joana Lúcia Cunha da Silva - RevolucionArte José Mario Neto - Balde de Pipoca José Vieira - Jornalismo Júnior João - Cinetics João Bahia - Cinetics Juliana Brito - Coxinha Nerd Júlia Rezende - SuperCinema UP Kainan Henrique - Team Comics Laryssa Silva - Nerds da Galáxia! Luccas de Vasconcelos Callejon - Inside Shows e Jornal Infoleste Luiz Henrique Leão - ArteView Manu Mayrink - Alguém Viu Meus Óculos? Marcelo Pestana - Colunas &amp;amp; Notas Marcio - Bee40tona Mari Frazão - iClaquete Mariana Arrudas - F5 (Folha de São Paulo) Mario - GeekPop Mateus Tifoski - Herdeiro Nerd Matheus Mans - Esquina da Cultura e Filmelier Paula Dell&#39;Isola - A Tribuna Paulo Costa - CINEeCIA Pedro Guerra - Jornal Pioneiro e @oipedroguerra Rafael Carvalho - Observatório G Rafael Lopes - Canal Rafazando Raphaela Souza - O Quarto Nerd Raquel Duarte Garcia - Cinema Para Sempre Renata Vomero - Portal Exibidor Rita Vaz - Tudo Sobre Filme Robhson Abreu - Revista PQN, Jornal de Belô e No Escurinho do Cinema Rodrigo Moura - Canal Sorti Roger Hiago - Sobre Filmes e Séries Samantha Silva - Cine Cinesa Siliane Vieira - Jornal Pioneiro (Caxias do Sul) Stella Gonçalves de Freitas - RedeTV! (Leitura Dinâmica) Suzana Uchôa Itiberê - OQVER Cinema &amp;amp; Streaming Tabatha Oliveira - Estação Nerd Thiago Muniz - @PipocasClub Thuany Maiorali Agostino - @thuanyma VH Simões e Diego Baffi - Cueca para 2 (@cuecapara2) Victor Coimbra - Pipocando Vinícius Teles - DeuClick Viviane França - No Mundo do Cinema e das Letras Wanderley Caloni - CinemAqui  </description>
</item>

     
        <item>
  <title>Jouran: The Princess of Snow and Blood</title>
  <link>http://www.caloni.com.br/the-princess-of-snow-and-blood/</link>
  <pubDate>2021-06-05</pubDate>
  
  <guid>http://www.caloni.com.br/the-princess-of-snow-and-blood/</guid>
  <description>Nossa, que legal. Anime com lutinha e revelações no meio delas que ninguém que não leu o mangá vai entender. Esse é um dos poucos exemplares que eu dormi no primeiro episódio. Vinte minutos é atenção demais para uma sequência de medida de forças que se passa em um Japão nazista com espiões e agentes aparecendo pra fotinha e se transformando em monstros.
</description>
</item>

     
        <item>
  <title>Sabor da Vida (Sweet Bean)</title>
  <link>http://www.caloni.com.br/sweet-bean/</link>
  <pubDate>2021-06-05</pubDate>
  
  <guid>http://www.caloni.com.br/sweet-bean/</guid>
  <description>Para quem buscar ele tem o nome internacional Sweet Bean e está entitulado na Amazon Prime como Sabor da Vida.
Sweet Bean é um drama leve, calmo, que se beneficia de sua edição de impor o ritmo necessário para pausarmos nossas super-ocupadas vidas e prestar atenção em pessoas invisíveis para a sociedade.
O chefe é um recluso, individado para o resto da vida por um erro do passado. Ele encontra uma senhora que está no final desse processo de isolamento social. Ao fim de sua vida, no entanto, ela aprendeu algo para passar adiante. E não é apenas fazer uma pasta de feijão doce perfeita, mas dar atenção aos detalhes que tornam o processo maravilhoso.
O direção e o roteiro de Naomi Kawase torna essa experiência baseada no romance de Dorian Sukegawa minimalista, talvez um pouco demais. É difícil se relacionar com o clichê da colegial com mãe solteira, e até mesmo a figura do chefe de cozinha solitário e amargurado fica monotônico, ele é quase uma representação mais geral. E, se formos pensar, a senhora Tokue também é, representando os leprosos do mundo.
Porém, a atuação naturalíssima de Kirin Kiri (Caso de Família) eleva o filme para sua observação em cena, maravilhados. Os diálogos ganham brilho, mesmo que não sejam geniais. A fotografia com filtro do Instagram merece uma segunda olhada, apenas por conta da atriz veterana. E sua história, nós assistimos o filme por ela. E porque queremos saber mais de seu feijão e onde está escondida.
</description>
</item>

     
        <item>
  <title>The Lost Village (Mayoiga)</title>
  <link>http://www.caloni.com.br/the-lost-village/</link>
  <pubDate>2021-06-05</pubDate>
  
  <guid>http://www.caloni.com.br/the-lost-village/</guid>
  <description>A dinâmica do primeiro episódio é hipnotizante. O ar de mistério sobre quem são aquelas pessoas dispostas a desistir de suas vidas indo em direção a uma vila perdida para nunca mais voltar garante nossa atenção. Eles estão em um ônibus de excursão. E o motorista? Pessoas já &amp;quot;se perderam&amp;quot; por lá. E a polícia? Há criminosos no meio do grupo? E se alguém desistir?
The Lost Village possui uma estética noturna atraente e misteriosa. Observar este ônibus adentrar um denso nevoeiro na estrada enquanto todos estão submersos em seus pensamentos é fruto de uma direção ritmada, intensa e com um jogo de câmera e luzes que mantém o clima de tensão.
Por fim, uma trilha sonora primososa, unindo o fantástico com o drama pessoal e coletivo do que irá acontecer em seguida.
</description>
</item>

     
        <item>
  <title>Zazie no Metrô</title>
  <link>http://www.caloni.com.br/zazie-no-metro/</link>
  <pubDate>2021-06-05</pubDate>
  
  <guid>http://www.caloni.com.br/zazie-no-metro/</guid>
  <description>Esse filme absurdo e cartunesco é de Louis Malle, um dos precursores da Nouvelle Vague que era ignorado pela panelinha do Truffault, Godard e cia. Ele conta a história da pequena Zazie indo passar um final de semana com seu tio enquanto a mãe se diverte com o namorado. Tudo que Zazie quer em Paris é andar de metrô, mas eles estão de greve. Então ela parte para sua rica imaginação, onde as leis da física e do bom senso dão lugar a um dos filmes que mais investe energia em casa quadro e em cada gag, desde que esse arranque uma expressão de surpresa do espectador.
E ele arranca com certeza. E várias. O tom cartunesco pode ser visto hoje na maioria dos desenhos da época, como Tom e Jerry e Pica-Pau. Malle se deu bem em Hollywood, e não à toa. Diferente de seus colegas franceses sua dedicação é pela técnica e pelo cinema antes de esboçar um discurso político (claro que ele também ataca a burguesia, mas isso é chover no molhado e... até a burguesia ataca a burguesia; esses intelectuais não sabem o que colocar em uma crítica).
Comédia escrachada, é empolgante na maioria do tempo, mas sua bagunça cansa um pouco. As crianças devem ter adorado. As cores, o movimento, o absurdo. Eu adorei. Apenas já não tenho tanta energia assim, e o filme é uma viagem de montanha russa de uma hora e meia.
</description>
</item>

     
        <item>
  <title>Exílios</title>
  <link>http://www.caloni.com.br/exilios/</link>
  <pubDate>2021-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/exilios/</guid>
  <description>Esses franceses ficam entediados com o primeiro mundo e resolvem voltar às suas origens na Argelia, passar alguns perrengues. No meio vários números músicas impressionantes da cultura local e Lubna Azabal fazendo uma louca sem roteiro e muita energia. Há uma sequência particularmente arrebatadora no final quanto ela participa de uma roda de candomblé ou algo do tipo.
</description>
</item>

     
        <item>
  <title>Hilda</title>
  <link>http://www.caloni.com.br/hilda/</link>
  <pubDate>2021-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/hilda/</guid>
  <description>Série animada bem desenhada. Seus tons de cores e formas são aconchegantes, assim como seu movimento ritmado com uma lúdica e tranquila trilha sonora. E esse sotaque britânico é tudo de bom.
Hilda é uma garota que vive com sua mãe na floresta, cheio de criaturas fantásticas e aventuras a aguardando. Não é infantil, há temas juvenis que podem ser vistos como adultos. E não é infantil de tratar as crianças como estúpidas.
</description>
</item>

     
        <item>
  <title>O Caminho Para El Dorado</title>
  <link>http://www.caloni.com.br/o-caminho-para-el-dorado/</link>
  <pubDate>2021-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/o-caminho-para-el-dorado/</guid>
  <description>Esta simpática, falha, curiosa animação da DreamWorks foi feita antes de sua popularidade com Shrek, na mesma época que Disney definhava com produções com estética semelhante e histórias batidas, como O Corcunda de Notre Dame até Atlantis.
Tudo é ligeiramente pior que uma produção Disney, seja roteiro, direção ou canções. Porém, não se torna exatamente ruim.
Os efeitos de água estavam em alta, nessa junção entre desenhos tradicionais e computação, e isso se torna uma distração fora da história, que é sobre uma aventura em busca do tesouro perdido de El Dorado na época das conquistas espanholas.
Dois brancos, um loiro e um moreno, são trambiqueiros e acabam caindo justamente na ilha onde repousa o tesouro nas mãos de uma tribo que lembra os pré-colombianos, mas mais atraentes. Especialmente as mulheres.
Aliás, Disney nunca colocaria tantas curvas em uma personagem feminina nem tiraria tanta roupa de seus personagens, nem sugeriria atos sexuais tão facilmente quanto aqui, o que é um ponto positivo. Eles fazem ela se mover de maneira lasciva, o que a torna uma mulher mais real. Talvez tão real em alguns momentos em que ela move seus quadris com suas curvas generosas que apenas em Frozen isso foi equiparado com Elsa tirando suas presilhas de cabelo. E Elsa sequer tem curvas memoráveis.
Aa canções não são cantadas pelos personagens, mas por Elton John, que escreveu as músicas e narra o filme. A trilha é composta por Hans Zimmer.
Os créditos finais são bem mais interessantes que hoje em dia, com a lista de artistas distribuída por personagem.
</description>
</item>

     
        <item>
  <title>Our Love Has Always Been 10 Centimeters Apart (Itsudatte Bokura no Koi wa 10 Centi Datta)</title>
  <link>http://www.caloni.com.br/our-love-has-always-been-10-centimeters-apart/</link>
  <pubDate>2021-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/our-love-has-always-been-10-centimeters-apart/</guid>
  <description>Fofinho esse anime curto. Ele introduz esses dois carismáticos estudantes de último ano, seus anseios para o futuro e seu relacionamento que continua platônico. Se trata de uma história leve, talvez um estudo de personagem, com certeza metalinguístico. Ele estuda cinema, ela artes. E ambos quando se sentam um do lado do outro não conseguem ultrapassar essa imaginária e desafiadora barreira dos dez centímetros de distância.
</description>
</item>

     
        <item>
  <title>Time of Eve (Eve no jikan)</title>
  <link>http://www.caloni.com.br/time-of-eve/</link>
  <pubDate>2021-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/time-of-eve/</guid>
  <description>Uma direção bem pitoresca dessa série. Os movimentos da câmera tenta reproduzir os movimentos de cabeça que fazemos para desviar o olhar. E a visão é desse rapaz quase míope, de vista e de seus sentimentos. Mas, assim como sua andoide, ele está tentando.
Passando em um futuro próximo onde robôs e humanos convivem em uma relação serviçal e mestre, o grande trunfo de The Time of Eve é nos jogar nesse universo e nos fazer descobrir o impacto dessa mudança na rotina dos humanos. E também dos andróides, já que eles &amp;quot;nascem&amp;quot; sem um guia do que são. Apenas seguem ordens e as três leis da robótica sugeridas pelo autor sci-fi Isaac Asimov.
Mas algo sabemos desde o início. Se trata de um trabalho sobre preconceito e discriminação. É sensível e se revela aos poucos, e a graça é estar assistindo coberto dessa áurea de mistério. Enquanto isso acompanhamos a saga do garoto, enquanto ele descobre se é um fandroid, uma pessoa que trata andróides como humanos, ou apenas uma pessoa muito solitária.
A série brinca muito com metalinguagem. Em um episódio onde um robô antigo aparece eles brincam com o tom de Exterminador do Futuro. A visão da série tem sempre a perda de foco do garoto protagonista. A desorientação do espectador sobre como o mundo está mudando com os androides é o que faz a câmera não conseguir parar. A trilha sonora usa toques semelhantes a aplicativos de computador.
Esses garotos vão ao café-título em busca de respostas e servem de olhos e ouvidos para nós, espectadores curiosos e atentos. Cada novo episódio merece nossa total atenção, pois nenhuma informação é dada de graça. Se trata até aqui de um dos melhores trabalhos de sci-fi animado que eu já presenciei. É denso e não tem medo de sê-lo.
Que bosta de final. Todo o arco se desenvolvendo entre o garoto e sua robô serviçal é resolvido em duas falas e surge um outro arco completamente desvinculado do principal entre um robô ainda não apresentado e o segundo garoto. O Comitê de Ética é revelado apenas como um grupo de burocratas com motivações infantis de serem contra relacionamentos entre humanos e robôs. O pai do garoto encarna o pai de Evangelion. Praticamente nada funciona neste season finale. E robôs ainda choram. O espectador deveria poder chorar em cima dessas imagens se fingindo de tridimensionais sem o serem.
</description>
</item>

     
        <item>
  <title>Castlevania</title>
  <link>http://www.caloni.com.br/castlevania/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/castlevania/</guid>
  <description>Bem bonita essa animação. E ela tem uma boa história, baseada em um bom jogo. Ela é cientista no século 15 e ele é um vampiro bombadão. Eles se casam e depois de um tempo os católicos acham a bruxa e a queimam. E logo vira um deus nos acuda.
Há violência de tripas sendo arrancadas nessa série para 18&#43;, o que é outra coisa boa. Junto de uma maravilhosa e estilizada fotografia que torna várias cenas épicas.
Os personagens não são muito bons, nem os diálogos. Efeitos colaterais de um vídeo-game? Talvez ninguém se importe.
</description>
</item>

     
        <item>
  <title>Demon Slayer: Kimetsu No Yaiba</title>
  <link>http://www.caloni.com.br/demon-slayer/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/demon-slayer/</guid>
  <description>Essa série de anime estilizado com computação conta uma história que lembra o drama pesado de Dororo, mas por enquanto sem a fuga cômica. Tudo é tenso no primeiro episódio.
Meu amigo disse que ele é muito bem animado/desenhado. De fato. Porém, ele comenta o trabalho que deve ter dado à equipe, no que discordo levemente. Tenho a talvez falsa sensação de que trabalhos mais voltados para a computação e menos para o desenho tradicional tendem a ser mais fáceis. De qualquer forma, não importa o trabalho que uma obra teve, e sim seu resultado. E o resultado dos traços me incomoda pelo apelo fácil, mas o trabalho na direção, em entregar um dinamismo que evoca melhor as emoções humanas em pura adrenalina, é admirável.
</description>
</item>

     
        <item>
  <title>Etchart</title>
  <link>http://www.caloni.com.br/etchart/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/etchart/</guid>
  <description>Cabernet Sauvignon O Cabernet dessa vinícola de Cafayate, região de Salta na Argentina, é leve e frutado como o Malbec, embora um pouco mais sóbrio e menos alcoólico. De fato ambos são pouco alcoólicos. O Cabernet possui menos corpo e desce perigosamente rápido.
Privado Malbec Malbec fornece os melhores vinhos do mundo, e muitos Malbecs são bem acessíveis. Esse Etchart estranhamente está à venda na rede de supermercados Hirota. Estranhamente porque não é uma região com muitos rótulos, muito menos que cheguem em solo brasileiro.
Mas voltando ao Malbec. Este é frutado doce e azedo, jovem, pouco alcoólico, corpo médio. Vai fácil com carnes gordurosas, talvez fácil demais.
</description>
</item>

     
        <item>
  <title>Girl From Nowhere</title>
  <link>http://www.caloni.com.br/girl-from-nowhere/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/girl-from-nowhere/</guid>
  <description>Essa série tailandesa meio trash com baixo orçamento e histórias de mistério, crime e fantasia requentadas é ruim demais, e por isso mesmo é muito fácil de assistir. Nada de planos milaborantes nem design de arte rebuscado. O set é de novela, as falas são basiconas e o elenco é de dar risada.
Aliás, sorriso é o que Nonna, a aluna misteriosa interpretada por Chica Amatayakul, sabe mais fazer. Meu Deus, como ela sorri. Com seu olhar de peixe morto a série capta todos esses sorrisos sonsos em câmera lenta como se quisessem dizer alguma coisa. Não quer. E nem precisa. A história fala por si mesma. Apenas acompanhe.
A ideia é uma garota que pula de escola em escola escancarando as hipocrisias da sociedade. No primeiro episódio ela pega um professor assediador manjado. Ela consegue se disfarça muito bem cortando seu cabelo pela metade todo torto e mantendo o mesmo nome a série inteira.
Não estou falando mal. Trash é vida. Trash tailandês com garotas se vestindo de colegial é melhor ainda.
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: All Through the House</title>
  <link>http://www.caloni.com.br/love-death-robots-all-through-the-house/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-all-through-the-house/</guid>
  <description>Um delicioso conto narrado em uma animação sólida, que conhece as texturas para mesclar o quase fofinho com o horripilante. Gostei particularmente do momento Aliens, mas toda a sequência é brilhante em se auto-conter em seu universo limitado: crianças aguardando o Papai Noel na noite de Natal. Onde estão os adultos nessas horas?
Não importa. É isso que quero dizer com universo limitado. Só essa sequência é o que importa. O episódio pega uma história lúdica com uma ideia provavelmente já executada inúmeras vezes, mas dessa vez elevada para a grande computação. Os efeitos digitais convencem. Claro que com uma direção incisiva dessas nós não podemos nem evitar sermos convencidos pela própria historieta. Se fosse contada com desenhos no papel de pão já seria assustador.
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: Automated Customer Service</title>
  <link>http://www.caloni.com.br/love-death-robots-automated-customer-service/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-automated-customer-service/</guid>
  <description>Um futuro estilo Wall-E só com humanos velhos e pets, sendo que pet pode ser um desses cachorros pequenos ridículos ou uma espingarda. As máquinas fazem tudo pelos humanos, inclusive causar um pouco de emoção, como um aspirador se revoltar e sair matando seu dono. É o que acontece nesse episódio da série que une efeitos digitais com histórias curtas e sangrentas ou sexuais (ou ambos, meu preferido).
A nova temporada da série estréia em baixa com uma história requentada de outros carnavais e com efeitos que não nos causa qualquer comoção. Seria até desejável que essa velhinha fosse finalmente assassinada. A série é sobre isso. E ela trai suas premissas. Não há morte. Não há sexo. Só robôs e humanos sem amor
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: Ice</title>
  <link>http://www.caloni.com.br/love-death-robots-ice/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-ice/</guid>
  <description>Qual era a sacada aqui? Uma série que começou promissora e revolucionária no quesito efeitos digitais e sem travas por idade, este episódio precisa inserir personagens de várias etnias morando na periferia da humanidade, um planeta inóspito, trabalhando para uma gigante indústria de extração. Alguns possuem a biologia melhorada, enquanto os outros são excluídos. É uma diversão de jovens por adrenalina. Uma história sem imaginação visual nem narrativa, a velha cartilha do artista que se apaixona pelo conto do proletariado.
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: Life Hutch</title>
  <link>http://www.caloni.com.br/love-death-robots-life-hutch/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-life-hutch/</guid>
  <description>Você percebe o quanto o pessoal da computação economiza em cenas com movimento de face humana neste tenso, ótimo episódio de Love, Death &amp;amp; Robots. Aqui temos esses dois últimos da equação em uníssono. É a morte da guerra encubada em um container da sobrevivência. Aquele longa-metragem chamado Vida poderia se beneficiar dessa enxuta narrativa.
Mas voltando à face humana, mesmo economizando tempo de tela, nossa capacidade de emular um rosto humano e todos os detalhes sutis captados apenas por nós está melhorando na computação. O ator digital deste curta emula muito bem o que um ator de ação e suspense faria em condições limitadas.
Por outro lado, os movimentos robóticos da máquina de matar são ainda melhores. Fluidas, &amp;quot;naturais&amp;quot;, o que esse robô faz aqui é o sonho de todo engenheiro nesse exato momento. Para os engenheiros do ramo militar, uma obrigação.
Enfim, mais um curta de sensações. Tem o nome de David Fincher na produção. Não que signifique algo. As celebridades precisam gastar seu dinheiro de alguma forma.
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: Pop Squad</title>
  <link>http://www.caloni.com.br/love-death-robots-pop-squad/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-pop-squad/</guid>
  <description>Love, Death &amp;amp; Robots. Os robôs do título são os criadores desse episódio, que se aproveita de todo clichê solidificado do estilo drama policial noir futurista para falar sobre uma época egoísta onde a humanidade pode viver para sempre, mas por causa disso precisam exterminar todas as crianças que ousem nascer.
A história é triste, no mau sentido, mas piora com os efeitos visuais desses semi-humanos computadorizados. Você não pode sentir pena deles com suas expressões mecanizadas e ângulos manjados. Atores humanos poderiam se beneficiar dessa mini-história. Computação, está bem longe disso.
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: Snow in the Desert</title>
  <link>http://www.caloni.com.br/love-death-robots-snow-in-the-desert/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-snow-in-the-desert/</guid>
  <description>Haha, que trocadilho genial. Muito bom, mesmo. Quase tão bom quanto essa história tão original e tocante.
Pelo menos tem sangue, um pouco de sexo e cérebro voando. Não necessariamente nessa ordem. Eu não sei qual a prioridade nesse workshop de computação, mas a pele humana tem melhorado bastante entre as escurinhas, mas os caucasianos ainda estão um pouco estranhos. Falta o ar nojento.
A fotografia é tão estilizada que as areias desse planeta inóspito não existe. É um sujo esteticamente impecável, cheio de sombras para você não reparar nesses detalhes.
Tanta liberdade de câmera e os diretores insistem em usar a convencional, como se tivesse que colocar um tripé em algum lugar. É estranho poder tanto e não fazer nada. O cinema pede uma união dos talentos, não uma competição entre tech e arte.
</description>
</item>

     
        <item>
  <title>Love, Death &amp; Robots: The Tall Grass</title>
  <link>http://www.caloni.com.br/love-death-robots-the-tall-grass/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/love-death-robots-the-tall-grass/</guid>
  <description>Um conto de terror enxuto, eficiente, mas termina no efeito. Sem memórias para guardar, é a sensação o mote deste curta da série de robozinhos que matam seres humanos. Nesse episódio não há robôs, nem morte e muito menos amor.
Eu implico com o título da série porque ela não é honesta. What you see is not what you get. Este episódio é um ótimo exemplo, já que ficaria bem melhor do catálogo de Contos de Cripta. Ele une o grotesco com o incrível e entrega uma sensação. A fala mais emblemática é a última: &amp;quot;eles não acreditariam, mesmo.&amp;quot;
</description>
</item>

     
        <item>
  <title>Monster Girls (Demi-chan wa kataritai)</title>
  <link>http://www.caloni.com.br/monster-girls/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/monster-girls/</guid>
  <description>Já nos primeiros minutos a série perde totalmente a graça. Seus personagens não possuem personalidade. A história se move pela curiosidade de um professor que gostaria de entrar em contato com semi-humanos, criaturas lendárias que existem nessa série. Não só existem como quatro delas estudam na mesma escola. E todas garotas. Que sorte dele, não?
A brincadeira é entender se isso é alguma dessas metáforas como X-Men ou derivados, mas a narrativa é morna demais até para isso. Assim como Hinamatsuri, que tem garotas com poder de telecinese que não usam para nada que preste, essa série tem monstros para fingir ser algo diferentão.
</description>
</item>

     
        <item>
  <title>Nazarín</title>
  <link>http://www.caloni.com.br/nazarin/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/nazarin/</guid>
  <description>Terceiro ou quarto filme e Bunuel não é muito minha praia. Esse negócio de suprimir a lógica é frustrante, porque Nazarin tem uns momentos muito bons de abrir os olhos. Esse padre revolucionário em seguir a sua Bíblia à risca vive o inferno na Terra em meio a pobres maldosos, lunáticos, famintos. Obviamente não há coesão em um filme desses e é essa a desculpa preferida da turminha da contracultura.
</description>
</item>

     
        <item>
  <title>Onara Gorou</title>
  <link>http://www.caloni.com.br/onara-gorou/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/onara-gorou/</guid>
  <description>Se você sempre achou que faltava um anime em que o peido é o protagonista, você estava certo. E ouviram suas preces! E graças a Deus anime não tem cheiro!
Nem tudo que sai do ânus é indesejável. Onara Gorou sai do ânus e explica como as coisas funcionam em menos de três minutos. É muita sabedoria gasosa em tão pouco tempo.
As conversas são obviamente de devaneios de algum cartunista entediado. Ele imagina os quadros e os compõem toscamente. E assistimos, é claro. É algo diferente saído da mente de pessoas criativas. Justamente o que acontece com o personagem da história, mas não sai da mente.
</description>
</item>

     
        <item>
  <title>Pan de Peace!</title>
  <link>http://www.caloni.com.br/pan-de-peace/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/pan-de-peace/</guid>
  <description>Hehehe pão. Hehehe minazinhas. Hehehe pão com minazinhas. Quem é quem, nem sei mais. Os pães são mais fáceis de distinguir que as personagens.
Dez episódios depois não aprendi a fazer pão e fiquei com vontade de fazer anpan. Quero meu fermento de volta.
</description>
</item>

     
        <item>
  <title>Poco&#39;s Udon World</title>
  <link>http://www.caloni.com.br/pocos-udon-world/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/pocos-udon-world/</guid>
  <description>O pai dele fazia udom e ele se distanciou. Voltando ao interior, com os pais falecidos, ele reencontra suas memórias e uma criança perdida. É sobre udom, sobre memórias, sobre a vida passada e seu potencial desperdiçado. E a chance de recuperar.
Esse anime começa todo errado. Ele toca a introdução que apresenta uma menina que você ainda não viu, e já vai saber se tratar de um disfarce de um cão-guaxinim japonês (tanuki). Não há contexto emocional em dois minutos de conversa em uma casa de udom com um velho amigo. E sequer sabemos que o protagonista é um web designer. Sabemos apenas que ele vem de Tóquio para essa região distante onde viveu sua infância e adolescência. E, por fim, não há udom caseiro. Um engodo para você assistir mais e mais episódios sem ainda se comprometer emocionalmente.
Ou seja, um enredo de início preguiçoso, não está interessado em captar as energias dispendidas de seu espectador. É matéria de publicação de mangá, burocrático e tedioso. A animação é fofa, é fato, mas com material prévio, se torna o minimo para animes. A direção insegura constrói rimas deselegantes em toda a ação. Como o momento em que o protagonista descobre a real natureza da menina. Observe cada segundo dessa sequência, em como tanto a direção quanto o roteiro escolhem minuciosamente os detalhes da narrativa sem levar em conta que tem alguém assistindo interessado em um desenrolar mais natural e artístico. Não um formulário de como deve ser uma história de anime.
É como se Syd Field tivesse escrito um livro sobre como fazer animes em quinze simples passos. Não requer experiência.
</description>
</item>

     
        <item>
  <title>Shônen Ashibe GO! GO! Goma-chan</title>
  <link>http://www.caloni.com.br/shonen-ashibe-gogo-goma-chan/</link>
  <pubDate>2021-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/shonen-ashibe-gogo-goma-chan/</guid>
  <description>Ela é uma foca bem fofinha em uma animação com traços infantis, geometricamente simples de repetir.
Agora eu sei o barulho que uma foca faz e não vou decepcionar minhas sobrinhas.
Mas o desenho em si é cheio de problemas de ritmo e de tom, que se disfarçam atrás da costumeira fofice de animes com abordagem mais infantil. Os personagens são bobos no mau sentido, pois não há malícia. É desses que seguem o manual de boas maneiras de como fazer uma obra que não ofenda ninguém nesse século. Ou seja, um tédio.
</description>
</item>

     
        <item>
  <title>Truques e Macetes na Hora de Programar</title>
  <link>http://www.caloni.com.br/truques-e-macetes-na-hora-de-programar/</link>
  <pubDate>2021-05-20</pubDate>
  
  <guid>http://www.caloni.com.br/truques-e-macetes-na-hora-de-programar/</guid>
  <description>Este artigo é para organizar meu raciocínio e pesquisa para uma passagem de conhecimento na empresa. Foi sugerido ensinar um pouco do que é possível fazer para acelerar um pouco o desenvolvimento de um programador no dia-a-dia, não só para codificar, mas para todo o resto que consome bem mais tempo.
 macete1 /ê/ substantivo masculino 1. m.q. MACETA (&#39;pequeno instrumento&#39;). 2. tipo de martelo us. para esculpir em madeira ou, em trabalhos de carpintaria e marcenaria, para bater nos cabos dos formões.
 Lembrando que as sugestões foram bem vagas e gerais, então essa é só uma pincelada pessoal sobre os assuntos; nada muito objetivo. As perguntas podem vir depois.
Como buscar por melhores resultados nas pesquisas   Não use o Google como Banco de Dados. O seu Cérebro é o Banco de Dados. Use o Google como um índice remissivo do seu cérebro. Use livros e artigos densos para alimentar seu Banco de Dados.
  Nunca use a primeira resposta do Stack Overflow. Por quê? Porque ela é a mais popular.
  Stack Overflow para pedaço de código; artigos para entender o código; livros para estender o código.
  Como otimizar o tempo programando Como diria Caloni:
 Para quê você vai querer fazer isso, se o tempo mais prazeroso do trabalho se passa programando?  Como diria edw519, um dos membros mais populares do Hacker News:
  Alguns caminhos são melhores que outros, mas qualquer caminho é melhor que nenhum. Ex: fazer API HTTP com tudo GET.
  Comece com a resposta, então trabalhe ao contrário. Ex: quero uma API HTTP, então começo chamando.
  É muito mais fácil julgar algo que já existe que definir algo que não existe. Ex: uma API HTTP com tudo GET é feio, mas dá pra melhorar (porque já existe).
  Esteja preparado para cavar quantos níveis de detalhe precisar para entender (&amp;quot;um hacker é uma pessoa que sabe exatamente o que acontece quando se pressiona um botão do teclado&amp;quot;).
  Não ligue o computador a menos que você tenha uma tarefa específica (para pessoas que trabalham em lugares que você não ganha pelo tempo sentado).
  Beleza é importante, mas entrega é mais importante. Ex: a API HTTP GET tá pronta e pro usuário funcional; próxima versão a gente melhora.
  Mantenha extremamente simples no começo. Complique conforme avança. Ex: para mexer na API HTTP GET tem um ponto de entrada cheio de ifs; agora comece a criar funções e outros pontos de entrada.
  Codifique todos os dias (memória muscular).
  Como diria René Descartes, um cara não muito popular nas rodinhas da Idade Média:
 Cada problema que eu resolvo se torna uma regra que serve mais tarde para resolver outros problemas. Ex: se o problema é perder tempo com uma tarefa repetitiva ache uma maneira mais automática de fazer a mesma tarefa.  Para além disso, ou problemas modernos de déficit de atenção enquanto compila (galerinha do C&#43;&#43; e do Rust), leia livros:
  The ONE Thing, de Gary Keller (&amp;quot;There will always be just a few things that matter more than the rest, and out of those, one will matter most&amp;quot;).
  Deep Work: Rules for Focused Success in a Distracted World, de Cal Newport (&amp;quot;Professional activities performed in a state of distraction-free concentration that push your cognitive capabilities to their limit&amp;quot;).
  Flow, The Psychology of Optimal Experience, de Mihaly Csikszentmihalyi (&amp;quot;engagement in an activity that is both challenging and attainable&amp;quot;).
  Atalhos nos terminais (Linux e Windows) e como encontrar atalhos   Entenda a estrutura de diretórios e arquivos do seu sistema; organize (do seu jeito, mas organize).
  Em ambos SOs, para navegar entre diretórios mantendo o histórico: pushd, popd.
  Para buscar por arquivos no Windows dir; para buscar por arquivos no Linux find; use o manual.
  Como encontrar mais atalhos: encontre o subconjunto que você usa. Ex: atalhos das tarefas mais comuns do seu editor favorito.
  Caso de uso #1: como eu encontrava atalhos e janelas escondidas no Visual Studio.
  Caso de uso #2: como eu decorava atalhos no Vim.
  Ferramentas úteis para análise  A lenda conta que em uma competição para ver quem cortava a árvore mais rápido, o lenhador mais velho passou a maior parte do tempo amolando o machado, enquanto o competidor mais jovem dedicou-se em golpear a árvore com toda a sua força. Quando o jovem estava no meio do tronco o competidor mais experiente começou a cortar sua árvore.
 Como diria, edw519, um dos membros mais populares do Hacker News:
  Use a ferramenta certa para o trabalho certo. Ex: Vim para tudo.
  Quase qualquer ferramenta pode fazer o trabalho. Algumas são melhores que outras. Ex: uma leiteira é multiuso.
  Lembre-se dos padrões que você usou antes. Você irá usá-los novamente. Ex: atalho chato no Visual Studio para economizar dez digitações por uma.
  Process Explorer e como encontrar quem travou seu arquivo   Find, Find Handle or DLL...
  Como saber onde está o executável de um processo.
  Como saber a linha de comando do processo.
  Como saber as portas de rede abertas.
  Como saber as variáveis de ambiente do processo.
  Como saber as strings em memória do processo.
  Como saber as threads e stack de cada thread de um processo (com nomes de funções usando símbolos).
  Como... bom, vocês pegaram a ideia.
  Process Monitor e como ver quem escreveu no arquivo   Filter, Filter...
  Como saber a linha de comando do processo que escreveu no arquivo.
  Como saber como foi aberto o arquivo pelo processo.
  Como saber a duração dessa chamada de escrita em arquivo.
  Como saber quando foi que o processo foi iniciado.
  Como saber a pilha de chamadas da thread que escreveu no arquivos... bom, vocês pegaram a ideia.
  TCP View, WinMerge, BareTail, WinDirStat   Portas abertas na máquina.
  Comparar versões diferentes de arquivos e pastas.
  Ter um tail portátil e para múltiplos arquivos e filtro.
  Saber quem está ocupando espaço na máquina que o cliente pediu para limpar.
  Ferramentas UNIX (desde 1970 por aí)   Turbinar Windows usando Git (sed, grep, ls): colocar no path do usuário ou do sistema.
  Grep: buscar coisas dentros dos arquivos.
  Sed: modificar coisas dentros dos arquivos.
  Tail e head: ver o início e o final de um arquivo; seguir o final do arquivo conforme for sendo escrito.
  Sort e uniq: sortear e uniqar coisas; ou ambos (sort -u).
  Pipe: poder dos programadores de Roma; nunca subestime juntar ferramentas UNIX.
  Regex: poder dos programadores do Olimpo; use o guia do Aurelio Jargas se nunca ouviu falar.
  Awk: poder dos programadores de Asgard; use o guia GNU.
  Git   Leia o livro na segunda vez que ficar confuso usando Git fazendo a mesma coisa.
  Encanamento: Git é um map de chave/valor em arquivo.
  Porcelana: Git é uma lista encadeada de arquivos patch.
  Comandos esotéricos: cherry-pick, rebase, squash, revert, sub-tree.
  Perguntas? </description>
</item>

     
        <item>
  <title>Eniwine</title>
  <link>http://www.caloni.com.br/eniwine/</link>
  <pubDate>2021-05-17</pubDate>
  
  <guid>http://www.caloni.com.br/eniwine/</guid>
  <description>Comprei um Kit da Eniwine para testar esse experimento em usar inteligência artificial para prever os gostos particulares dos bebuns. São 15 mini-garrafas de 50 ml cada em que você deve degustar e dar uma nota de 0 a 5, de meio em meio, e depois jogar no sistema deles para comprar mais vinhos. Comecei a degustação um dia depois de chegar e de cinco em cinco mini-garrafinhas degustamos 15 rótulos desconhecidos. Junto vem um catálago de cada vinho, mas qual é a graça de saber qual o vinho antes de tentar adivinhar os sabores escondidos?
A listagem abaixo é o resultado das notas e comentários de todos eles. Como já disse, eles foram tomados em três dias seguidos de cinco em cinco. O total de tempo de uma sessão ficou entre meia-hora a uma hora e pouco, variando dependendo do dia. Degustamos a dois e servi metade das garrafinhas, pois pretendo voltar a bebê-los em mais um teste cego antes de revelar o que cada um é (update: voltei a beber uma semana depois; minhas notas e percepções foram anotadas, também).
De imediato posso quase que garantir que existe uma gradação de corpo neles, e a partir da garrafa de número 6 os vinhos começaram a ficar muito densos e encorpados, o que é uma pena, pois é difícil entender vinhos tão complexos em pouco tempo (e pouco vinho) para experimentar.
Foi quase uma experiência em vínicolas industriais com visita comercial de caravana. Quem já participou da tortura sabe do que estou falando. Houve uma vez em um castelinho construído em Napa em que havia 20 rótulos para experimentar de uma vez. Não lembro de nenhum deles.
Vamos lá:
Rótulo 1  Caloni 2021-05-15 (3.0): Doce, alcoólico, frutas maduras (ameixa?), corpo médio, levemente tânico, enjoativo. Cabernet. Mitiko 2021-05-15 (3.5): Azedinho, estranho (cheiro?). Caloni 2021-05-22 (3.0): Vinho doce, liquoroso. Talvez seja de sobremesa, mas mais provável colheita tardia. Agradável, mas talvez enjoativo com uma taça inteira. Malbec?  E o vinho é... Virtus Reservado Suave Cabernet Sauvignon 2020: &amp;quot;Apresenta coloração vermelho rubi de tonalidade intensa e viva. No aroma é franco, apresentando frutas negras e frutas vermelhas como amoras, mirtilo, morango, terroso e especiarias como a pimenta preta. Sem utilização de madeira de carvalho. Em boca apresenta paladar leve, agradável, corpo médio, taninos sedosos e sabor adocicado.&amp;quot;
 Acertos: corpo médio, taninos (leve vs sedoso), ameixa. Erros: Malbec vs Cabernet.  Rótulo 2  Caloni 2021-05-15 (4.0): Quentinho, puco alcoólico, tânico, ácido, amadeirado e/ou envelhecido, quero beber mais. Cabernet? Mitiko 2021-05-15 (1.5 2.5): Gosto ruim meio Merlot, não-doce. Caloni 2021-05-22 (2.5): Encorpado, mistura de doce com amargo, não é alcoólico, mas é vibrante demais. Cor escura.  E o vinho é... Cavic Meio Seco 2020: &amp;quot;Vinho tinto elaborado pelas castas Bequignol, Sangiovese, Lambrusco Maestri, Meunier e Caberinta. De cor vermelho rubi brilhante e nariz muito vinoso. Em boca é suave, meio seco com leve presença de taninos, características que o tornam um vinho bem harmonioso.&amp;quot;
 Acertos: amadeirado e/ou envelhecido vs &amp;quot;nariz muito vinoso&amp;quot; (?) e/ou leve presença de taninos. Erros: encorpado vs suave, Cabernet vs Blend Maluco.  Rótulo 3  Caloni 2021-05-15 (1.5): Cor transparente, quente, sabores sem fruta (mineral ou vegetal), remédio. Merlot? Ácido. Amargo com corpo leve. Mitiko 2021-05-15 (0.0): Parece mais Merlot, é ruim. Caloni 2021-05-22 (3.0): Cor de envelhecido, mas corpo fraco e sabor lembram um Pinot Noir. Fácil de tomar, levemente vibrante, frutado e azedinho.  E o vinho é... Tierra Sur 2019: &amp;quot;Este vinho segue é aromático, leve e versátil, com coloração vermelho rubi intenso, aromas florais remetendo a violetas, aromas de frutas negras, como ameixa, amora, jabuticaba, mirtilo e cereja preta, além de notas de especiarias. Em boca, é seco, com acidez média, taninos sedosos, corpo médio e álcool mediano.&amp;quot;
 Acertos: ácido vs acidez média, sabores sem fruta vs aromas florais (violetas) e especiarias, quente vs álcool mediano. Erros: cor transparente vs rubi intenso, sabores sem frutas vs frutas negras (ameixa, amora, jabuticaba, mirtilo, cereja preta).  Rótulo 4  Caloni 2021-05-15 (2.5): Amargo, corpo médio, ácido, jovem, mais vegetal ou menos mineral, tosco, aroma leve de algo estranho. Não sei a uva. Alcoólico. Mitiko 2021-05-15 (2.5): Sabor vem e some. Nada &amp;quot;presencioso&amp;quot;. Tânico. Caloni 2021-05-22 (2.5): Tânico, amargo, corpo médio, quente. Agradável, mas amargor é mais persistente que os outros sabores; já perdeu o aroma.  E o vinho é... Vecchia Cantina Chianti 2019: &amp;quot;Apresenta coloração vermelho rubi, aromas de frutas vermelhas como amora, framboesa e cereja, acidez equilibrada, apresenta corpo médio e acidez equilibrada, álcool mediano e grande persistência com taninos marcantes e sedosos. É um vinho equilibrado e agradável de se tomar.&amp;quot;
 Acertos: alcoólico vs álcool mediano. Erros: jovem vs taninos marcantes e sedosos, ácido vs acidez equilibrada, tosco vs agradável.  Rótulo 5  Caloni 2021-05-15 (3.5 4.0): Alcoólico, aroma agradável, corpo médio para forte e tânico, acidez (azedinho), uma uva próxima de Malbec sem ser Malbec? Frutado? Não a ponto de ser enjoativo, aroma de barrica. Mitiko 2021-05-15 (2.0): Até que não tá tão ruim. Vai tomando e vai ficando ruim. Caloni 2021-05-22 (3.5): Esse manteve o aroma e é muito bom; o corpo é mais leve mas lembra as cavas de vinícolas. Frutado para azedo, meio amargo, ainda quente. Cor é bem agradável.  E o vinho é... Sunrise Cabernet Sauvignon 2020: &amp;quot;Apenas as vinhas mais ensolaradas podem produzir este vinho de intensidade deslumbrante. De cor vermelho rubi, com notas de amora, groselha preta e chocolate, acompanha pratos de cordeiro e carnes vermelhas grelhadas e acompanha excepcionalmente queijos maduros como Gruyère ou Parmesão, bem como pratos picantes como fajitas de carne. Como um raio de sol na sua taça, este vinho é equilibrado e firme, intenso e harmonioso, com um sabor persistente no paladar.&amp;quot;
 Acertos: frutado vs (amora, groselha preta), corpo médio para forte e tânico x intensidade deslumbrante. Erros: Malbec vs Cabernet.  Rótulo 6  Caloni 2021-05-16 (3.5): Cara de Malbec. Alcoólico, semi-frutado, jovem com pouco tanino, pouco de vegetal? Ácido e azedo. Mitiko 2021-05-16 (0.5): Esse é ruim, parece Merlot. Caloni 2021-05-22 (3.5): Gostoso de beber. Tem um frutado azedo, um corpo leve, provavelmente um vinho jovem ou com pouco tempo de reserva. Pode ser um Malbec ou um blend.  E o vinho é... French Dog Merlot 2019: &amp;quot;Vinho de cor vermelho rubi brilhante. Apresenta no aroma notas de frutas vermelhas negras como ameixa e amora, framboesa, groselha e mirtilo. Em boca, apresenta corpo médio, com taninos sedosos, acidez média e teor alcoólico equilibrado, sendo equilibrado e muito macio no paladar.&amp;quot;
 Acertos: semi-frutado vs fruta vermelhas negras (ameixa, amora, framboesa, groselha, mirtilo), Mitiko Merlot, ácido vs acidez média. Erros: Malbec vs Merlot, pouco de vegetal.  Rótulo 7  Caloni 2021-05-16 (3.0): Alcoólico, amadeirado, super-encorpado, aroma doce, ácido. Tânico. Não tenho certeza a uva. Mitiko 2021-05-16 (3.0): Azedo demais. Cabernet? Caloni 2021-05-22 (3.0): Bem azedo, cheiro característico, pouco alcoólico, tânico. Pode ser um reserva ainda jovem. Há um certo amargor na textura. Uma cor mais escura. Não é ruim, é apenas peculiar.  E o vinho é... Rio Sol Reserva 2015: &amp;quot;O Vinho apresenta coloração vermelho rubi intenso, com aromas de frutas vermelhas e negras maduras, como ameixa, cereja, figo framboesa e groselha, conciliadas com as notas de especiarias, como cravo e pimenta, e notas de cacau, café e tabaco provenientes da maturação em barricas de carvalho. Em boca, é encorpado, com acidez equilibrada, taninos sedosos e álcool mediano com grande persistência em boca.&amp;quot;
 Acertos: amadeirado vs maturação em barricas de carvalho, ácido vs acidez equilibrada, tânico vs taninos sedosos, aroma doce vs aromas de frutas vermelhas e negras maduras (ameixa, cereja, figo, framboesa, groselha), super-encorpado vs encorpado. Erros: alcoólico vs álcool moderado?  Rótulo 8  Caloni 2021-05-16 (2.0): Quente, amargo, encorpado. Bem amargo o retrogosto. Quase nada frutado. Mineral talvez? Parece envelhecido pelo tanino, mas com pouca madeira. Mitiko 2021-05-16 (1.0): Amargo. Parece mais Malbec que o (rótulo) 6. Caloni 2021-05-22 (3.5): Desses amadeirados envelhecidos. Ainda alcoólico. Pouco frutado, mas não é vegetal nem mineral. Cor bonita.  E o vinho é... San Valentin Garnacha 2018: &amp;quot;Cor vermelho cereja escuro com brilho violeta. Aromas de frutas vermelhas, ameixas suculentas, figos secos e discretas notas de especiarias do Mediterrâneo. Generoso no álcool mas sem desequilíbrio, taninos macios, acidez correta e corpo médio.&amp;quot;
 Acertos: envelhecido pelo tanino vs taninos macios, quente vs genroso no álcool. Erros: encorpado vs corpo médio, quase nada frutado vs aromas de frutas vermelhas (ameixas suculentas, figos secos).  Rótulo 9  Caloni 2021-05-16 (3.5): Alcoólico médio, também amargo e parece envelhecido (mas não deveria ter sido). Esses do meio estão de amargar. Aroma de geléia sem chute do vinho. Mitiko 2021-05-16 (4.0): Gostosinho. Mais ou menos. Mais um Cabernet. Dá para ficar bebendo devagarzinho. Caloni 2021-05-22 (4.5): Amadeirado, sim, mas mais amargor e envelhecimento se sente. A cor é de envelhecido. Há tons de madeira no sabor (tostado). Corpo médio para leve. Elegante. Muito bom.  E o vinho é... Rio Claro Reserva Organico Carménère 2018: &amp;quot;Este Rio Claro Reserva exemplifica muito bem as características da variedade. Com vermelho-rubi intenso, apresenta aromas de frutas vermelhas e negras maduras, como ameixa, amora, groselhas e cassis, que se integram com os aromas vegetais e herbáceos como manjericão e pimentão, e notas de baunilha e chocolate provenientes da maturação em barricas de carvalho.&amp;quot;
 Acertos: parece envelhecido e amadeirado vs maturação em barricas de carvalho. Erros: aroma de geléia vs aromas de frutas vermelhas e negras maduras (ameixa, amora, groselhas e cassis).  Rótulo 10  Caloni 2021-05-16 (5.0): Hoje é dia dos envelhecidos. Quentinho, ótimo corpo, pouco alcoólico. Doce para frutado de compota sem ser enjoativo. Amadeirado, tânico, envelheceu muito bem. Buquê fantástico. Poderia ser Cabernet. Mitiko 2021-05-16 (4.0): Facinho de beber, gostosinho. Caloni 2021-05-22 (4.0): Que vinho fácil de beber. O corpo é leve pra médio, o sabor é gostosinho, frutado vermelho ou algo do tipo.  E o vinho é... Joliesse Cabernet Sauvignon 2018: &amp;quot;Apresenta coloração vermelho rubi, com reflexos violáceos, aromas de frutas negras maduras, como ameixa, amora, cereja preta e figo, além de notas de cravo e pimenta, e notas de baunilha, café, cacau, tabaco e couro, provenientes da maturação em barricas de carvalho. Em boca, é seco, com acidez média, taninos marcantes, encorpado e com álcool equilibrado. Apresenta grande persistência.&amp;quot;
 Acertos: amadeirado e envelheceu muito bem vs maturação em barricas de carvalho, buquê fantástico vs aromas de frutas negras maduras (ameixa, amora, cereja preta, figo) e notas de cravo e pimenta e notas de baunilha, café, cacau, tabaco e couro, Cabernet. Erros: nenhum.  Rótulo 11  Caloni 2021-05-17 (3.5): Envelhecido, amadeirado, aromático, levemente alcoólico, e amargo. Tons não frutados, tanino e corpo médio. Mitiko 2021-05-17 (2.0): Mais cheiroso, azedo. Caloni 2021-05-22 (5.0): Nossa, esse está muito bom ainda. Frutado (ameixa?) e envelhecido em barrica, seu sabor amadeirado é inebriante. Seu corpo está equilibradíssimo. Quente sem agredir o paladar, mas abraçá-lo. Me dá vontade de beber mais e mais. Este é senhor vinho.  E o vinho é... Solar Viejo Crianza 2016: &amp;quot;Coloração vermelho rubi de média intensidade. Toques de baunilha, caramelo, cacau, com notas de carvalho e frutas vermelhas como cereja, amora, framboesa e morango. Vinho estruturado e equilibrado com agradáveis notas de madeira e frutos silvestres maduros, com acidez média, taninos marcantes, médio corpo e álcool equilibrado.&amp;quot;
 Acertos: corpo médio vs médio corpo, levemente alcoólico vs álcool equilibrado, tanino vs taninos marcantes, aromático vs toques de baunillha, cacau, notas de carvalho, frutas vermelhas (cereja, amora, framboesa, morango), notas de madeira e frutos silvestres maduros, amadeirado vs notas de madeira. Erros: ameixa vs tudo menos ameixa.  Rótulo 12  Caloni 2021-05-17 (2.5): Azedo, alcoólico, pouco aromático, corpo médio para forte. Esse tipo de vinho precisa harmonizar. Mitiko 2021-05-17 (2.5): Menos amargo que os outros. Caloni 2021-05-22 (3.5): Quente, encorpado, frutas maduras. Agradável, mas levemente enjoativo. Cor rubi escura.  E o vinho é... Coutada Velha Signature 2019: &amp;quot;Este Coutada velha Signature evidencia as características do terroir local, com coloração vermelho rubi, com reflexos violáceos, aromas de frutas negras em compota, como ameixa, amora, cereja preta, figo, romã e groselha, além de notas de amêndoas, baunilha, chocolate e tabaco, provenientes da maturação em barricas de carvalho. Em boca, o vinho é seco, com acidez média, taninos marcantes, corpo médio para alto e álcool equilibrado.&amp;quot;
 Acertos: cor rubi escura vs coloração vermelhor rubi, frutas maduras vs frutas negras em compota (ameixa, amora, cereja preto, figo, româ, groselha), quente vs álcool equilibrado. Erros: não encontrou taninos?  Rótulo 13  Caloni 2021-05-17 (3.0): Elegante, mas amargo. Esses envelhecidos estão meio podres, não? Corpo forte, tânico, não-frutado. Mineral. Podem estar envelhecendo ainda, no estágio do meio. Mitiko 2021-05-17 (2.5): Não tão amargo, mas azedo forte. Caloni 2021-05-22 (3.5): Não parece mais tão envelhecido; mas um pouco. Pode ser um reserva no meio do caminho. Ainda bem quente e vibrante, mas com sabores mais maduros. Amadeirado e cor rubi.  E o vinho é... Valle Austral Reserva Malbec 2018: &amp;quot;Este vinho evidencia as características do terroir local, sendo robusto, complexo e intenso com coloração vermelho rubi intenso, aromas florais remetendo a violetas, aromas de frutas negras, como ameixa, amora, jabuticaba, mirtilo e cereja preta, além de notas de especiarias. Em boca, é seco, com acidez média, taninos sedosos, corpo médio e álcool mediano.&amp;quot;
 Acertos: corpo forte vs robusto, reserva no meio do caminho vs Reserva Malbec. Erros: mineral vs aromas florais e frutas negras, corpo forte vs corpo médio.  Rótulo 14  Caloni 2021-05-17 (3.5): Muita madeira, muito tanino. Corpo fortíssimo. O frutado ficou mais no aroma, sabor é uma pancada; para degustar com mais calma. Complexo, pode ser top, mas não a seco. Mitiko 2021-05-17 (3.5): Um pouco amargo, mas não é tão azedo. O amargor vai sumindo rápido. Caloni 2021-05-22 (3.5): Nota-se de cara que esse é dos envelhecidos, com corpo bem forte. Daqueles de tomar fumando um charuto. Vários sabores e aromas fortes. Especiarias. Pimenta. Dá para gastar pelo menos uma hora com meia-taça dessa criança.  E o vinho é... Château Marjosse Rouge 2018: &amp;quot;Bordeaux, talvez a mais celebrada e conhecida região vinícola do mundo, é a terra dos grandes Châteaux, que, em geral, fazem jus à fama de produzir vinhos muito elegantes, longevos e encorpados.&amp;quot;
 Acertos: corpo fortíssimo vs encorpado. Erros: nenhum, a descrição do vinho é inexistente.  Rótulo 15  Caloni 2021-05-17 (4.0): Amadeiradíssimo, estágio final (estou influenciado pela suposta gradação dos rótulos?). Não tão amargo, mas também não tão rico em sabores. Talvez eu não goste de vinhos tão maduros assim, cheio de estrutura. Mas eu tomaria meia-taça por umas horas. Frutado quase estragado. Mitiko 2021-05-17 (4.0): Nem azedo, nem amargo. Aveludado (suave). Não é agressivo. Caloni 2021-05-22 (2.5): Encorpadíssimo, chega a ser azedo e amargo tudo junto por conta disso. Se fosse cerveja seria IPA. Os sabores são fortes (não picantes, outra coisa).  E o vinho é... Piantaferro Primitivo Di Manduria D.O.C 2017: &amp;quot;Este Primitivo, não foge à regra, tendo coloração vermelho rubi intenso, com reflexos violáceos, aromas de frutas vermelhas e negras, como ameixa, groselha preta, amora e jabuticaba, em compota, seguida de notas de especiarias como baunilha e pimenta, e de torrefação, decorrentes da maturação em barricas. Em boca, é agradável e intenso ao paladar, apresenta taninos marcantes e presentes, acidez equilibrada, teor alcoólico de 14,0%, condizente com o perfil do vinho; com grande persistência e retrogosto.&amp;quot;
 Acertos: amadeiradíssimo vs maturação em barricas, encorpadíssimo vs grande persistência, frutado quase estragado vs frutas vermelhas e negras (ameixa, groselha preta,amora e jabuticaba) em compota. Erros: nenhum.  </description>
</item>

     
        <item>
  <title>Anatomia de Grey (Grey&#39;s Anatomy)</title>
  <link>http://www.caloni.com.br/greys-anatomy/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/greys-anatomy/</guid>
  <description>O piloto dessa série pulou nos títulos aleatórios da Netflix. Já tinha visto um pedaço ou outro, mas primeira vez que começo a série. Assisti cinco minutos de Jupiter&#39;s Legacy nesse esquema, mas assisti o episódio inteiro de A Anatomia de Grey.
As produções pré-streaming, mesmo que para TV, possuíam um formato manjado, tão ou mais quanto as produções de internet, mas havia uma qualidade inerente em sua estrutura, seus personagens, seu roteiro e produção. Era feito para não falhar, e não apenas mais um em um catálogo de horas infinitas na frente do sofá. Claro que, falando de uma série que começou em 2005, já se torna mais uma em um mar de outras.
Um Plantão Médico com protagonista feminina, Grey&#39;s Anatomy tem a proposta de acompanhar esses estágios de medicina (tem um nome chique quando é estagiário de médico, mas esqueci agora), suas vicissitudes na profissão que acabou de começar, e junto dela um turbilhão de emoções regado a &amp;quot;noites&amp;quot; mal dormidas. O piloto até que é leve, introdutório, mas possui peso, flui natural, e os diferentes dramas desses aprendizes se entrelaçam em dois dias e noites no Hospital Central de Seattle.
Não me admira que seja um seriado com tanto tempo no ar, nem que as pessoas se apaixonem pelos seus personagens. Eles estão muito à vontade em seus papéis desde o início. O casting é sensacional, mas a montagem é ainda melhor, pois nos tira o tempo precioso para refletirmos sobre um caso para gerar a sensação de desorientação, desesperança, medo. Talvez não seja um episódio tão leve assim, ou se é leve, ao mesmo tempo é profundo. Do seu minuto inicial ao final nada é desperdiçado para mover a história. E essa é uma diferença crucial das seriezinhas de internet, que pontuam pelo tempo de tela sem medo que o espectador clique no próximo canal do controle.
Essa função de título aleatório está vindo bem a calhar.
</description>
</item>

     
        <item>
  <title>Bananya</title>
  <link>http://www.caloni.com.br/bananya/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/bananya/</guid>
  <description>Gatos que nascem dentro da casca de uma banana. Estou convencido que todos os canais da TV multidimensional da série Rick &amp;amp; Morty não vem do espaço sideral. Todos vêm do Japão. Desenho fofo com dublagem mais ainda.
</description>
</item>

     
        <item>
  <title>Don&#39;t Toy With Me, Miss Nagatoro (Ijiranaide, Nagatoro-san)</title>
  <link>http://www.caloni.com.br/nagatoro-san/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/nagatoro-san/</guid>
  <description>Um Teasing Master adolescente, a arte do exagero nos traços e movimentos encontra uma verossimilhança incômoda com a garota bullie, Hayase Nagatoro. Quem já sofreu com essas garotas no colégio deve se lembrar melhor. Eu me lembro, pois era virjão.
Mas além dos movimentos do anime, que são expressionistas, a dublagem de Sumire Uesaka é coisa de louco. Espontânea e à vontade demais, Uesaka incorpora a menina sapeca tão naturalmente que o desenho acompanha sua voz, e não o contrário.
</description>
</item>

     
        <item>
  <title>Hinamatsuri</title>
  <link>http://www.caloni.com.br/hinamatsuri/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/hinamatsuri/</guid>
  <description>A estranheza de ver uma garota com poderes de telecinese recém-chegada de outra dimensão ser lançada na vida, glamour e violência da yakuza compensa a história comunzinha que se segue. As notas de estranheza estão nesse choque e a série não se esforça para nos mostrar o óbvio. Há uma cena hilária no segundo episódio em que uma colega de classe da pequena criatura acaba servindo drinks para mafiosos. A cena continua hilária até o final porque não há ninguém observando a bizarrice desse momento, apenas nós. Essas pérolas acontecem mais sem alardes, quando com a chegada de uma suposta mercenária acaba em uma partida de joquenpor. A melhor de três.
</description>
</item>

     
        <item>
  <title>Naruto</title>
  <link>http://www.caloni.com.br/naruto/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/naruto/</guid>
  <description>Este pequeno épico sobre uma lenda com um ser mágico maligno e uma vila de ninjas seculares tem um piloto dramático que acerta um tom narrativo em que o drama é eficiente e os traços são toscos. Não é bom de se assistir, nem pelo desenho nem pelos movimentos. E a lenda se torna maior que a série.
</description>
</item>

     
        <item>
  <title>Neko Neko Nihonshi</title>
  <link>http://www.caloni.com.br/neko-neko-nihonshi/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/neko-neko-nihonshi/</guid>
  <description>História do Japão feudal com gatos. É divertidinho e criativo. Notas positivas para a viagem de boas vindas entre líderes, quando os gatos comem toda a comida de presente, mas sobra o saco. E gatos adoram saco. Só não sabem o que fazer com o ouro. Divertido com vários níveis infanto-adulto.
</description>
</item>

     
        <item>
  <title>Nyanbo!</title>
  <link>http://www.caloni.com.br/nyanbo/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/nyanbo/</guid>
  <description>Gatos vindos do espaço. São animações em cenários live action. Bonitinho, mas bem conceitual e sem tensão. A história é bobinha demais até para crianças.
</description>
</item>

     
        <item>
  <title>O Legado de Júpiter</title>
  <link>http://www.caloni.com.br/o-legado-de-jupiter/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/o-legado-de-jupiter/</guid>
  <description>Estou adorando esse modo de título aleatório que a Netflix criou nas TVs LG (não sei se tem em mais algum dispositivo). Basicamente você clica em seu perfil e o serviço de streaming vai passando títulos &amp;quot;aleatórios&amp;quot;. Você pode pular para o próximo em um clique do controle remoto. É como ter o modo TV de volta, com as vantagens de não ter comercial e tudo começar do começo.
Por que estou falando isso em uma nota sobre Jupiter&#39;s Legacy? Porque foi assim que esse título apareceu para mim. Eu não clicaria nele de livre e espontânea vontade, nem se estivesse muito entediado. Mas o título aleatório me libera de ficar vendo trailers sem fim e vai direto ao ponto.
E o ponto dessa série adaptada de um graphic novel ou algo do tipo é contar a história de heróis que são filhos de um super. Começa contando com eles crianças e depois avançam no tempo e dão várias dicas de que esse é o garoto, aquela é sua irmã. O roteiro preguiçoso de sempre, mas pode ser outra coisa.
Produções caras como essa precisam convencer o espectador que está com o cérebro desligado babando no sofá. Essa é a explicação mais sensata. A estrutura dos primeiros cinco minutos é muito próxima de três ou quatro produções do gênero, e não há um pingo de empatia em acompanhar essas pessoas.
O resto do episódio eu não sei como foi, pois parei por aí. As vantagens da TV com controle remoto. Agora de volta com essa opção de títulos aleatórios. Melhor coisa que a Netflix lançou há muito tempo.
</description>
</item>

     
        <item>
  <title>Saiki Kusuo No Psi Nan</title>
  <link>http://www.caloni.com.br/saiki-kusuo-no-psi-nan/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/saiki-kusuo-no-psi-nan/</guid>
  <description>Este anime de piadas ágeis e texto frenético é daquele humor mental, que não dá tempo de sentir e dar risada antes da próxima piada. É absurdo, também, mas um absurdo coeso. Tudo faz sentido se o protagonista é um vidente, telepata, pirotécnico.
Saiki Kusuo nasceu especial em uma família normal e narra suas próprias aventuras no colégio. Sensato, explica ao espectador detalhes de sua vida atual, como porque deixou de expor seus poderes em público, ou porque é melhor resolver os conflitos entre seus pais em um casamento desgastado para que ele consiga comer seu delicioso pudim de café de sobremesa.
Dinâmico e cheio de situações em um episódio só, No Psi Man entretem sem comprometer. Boa diversão ocasional sem pretensão.
</description>
</item>

     
        <item>
  <title>Shinya! Tensai Bakabon</title>
  <link>http://www.caloni.com.br/shinya-tensai-bakabon/</link>
  <pubDate>2021-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/shinya-tensai-bakabon/</guid>
  <description>Essa continuação de uma série curta de anime dos anos 70 acompanha uma família em torno do inquieto pai Bakanon. O primeiro episódio é uma espécie de homenagem metalinguística ao original, o que deve ser melhor para quem conhece a fonte. Para quem chegou agora como eu é metade engraçado: a metade que não depende de referências passadas.
O pai quer mudar detalhes no anime para que seja uma nova estréia completamente nova. Então ele muda o bigode, o corpo, o gênero. Ele troca o filho por um transeunte, e o filho e seus cinco irmãos gêmeos produzidos em laboratório viram os transeuntes. Na gana de ser uma celebridade de respeito ele termina tentando fazer seu filho caçula ser preso por tráfico de drogas, pois é o que toda celebridade de respeito deve ter no currículo. Contando para vocês soa mais engraçado que assistindo, porque o ritmo, o tom e a própria referência deslocam a piada para uma espécie de Family Guy de outra dimensão. É caótico demais e se perde na construção.
</description>
</item>

     
        <item>
  <title>Oddtaxi</title>
  <link>http://www.caloni.com.br/oddtaxi/</link>
  <pubDate>2021-05-04</pubDate>
  
  <guid>http://www.caloni.com.br/oddtaxi/</guid>
  <description>Esse simpático anime com animais gira em torno de um taxista mau-humorado e a vizinhança que forma uma fauna de diversas espécies em uma Tóquio versão Zootopia. A história do primeiro episódio quer nossa torcida para este solitário motorista nas ruas da cidade. Tudo acontece à noite. Nós devemos torcer por ele porque ele é alheio à febre das redes sociais. Igualzinho aos espectadores. Claro. Os animais usam o celular a todo momento, e é como se a vida lá fora não tivesse tanta graça ou esperança. A vida real é dura, mas vivida por diferentes animais é fofinha.
Em uma cidade surgem crimes e mistérios e lá vamos nós de novo para um compilado quase noir dessa mesma história. Não há nada no primeiro episódio que nos prenda. Ele está atualizado com a geração internet, politicamente correto e essas pautas da militância; o que na verdade nos afasta ainda mais.
</description>
</item>

     
        <item>
  <title>Lista de Listas Sobre Cinema</title>
  <link>http://www.caloni.com.br/cinema-listas/</link>
  <pubDate>2021-05-02</pubDate>
  
  <guid>http://www.caloni.com.br/cinema-listas/</guid>
  <description> Top Filmes 2018 Top Filmes 2019 Seleção de Filmes da 43a MostraSP Roger Ebert Great Movies Dez melhores filmes de 2016 Saldo da 40a. MostraSP Os 10 melhores filmes dos anos 90... 1890!  </description>
</item>

     
        <item>
  <title>Resoluções 2021</title>
  <link>http://www.caloni.com.br/resolucoes-2021/</link>
  <pubDate>2021-01-02</pubDate>
  
  <guid>http://www.caloni.com.br/resolucoes-2021/</guid>
  <description>Inspirado no post que vi de meu amigo DQ sobre resoluções de ano-novo, algo que ele já vem fazendo desde 2007 (impressionante), resolvi compartilhar um pouco neste post sobre minhas resoluções de 2020. Na verdade não costumo fazer isso, mas ao passar a virada de 2019 para 2020 na casa de outro amigo, ele e sua esposa vieram com um presente e uma ideia para todo o grupo na ocasião: um caderno e uma caneta. Cada um deveria preencher nas primeiras folhas do caderno o que pretendia fazer durante o ano que se inicia. Algo mais ou menos assim, eu provavelmente já estava bêbado o suficiente para não me lembrar dos detalhes.
Hoje abro nesse momento o caderno cuja primeira página havia preenchido e nunca mais olhado. Eis a minha pequena lista:
 Assistir um DVD por semana. Escrever 10 minutos por dia. Andar de bike 1 vez por semana.  Vejamos os resultados.
Assistir um DVD por semana Acredito que tenha cumprido essa meta em sua maioria. Alterei a funcionalidade de busca no blog para conseguir filtrar os filmes assistidos que não foram em cabines de imprensa e deram 110 resultados. Sabendo que há 54 semanas em um ano e que durante o ano cada vez menos assisti conteúdo via streaming por conta da péssima qualidade do cinema e TV contemporâneos, em uma conta de padaria acredito ter atingido o objetivo na média. Outro fator que contribui para meus cálculos é a quantidade de pilhas de DVDs que foram desovados da nossa coleção temporária. (A ideia é assistir os mais de 400 títulos e vendê-los.)
Escrever 10 minutos por dia. Esse foi mais complicado. Houve momentos de grande hiato em que eu lia cada vez mais posts aleatórios sobre como praticar a escrita ou qual a rotina de escritores (o que basicamente se resume em sentar a bunda na cadeira e escrever), mas também houve momentos em que li conteúdo importantíssimo para melhorar minha concentração e o incentivo interno para assumir cada vez mais uma rotina de escritor, como o livro de Mihaly Csikszentmihalyi.
Nos últimos meses comecei a revisar todos meus textos antigos em ordem cronológica e tenho obtido sucesso através de uma rotina em que realizo anotações no Kindle na leitura antes de dormir e nos momentos de sentar a bunda na frente do computador busco por essas anotações e vou checando cada post antigo como não-rascunho. Como a maior parte são textos de filmes esta é minha métrica. Usando mais uma vez a nova busca constato que há 1921 textos de filmes de antes de 2020, e no momento deixaram de conter a tag draft exatos 311, ou seja, 16% de todos os textos antigos foram revisados.
Andar de bike 1 vez por semana. Consegui este feito com louvor em 2019, mas em 2020 caí nos mesmos imprevistos que o DQ comentou em seu post: chegou a pandemia e o isolamento. Praticamente não saí de casa ano passado. Devo conseguir contar nos dedos as vezes. E esta foi a tarefa alternativa a andar de bike.
Enfim, minhas resoluções para o ano que inicia:
Resolução 2021  Assistir um DVD por semana. Revisar textos antigos todo dia. Andar de bike 1 vez por semana.  Sim, continua basicamente o mesmo, exceto o foco no item 2 para revisão em vez de escrever novos textos. Com os novos dados sobre o contágio do vírus e vendo que as pessoas estão menos paranoicas a respeito disso, exceto as malucas, mas que não devo encontrar nas minhas pedaladas, resolvi manter minha tarefa número 3, o que para mim significa reativar minha bicicleta e adicionar mais um exercício semanal além do matinal, que realizei com significativa frequência esse ano.
Não irei adicionar mais tarefas, pois estas estão em andamento e devem continuar consumindo um tempo que é possível se comprometer.
</description>
</item>

     
        <item>
  <title>TIL: Today I Learned</title>
  <link>http://www.caloni.com.br/til/</link>
  <pubDate>2020-12-08</pubDate>
  
  <guid>http://www.caloni.com.br/til/</guid>
  <description>Se você guardar o mínimo de conhecimento que aprendeu em um dia de sua vida e relembrá-lo ao longo dos anos não vai perceber qualquer diferença, pois com a internet fica fácil recuperar o conhecimento com nova pesquisa. No entanto, na internet está também você e seu conhecimento em forma de posts, comentários, podcasts ou qualquer tipo de conteúdo que você produziu. Não custa manter a rotina de gravar o que foi aprendido em um dia para tentar capturar a essência de cada um deles. Quem sabe algo de esclarecedor sobre nós mesmos não pode surgir disso.
  2021-04-21: meu blogue não é um blogue, mas um jardim digital.
  2020-08-07: ao usar ponto (.) antes de rodar um comando no terminal Linux é possível definir variáveis de ambiente. Com isso consigo definir o ambiente para fazer cross compiling em Golang no Linux para Windows, gravando as variáveis em um arquivo executável &amp;quot;export GOOS=windows; export GOARCH=amd64; etc&amp;quot; e chamando com &amp;quot;. meu_arquivo&amp;quot; no terminal.
  2020-10-22: para desabilitar expiração de senhas no Oracle o comando alter user user_name identified by new_password account unlock; resolve. Para as senhas não expirarem novamente em ambiente de desenv é só usar o comando ALTER PROFILE &amp;quot;DEFAULT&amp;quot; LIMIT PASSWORD_VERIFY_FUNCTION NULL; uma vez no banco.
  2020-10-22: para apagar tags dos posts é possível usar o seguinte comando sed -e &amp;quot;s/\[ \&amp;quot;tag\&amp;quot;[,]*/[/&amp;quot; -e &amp;quot;s/[,]* \&amp;quot;tag\&amp;quot; ]/ ]/&amp;quot; -e &amp;quot;s/, \&amp;quot;tag\&amp;quot;, /, /&amp;quot;.
  2020-10-26: para dar sleep em C&#43;&#43; moderno com resolução de milissegundos é std::this_thread::sleep_for(std::chrono::milliseconds(200));. É tão intuitivo que achei preciso anotar.
  2020-11-21: para eliminar qualquer nova-linha em uma string C após ler uma linha da entrada usar uma desconhecida função padrão: buffer[strcspn(buffer, &amp;quot;\r\n&amp;quot;)] = 0;.
  2020-12-08: é possível abrir uma VPN pelo WSL e direcionar a porta RDP de uma máquina remota para uma porta local no Windows e acessar máquinas via RDP em uma porta local. Para a VPN uso o Openvpn. Para o redirect um projeto no GitHub chamado rinetd.
  </description>
</item>

     
        <item>
  <title>Transmatrix</title>
  <link>http://www.caloni.com.br/transmatrix/</link>
  <pubDate>2020-12-06</pubDate>
  
  <guid>http://www.caloni.com.br/transmatrix/</guid>
  <description>Os irmãos Wachowski hoje são irmãs. Ambos passaram por cirurgias de mudança de sexo. Recentemente, durante entrevistas sobre a produção de Matrix 4, foi comentado por uma delas que o primeiro Matrix era uma alegoria sobre transexualidade.
De fato. Ao reassistir com essa visão é possível observar a dedicação dos diretores em mostrar o esforço sobrehumano do resgate de Neo. Antes de ser abduzido pela nave comandada por Morpheus ele era um ser do underground sem nenhuma marca de injeção de drogas ou substâncias alteradoras de humor. Logo após isso vemos o lento e doloroso processo em transformá-lo em um ser humano funcional fora da realidade virtual mantida pelas máquinas. Ele possui vários orifícios em torno do corpo, nos membros e tórax, sendo o principal deles, o mais sensível, na nuca, em uma conexão direta com o cérebro.
A analogia é forte demais com os transexuais. Dispostos a ir em busca da verdade eles submetem seu corpo a todo tipo de manipulação e humilhação. O resultado é alguém que aprendeu sobre a realidade em um outro nível, mas que nunca mais poderá se tornar um ser humano completo. Sua existência é ser um mutilado vivendo no esgoto.
Claro que Matrix permite fazer analogias com várias filosofias diferentes, pois o conceito, desde A Caverna de Platão, é muito vasta. Peço apenas que note o quão a produção é dedicada a esmiuçar o processo de transformação de Neo. É um foco que havia passado despercebido por muita gente porque ninguém imaginou a reviravolta na vida das agora irmãs diretoras, nem sabe a desgraça que é viver vilipendiado em nossa realidade. É uma dor nunca antes mostrada em uma ficção científica com tanto afinco.
</description>
</item>

     
        <item>
  <title>Sobre Nosso Déficit de Atenção</title>
  <link>http://www.caloni.com.br/sobre-nosso-deficit-de-atencao/</link>
  <pubDate>2020-11-14</pubDate>
  
  <guid>http://www.caloni.com.br/sobre-nosso-deficit-de-atencao/</guid>
  <description>Nossa sociedade produtiva está doente, mas apenas constatar o fato não começa o tratamento. Nós sabemos os sintomas e a causa. A causa é a evolução tecnológica se aproveitando de nossas falhas biológicas por grandes corporações para vender anúncios. Os sintomas é uma geração inteira diminuindo sua capacidade de concentração e vivendo como autômatos que clicam em links.
Ironicamente existe uma análise 1 feita por Tristan Harris, ex-eticista do Google e filósofo, que relaciona a &amp;quot;indústria da atenção&amp;quot; com a de alimentos, que aumenta níveis de sal, açúcar e outros condimentos para manipular nossa tendência a esses sabores. A nova indústria de entretenimento online utiliza a mesma estratégia, exacerbando nosso mecanismo de recompensas orientado por injeção de dopamina para fazer-nos cada vez mais checar por notificações quando estamos entediados, em um sistema de feedback positivo cujo final é não termos mais paciência para a realidade em nossa volta, e não conseguirmos mais parar de navegar pela infinitas luzes piscantes nas telas de nossos celulares.
No livro Deep Work, de Cal Newport, o autor apresenta uma defesa de que é cada vez mais preocupante a escassez de pessoas no mercado com a habilidade de conseguir se concentrar por muito tempo em tarefas que exigem total atenção. Três trabalhos citados no livro, de William Powers 2, John Freemans 3 e Alex Soojung-Kin 4, concordam que ferramentas de networking estão monopolizando nossa atenção, ao mesmo tempo que degradando nossa capacidade de permanecer focados.
Apesar de sabermos desse efeito desde o nascimento da TV e dos vídeo-games, é agora que a causa científica da epidemia dos devaneios crônicos está chegando em um consenso. A resposta estaria ligada a uma camada gordurosa de tecido que envolve a conexão entre axônios no cérebro chamada mielina. Sua função é proteger e melhorar a comunicação entre as células cerebrais, e melhora aqui se traduz em trocas mais rápidas de informação dentro do cérebro (e com menos ruído).
Essa camada é construída naturalmente em torno das conexões mais usadas pela repetição de seu uso. As responsáveis por construí-las são outras células que mantêm o sistema neurológico. Elas detectam o uso repetido de neurônios e produzem camadas de mielina para proteger essas conexões.
A tradução leiga dessa descoberta científica já é de conhecimento comum há gerações: quando alguém se concentra em aprender algo os alicerces do conhecimento se tornam mais sólidos. Sabemos agora pela ciência que isso acontece porque quando a pessoa está efetuando uma única atividade sem distrações a tarefa de inocular as conexões cerebrais responsáveis por manter a informação não precisa ser compartilhada com outras fontes de atenção. É por isso que se alguém está aprendendo um novo idioma enquanto checa o Instagram essa pessoa absorve menos do que alguém 100% focado no novo conhecimento.
O importante a se lembrar desse processo no cérebro é que ele é permanente. A pessoa não consegue mais absorver melhor novo conhecimento sobre um assunto com o mesmo potencial se estivesse aprendendo pela primeira vez. Claro que com mais prática sabemos ser possível melhorar em qualquer área, mas a própria habilidade em aprender está sujeita a essa dinâmica de fortalecimento cerebral, e portanto abalada pelas constantes interrupções e multitasking da vida moderna.
Paradoxalmente, por outro lado, é conhecido que a melhor maneira de relembrar um conhecimento obtido anteriormente é interrompê-lo sem concluí-lo. O efeito Zeigarnik, nomeado por causa da cientista soviética que o descobriu, é o motivo pelo qual é muito mais simples continuar o trabalho do dia anterior se ele estiver com lacunas a ser preenchidas. Exemplos seriam um escritor que deixa um parágrafo pela metade ou um estudante que deixa um cálculo matemático a terminar. É importante lembrar, porém, que houve tentativas mais recentes de tentar reproduzir este efeito sem sucesso. Acredite com cautela.
Por fim, a tecnologia crescente pode estar desempenhando uma mudança mais significativa do que imaginamos na concepção do que é ser humano. Essa afirmação não está pautada em estudos, mas em observação humana. Daniel, o autor do texto Technology is Heroin 5, relaciona o uso passivo da evolução em comunicação e entretenimento com a evolução do uso de drogas como heroína e ópio na época que eram comprados na farmácia da esquina. Na época a sociedade diminuiu sua produtividade, a economia começou a sofrer e a função humana nas relações sociais e de trabalho estava colapsando como um todo (carece de fontes). E a tecnologia poderia ser a segunda onda a destruir essas mesmas relações, ou transformá-las de maneira radical.
O surgimento do gramofone, do rádio, da TV e dos video-games, segundo o autor, está tornando as relações dos indivíduos com sua realidade cada vez mais um ato passivo, e não mais ativo, como era quando os tempos eram mais difíceis ou manuais, e até visitar um amigo ou ouvir sua música favorita era um esforço e tanto. Claro que o texto parte de um ponto de vista mais bucólico e talvez possa ser descartado em seu todo, mas sua mensagem parece possui algo inerentemente verdadeiro nos tempos de hoje: observamos jovens e adultos cada vez mais passivos e alheios à sua realidade, cada um criando sua própria bolha para se proteger do mundo cruel que um dia existiu lá fora.
  How Technology Hijacks People’s Minds, Tristan Harris, 2016. Fiz anotações. &amp;#x21a9;&amp;#xfe0e;
 Hamlet&#39;s BlackBerry. William Powers. &amp;#x21a9;&amp;#xfe0e;
 The Tyranny of E-mail. John Freemans. &amp;#x21a9;&amp;#xfe0e;
 Pangs The Distraction Addiction. Alex Soojung-Kin. &amp;#x21a9;&amp;#xfe0e;
 Technology is Heroin, by Daniel. &amp;#x21a9;&amp;#xfe0e;
   </description>
</item>

     
        <item>
  <title>Palestras</title>
  <link>http://www.caloni.com.br/palestras/</link>
  <pubDate>2020-11-08</pubDate>
  
  <guid>http://www.caloni.com.br/palestras/</guid>
  <description>Segue a lista de palestras que ministrei ao longo dos anos que possuem alguns slides úteis (os com slides inúteis não estão disponíveis e devem estar na memória dos que assistiram ou em algum post perdido por aí). Have fun =)
 Antidebugging: Eu Não Quero que Você Mexa no Meu Código Depurando até o Fim do Mundo Engenharia Reversa para Principiantes Entendendo a Compilação Patch de Emergência Pôquer Online Resumo de Debug Remoto Stack Overflow Troubleshooting em Equipes Remotas com Debugging Tools  </description>
</item>

     
        <item>
  <title>Masters in Short</title>
  <link>http://www.caloni.com.br/masters-in-short/</link>
  <pubDate>2020-10-25</pubDate>
  
  <guid>http://www.caloni.com.br/masters-in-short/</guid>
  <description>A proposta da sessão Masters in Short da Mostra de São Paulo esse ano é apresentar alguns curtas de diretores consagrados. São cinco curtas ao total e seis diretores diferentes.
Nos é dito no início que a proposta tem relação com o período de quarentena esse ano, mas o único óbvio exemplo é o primeiro. &amp;quot;A Visita&amp;quot;, de Jia Zhangke, que apresenta dois cineastas se visitando para assistir a um filme sendo produzido. Todas as situações comuns vividas esse ano, como o medidor de febre à distância, o uso das máscaras e do álcool gel, e a proibição tácita de se dar as mãos, é revisitada. É um aceno de cabeça para o espectador que sabe bem do que o filme está falando. Talvez bem até demais para ser visto em um filme.
Os dois curtas seguintes são experimentais. &amp;quot;Os Caçadores de Coelhos&amp;quot; e &amp;quot;O Adivinhador&amp;quot;, de Guy Maddin, Evan Johnson e Galen Johnson, são absurdistas e caóticos. Enquanto narram a existência de adivinhos profissionais e o sonho de alguém que já morreu, usos diferentes de luzes e narrativas são tentadas para chamar nossa atenção. Ou pelo menos tentar, já que o resultado é nos afastar, nos pensamentos e para dentro de nossos próprios sonhos... dormindo.
Outro campeão em fazer passar sono é este &amp;quot;Uma Noite na Ópera&amp;quot;, de Sergei Loznitsa. Feito apenas com imagens de arquivos das décadas de 50 e 60 ele captura toda a pomposidade com que diferentes celebridades do show business e da política adentram o teatro de ópera em Paris, Palais Garnier. Cerca de 70% do filme é sobre a entrada da burguesia ao recinto e 30% vemos a performance de uma cantora. Que vale todo o preço, já que é uma performance de respeito, ainda que por alguns meros minutos.
Também vale uma espera a menos glamurosa &amp;quot;Escondida&amp;quot;, de Jafar Panahi, em que diretor e filha acompanham uma amiga até um vilarejo distante no Irã em que ela descobriu uma menina com uma voz maravilhosa. Proibida de cantar pela família, o clima deste curta é de documentário informal filmado com celulares Apple, o que combina bem com o estilo desse diretor. Eles filmam com dois celulares. Um deles se afasta durante a rápida performance da menina, escondida atrás de um pano. É nesse momento que aprendemos a função do movimento no cinema. Depois que a câmera para, não tem por que continuar a ouvindo.
Curioso como &amp;quot;a mágica&amp;quot; do cinema de repente some quando nada se mexe na tela. E a parada do movimento, em todos os sentidos... isso, sim, tem tudo a ver com a quarentena.
</description>
</item>

     
        <item>
  <title>Crunchyroll</title>
  <link>http://www.caloni.com.br/crunchyroll/</link>
  <pubDate>2020-10-04</pubDate>
  
  <guid>http://www.caloni.com.br/crunchyroll/</guid>
  <description>Comecei a compartilhar a assinatura do Crunchyroll com uma amiga e comecei a explorar a ideia fixa na minha cabeça (não-original 1) de que é possível analisar animes (ou qualquer obra audiovisual) pelos seus primeiros minutos ou episódios. Então estou fazendo isso pulando animes aleatoriamente enquanto vejo qual deles pode ser interessante.
Bom, quase aleatoriamente. Obras muito populares não me interessam, assim como temas manjados (ao menos por enquanto), como animes de lutas. Por enquanto estou focando no que tem me atraído o interesse: a visão dos japoneses sobre relacionamentos. E o que mais abunda em animes são os relacionamentos na fase do colégio.
Sendo assim, segue a lista desse primeiro fim-de-semana. Os textos estão horríveis e são muito pequenos, mas foi praticamente um binge-watching. Juntando com minha lista de uma dezenas de obras que ainda não havia escrito, a consequência da minha falta de disciplina, caro leitor, é &amp;quot;o que tem pra hoje&amp;quot; style.
 Keep Your Hands Off Eizouken! Love is Like a Cocktail I Can&#39;t Understand What My Husband Is Saying Blend-S Tsudedure Children Love Tyrant Pop Team Epic My First Girlfriend is a Gal Tonari no Seki-kun: The Master of Killing Time    tudo começou com meu amigo sugerindo assistir Steins;Gate e após isso me recomendou o vídeo How to Recognize a Great Anime (in just one episode). &amp;#x21a9;&amp;#xfe0e;
   </description>
</item>

     
        <item>
  <title>História do Windows</title>
  <link>http://www.caloni.com.br/historia-do-windows/</link>
  <pubDate>2020-09-16</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows/</guid>
  <description>Escrevi esta lista de artigos sobre a evolução do sistema operacional Windows há muitos anos, mas eles nunca estiveram juntos em um post que é uma lista. Bom, segue:
 Parte 1 Parte 2 Parte 3 Parte 3.5 Parte 4 Parte 5 Parte 5.1  </description>
</item>

     
        <item>
  <title>Bispo e Cavalo</title>
  <link>http://www.caloni.com.br/bispo-e-cavalo/</link>
  <pubDate>2020-09-05</pubDate>
  
  <guid>http://www.caloni.com.br/bispo-e-cavalo/</guid>
  <description>Já havia estudado este final há muito tempo e nem lembrava mais. Ter empatada uma partida porque não consegui dar mate forçado com bispo e cavalo é o que me fez rever o estudo. Assisti alguns vídeos e pratiquei com alguns estudos no Lichess. Por fim, me pus a jogar com o computador até entender a dinâmica de cercar o rei e realizar o movimento de W com o cavalo. Eu sei que ainda terão partidas que me sentirei acuado por conta do tempo, mas é bom agora voltar a ter o mínimo de arcabouço lógico por trás desse fascinante e difícil final. Tão difícil que até GMs não conseguem aplicar às vezes.
</description>
</item>

     
        <item>
  <title>Jejum de Dopamina</title>
  <link>http://www.caloni.com.br/jejum-de-dopamina/</link>
  <pubDate>2020-08-29</pubDate>
  
  <guid>http://www.caloni.com.br/jejum-de-dopamina/</guid>
  <description>Na verdade é um jejum de super estímulos, que tem por objetivo apagar o incêndio causado pelos neuroreceptores de dopamina de hábitos compulsivos em busca de prazer fácil para uma vez estabilizado em níveis saudáveis observarmos os gatilhos que nos faz voltar para esses hábitos, observando nossos impulsos para voltar a essas atividades, geralmente associados ao nosso estado emocional interno. Apenas dessa forma, seguindo o modelo de terapia cognitiva, para que o equilíbrio do sistema dopamínico se mantenha, e possamos apreciar como se deve atividades vistas hoje como chatas, como ler, escrever, meditar, passear ao ar livre. Ouvir.
</description>
</item>

     
        <item>
  <title>CPU Fritando com Intel Turbo Boost</title>
  <link>http://www.caloni.com.br/cpu-fritando/</link>
  <pubDate>2020-08-24</pubDate>
  
  <guid>http://www.caloni.com.br/cpu-fritando/</guid>
  <description>É a segunda vez que isso acontece e esqueci quando foi a primeira. O cooler do notebook começa a assoprar que nem louco e em poucos minutos o computador desliga. O processo se repete, sempre que faço alguma atividade que exige mais processamento. Baixo o HW Monitor da CPUID e verifico que a CPU está alcançando limites acima de 90 graus celsius, e para segurança ela se auto-desliga. A solução? Ir em opções de energia do SO e trocar o limite máximo que a CPU pode ser usada de 100% para 99%. Isso mesmo, apenas abaixe um por cento. Com isso você está desabilitando o Intel Turbo Boost, que aparentemente não conhece limites físicos e sai fritando a CPU quando é necessário. Mas isso desgasta os chips e destrói a vida útil do sistema. E minha máquina já é rápida o suficiente para conseguir viver sem mais um Boost na minha vida.
</description>
</item>

     
        <item>
  <title>Community</title>
  <link>http://www.caloni.com.br/community/</link>
  <pubDate>2020-08-19</pubDate>
  
  <guid>http://www.caloni.com.br/community/</guid>
  <description>Não sei se gosto de Community tanto quanto a primeira vez, uns dez anos atrás. Um de nós três deve ter envelhecido, e não de uma maneira boa: eu, a série ou a sociedade.
As brincadeiras da série em torno do politicamente correto giram confortavelmente no limite do aceitável. E, no pior dos casos, sempre temos Pierce, o velho incorrigível, para fazer os comentários racistas e homofóbicos. Porém, se quando lançada, a série usava esses termos quase como jargões fora do mainstream, gerando um certo ar de estranheza para quem mora fora dos EUA, hoje nosso comportamento, ou ao menos o da sociedade americana, é pautado nesses conceitos. O Grande Irmão está firme e forte por lá. Até nas faculdades há folhetos que correm entre as mãos sobre conceitos como &amp;quot;microagressōes&amp;quot;, e um professor recentemente foi demitido por fazer uma brincadeira sobre esse material. A liberdade de expressão tão elogiada nos EUA é cerceada inconscientemente nessa geração, como se julgamentos verbais fossem um ataque à propriedade privada.
Community não pertence a nada disso. É uma comédia leve e que se diz inteligente por ter um roteiro tão dinâmico e tão metalinguagem. Quando você usa metalinguagem você só pode ser uma pessoa inteligente, certo? A primeira temporada tem bons e maus episódios como qualquer série, mas os bons são muito bons e os maus são apenas experimentação. Experimentar com o humor é delicado, mais ainda que dramas, e eis a força de uma série que se reinventa a cada minuto. Comparada a fórmulas de sitcoms como Friends chega a ser ofensiva, e mesmo séries que confiam no carisma de sua proposta, como High School Musical, apenas confiam nessa premissa inicial e todo o resto segue no piloto automático.
Community não. Seus personagens são bons para os diálogos que possuem, mas são particularmente ótimos por causa do seu elenco e das consequência da atuação empenhada de cada um de seus membros. Eles não estão trabalhando como atores que precisam pagar boletos. Este não é um clima leve como The Big Bang Theory. Eles estão construindo comédia aqui. É pesado, é dramático. Cada rápida expressão inesperada, que oscila entre os extremos Abed e Annie, é uma gota de suor que cai de um projeto ambicioso que explora até quando podemos fazer humor sem se preocupar em ofender alguém, mas em entender por que existe a ofensa quando o mundo pode ser um lugar tão bom a ponto de existir comédias como essa.
A série na primeira temporada se revela numa crescente ingênua e ambiciosa. A direção é fresca e cheia de novidades que acabam esgotando suas ideias e partindo para o verdadeiro herói da história: Abed e seu um milhão de olhos, ou lentes, que observa as décadas passadas na TV e no cinema e nos apresenta em versões de vinte minutos, com qualidade invejável, cores chamativas, sensuais e divertidas. Community nunca irá envelhecer, pois é incapaz de se levar a sério. E por isso mesmo é a série de humor mais íntegra, completa e versátil de todas.
Porém, olhando para as últimas temporadas, quando seu elenco vai se despedindo aos poucos, é possível perceber por que aquelas sete pessoas conseguiam fazer comédia tão bem, e por que simplesmente trocar personagens não funciona com todos os roteiros, diferente do elenco original. Ao mesmo tempo revela o cansaço dos nossos tempos, o peso do politicamente correto, incrustrado na sociedade desde o início do século. A última temporada de Community é uma alfinetada metalinguística profunda demais para ser percebida, mas está lá, para quem quiser analisar.
Pegue o episódio Analysis of Cork-Based Networking como exemplo, na quinta temporada. A espiral de corrupção encontra o protecionismo norte-americano, onde na Califórnia se chega ao cúmulo de haver um alvará para arrumador de flores. A persona de Jonathan Banks se encaixa perfeitamente no papel que ele e Alison Brie protagonizam de lutar para tirar a lama das engrenagens do sistema, mas falta aquela faísca que apenas o timing de Chevy Chase, mesmo sem muitos diálogos, conseguia nos brindar. A mesma faísca falta na participação de Abed, de volta com seu par romântico interpretado por uma irreconhecível Brie Larson (Capitã Marvel). O roteiro é esperto, mas nos faz lembrar o que um casting e direção inspirados não fazem juntos. Este é o último episódio antes da paralisação para as olimpíadas de inverno.
Já em toda sexta e última temporada, qualquer episódio servindo como exemplo, o péssimo casting de Paget Brewster e Keith David estragam qualquer possibilidade da química que antes era inerente na série funcionar. Enquanto Brewster luta para conseguir um pingo de simpatia em sua irrelevância, a função de Keith David é nos fazer sentir falta do que é um ator de comédia em seu ápice como Chevy Chase, um ator para quem se pode entregar qualquer fala para torná-la hilária. Não pela fala em si, mas por tudo o que a persona de Chase investe em seu personagem.
Note como o tema do racismo, tão frequente no início, sequer é colocado em pauta agora. Vira uma piada leve de vez em quando. Não porque as pessoas não falem mais sobre isso lá fora, mas justamente porque essa discussão virou tão mainstream que existe uma cartilha das maneiras corretas de se abordar o tema. Ou seja, se tornou um assunto completamente inútil para se trabalhar uma comédia, que brilha justamente em trazer à tona situações absurdas que ocorrem quando tentamos nos proteger de qualquer coisa do mundo adulto.
Community era uma aula de como crescer em comunidade mesmo sem ter a mínima noção de como fazer isso. Independente dos fracassos em série na vida desses personagens, o mais importante era trazer a noção de que todo mundo consegue falar e agir sobre algo difícil. Community era um plano de ação. Agora foi podado pela polícia do pensamento. Um triste fim que serve como metalinguagem para o que se vive em nossos tempos.
</description>
</item>

     
        <item>
  <title>Pauline Kael</title>
  <link>http://www.caloni.com.br/pauline-kael/</link>
  <pubDate>2020-07-12</pubDate>
  
  <guid>http://www.caloni.com.br/pauline-kael/</guid>
  <description>&amp;quot;Big money and its way of life is exciting; the vulgarity of the powerful is ugly, but not boring. This, you begin to feel, is how people behave when they&#39;re strong enough to act out their fantasies of wealth. In this environment, if you&#39;re not making it in a big way, you&#39;re worse than nothing -- you&#39;re a failure.&amp;quot; (I Lost it at the Movies)
&amp;quot;Never give them the excuse to stay home if there&#39;s anything there on the screen.&amp;quot; (Conversations with Pauline Kael)
&amp;quot;There are so few movies that really offer you anything that&#39;s fresh, that&#39;s different, that&#39;s exciting.&amp;quot; (Conversations with Pauline Kael)
&amp;quot;When Shoeshine opened in 1947, I went to see it alone after one of those terrible lovers&#39; quarrels that leave one in a state of incomprehensible despair. I came out of the theater, tears streaming, and overheard the petulant voice of a college girl complaining to her boyfriend, &amp;quot;Well, I don&#39;t see what was so special about that movie.&amp;quot; I walked up the street, crying blindly, no longer certain whether my tears were for the tragedy on the screen, the hopelessness I felt for myself, or the alienation I felt from those who could not experience the radiance of Shoeshine. For if people cannot feel Shoeshine what can they feel?&amp;quot; (Conversations with Pauline Kael)
&amp;quot;Movies are so rarely great art that if we cannot appreciate great trash we have very little reason to be interested in them.&amp;quot;
&amp;quot;In the arts, the critic is the only independent source of information. The rest is advertising.&amp;quot;
</description>
</item>

     
        <item>
  <title>Oscar</title>
  <link>http://www.caloni.com.br/oscar/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/oscar/</guid>
  <description>Quando o chefão do Oscar faz um discurso dizendo que agora oficialmente serão dez os indicados a melhor filme para promover representatividade, diversidade e todos os ades de quem é ista, ele não está sendo um cara legal. Ele está apenas revelando o quanto o Oscar e/ou a sociedade como um todo funciona e o que irão fazer a respeito: nada. Porque nada é o que este povo que se diz politicamente consciente está acostumado a fazer para mostrar que sabe de algo que você, alienado, não sabe, e farão algo a respeito. Bom, resumo da história como sempre: não, não sabem e não, não farão. Não sabem matemática e não farão uma revolução. Provarão ignorância na arte dos números e hipocrisia e conveniência na arte política.
Vamos abrir o discurso para a lógica: eu tenho mil filmes disputando a lista entre os indicados. Apenas cinco poderão ser escolhidos. Os cinco imediatamente abaixo destes cinco ficarão de fora. Pelas novas regras esses cinco também entrariam pelo tapete vermelho, e com isso, de acordo com o resto da divulgação, aumentaria a representatividade para o prêmio principal da noite. Essa palavra, diversidade, vale lembrar, atualmente quer dizer indicar não apenas homens héteros brancos, mas também mulheres e homens de todas as cores, sexualidade e planeta.
Bom, essa conta não vai fechar. Não existem apenas dez tipos combinados de gênero, cor e sexualidade (e planeta) para que todos estejam de fato representados na premiação. Se já não é suficiente entre os cinco mais votados, qual a mágica estatística que reza que os dez primeiros o serão suficientes? Vou repetir com outras palavras e deixar a pergunta no ar: se os cinco indicados de hoje são de homens héteros brancos por que os cinco imediatamente abaixo na colocação serão com gêneros, cores e sexualidade diversos?
Se você é de humanas não precisa responder, mas continue levantando suas bandeiras para outro canto.
</description>
</item>

     
        <item>
  <title>Teoria, Prática e Código</title>
  <link>http://www.caloni.com.br/teoria-pratica-codigo/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/teoria-pratica-codigo/</guid>
  <description>Quando se está aprendendo programação é muito bom praticar escrevendo código. Muitos querem aprender a programar e não começam programando, e se você já começou colocando a mão na massa, parabéns por isso.
Agora, para avançar nos estudos, além da prática, a teoria tem que avançar. E teoria vai além dos estudos de livros e vídeo-aulas. É possível aprender muito mais rápido lendo o código dos outros, disponível aos milhões pela internet. A vinda do GitHub veio para democratizar esse acesso e descomplicar os caminhos de colaboração. Agora você pode encontrar um bug no código de uma pessoa do outro lado do mundo e mandar a correção para todos envolvidos no projeto validarem. O quão sensacional é isso?
Ler código de outra pessoa pode ser desafiador no começo porque é necessário seguir um raciocínio diferente, que não saiu de sua cabeça. Não é a maneira que você resolveria um problema, mas, se o código estiver correto, é uma maneira igualmente válida. E possivelmente melhor. Por estar fora da zona de conforto se torna uma oportunidade para aprender coisas que não estão exatamente nem na teoria nem na prática. É a experiência de outra pessoa traduzida em código.
Note que não digo essas coisas apenas do meu código, que não é perfeito nem exemplar, mas de qualquer código que resolva um problema que você está estudando resolver. Ler código é como ter o texto de um livro, mas compactado. Tem muitas ideias legais para copiar e usar, uma vez que você aprendeu o que o código faz.
Mas para isso é necessário quase o mesmo esforço usado para programar. Parece fácil, mas está longe disso. A boa notícia é que vai economizar muito tempo se persistir em entender.
</description>
</item>

     
        <item>
  <title>A Padeira do Bairro</title>
  <link>http://www.caloni.com.br/a-padeira-do-bairro/</link>
  <pubDate>2020-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/a-padeira-do-bairro/</guid>
  <description>Este curta de Éric Rohmer veio de brinde no DVD de A Carreira de Suzane, mas é até bem longo, com 20 minutos de duração. É uma sessão dupla, praticamente, pois com a atração principal tendo menos de uma hora é natural assistir esse em seguida. E ele trata também da análise de mulheres a partir do pensamento de um homem obcecado por uma dama alta e que se veste bem que sempre encontra pelos seus caminhos no bairro. Após o primeiro contato ela some por três semanas, o que faz com que ele desenvolva o péssimo hábito de comer todo dia um doce da padaria da esquina. Se a moça demorasse mais ele muito provavelmente teria engordado muito e ela nem o reconheceria.
Este é um filme que se constrói na tensão da espera. Possui assim como a atração principal um narrador protagonista. E há algumas brincadeiras cinematográficas de Rohmer o suficiente para nos entreter. Como o corte abrupto para acelerar os passos de um homem na rua. Um curta sobre relacionamentos nunca pode ser ruim. Esse tem o jeito de um causo contado por um amigo. Ou seja, delicioso de acompanhar. Como um doce da padaria do bairro quando não temos nada mais o que fazer.
</description>
</item>

     
        <item>
  <title>Fechado Para Reformas</title>
  <link>http://www.caloni.com.br/fechado-para-reformas/</link>
  <pubDate>2020-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/fechado-para-reformas/</guid>
  <description>Quase três mil posts durante quinze anos nessa vida de blogue e percebo que chegou a hora de atingir a maioridade. Escrever um rascunho e publicá-lo na internet não me torna melhor escritor que qualquer YouTuber de primeira viagem que não edita seu conteúdo ou tuítes que simplificam o pensamento humano de tal forma que ele parece totalmente válido ou inválido. Perde-se as nuances. A voz do autor fica solta demais para ser relevante nesse mar de informação que nos afogamos todos os dias (e noites).
Para me tornar um escritor profissional eu devo revisar. Revisar é o que irá extrair valor dos meus textos. Brutos como estão nem eu consigo mais enxergar a virtude de escrever. O conteúdo não é nada se não for seguido pela arte da composição. E essa arte só se conquista compondo, lapidando, com o esforço de conseguir acabar uma obra com esmero e excelência, e ainda que não se consiga por completo esse é o caminho a ser seguido.
Portanto, coloquei todos meus textos antigos para revisão, e os novos nascem no repositório como rascunhos, o que quer dizer que o texto não aparecerá em sua primeira versão no blog. O bebê não está pronto ainda. É durante a gestação que ele irá ganhar corpo e desenvolver sua mente. A edição, além de correções gramaticais, reorganiza o pensamento contido já no rascunho, mas não totalmente consolidado para ser consumido por outro ser humano que não seja o autor.
Escrever é coisa séria. Depois de tanto praticar, acredito que seja a hora de constatar este fato, tirar a poeira das milhares de páginas que já compus e tentar arrumar tempo para me atualizar na arte de criar telepatia para leitores do futuro.
</description>
</item>

     
        <item>
  <title>Bode Caloni Cast Live</title>
  <link>http://www.caloni.com.br/bode-caloni-cast-live/</link>
  <pubDate>2020-05-14</pubDate>
  
  <guid>http://www.caloni.com.br/bode-caloni-cast-live/</guid>
  <description>Alguns caras em uma noite de quinta-feira falando sobre aleatoriedades que giram em torno de cinema, social justice (justiça social), anime e o melhor filme de todos: The Room. O primeiro bodecast live do grupo C/C&#43;&#43; Brasil foi sucesso de participantes e fracasso de público (só veio o Matheus e o Elias). Descobrimos que o Gianni, fundador do grupo do Telegram, tem o péssimo costume de largar os filmes pela metade. Também descobrimos que Cosmos é o projeto secreto de @drmadera para criar vida no fundo de seu home-office. E de quebra houve uma invasão de neo-São-Joseenses, um povo muito simpático que citou alguns filmes malucos para comentarmos.
Infelizmente a live terminou mais cedo porque o Gianni não pagou a conta de internet o sinal caiu e nos derrubou a todos ao mesmo tempo. Se quiser que façamos mais como esse dê um curtir no vídeo e comente com sugestões, críticas, etc. Comente por lá. Aqui só eu tenho voz.
</description>
</item>

     
        <item>
  <title>O Bug Mais Bizarro que já Resolvi</title>
  <link>http://www.caloni.com.br/o-bug-mais-bizarro-que-ja-resolvi/</link>
  <pubDate>2020-05-10</pubDate>
  
  <guid>http://www.caloni.com.br/o-bug-mais-bizarro-que-ja-resolvi/</guid>
  <description>Máquina IBM velha e empoeirada. Criptografia blowfish. Assembly 16 bits. Programa residente. E nenhum depurador funcionando. Tudo o que eu tinha se resumia em dois itens de inventário: o conhecimento, adquirido aos poucos do sistema, e minha imaginação. Era uma amena semana de abril em 2008 isolado em uma sala. Tudo que havia em volta eram papéis com anotações feitas. Observava uma nova pista todo dia, embora sem ter muita certeza. Àquela altura qualquer coisa serviria.
Do outro lado da sala, uma estagiária recém-chegada na empresa observava de longe, talvez com uma certa curiosidade, ou medo, daquele rapaz ligar e desligar um desktop empoeirado enquanto a cada aperto do botão de ligar ele olhava fixamente para a tela por uma ou às vezes duas horas seguidas. Ficava a manhã inteira observando um único boot em câmera lenta. A câmera mais lenta possível, dessas que capturam o bater de asas de um beija-flor. Cada movimentação de um registrador demorava vários minutos de reflexão.
Toda essa odisseia começou com o cara do suporte, um sujeito bonachão que atraía os bugs mais bizarros para nossos sistemas só de olhar para eles. Não eram os piores bugs, mas com certeza os mais bizarros. E quando digo bizarro estou falando de bugs que não dá para imaginar acontecendo na vida real. Quando esse sujeito aparecia junto surgiam bugs na própria Matrix; um gato preto passa duas vezes seguidas pela porta, mas não caminhando: flutuando próximo do teto.
O sujeito chegou na sala de desenvolvimento falando dessa máquina que tinha acabado de chegar do cliente. Haviam instalado a criptografia de disco. Os dados não estavam perdidos, pois o Windows ainda mostrava o seu logo esvoaçante segundos depois de ligarmos o velho desktop de guerra, que já havia vivido pelo menos duas décadas a vida de escritório e não seria agora que deixaria seus dados sumirem sem mais nem menos. Nada disso. O problema era que se você desligasse e ligasse de novo, nada mais aparecia. Tela preta. Sem logo esvoaçante ou cursor piscando. O disco rígido não se mexia. Era um mistério completo.
Mas o bizarro mesmo não era isso, mas o que vinha depois. Você desligava a pobre máquina, novamente. Apertava o botão de ligar. E como uma mulher nos seus trinta ainda não vividos, ela subia com tudo no lugar: logo do Windows, barulhinho irritante da sua tela de boas vindas e as agulhas do disco magnético piscando freneticamente. Tudo certo mais uma vez na terra do Tio Bill. Era possível logar na máquina e usá-la o resto do dia com todos os dados criptografados íntegros.
Agora, sim, o bug está completamente descrito: nos boots ímpares a máquina não bootava. Nos boots pares não havia nada de errado (ou vice-versa). Antes que você comece a confabular o que poderia ser, um cacoete que todos nós, programadores, costumamos ter, já aviso que nesse bug não há relação com energia ou memória RAM. Você podia desligar a máquina e tirar da tomada. Ir tomar um café. Uma hora depois coloca a tomada de novo e a liga. A bendita não funciona. Tire a tomada novamente. Mais um café. Desenergizada novamente, botão de ligar. E tudo estava certinho.
A criptografia desse sistema operava em dois níveis, necessários naquela época. O PC é uma monstruosidade construída em camadas legadas, uma em cima da outra. Abaixo de tudo existe a BIOS que controla todo mundo. Até um certo ponto, pelo menos. O que importa é que nesse primeiro momento do boot não existe sistema operacional. Não existe a querida proteção de memória que os SOs implementam (com a ajuda da arquitetura) para isolar os programas, onde qualquer violação de memória é tratada graciosamente com uma mensagem de erro. Não, mano. Aqui é o modo real. Fica esperto, que se um ponteiro ficar doido você vai levar tiro pra tudo quanto é lado. Ou como diria Morpheus: &amp;quot;Welcome... to the desert... of the real.&amp;quot;
Nesse ambiente pesadão e promíscuo, onde as memórias se encostam e trocam de valores sem qualquer pudor, programas residentes se mantém em memória através do famigerado hook de interrupções. Interrupções é como chamamos as funções originais escritas e armazenadas na BIOS. Ponteiros de funções com código carregado da sua memória. Fazer um hook de uma interrupção é se colocar na frente de uma função dessas, trocando o ponteiro de função pelo endereço de sua função na memória. Então, por exemplo, se um programa roda e consegue sobrescrever o endereço da interrupção responsável por escrever na tela, esse programa pode ligar e desligar pixels que o programa original nem imagina. E em vez do logo esvoaçante e inofensivo do Windows, você poderia escrever o que seria o antepassado do gemidão do zap, versão ASCII Art.
No caso de um programa de criptografia de disco a interrupção mais importantes é... acertou: a de disco. Uma interrupção de disco é responsável por ler e escrever dados de e para o disco. No primeiro momento do boot é vital para o sistema operacional que ele consiga ler setores do disco onde ele próprio está armazenado. Ele deve conseguir ler seus dados do disco, mesmo criptografados, e esses dados precisam ser descriptografados antes que exista um driver de criptografia instalado no Sistema Operacional no ar. É o dilema do ovo e da galinha. É aí que entra o que chamamos de programa residente, o que contém a função de criptografia e cujo endereço é colocado no lugar da interrupção da BIOS para comandos de disco.
É claro que contando isso para vocês a posteriori parece mais fácil, mas meu primeiro instinto foi espetar o WinDbg, o depurador de sistema do Windows, nessa máquina. Porém, rapidamente descobri que não existia sistema operacional para ser depurado. O Windows nem conseguiu subir ainda, quanto mais deixar as pessoas depurarem ele. Então a solução foi apelar para o SoftIce 16 bits, um depurador em modo real, que funciona até que bem sozinho. Porém, o próprio depurador já é um programa residente, e não funciona tão bem quando existem outros programas residentes querendo espaço no disco. Como o programa de criptografia instalava um hook na int13 (essa é a interrupção de disco), as sessões de depuração nessa fase ficavam estranhas rapidamente. O depurador de modo real travava nas primeiras passadas de código. Não havia memória o suficiente ou as chamadas das ints entravam em conflito. De qualquer forma, quando memória entra em conflito no modo real, o barato fica loko, e o jeito é começar tudo de novo em um novo boot (par ou ímpar, mas sempre o segundo).
Então o jeito foi usar o debug.com. Este era um programa que vinha no pacote MS-DOS e em alguns Windows mais velhos que consistia em um depurador de modo real. Era possível carregar um segmento de um arquivo ou da memória real para este depurador e ele seguia passo a passo para você a execução do programa. Em assembly de modo real, claro. Esse foi o jeito que eu consegui ir entendendo o fluxo de execução, pois eram muitos valores e variáveis. Eventualmente até o debug.com também travava, mas isso não importava tanto, pois era possível ir mapeando seu funcionamento aos poucos, anotando as descobertas uma a uma em um pedaço de papel. Uma técnica que pode ser interessante se você se encontrar em tal situação é escrever as ints 3 (interrupção de breakpoint) diretamente na memória do programa e deixar ela ser ativada para depois que capotar sobrescrever com o código antigo. Eventualmente isso também travava. Daí nesse momento o jeito era fingir que estava tudo bem e continuar a execução de um outro ponto, anotando em um pedaço de papel o estado dos registradores e da memória até o momento, para depois ir ligando os pontos.
Depois de alguns dias nesse modus operandi o mundo externo importava cada vez menos. Eu só enxergava registradores sendo movidos, valores sendo empilhados e desempilhados. Na hora do café, esse era o meu tema favorito, para desespero dos meus colegas. Comecei a vislumbrar a possibilidade de existir um bug no código do algoritmo de criptografia. O algoritmo usado se chama Blowfish, um cifrador simétrico em bloco. Seu funcionamento é basicamente pegar um bloco de dados a serem criptografados, aplicar uma chave, e cuspir o mesmo tamanho do bloco de volta. Ele se chama simétrico porque aplicando a mesma chave a um bloco criptografado obtém-se o bloco original.
Não lembro como tive esse insight, mas essa alternância típica dos algoritmos simétricos fazia tocar alguns sinos na minha cabeça de que o bug bizarro dos boots ímpares e pares poderia estar relacionado de alguma forma. Só não sabia ainda como.
Pois bem: bora aprender como funciona esse algoritmo, passo a passo, pois o código usado no sistema estava obviamente escrito em assembly. Não é um código difícil em C, mas um tanto extenso em Assembly. De qualquer forma, tudo é possível se você está trancado em uma sala sem ninguém para importunar. Tudo que você precisa é de tempo e paciência. E café. Não se esqueça do café.
A semana passou rápido. Tudo que me lembro é que de fato foi uma semana de 40 ou mais horas, embora para mim o tempo tivesse parado. A mágica de estar compenetrado em um problema e fazer parte do problema, e eventualmente da solução, me fez descobrir a origem do bug. E a semana inteira se condensou em alguns poucos momentos de prazer em ter capturado esse desgraçado. Irei descrevê-lo agora.
Tudo começa com o IV: o Initialization Vector. Ele é um array de bytes usado em algoritmos criptográficos para diminuir a previsibilidade da série de bytes resultantes do algoritmo. Sem o IV pode-se usar força bruta com várias chaves até encontrar a certa. Com o IV, que é alterado de maneira previsível, mas difícil de rastrear, a mesma chave gera séries de bytes completamente diferentes, impedindo esse tipo de ataque.
O que estava acontecendo nesse caso para o boot estar intermitente era que, como comentado no commit que gloriosamente assinei, as escritas em disco durante o boot gravavam a série de bytes com um IV invertido. Portanto, na hora de ler bytes do disco ele entregaria os dados errados, obviamente, e a máquina não bootaria. Porém, como o algoritmo blowfish é simétrico, e pelo boot conter sempre os mesmos dados no disco, uma segunda escrita feita em um segundo boot inverteria o IV já invertido, gravando os dados originalmente invertidos da maneira correta, e a vida nessa versão de boot seguia feliz e contente, com logo esvoaçante até a música de boas vindas do Windows. Bootando pela terceira vez era repetido o problema do boot pela primeira vez, e assim por diante. Essa era a mágica do boot bizarro desta máquina, a única máquina que descobrimos que escrevia nos setores do disco durante o boot. A maioria apenas lia setores onde estava o sistema operacional para carregá-lo.
Descrevendo a descoberta desse bug hoje, doze anos após o ocorrido, ainda não entendo como consegui descobri-lo. Porém, ele exigiu tanta concentração que me lembro com um prazer indescritível de ter sido capaz de fazê-lo. Todo o tempo despendido se tornou uma marca de felicidade em minha memória, gravada em meu HD temporário desta vida. Lembrarei desses momentos com carinho, e como ela está criptografada também, entenderei que em alguns momentos ela irá soar amarga, mas em vários outros irei ter certeza de ter sido um feito e tanto para um ser humano entender uma máquina em seus detalhes mais obscuros. Esta é a verdadeira felicidade da profissão.
</description>
</item>

     
        <item>
  <title>A Pista (La Jetée)</title>
  <link>http://www.caloni.com.br/la-jetee/</link>
  <pubDate>2020-04-26</pubDate>
  
  <guid>http://www.caloni.com.br/la-jetee/</guid>
  <description>Este curta de Chris Marker ficou conhecido como um dos melhores filmes já feitos pela lista de críticos consecutivas vezes. E não é à toa. Sua história é uma poesia do começo ao fim, uma ode à fragilidade da existência humana e aos seus sentimentos e desejos. É uma narrativa pautada em fotos desastrosa no sentido humano, e igualmente aterradora. Nos faz pensar sobre as próprias escolhas da vida, sobre o passado e o futuro, e como o tempo, o nosso tempo, se dissolve a olho nu.
</description>
</item>

     
        <item>
  <title>Ilha das Flores</title>
  <link>http://www.caloni.com.br/ilha-das-flores/</link>
  <pubDate>2020-04-15</pubDate>
  
  <guid>http://www.caloni.com.br/ilha-das-flores/</guid>
  <description>Esse curta passava na escola. Muitos de vocês devem lembrar. Eu me lembro. O que eu mais me lembro era o uso cômico das palavras. A cadência em definir o que é um ser humano, um porco, um tomate, e repetir essas definições, cria humor, uma quase conexão com o espectador, e ao final se torna intenso, choca e nos faz, ou deveria fazer, pensar na pobreza, miséria, etc. É um curta sociológico, do pessoal de humanas, e pode impactar crianças e pessoas de humanas. Mas por trás da emoção há Jorge Furtado e seu jogo de palavras em seu primeiro curta documental. É um roteiro esperto, dinâmico e didático. E enviesado. Aquelas questões que pairam no ar quando abaixo desse ar repousa um cérebro condicionado de humanas. Ainda assim, uma ótima reflexão. Reflete até hoje em nossos pensamentos. Quase parece que tem algo a dizer.
</description>
</item>

     
        <item>
  <title>Barbosa</title>
  <link>http://www.caloni.com.br/barbosa/</link>
  <pubDate>2020-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/barbosa/</guid>
  <description>Barbosa foi o goleiro que deixou passar o segundo gol do Uruguai na Copa do Mundo no Brasil em 1950, arrebatando a taça de nossas mãos nos últimos minutos do campeonato. Certos da vitória, os duzentos mil espectadores e todo o Brasil por tabela saíram do estádio boquiabertos. A magia deste curta de Jorge Furtado e Ana Luiza Azevedo é explorar gêneros e possibilidades em uma história auto-contida que usa trucagens para disfarçar seu baixo orçamento, como uma profundidade de campo reduzidíssima. A história se passa em um estádio, e é difícil conseguir dezenas de milhares de figurantes para esta tarefa. De qualquer forma, o resultado é ainda melhor, pois mescla com filmagens da época, e realiza na montagem uma brincadeira que nos deixa imersos naquele pesadelo dos 2x1.
</description>
</item>

     
        <item>
  <title>O Dia em que Dorival Encarou a Guarda</title>
  <link>http://www.caloni.com.br/o-dia-em-que-dorival-encarou-a-guarda/</link>
  <pubDate>2020-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/o-dia-em-que-dorival-encarou-a-guarda/</guid>
  <description>Filme conceitual que brinca com as voltas que a vida dá. É o segundo curta-metragem do diretor Jorge Furtado junto de José Pedro Goulart e nele já podemos ver algumas ideias de recursividade, de como o homem se olha no espelho e vê ele mesmo. Nada muda nesta vida, e as brincadeiras de metalinguagem que Furtado escreve com Giba Assis Brasil e Ana Luiza Azevedo contém a semente dos seus longas, assim como seu próximo curta, que fala sobre a inevitabilidade do nosso passado por sermos parte de tudo isso.
</description>
</item>

     
        <item>
  <title>Temporal</title>
  <link>http://www.caloni.com.br/temporal/</link>
  <pubDate>2020-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/temporal/</guid>
  <description>Este curta capenga foi o primeiro assinado por Jorge Furtado, diretor sulista de O Homem Que Copiava. Ele mistura toda a miscelânea de pensamentos pseudo-liberais-progressitas da juventude que faz faculdade de artes. Essa tentativa de ridicularizar a sociedade brasileira tradicional cristã pode dar bons frutos, mas Furtado e Goulart estão mais interessados em tentar ridicularizar ambos os lados. Uma festa a fantasia nos faz pensar quem está vestindo fantasia de fato: uma congregação cristã ou um bando de jovens desmiolados. E no âmago desse simples curta, os efeitos visuais são de péssima qualidade. Digno de um trabalho de conclusão de curso e para se divertir com os amigos, passando para eles e para impressionar as menininhas.
</description>
</item>

     
        <item>
  <title>Macarrão a Carbonara</title>
  <link>http://www.caloni.com.br/macarrao-a-carbonara/</link>
  <pubDate>2020-04-05</pubDate>
  
  <guid>http://www.caloni.com.br/macarrao-a-carbonara/</guid>
  <description>Essa receita foi inventada por um solteiro na Itália, e é muito útil para solteiros no mundo todo. Se for em um restaurante italiano pela primeira vez, siga o conselho do meu amigo, que sempre pede uma Carbonara. Com bacon, queijo, ovos e macarrão na receita, para o restaurante errar essa receita ele terá que ser muito ruim.
Para cada 100g de macarrão, 50g de bacon, 30g de queijo parmesão, picorino ou equivalente, e duas gemas. Pimenta à gosto.
Cozinhe o macarrão. Pese e reserve os ingredientes enquanto isso. Separe as gemas das claras, de preferência sem a capinha que a protege para não cheirar ovo, e misture com o queijo em recipiente separado. Você pode usar um pouco da água do macarrão depois de fervida para amolecer. Corte o bacon em tirinhas finas com todas as camadas da peça, da gordura à carne, disponíveis em cada tirinha. Frite o bacon em uma panela que caiba o macarrão, retirando e guardando o excesso da gordura se necessário; você pode usar o excesso para outras frituras depois. Escorra o macarrão depois de cozido, reservando parte da água usada para cozinhar, e jogue por cima na panela onde foi preparado o bacon e cozinhe ambos ligeiramente, macarrão e bacon. Desligue o fogo e jogue a mistura de gemas e queijo por cima, misturando enquanto adiciona um pouco da água de cozimento do macarrão até dar o ponto. O ponto padrão é ligeiramente úmido, mas você pode experimentar a partir daí.
</description>
</item>

     
        <item>
  <title>What Did Jack Do?</title>
  <link>http://www.caloni.com.br/what-did-jack-do/</link>
  <pubDate>2020-03-22</pubDate>
  
  <guid>http://www.caloni.com.br/what-did-jack-do/</guid>
  <description>O diretor David Lynch coloca à prova nossa capacidade de avaliação de um trabalho cinematográfico. A Netflix coloca no ar este curta experimental desse diretor experimental em que um macaco é interrogado por um investigador (o próprio Lynch) e sua boca se mexe através de um truque dos mais baratos de colocar uma boca humana falando em cima da boca do animal. Funciona? Eu não me arrisco dizer. Não há nada para se ver por aqui senão uma cópia barata digital que brinca com noir e diálogos que tentam fugir do comum. Mas não adianta: o trabalho de Lynch com o macaquinho é fofinho demais para sair algo além disso.
</description>
</item>

     
        <item>
  <title>Top Filmes 2019</title>
  <link>http://www.caloni.com.br/top-filmes-2019/</link>
  <pubDate>2019-12-29</pubDate>
  
  <guid>http://www.caloni.com.br/top-filmes-2019/</guid>
  <description>Apesar de sempre mudar no futuro e sempre gerar acaloradas, intermináveis e fúteis discussões entre cinéfilos, as famigeradas listas dos melhores ajudam a colocar uma certa época ou gênero em perspectiva, nos permitindo avaliar melhor através desses exemplos a coleção completa. Claro que cada um terá sua lista e a defenderá até o fim, mas é justamente essa a graça de conversar sobre arte: cada pessoa tem sua experiência muito particular sobre o todo.
Eu, por exemplo, tive alguns dos meus melhores momentos do ano dentro da sala de cinema, e mesmo assim não quer dizer que considero 2019 um grande ano para a sétima arte; muito pelo contrário. Filmes excelentes eventualmente irão estrear, mas continuam sendo raridade, e a cada ano mais escassos, e por isso para mim foi uma dificuldade selecionar dez que foram lançados no Brasil este ano. O que torna um filme excelente para mim pode não ser para você, mas há de convir que quando um de nós o encontra fica difícil se esquecer, ainda que você o tenha assistido no comecinho do ano.
Como Homem-Aranha no Aranhaverso, por exemplo, um filme que estreou nos cinemas brasileiros nas férias escolares do início do ano e que manteve sua marca durante todos os 12 meses seguintes. Não me lembro de ter visto nenhum trabalho de animação ou até de filmes de super-herói que tivesse explorado tão bem essa ponte entre o universo dos quadrinhos e a telona, seja no quesito estético ou narrativo. Todos que adoram o personagem de Peter Parker e seu alter-ego foram obrigados a torcer o braço e afirmar que, mesmo não sendo um live-action, Aranhaverso foi um dos melhores filmes a explorar o adorável conceito criado por Stan Lee e Steve Ditko. Além disso, acaba sendo uma aventura divertida para crianças de todas as idades e que não se permite trazer problemas ou soluções fáceis apenas por ser divertido. Ele empolga justamente porque sua trama é complexa na medida para nos deixar presos na poltrona do cinema até o fim. Além, é claro, de uma produção artística que ambiciona ser referência do tema, e consegue com louvor, e com folga. Descanse em paz, Stan Lee. E muito obrigado por este e outros presentes.
Seguindo logo o herói mais bem representado do ano vem o vilão mais bem representado. Pelo menos se considerarmos que se trata do mesmo vilão visto nos quadrinhos, ou uma encarnação realista à altura. Estou falando de Coringa, o filme que atraiu multidões para as salas este ano justamente porque este vilão fala diretamente ao grande público sobre coisas que a crítica especializada busca evitar, especialmente da maneira irresponsável com que o diretor Todd Phillips explora neste longa protagonizado por Joaquin Phoenix em criação à parte do personagem. Coringa é sobre política e é impossível se desvencilhar desse assunto durante todo o filme, apesar de estarmos assistindo a um drama intimista e subjetivo sobre a vida de um desequilibrado mental. Em sua superfície o filme parece simplório em sua mensagem, mas é nos detalhes sórdidos, nas entrelinhas, que o filme se entrega de coração ao que é esperado de uma obra de arte: provocar-nos.
Nem sempre os heróis e vilões possuem histórias excitantes com arcos dramáticos impossíveis, e para isso é que existe toda a subjetividade do cinema, que faz qualquer drama de qualquer pessoa se tornar vital no momento que assistimos. Diferente da semi-biografia pausterizada de Freddie Mercury do ano passado, Rocketman é uma biografia e um musical que não possui uma grande tragédia para se manter na mente das pessoas, nem um músico que a grande maioria aprendeu a amar. E é justamente por isso que o filme Dexter Flether consegue se desvencilhar do convencional e ir bem fundo no drama de um artista que lutou boa parte de sua vida apenas para existir como ele é. Eis um filme que ao narrar sobre a vida privada de um cantor pop ainda vivo extrai das particularidades o drama universal dos famosos em ser incapaz de lidar com tanta fama em sua vida pessoal. E além disso é um musical tão empolgante que mesmo sem substância ele já seria interessante.
Quando pensamos em filmes sem substâncias que podem ser tão bons que nos esquecemos da falta de conteúdo logo nos vem o gênero terror à mente. E ao vir o gênero terror é impossível não se lembrar em 2019 de Nós, que chega como o segundo filme do diretor de Corra! esperado como algo próximo, mas que acaba entregando um trabalho de um cineasta que parece ter amadurecido rapidamente, em uma direção de quem tem o controle absoluto e uma trama (também escrita por Jordan Peele) que nos entrega tantos símbolos vagos que eles se encaixam na mente de praticamente qualquer espectador interessado nas camadas mais profundas da história. Este thriller funciona em tantos níveis que sua maior crítica é ter tantos níveis, a ponto do significado se perder rapidamente ao final do filme. Porém, isso não importa nem um pouco, já que o medo é algo tão subjetivo que a escolha do espectador ligar seus próprios pontos acaba virando uma ideia de gênio, de quem pode ter escrito algo muito particular, mas com sua habilidade vira uma carta aberta para todos que adoram enxergar padrões.
Já menos interpretativo, mas muito mais profundo e adulto em sua abordagem, é Guerra Fria, trabalho do cineasta Pawel Pawlikowski que à primeira vista pode não parecer nada demais, mas que oferece através principalmente de sua estética uma visão que consolida as diferentes visões que as pessoas costumam ter da época-título, mas principalmente, nos entrega uma interpretação muito viva e muito atual da nossa realidade, dentro de um embate ainda sendo travado, ainda que de forma inconsciente, entre o jogo de poder e estrutura que vista atingir a humanidade com base na força, e a força implacável e impessoal do capitalismo em seu materialismo sugador de almas.
E o que nos torna humanos? Essa é uma pergunta sempre presente no cinema, e que Border flerta responder esse ano em um filme inusitado e inspirador, embora muito difícil para a maioria dos espectadores. De qualquer forma, quem estiver disposto a olhar com a mente aberta encontrará não apenas um filme fantasioso, mas uma discussão honesta sobre encontrar humanidade independente da espécie que a originou e sobre a tolerância entre seres de diferente natureza. Border é uma desconstrução muito bem-vinda, pois é uma mensagem sobre respeito a diversidade que todos deveríamos aprender. Infelizmente, o filme deve atrair apenas os que já estão aptos a abraçar o diferente, ou pelo menos não tratá-lo como uma aberração.
As discussões sobre nossa sociedade eventualmente recaem no fascínio que muitos de nós possuem com a violência e como ela se estrutura entre nós. Um dos gêneros mais populares no cinema são os filmes de máfia, e um dos especialistas ainda na ativa deste gênero é Martin Scorsese, que lança esse ano por um serviço de streaming O Irlandês, que embora não lembre nem Os Bons Companheiros nem O Poderoso Chefão, é uma amálgama de ambos, pois possui a vivacidade do primeiro com a sobriedade do segundo, sem perder o lado comercial de uma produção de cinema. Isso, claro, se você se render a três horas e meia de um filme que flui quase que de maneira sobrenatural, com uma edição impecável, excelentes atuações e muito mais virtudes técnicas que é possível enumerar nesta breve memória de um filme que merece constar nesta lista.
Agora que se foram os que considero de menção obrigatória para 2019 chega o momento de eu comentar sobre alguns filmes que podem passar despercebidos ou esquecidos, seja por serem produções menores ou pelos valores que carregam. Da primeira categoria tenho No Coração do Mundo, produção mineira que é um estudo social de primeira qualidade e que merece ser visto acima de muitos outros filmes brasileiros da época porque consegue sintetizar vários assuntos sendo trabados no cinema nacional em apenas um filme. É um trabalho fruto de um estudo muito peculiar sobre o estado de Minas Gerais, com atuações muito valiosas para a história, que é montada para mesclar um filme de ação/golpe em cima de uma camada social dramática que é deixada para interpretação pelo próprio espectador. É um combinado muito bem sucedido entre arte e indústria em terras tupiniquins.
Dos dois filmes que fazem parte dos esquecidos pelos valores conflitantes com o status quo talvez Um Dia De Chuva Em Nova York seja o mais injustiçado, pois traz um Woody Allen, mais uma vez na direção e roteiro, completamente coerente com quem foi e quem é o cineasta, mas ao mesmo tempo com personagens, diferente do acusado pela maioria dos críticos, atualizados à nova era para as mulheres. Os ataques a &amp;quot;Um Dia de Chuva&amp;quot; ignoram completamente o livro arbítrio da personagem de Elle Fanning e atacam o trabalho de Allen baseados em uma cartilha de pensamento compartimentado e automático, e o fato de seu último filme ser alvo de argumentos impensados é uma ofensa ainda maior ao cineasta que sempre priorizou em seus filmes o raciocínio, às vezes até exagerado, sobre a vida, o universo e tudo mais. Ironicamente, este que é um dos melhores filmes do ano é um exemplo perfeito de Allen de que seus filmes pararam de fazer novas perguntas porque as pessoas hoje em dia estão prontas para atacar o que eles consideram as respostas erradas.
Por fim, embora longe da perfeição e entregue a um roteiro fraco, ainda que eficiente, A Mula, dirigido e atuado pelo velho de guerra Clint Eastwood, é mais um exemplo dos filmes cujos valores &amp;quot;errados&amp;quot; acabam passando reto ou por longe em premiações, o que diz menos sobre o filme e mais sobre nossa época. Eastwood parece ter gostado dessa persona que o representa nos filmes: um reaça aposentado ou próximo da morte cuja única razão de viver é saber no fundo que está com a razão. Se torna extremamente divertido observar o contraste das mensagens de seu último filme com os valores vitimistas e intolerantes do grande resto cinematográfico, e acaba se tornando um prazer para mim inseri-lo na lista de melhores do ano, que assim como Coringa, prova seu valor não por estar certo em sua mensagem, mas por provocar em nós, espectadores, alguma reação. Qualquer reação. Nesse sentido, ao analisar arte, todos nós deveríamos manter sempre vivo o nosso lado mais reaça possível.
</description>
</item>

     
        <item>
  <title>How to Make Sourdough More or Less Sour Part I</title>
  <link>http://www.caloni.com.br/how-to-make-sourdough-more-or-less-sour-part-i/</link>
  <pubDate>2019-12-26</pubDate>
  
  <guid>http://www.caloni.com.br/how-to-make-sourdough-more-or-less-sour-part-i/</guid>
  <description>Pesquisando sobre como tornar o fermento (e o pão feito com ele) menos azedo que o tradicional pão de fermentação longa, encontrei este artigo dividido em duas partes. Essas anotações dizem respeito à primeira parte.
  Os elementos para controlar o azedo do pão deste artigo são temperatura, escolha da farinha e maturidade.
  Farinha branca entre 21 e 24 graus favorece menos acidez, e farinha integral entre 28 e 29 graus uma maior acidez, e o estado de maturação com menos acidez é no ou logo antes do pico do crescimento para o fermento, e no caso da massa até o dobro. Para uma maior acidez espere até o fermento baixar e no caso da massa mais que dobrar de tamanho.
  Quem gera a acidez são os lactobacilos da cultura, enquanto quem gera gás carbônico é a levedura, um fungo unicelular presente na cultura do fermento. Há uma simbiose entre eles, na proporção aproximada de 100 lactobacilos por levedura, mas pode-se favorecer o aumento de um ou de outro, sendo que a tendência é que os lactobacilos (as bactérias) aumentem e a levedura permaneça em um nível populacional.
  Um pão saudável é desenvolvido através de um fermento que neutralize o ácido fítico, e a presença do ácido láctico auxilia nesse controle. Porém, a contrapartida é que soluções muito ácidas irão gerar pães mais azedos. Podemos fazer uma relação simplória entre pães mais azedos e mais saudáveis, e se o objetivo for um sabor mais suave acabaremos sacrificando parte da saúde do pão.
  A maturidade da fermentação determina a quantidade de acidez. Em torno do pico de altura da massa madre é onde existe a menor acidez, mas o tempo de fermentação da massa (e seu volume) também irão determinar a acidez do pão.
  Para qualquer mudança no regime de alimentação do fermento, como temperatura, farinha e hidratação, demora cerca de 10 dias para que essas mudanças sejam sentidas na cultura (há uma discussão sobre o ritmo de refresh nos comentários e a reação das novas bactérias sendo adicionadas, mas faltam evidências).
  </description>
</item>

     
        <item>
  <title>Tradicional Mensagem de Feliz Natal e Bom 2020 Versão Cinema</title>
  <link>http://www.caloni.com.br/tradicional-mensagem-de-feliz-natal-e-bom-ano-novo-versao-cinema-2019/</link>
  <pubDate>2019-12-21</pubDate>
  
  <guid>http://www.caloni.com.br/tradicional-mensagem-de-feliz-natal-e-bom-ano-novo-versao-cinema-2019/</guid>
  <description>Tudo começou há mais ou menos... não me lembro. O que eu sei é que meu grande amigo Pikachu me colocou em um aviso anual sobre compilar uma mensagem de final de ano com referências a filmes que foram lançados esse ano no cinema (ou algum filme mais antigo de vez em quando, se surgir a oportunidade). Esta é a primeira vez que transformo essa mensagem em um post.
O ano de 2019, imitando 2016, foi escrito e dirigido pelo Tarantino, onde até um Era Uma Vez... em Hollywood consegue virar umA Maldição da Chorona. Com ou sem um Parasita atazanando a vida.
Houve os momentos bons, como testemunharmos finalmente o Ultimato dos Vingadores, apesar que todas essas aventuras em fundo verde serviram para nos cansar de tantos efeitos e perceber que toda essa correria das Marveletes foi uma verdadeira Odisseia dos Tontos. E assim como tontos, cambaleando para fora da sala do cinema depois de ter visto uma atrocidade como Os Parças 2, perdemos muito no meio de discussões que não levam a nada. Esquecemos até o idioma, e trocando português por espanhol perdemos até &amp;quot;El Camino&amp;quot;.
Mas nessa nossa Vida Invisível em que entramos naquela salinha escura e nos descobrimos novamente atingimos nosso próprio Bacurau, bem No Coração do Mundo. E quando isso acontece fica difícil dizer que o cinema nacional vai mal, quando entendemos que O Paraíso Deve Ser Aqui. Não há melhor Retrato do Amor.
Eu sei que vivemos em tempos difíceis, onde até uma criaturinha singela como um Pikachu pode virar detetive de um filme noir. Tempos sombrios, onde temos nossa Privacidade Hackeada e parece que nada podemos fazer. Às vezes dá vontade de largar o emprego e viver como um Irlandês, fazendo servicinhos para a máfia, se sentindo O Rei Leão em um trabalho fora da Legalidade e Fora de Série, que satisfaz nossos desejos mais violentos. É como sobreviver Um Dia de Chuva em Nova York e dar Adeus À Noite, em uma passagem de Dor e Glória.
Mas muita calma nessa hora. Não se deve confundir arte e vida real. Toda Arte é Perigosa. Não adianta sermos infantis e gritar Shazam!, esperando sair pelos ares, como um Rocketman, virar um Homem Aranha da vida (ainda que Longe de Casa) ou uma espécie de Anjo de Combate. Não podemos ceder ao nosso sentimento mais Maligno; até porque todos Nós temos em alguma parte de casa um teto de Vidro, e flertar com a vida de um anti-herói pode fazer de nós no mundo real um trágico Brinquedo Assassino, mesmo que esperássemos um Parque dos Sonhos.
Por isso, esqueça as trevas, não seja o dono ou A Dona do Mal. Olhe para O Farol no fim do oceano, estreando dia 2 do ano que vem, 2020. É sinal de paz e Ascenção, nossa ou de Skywalker. Iremos Rumo às Estrelas, esquecermos nossa Mente Perversa e torcer por coisas boas, como uma competição inocente entre Ford vs Ferrari, e não o calor inconsequente de um Retrato de Uma Jovem em Chamas, nem o frio congelante de um Frozen 2. Vamos pelo equilíbrio, reconstruir um novo mundo.
Afinal, Deus é Mulher e Seu Nome é Petúnia. Espero que este estreie também em 2020 =)
</description>
</item>

     
        <item>
  <title>Monte Verde 2019</title>
  <link>http://www.caloni.com.br/monte-verde-2019/</link>
  <pubDate>2019-12-10</pubDate>
  
  <guid>http://www.caloni.com.br/monte-verde-2019/</guid>
  <description>Monte Verde como cidade turística é bem cara, pois fica do lado das cidades do interior de São Paulo para onde boa parte da classe média da capital migrou. O foco turístico dessa região fica nessa cidadezinha encrustada entre os montes que dividem o Sul de Minas com o estado paulista. Todo o resto do gigantesco município de Camanducaia, suas cachoeiras e paisagens mais distantes, segue ignorado pelos que vêm de fora, mas não pelos locais.
Essa foi a visão do taxista que me levou da rodoviária de Camanducaia até a praça onde se pega uma van até a cidadezinha, já que o último ônibus rodoviário havia partido, às 13:30 de uma sexta-feira. A moça do guichê da única companhia de ônibus que faz o trajeto de São Paulo para Camanducaia, a Viação Cambuí, foi incapaz de me recomendar as vans, mas uma pessoa que estava sentada ao lado do guichê me deu essa dica do nada, dessas gentilezas comuns do povo mineiro.
O taxista, Eduardo o nome, também falou sobre inúmeras cachoeiras e paisagens belíssimas pela região mais adentro de Camanducaia, uma das maiores do estado e que é a mais próxima da capital de São Paulo, a respeito de Extrema ser a primeira cidade conectada por rodovias e conhecida como o município limítrofe das fronteiras. Também falou a respeito da Fazenda Esperança, que existe desde o século 19 e é cuidada ainda pela mesma família. Eles fazem o melhor doce de leite mineiro que você irá provar na vida, com apenas 10% de açúcar.
Ele falava como um ex-Paulista, sem sotaque e com uma leve inclinação politizada. A velha questão de que nada muda na região porque são sempre os mesmos no poder. Falava de fato como um Paulista nato, pois todas essas informações foram dadas em uma corrida de no máximo 2km e com um valor de 20 reais, valor auto-explicativo de um dos motivos dele vir morar no interior, já que a capital paulista após os Ubers da vida ficou inóspita para a vida de um taxista que não quer muito estresse.
As vans saem quase de hora em hora e vão lotadas. Todos da região conhecem. Custa 10 reais e demora cerca de uma hora para passear pelas curvas que nos levam para um cantinho de Minas e da Mata Atlântica, hoje gravemente ameaçada por plantações de eucalipto. São aquelas florestas artificiais com um formato quadrado demais para ser natural e com tons de verde que não pertencem à vegetação.
É preciso saber se você vai ficar na parte mais comércio e bairro ou a turística, pois assim que a van chega no portal da cidade ela deixa os turistas e depois segue por baixo até o último bairro da cidadezinha. Eu bobeei, mas acabei conhecendo essa parte. Meu chalé fica na parte turística, subindo do outro lado em direção às trilhas. As partes se conectam apenas no começo e no fim da cidade, e a conexão do final fica a cerca de 1km e meio entre os locais centrais com uma leve subida sentido bairro.
As trilhas ficam a cerca de 6km do centro em uma subida pouco íngreme, mas geralmente são carros que sobem até o estacionamento que dá acesso a elas. Fui andando e em pouquíssimo tempo um casal de mineiros procurando informação se estavam na estrada correta já me ofereceram carona. Recusei, minha ideia era ir andando do chalé até as trilhas e vice-versa. Foi o dia das trilhas, andei por todas as conhecidas, três ao total, e voltei dando a volta.
De resto a cidade tem poucas opções que não seja gastronomia mundial, que não me interessou muito. Acabei comprando queijo no mercado local, além do sensacional doce de leite Esperança, que realmente foi o doce de leite mineiro mais gostoso que provei. A cerveja local, de nome Monte Verde, também dá pro gasto. Há uma outra cervejaria na cidade, Fritz, onde também serverm quitutes.
</description>
</item>

     
        <item>
  <title>Circles and Squares</title>
  <link>http://www.caloni.com.br/circles-and-squares/</link>
  <pubDate>2019-11-17</pubDate>
  
  <guid>http://www.caloni.com.br/circles-and-squares/</guid>
  <description>Retirado do blog Keeping My Brain Alive.
...It takes extraordinary intelligence and discrimination and taste to use any theory in the arts, and that without those qualitites, a theory becomes a rigid formula (which is indeed what is happening among auteur critics). The greatness of critics like Bazin in France and Agee in America may have something to do with their using their full range of intelligence and intuition, rather than relying on formulas. Criticism is an art, not a science, and a critic who follows rules will fail in one of his most important functions: perceiving what is original and important in new work and helping others to see.
...the first premise of the auteur theory is the technical competence of a director as a criterion of value.
‘A great director has to be at least a good director.’ But this commonplace, though it sounds reasonable and basic, is a shaky premise: sometimes the greatest artists in a medium bypass or violate the simple technical competence that is so necessary for hacks. For example, it is doubtful if Antonioni could handle a routine directorial assignment of the type at which John Sturges is so proficient (Escape from Fort Bravo or Bad Day at Black Rock), but surely Antonioni’s L’Avventura is the work of a great director. And the greatness of a director like Cocteau has nothing to do with mere technical competence: his greatness is in being able to achieve his own personal expression and style.
An artist who is not a good technician can indeed create new standards, because standards of technical competence are based on comparisons with work already done.
[from Cocteau] ‘The only technique worth having is the technique you invent for yourself.’
I would amend Sarris’s premise to, ‘In works of a lesser rank, technical competence can help to redeem the weaknesses of the material.’
...the second premise of the auteur theory is the distinguishable personality of the director as a criterion of value.
The smell of a skunk is more distinguishable than the perfume of a rose; does that make it better? Hitchcock’s personality is certainly more distinguishable in Dial M for Murder, Rear Window, Vertigo than Carol Reed’s in The Stars Look Down, Odd Man Out, The Fallen Idol, The Third Man, An Outcast of the Islands, if for no other reason than because Hitchcock repeats while Reed tackles new subject matter. But how does this distinguishable personality function as a criterion for judging the works?
Often the works in which we are most aware of the personality of the director are his worst films - when he falls back on the devices he has already done to death. When a famous director makes a good movie, we look at the movie, we don’t think about the director’s personality; when he makes a stinker we notice his familiar touches because there’s not much else to watch.
It is an insult to an artist to praise his bad work along with his good; it indicates that you are incapable of judging either... It’s like buying clothes by the label: this is Dior, so it’s good. (This is not so far from the way the auteur critics work, either.)
[Sarris] wants to see artists in a pristine state - their essences, perhaps? - separated from all the life that has formed them and to which they try to give expression.
The third and ultimate premise of the auteur theory is concerned with interior meaning, the ultimate glory of the cinema as an art. Interior meaning is extrapolated from the tension between a director’s personality and his material.
These critics work embarrassingly hard trying to give some semblance of intellectual respectability to a preoccupation with mindless, repetitious commercial products.
‘Interior meaning’ seems to be what those in the know know. It’s a mystique - and a mistake. . . They’re not critics; they’re inside dopesters. There must be another circle that Sarris forget to get to - the one where the secrets are kept.
The role of the critic is to help people see what is in the work, what is in it that shouldn’t be, what is not in it that could be. He is a good critic if he helps people understand more about the work than they could see for themselves; he is a great critic, if by his understanding and feeling for the work, by his passion, he can excite people so that they want to experience more of the art that is there, waiting to be seized. He is not necessarily a bad critic if he makes errors in judgment. (Infallible taste is inconceivable; what could it be measured against?) He is a bad critic if he does not awaken the curiosity, enlarge the interests and understanding of his audience. The art of the critic is to transmit his knowledge of and enthusiasm for art to others.
I daresay... the new breed of specialists know more about movies than some people and could serve at least a modest critical function if they could remember that art is an expression of human experience. If they are men of feeling and intelligence, isn’t it time for them to be a little ashamed of their “detailed criticism” of movies like River of No Return?
Those, like Sarris, who ask for objective standards seem to want a theory of criticism which makes the critic unnecessary. And he is expendable if categories replace experience; a critic with a single theory is like a gardener who uses a lawn mower on everything that grows. Their desire for a theory that will solve all the riddles of creativity is in itself perhaps an indication of their narrowness and confusion; they’re like those puzzled lost people who inevitably approach one after a lecture and ask, “But what is your basis for judging a movie?” . . . They want a simple answer, a formula; if they approached a chef they would probably ask for the one magic recipe that could be followed in all cooking.
And it is very difficult to explain to such people that criticism is exciting just because there is no formula to apply, just because you must use everything you are and everything you know that is relevant, and that film criticism is particularly exciting just because of the multiplicity of elements in film art . . . they seem to view movies, not merely in isolation from the other arts, but in isolation even from their own experience . . . And if they don’t have interests outside films, how can they evaluate what goes on in films? Film aesthetics as a distinct, specialized field is a bad joke.
Vulgar melodrama with a fast pace can be much more exciting - and more honest, too - than feeble pretentious attempts at drama - which usually meant just putting ‘ideas’ into melodrama, anyway.
</description>
</item>

     
        <item>
  <title>Is There a Cure for Film Criticism? by Pauline Kael (excerpts)</title>
  <link>http://www.caloni.com.br/is-there-a-cure-for-film-criticism/</link>
  <pubDate>2019-11-17</pubDate>
  
  <guid>http://www.caloni.com.br/is-there-a-cure-for-film-criticism/</guid>
  <description>Retirado do blog Keeping My Brain Alive.
There is, in any art, a tendency to turn one&#39;s own preferences into a monomaniac theory; in film criticism, the more confused and single-minded and dedicated (to untenable propositions) the theorist is, the more likely he is to be regarded as serious and important and &amp;quot;deep&amp;quot; - in contrast to relaxed men of good sense whose pluralistic approaches can be disregarded as not fundamental enough. Often the worst and most embarrassing part of a film is the accidental, the uncontrolled, the amateurish failure which exhibits its unachieved intentions; and the finest moment may be a twitch of the actress&#39;s cheek achieved on the fiftieth take. There are accidents which look like art and there is art that looks accidental; but how can you build an aesthetic on accident - on the ripple of the leaves?... How can you say &#39;accidents were the very soul of slapstick&#39;? In comedy what looks accidental is generally the result of brilliant timing and deliberate anarchy and wild invention and endless practice.
The look of so many good movies during the period [Kracauer] was gestating this book becomes his definition of cinema itself.
&amp;quot;Film,&amp;quot; he tells us, &amp;quot;gravitates towards unstaged reality&amp;quot; and &amp;quot;the artificiality of stagy settings or compositions runs counter to the medium&#39;s declared preference for nature in the raw.&amp;quot; How and when did the medium declare its preference, I wonder? The trouble with this kind of Hegelian [philosophy of Hegel in which the dialectic of thesis, antithesis, and synthesis is used as an analytic tool in order to approach a higher unity or a new thesis] prose is that the reader is at first amused by what seem to be harmless metaphors, and soon the metaphors are being used as if they were observable historical tendencies and aesthetic phenomena, and next the metaphor becomes a stick to castigate those who have other tastes, and other metaphors.
The cruiser Potemkin and the oil derrick in Louisiana Story, are less feasible on stage, but how does that make them more cinematic than something which is easy to put in a theater? Both are, incidentally, much less interesting objects on the screen than they are generally asserted to be: the exciting action in Potemkin has little reference tot he cruiser itself (extras can run around on a stage, too) . . . Who started this divide and conquer game of aesthetics in which the different media are assigned their special domains like salesmen staking out their territories - you stick to the Midwest and I&#39;ll take Florida?
Film aestheticians are forever telling us that when they have discovered what the motion picture can do that the other arts can&#39;t do, they have discovered the &amp;quot;essence,&amp;quot; the &amp;quot;true nature&amp;quot; of motion picture art. It is like the old nonsense that man is what differentiates him from the other animals . . . And what motion picture art shares with other arts is perhaps even more important than what it may, or may not, have exclusively. . . Except for the physical presence of the actors in a theater, there is almost no &amp;quot;difference&amp;quot; between stage and screen that isn&#39;t open to question; there is almost no effect possible in one that can&#39;t be simulated, and sometimes remarkably well achieved, in the other.
Perhaps the most lovable side of Kracauer is his desperate attempt to make musicals, which he obviously adores, fit his notion of cinema as nature in the raw. . . As if our delight in the performance of a song or dance depended on the degree to which it grew out of the surrounding material - as if our pleasure had to be justified! This is a variant of the pedagogical Puritan notion that you mustn&#39;t enjoy a poem or a story unless it teaches you a lesson: you mustn&#39;t enjoy a movie unless it grows out of &amp;quot;nature.&amp;quot; . . . Phew! Our pleasure in song and dance, as in motion picture itself, is in the ingenuity with which man uses the raw material of his existence - not in the raw material itself, or in a visible link with it. . . It is this clumsy effort to make things look &amp;quot;natural&amp;quot; instead of accepting the stylization of song and dance which helps to make so many musicals seem simpering and infantile.
In the fall of 1961 New Politics, Ernest Callenbach writes &amp;quot;a letter to a young film maker&amp;quot; and says &amp;quot;Get thee to Cuba, and after that to Latin America elsewhere, and then Africa.&amp;quot; Would the same advice be given to a young writer or painter? Why are moviemakers obliged to make history? . . . But suppose the young film maker doesn&#39;t know Spanish, can&#39;t stand the sight of blood, was drawn to the elliptical scenario on the uneventful life of Emily Dickinson? He&#39;ll probably make a terrible movie, but surely the first prerogative of an artist in any medium is to make a fool of himself.
Films are not made by cameras, though many of them look as if they were, just as a lot of dialogue sounds as if it were written by typewriters.
Art is the greatest game, the supreme entertainment, because you discover the game as you play it. There is only one rules, as we learned in Orphee: Astonish us! In all art we look and listen for what we have not experienced quite that way before. We want to see, to feel, to understand, to respond a new way. Why should pedants be allowed to spoil the game?
</description>
</item>

     
        <item>
  <title>Por que esses Coringa e Pantera se tornaram fenômenos de bilheteria?</title>
  <link>http://www.caloni.com.br/coringa-e-pantera-negra/</link>
  <pubDate>2019-11-16</pubDate>
  
  <guid>http://www.caloni.com.br/coringa-e-pantera-negra/</guid>
  <description>Muitos dizem que Coringa e Pantera Afro-Descendente se tornaram fenômenos de bilheteria por causa da identificação do público com esses dois personagens ou universos, mas se esquecem que muitos outros filmes campeões de bilheteria surgiram nas últimas décadas e que há uma correlação muito mais forte do que a mera identificação com protagonistas: são os filmes com o maior número de fundo verde da história do cinema.
O público de hoje em dia quer estar cada vez mais longe da realidade que o cerca. Vemos isso já nos smartphones. A massa de alienados percorrendo megalópoles grudados no celular e evitando pensar muito a respeito do verdadeiro caos, solidão, impessoalidade que a cidade grande gera. O mundo reluzente e piscante que nos mostra uma vida perfeita e inalcançável é mil vezes melhor do que pensar em procurar um emprego melhor, ou melhor, procurar um emprego.
No cinema não é diferente. Anualmente são lançados inúmeros dramas, norte-americanos ou não, intimistas, potentes, que nos fazem repensar nossa própria existência ou as nossas relações muito reais que nos cercam. E eles não são campeões de bilheteria. O motivo mais óbvio é que ingressos de cinema custam dinheiro demais para todos assistirem todos os filmes que estreiam, então há de haver um critério. E entre assistir uma reflexão sobre a própria vida real que compartilhamos todos os dias do ano (exceto férias), a imensa massa que só irá poder ver um ou dois filmes por ano na telona irá escolher o escapismo mais glorioso que ela já ouviu falar.
Isso explica porque as maiores bilheterias deste século são filmes de super-heróis, de viagens no espaço ou qualquer variante que envolva cada vez menos filmagens fora de estúdio. Avatar, Star Wars, Vingadores, Harry Potter e até Velozes e Furiosos 7, que deixou de ser sobre carros potentes e passou a ser uma versão medíocre de espionagem e conspiração, constam na lista de maiores bilheterias.
E se ainda resta dúvida sobre o que move o grande público para as salas, repousa atualmente em sétimo lugar O Rei Leão em sua versão live action, apontado por vários críticos como uma adaptação estranha da animação por conter animais &amp;quot;reais demais&amp;quot;. Paradoxalmente, reais demais é o maior atrativo para alguém que deseja escapar da realidade do mundo cruel, pois por mais real que seja, esta é uma animação feita totalmente em estúdios, utilizando zero animais reais, e o espectador sabe disso, e ele quer visitar este mundo.
E aí entra Wakanda, a terra dos contos de fadas que todo afro-descendente quis que em algum momento da história fosse verdade. Isso é motivo de sobra para o inesperado sucesso de bilheteria deste filme da Marvel, e não podemos reduzir a explicação com identificação nem representatividade. O morador do gueto quer sonhar pelo menos uma vez na vida com um mundo onde ele e seus vizinhos detém a substância mais rica e poderosa do universo, e se sentir o povo escolhido.
Mas voltando ao Coringa, é óbvio que Gothan City/Nova York da década de 70 e 80 não é um ambiente irreal. Ela realmente existiu e é em uma versão Scorsese light para o cinema que o filme de Todd Phillips se passa. Porém, essa Nova York não existe mais, e nem Taxi Driver nem O Rei da Comédia são versões fantasiosas da cidade vindas da mente de um psicopata. As versões de Scorsese são reais demais, porque para um católico como Martin o drama (e a culpa) deve ser bem real.
Realidade não é o forte na mente de Todd Phillips, a quem foi dada liberdade criativa o suficiente para que o universo do seu filme e o seu &amp;quot;herói&amp;quot; tivessem os desvios morais tão conhecidos dos fãs do diretor de Se Beber Não Case e Um Parto de Viagem. Esse desvio moral pode não harmonizar muito bem com o resto dos filmes citados neste texto que elencam o top 20 de maiores vendas, mas é um escapismo de qualquer forma. Todo cidadão de bem já se cansou alguma vez de ouvir as reportagens do Datena e quis dar um tiro na cabeça do sujeito responsável por trazer sempre desgraças para seu lar. E eventualmente também já se sentiu na necessidade de questionar o que ocorre com o mundo onde tantos pobres engraçados pagam o pato e humoristas medíocres, de Jô Soares a Danilo Gentili, ganham milhões por fazer piadas de tio em rede nacional. E pensou em dar um tiro na cabeça de ambos, também, claro.
De qualquer forma, ninguém se identifica com o Coringa, pois isso é simplista demais até para a grande massa. O que todos compartilham é essa incompreensão do mundo em que vivemos, um mundo que acelerou demais sua tecnologia, onde as crianças que já nasceram com internet são versão diferentes demais da geração anterior. Esse gap crescente entre gerações causa um desconforto e uma alienação com a vida real que as opressora mentes de primatas com quem somos obrigados a fazer as pazes precisamos de um escap... ismo.
Se você quer chamar isso de identificação ou representatividade, vá em frente. Reciclar nomes para significarem o que bem quisermos também é um traço do novo século. Portanto, se empodere, e tente ser feliz.
</description>
</item>

     
        <item>
  <title>Seleção de Filmes da 43a MostraSP</title>
  <link>http://www.caloni.com.br/mostrasp-43-2019-selecao-filmes/</link>
  <pubDate>2019-10-07</pubDate>
  
  <guid>http://www.caloni.com.br/mostrasp-43-2019-selecao-filmes/</guid>
  <description>Foi divulgada a lista dos filmes para a mostra desse ano. Já conheço alguns diretores por filmes anteriores.
 Abel Ferrara (filmes nessa Mostra: O Projecionista) dirigiu o &amp;quot;abominável&amp;quot; Bem-Vindo a Nova York, um estudo de personagem com Gérard Depardieu. Ale McHaddo (filmes nessa Mostra: Osmar a Primeira Fatia do Pão de Forma) iniciou no cinema com uma animação tosquinha chamada BugiGangue no Espaço, baseada em DVD educacional. Aly Muritiba (filmes nessa Mostra: Irmãos Freitas) era um ex-agente penitenciário que virou diretor; é dele o sensacional Para Minha Amada Morta e ele volta a revisitar sua antiga profissão no ótimo A Gente. Beto Brant (filmes nessa Mostra: O Invasor) é o diretor de O Invasor, um filme catártico da época do renascimento do cinema brasileiro. Vale o ingresso. Caco Ciocler (filmes nessa Mostra: Partida) atuou em 2 Coelhos, filme-referência nacional em edição de um filme dinâmico com plot twists como diversão, e agora estreia na direção. Daniel Rezende (filmes nessa Mostra: Turma da Mônica: Laços) é o editor premiado de Cidade de Deus e já tem dois trabalhos na direção; na mostra será exibida a adaptação dos quadrinhos da Turma da Mônica. Daniela Thomas (filmes nessa Mostra: Tuã Ingugu) é diretora brasileira, chegando a ter feito um curta para Paris Te Amo. Fatih Akin (filmes nessa Mostra: Contra a Parede) é o diretor alemão do ótimo thriller intimista Em Pedaços, com Diane Kruger. Fernando Grostein Andrade (filmes nessa Mostra: Abe, Encarcerados) é o diretor de documentário sobre a maconha, o internacional Quebrando o Tabu. Gavin Hood (filmes nessa Mostra: Segredos Oficiais) é diretor da questionável adaptação do livro Ender&#39;s Game. Heitor Dhalia (filmes nessa Mostra: Anna) é o diretor do excelente O Cheiro do Ralo, com Selton Mello. Ira Sachs (filmes nessa Mostra: Frankie) é diretor de um romance/drama sobre dois homossexuais de meia-idade bacana chamado O Amor é Estranho. Julia Rezende (filmes nessa Mostra: Depois a Louca Sou Eu) dirigiu uma vergonha alheia chamada Como é Cruel Viver Assim, um dos tantos projetos financiados pela Ancine para mostrar as injustiças do mundo, adaptado de uma peça de Fernando Ceylão. Luc Dardenne (filmes nessa Mostra: O Jovem Ahmed) é o diretor de um drama que estuda uma personagem descobrindo sua humanidade em A Garota Desconhecida. Mania Akbari (filmes nessa Mostra: Uma Lua Para Meu Pai) é a atriz do filme de Abbas Kiarostami que se passa totalmente em um carro, Dez; na mostra um de seus filmes como diretora será exibido. Margarethe von Trotta (filmes nessa Mostra: As Mulheres da Rosenstrasse) é a diretora do interessante O Mundo Fora do Lugar, sobre abuso psicológico. Maria Ribeiro (filmes nessa Mostra: Outubro), a atriz (você vai lembrar dela como esposa do Capitão Nascimento em Tropa de Elite) que virou diretora com o ótimo documentário Domingos, chega em novo filme. Mohsen Makhmalbaf (filmes nessa Mostra: Margue e Sua Mãe) é o diretor iraniano do curioso e revelador O Voto é Secreto. Paulo Caldas (filmes nessa Mostra: Abismo Tropical, Flores do Cárcere) é diretor do brega País do Desejo, com Fábio Assunção (você deve lembrar dele de algumas baladas de sexta à noite). Robert Eggers (filmes nessa Mostra: O Farol) é diretor do terror tenso e premiado A Bruxa. Roschdy Zem (filmes nessa Mostra: Persona Non Grata) é diretor do drama histórico sobre racismo em Chocolate. Yorgos Lanthimos (filmes nessa Mostra: Nimic) é o diretor premiado ano passado pelo espetacular A Favorita, e que chega com novo filme Nimic.  </description>
</item>

     
        <item>
  <title>Restaurante Daiki Sushi</title>
  <link>http://www.caloni.com.br/daiki-sushi/</link>
  <pubDate>2019-09-29</pubDate>
  
  <guid>http://www.caloni.com.br/daiki-sushi/</guid>
  <description>Daiki Sushi é um restaurante para você renovar suas esperanças de restaurantes japoneses em São Paulo, capital. Ele não é rodízio, não quer entuxar o bucho de seus clientes com salmão de qualidade duvidosa. Ele não é grande, não quer perder o controle de seus pratos. Ele é bem servido, com uma modesta e eficiente seleção de saquês e pratos que lembram a verdadeira essência da culinária japonesa: sabor.
A começar pelo shimeji, esse prato de cogumelos quentes que geralmente estão emborrachados e umedecidos com algum molho para ter gosto. O do Daiki Sushi realmente tem gosto. A única coisa que é preciso colocar na boca é o cogumelo. Está perfeito assim.
Outra combinação que costuma falhar em SP é o sushi com tarê. Esse molho agridoce só funciona se houver sabor que dispute a atenção com o doce, e nesse caso toda a combinação de arroz, cream cheese (fresco) e o molho agridoce com um peixe grelhado geram um diálogo de sabor que começa explosivo e vai se transformando, variando entre o levemente doce, a textura suave do queijo e a harmonia perfeita entre arroz e peixe.
Por falar nisso, os sushis com peixe e arroz vêm na combinação certa. Não é necessário colocar wasabi ou shoyu. Dê uma chance ao chef. Aqui ele sabe o que está fazendo.
Sashimis de peixe com tamanho carnudo e firme, sashimis de polvo que guardam a textura característica com o favor do mar ao final e skins que vêm intenso como deveriam. A rodada principal faz lembrar porque a culinária japonesa é tão requisitada. Nós, paulistanos, nos esquecemos disso nos infinitos rodízios com cebolinha e cream cheese industrial.
Experimentei o saquê que estava escrito no cardápio para os &amp;quot;bons bebedores&amp;quot;, o Hakushika Harakuchi, seco e intenso, com final levemente amargo. Aprendi a importância da temperatura fria. Deve ser um saquê muito requisitado, pois acabou a garrafa. Tivemos que pedir outro mais comum, doce e suave, e mais frutado, o Hakushika Yamadanishi Honozo. Os saquêws Honozo se chamam assim porque há adição de álcool destilado (no máximo 30%) e o polimento do arroz mínimo também de 30%. Não entendo nada de saquês, mas este combinou bem com a comida, apesar de obviamente mais leve que o Hakushika Harakuchi.
Tudo funciona nesse restaurante no bairro Vila Mariana, quase em frente à Cinemateca. Ir uma vez é certeza de querer voltar.
</description>
</item>

     
        <item>
  <title>Roger Ebert Great Movies</title>
  <link>http://www.caloni.com.br/roger-ebert-great-movies/</link>
  <pubDate>2019-09-22</pubDate>
  
  <guid>http://www.caloni.com.br/roger-ebert-great-movies/</guid>
  <description> 12 Angry Men 1957 2001: A Space Odyssey 1968 25th Hour 2002 3 Women 1977 8½ 1963 Ace in the Hole 1951 Adaptation 2002 The Adventures of Robin Hood 1938 After Dark, My Sweet 1990 After Hours 1985 The Age of Innocence 1993 Aguirre, the Wrath of God 1972 A.I. Artificial Intelligence 2001 Ali: Fear Eats the Soul 1974 Alien 1979 All About Eve 1950 Amadeus 1984 Amarcord 1973 Annie Hall 1977 The Apartment 1960 Apocalypse Now 1979 Pather Panchali 1955 Army of Shadows 1969 Atlantic City 1980 Au Hasard Balthazar 1966 Au Revoir les Enfants 1987 An Autumn Afternoon 1962 Babel 2006 Badlands 1973 The Ballad of Narayama 1958 The Band Wagon 1953 The Bank Dick 1940 Baraka 1992 Barry Lyndon 1975 The Battle of Algiers 1966 Battleship Potemkin 1925 Beat the Devil 1953 Beauty and the Beast 1946 Being There 1979 Belle de Jour 1967 La Belle Noiseuse 1991 The Best Years of Our Lives 1946 Bicycle Thieves 1948 The Big Heat 1953 The Big Lebowski 1998 The Big Red One 1980 The Big Sleep 1946 The Birth of a Nation 1915 Blade Runner 1982 Blow-Up 1966 The Blue Kite 1993 Bob le Flambeur 1956 Body Heat 1981 Bonnie and Clyde 1967 Breathless 1960 The Bride of Frankenstein 1935 The Bridge on the River Kwai 1957 Bring Me the Head of Alfredo Garcia 1974 Broken Blossoms 1919 Le Boucher 1970 The Cabinet of Dr. Caligari 1920 Cabiria 1914 Caché 2005 Casablanca 1942 Cat People 1942 La Cérémonie 1995 Un Chien Andalou 1929 Children of Paradise 1945 Chimes at Midnight 1965 Chinatown 1974 Chop Shop 2007 A Christmas Story 1983 The Circus 1928 Citizen Kane 1941 City Lights 1931 Cléo from 5 to 7 1962 La Collectionneuse 1967 The Color Purple 1985 Come and See 1985 Contact 1997 The Conversation 1974 Cool Hand Luke 1967 Cries and Whispers 1972 Crimes and Misdemeanors 1989 Crumb 1994 Dark City 1998 Day for Night 1973 Days of Heaven 1978 The Dead 1987 The Decalogue 1989 Departures 2008 Detour 1945 Diary of a Country Priest 1951 Diary of a Lost Girl 1929 The Discreet Charm of the Bourgeoisie 1972 Diva 1981 Do the Right Thing 1989 Dog Day Afternoon 1975 Don&#39;t Look Now 1973 Double Indemnity 1944 The Double Life of Véronique 1991 Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb 1964 Dracula 1931 Duck Soup 1933 E.T. the Extra-Terrestrial 1982 The Earrings of Madame de... 1953 Easy Rider 1969 El Norte 1983 El Topo 1970 The Enigma of Kaspar Hauser 1974 Eternal Sunshine of the Spotless Mind 2004 Exotica 1994 The Exterminating Angel 1962 The Fall of the House of Usher 1928 Fanny &amp;amp; Alexander 1982 Fargo 1996 Faust 1926 The Firemen&#39;s Ball 1967 Fitzcarraldo 1982 Five Easy Pieces 1970 Floating Weeds 1959 Forbidden Games 1952 The 400 Blows 1959 French Cancan 1955 Gates of Heaven 1978 The General 1926 The Godfather 1972 The Godfather: Part II 1974 Goldfinger 1964 Gone with the Wind 1939 The Good, the Bad and the Ugly 1966 GoodFellas 1990 The Gospel According to Matthew 1964 Grand Illusion 1937 The Grapes of Wrath 1940 Grave of the Fireflies 1988 The Great Dictator 1940 Great Expectations 1946 Greed 1924 The Grey Zone 2001 Groundhog Day 1993 The Hairdresser&#39;s Husband 1990 Harakiri 1962 A Hard Day&#39;s Night 1964 Heart of Glass 1976 Hoop Dreams 1994 House of Games 1987 Howards End 1992 The Hustler 1961 Ikiru 1952 In a Lonely Place 1950 In Cold Blood 1967 Inherit the Wind 1960 It&#39;s a Wonderful Life 1946 Ivan the Terrible, Part I 1944 Ivan the Terrible, Part II: The Boyars&#39; Plot 1958 Jaws 1975 JFK 1991 Johnny Guitar 1954 Jules and Jim 1962 Juliet of the Spirits 1965 Killer of Sheep 1978 The Killing 1956 Kind Hearts and Coronets 1949 King Kong 1933 L&#39;Atalante 1934 L&#39;Avventura 1960 L.A. Confidential 1997 La Dolce Vita 1960 The Lady Eve 1941 The Last Laugh 1924 The Last Picture Show 1971 Last Tango in Paris 1972 The Last Temptation of Christ 1988 Last Year at Marienbad 1961 Late Spring 1949 Laura 1944 Lawrence of Arabia 1962 Le Samouraï 1967 Leaving Las Vegas 1995 Leolo 1992 Léon Morin, Priest 1961 The Leopard 1963 The Life and Death of Colonel Blimp 1943 The Life of Oharu 1952 The Long Goodbye 1973 Lost in Translation 2003 M 1931 Magnolia 1999 Make Way for Tomorrow 1937 The Maltese Falcon 1941 A Man Escaped 1956 The Man Who Laughs 1928 The Man Who Shot Liberty Valance 1962 Man with a Movie Camera 1929 The Manchurian Candidate 1962 Manhattan 1979 The Marriage of Maria Braun 1979 The Match Factory Girl 1990 McCabe &amp;amp; Mrs. Miller 1971 Mean Streets 1973 Mephisto 1981 Metropolis 1927 Mishima: A Life in Four Chapters 1985 Mon Oncle 1958 Mon oncle Antoine 1971 My American Uncle 1980 Monsieur Hire 1989 Moolaadé 2004 Moonstruck 1987 Monsieur Hulot&#39;s Holiday 1953 Mulholland Drive 2001 The Music Room 1958 My Darling Clementine 1946 My Dinner with Andre 1981 My Fair Lady 1964 My Man Godfrey 1936 My Neighbor Totoro 1988 Mystery Train 1989 Nanook of the North 1922 Nashville 1975 The Navigator 1924 Network 1976 Night Moves 1975 The Night of the Hunter 1955 Nights of Cabiria 1957 Nosferatu 1922 Nosferatu the Vampyre 1979 Notorious 1946 On the Waterfront 1954 One Flew Over the Cuckoo&#39;s Nest 1975 The Only Son 1936 Ordet 1955 Orpheus 1950 Our Hospitality 1923 Out of the Past 1947 Pale Flower 1964 Pan&#39;s Labyrinth 2006 Pandora&#39;s Box 1929 Paris, Texas 1984 The Passion of Joan of Arc 1928 Paths of Glory 1957 Patton 1970 Peeping Tom 1960 Persona 1966 The Phantom of the Opera 1925 Pickpocket 1959 Picnic at Hanging Rock 1975 Pink Floyd: The Wall 1982 Pinocchio 1940 Pixote 1981 Planes, Trains and Automobiles 1987 PlayTime 1967 The Pledge 2001 A Prairie Home Companion 2006 The Producers 1967 Psycho 1960 Pulp Fiction 1994 Raging Bull 1980 Raiders of the Lost Ark 1981 Raise the Red Lantern 1991 Ran 1985 Rashomon 1950 Rear Window 1954 Rebel Without a Cause 1955 Red Beard 1965 Red River 1948 The Red Shoes 1948 Richard III 1995 Rififi 1955 The Right Stuff 1983 Rio Bravo 1959 Ripley&#39;s Game 2002 Rocco and His Brothers 1960 The River 1951 Romeo and Juliet 1968 The Rules of the Game 1939 Safety Last! 1923 Samurai Rebellion 1967 Sansho the Bailiff 1954 Santa Sangre 1989 Saturday Night Fever 1977 Say Anything... 1989 Scarface 1983 The Scarlet Empress 1934 Schindler&#39;s List 1993 The Searchers 1956 Secrets &amp;amp; Lies 1996 Senso 1954 Se7en 1995 Seven Samurai 1954 The Seventh Seal 1957 Shadow of a Doubt 1943 Shane 1953 The Shawshank Redemption 1994 The Shining 1980 Shoah 1985 The Silence of the Lambs 1991 The Silence 1963 Singin&#39; in the Rain 1952 Smiles of a Summer Night 1955 Snow White and the Seven Dwarfs 1937 Solaris (1972) Some Like It Hot 1959 Souls for Sale 1923 The Spirit of the Beehive 1973 Spirited Away 2001 Spring, Summer, Fall, Winter… and Spring 2003 Stagecoach 1939 Star Wars 1977 Steamboat Bill, Jr. 1928 Strangers on a Train 1951 Stroszek 1977 A Sunday in the Country 1984 Sunrise: A Song of Two Humans 1927 Sunset Boulevard 1950 Superman 1978 Sweet Smell of Success 1957 Swing Time 1936 A Tale of Winter 1992 Taxi Driver 1976 Tender Mercies 1983 The Terrorist 1998 The Thief of Bagdad 1940 The Thin Man 1934 The Third Man 1949 This Is Spinal Tap 1984 The Three Colors Trilogy Through a Glass Darkly 1961 Tokyo Story 1953 Top Hat 1935 Touch of Evil 1958 Touchez Pas au Grisbi 1954 The Treasure of the Sierra Madre 1948 Triumph of the Will 1935 Trouble in Paradise 1932 Ugetsu 1953 Umberto D. 1952 Unforgiven 1992 Vengeance Is Mine 1979 Veronika Voss 1982 Vertigo 1958 Victim 1961 Viridiana 1961 Vivre Sa Vie 1962 Waking Life 2001 Walkabout 1971 Werckmeister Harmonies 2000 West Side Story 1961 What Ever Happened to Baby Jane? 1962 The Wild Bunch 1969 Wings of Desire 1987 Winter Light 1963 Withnail &amp;amp; I 1987 The Wizard of Oz 1939 Woman in the Dunes 1964 A Woman Under the Influence 1974 A Woman&#39;s Tale 1991 Woodstock 1970 WR: Mysteries of the Organism 1971 Written on the Wind 1956 Yankee Doodle Dandy 1942 A Year of the Quiet Sun 1984 Yellow Submarine 1968 Yojimbo 1961  </description>
</item>

     
        <item>
  <title>Eckhart Tolle</title>
  <link>http://www.caloni.com.br/eckhart-toole/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/eckhart-toole/</guid>
  <description>&amp;quot;Aqui e agora: abandone-o, mude-o, ou aceite-o; capte o interior e ele vira exterior; não resista; sem tempo sem problema; fazer igual a acontecer.&amp;quot; (O Poder do Agora)
</description>
</item>

     
        <item>
  <title>Goethe</title>
  <link>http://www.caloni.com.br/goethe/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/goethe/</guid>
  <description>&amp;quot;Não basta saber: temos que aplicar. Não basta querer: temos que fazer.&amp;quot;
&amp;quot;O que não começa hoje nunca termina amanhã.&amp;quot;
</description>
</item>

     
        <item>
  <title>Henry David Thoreau</title>
  <link>http://www.caloni.com.br/henry-david-thoreau/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/henry-david-thoreau/</guid>
  <description>&amp;quot;Viva a vida que você sonhou.&amp;quot;
</description>
</item>

     
        <item>
  <title>Max Ghunter</title>
  <link>http://www.caloni.com.br/max-ghunter/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/max-ghunter/</guid>
  <description>&amp;quot;Preocupação não é doença e o caos não é perigoso: só aposte o que valer a pena e realize cedo demais.&amp;quot; (Os Axiomas de Zurique)
</description>
</item>

     
        <item>
  <title>Rene Descartes</title>
  <link>http://www.caloni.com.br/rene-descartes/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/rene-descartes/</guid>
  <description>&amp;quot;Cada problema que eu resolvo se torna uma regra que serve mais tarde para resolver outros problemas.&amp;quot;
</description>
</item>

     
        <item>
  <title>Stephen King</title>
  <link>http://www.caloni.com.br/stephen-king/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/stephen-king/</guid>
  <description>&amp;quot;Escreva com a porta fechada, reescreva com a porta aberta.&amp;quot; (On Writing)
</description>
</item>

     
        <item>
  <title>Thomas Mann</title>
  <link>http://www.caloni.com.br/thomas-mann/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/thomas-mann/</guid>
  <description>&amp;quot;O escritor é um indivíduo para o qual a escrita é mais dolorosa do que para as outras pessoas.&amp;quot;
</description>
</item>

     
        <item>
  <title>Thomas Piketty</title>
  <link>http://www.caloni.com.br/thomas-piketty/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/thomas-piketty/</guid>
  <description>&amp;quot;A desigualdade não é ruim por si só; decida se ela é justificável.&amp;quot; (Capital in the Twenty-First Century)
&amp;quot;Toda a riqueza do mundo daria para cada um 760 euros.&amp;quot; (Capital in the Twenty-First Century)
</description>
</item>

     
        <item>
  <title>Voltaire</title>
  <link>http://www.caloni.com.br/voltaire/</link>
  <pubDate>2019-09-08</pubDate>
  
  <guid>http://www.caloni.com.br/voltaire/</guid>
  <description>&amp;quot;O trabalho nos livra de três males: tédio, vício, necessidade.&amp;quot;
</description>
</item>

     
        <item>
  <title>Restaurante Nara Lámen</title>
  <link>http://www.caloni.com.br/nara-lamen/</link>
  <pubDate>2019-08-21</pubDate>
  
  <guid>http://www.caloni.com.br/nara-lamen/</guid>
  <description>Quando for pela primeira vez no Nara Lámen, peça apenas o Shyo Lámen Nara. Apenas isso. E aprecie sem pressa.
O caldo não é insosso: é com sutilezas. Beringela não é frescura: é toque autêntico ao prato. O ovo, pelas leis do governo, vem cozido: não culpe o estabelecimento por governantes retardados. O macarrão tem gosto fresco, com textura irregular caseira.
Seu preço é justo, seus atendentes são eficientes e simpáticos. Sempre é bom passar por lá de vez em quando. Nunca é viagem perdida.
</description>
</item>

     
        <item>
  <title>Restaurante Tenda Do Nilo</title>
  <link>http://www.caloni.com.br/restaurante-tenda-do-nilo/</link>
  <pubDate>2019-08-19</pubDate>
  
  <guid>http://www.caloni.com.br/restaurante-tenda-do-nilo/</guid>
  <description>Um almoço com um amigo no meio de um bairro entre a estação Brigadeiro e Paraíso da Paulista. Um daqueles inúmeros restaurantes árabes da região com cara de boteco. Sentei para esperar meu amigo e já fui recebido com simpatia pelo dono do local. Me apresentou o cardápio e nele estava escrito bem na frente: &amp;quot;não servimos esfiha&amp;quot;. De cara já gostei do lugar.
Eles também não aceitam bandeiras de crédito, e de débito apenas Visa. Portanto, vá preparado. Este é um lugar honesto, pequeno e agradável. Não é daquelas padocas que parecem sujas, é realmente agradável. Bem frequentado com lugares dentro e fora. Na hora do almoço pareceu relativamente fácil conseguir lugar.
O prato típico deles, sugestão do senhor que nos atendeu, é o Fatte (ou Fatteh), uma mistura de carne, pão sírio, grão de bico (haviam poucos, contudo) e coalhada (deliciosa, fresca). As comidas de lá são feitas para dividir. &amp;quot;Essa é a ideia&amp;quot;, o senhor confirmou. Há molhos, falafel (que disseram que é muito bom também) e kibe frito, que experimentamos também com muita surpresa. Não é daqueles kibes pesados, é equilibrado com cebola e um sabor diferente.
Eis uma surpresa agradável de bairro sem referência alguma. Talvez eu volte um dia para provar o falafel...
</description>
</item>

     
        <item>
  <title>Restaurante Jojo Ramen</title>
  <link>http://www.caloni.com.br/jojo-lamen/</link>
  <pubDate>2019-08-17</pubDate>
  
  <guid>http://www.caloni.com.br/jojo-lamen/</guid>
  <description>Localizado fora do circuito dos lámens, o Jojo tem tudo o que um millenial precisa para ser feliz: lámen (que tá na moda), fila (que nunca sai de moda) e pessoas comentando o tempo todo, no melhor/pior estilo de paulista, em como é bom esse lugar.
Só não tem comida boa, mas quem é que está interessado nesse detalhe?
Já havia ido alguma vez em um passado distante no Jojo, onde notei que o miojo que eles vendem tem gosto de miojo com sal que você compra no Carrefour Express por 2,99 taoqueis, e por isso havia decidido que já era hora de parar de fazer papel de trouxa. Mas os amigos chamaram, e havia na conversa o miojo de porco, o tonkotsu, que eu tanto gosto do Ikkousha Rámen (esse, sim, na Liberdade, com preço justo e com caldo de porco de verdade; o verdadeiro caldo de mocotó japonês). Com esse diferencial em mãos, pensei: por que não tentar uma segunda vez? Meu papel de trouxa está novinho, e é só cinquenta taoqueis por um miojo e boa companhia.
Indo lá, reserva de mesa para sete, chegamos os seis, faltando apenas um, mas eles não deixam entrar. É um lugar relativamente pequeno para tanto hipster, e eles precisam garantir a qualidade de seus pontos de humilhação nas redes sociais para que ele continue sendo bem falado (esses paulistas...). Enfim, esperamos meia-hora em uma noite de quinta-feira (cerca de 19 horas) até chegar o sétimo membro do grupo, e eles reservam para nós duas mesas: uma com cinco lugares (um senta na ponta) e a segunda para duas pessoas, &amp;quot;logo do ladinho&amp;quot;, atravessando o corredor cheio de atendentes correndo de um lado para outro. Porém, devido à fome geral e o horário tarde para uma quinta-feira, lá fomos nós.
Em nenhum lugar se diz, mas espera-se que você peça logo, coma logo, pague logo. Eles querem faturar, não apenas lotar as redes sociais com likes e reviews com fotos porque este lugar tem uma privada no banheiro super-descolada. Já sabíamos o que seria pedido: o tal tonkotsu. De entrada uns frango karaague.
O karaguê chegou primeiro naquele estilo de frangos alienígenas bombadões levantadores de barra e frequentadores assíduos de crossfit: super gordões. Fizeram o treinamento do KFC, certeza. Já o tempero, vem parecendo jogado em cima, uma química que lembra aquelas comidas do Mc Donald&#39;s. Se vendessem no restaurante com o M na frente, aliás, já teriam um nome mais chamativo: Mc Karaguê. Seco e temperado na medida para quem não presta atenção no sabor autêntico de maturação em gengibre e shoyo que um verdadeiro karaguê deveria ter.
Próximo prato: tonkotsu, ou miojo de massa feita na hora com caldo de porco, em qualquer variação possível disso. Ele chegou rápido, sendo servido às pressas (como tudo que é feito lá). Em um prato um macarrão frio com um pedaço de limão, em uma cumbuca um monte de bacon flutuando em um molho que parecia um vinagrete bem salgado com cebolinha flutuando (sempre a cebolinha), muita gordura e eu comentei já com muito sal? A pegada do lugar é o seguinte: molha o macarrão na cumbuca e coloque na boca, se preferir colocando um pouco de limão para soltar a massa antes de assim proceder. É um prato de verão, mas estávamos no friozinho do inverno.
Eu comi das diferentes formas que se pode comer este prato: joguei o caldo por cima do macarrão do prato, joguei o macarrão dentro da cumbuca de mar salgado, agarrei um pedaço super-salgado de bacon com um monte de macarrão. Nenhum deles funcionou muito bem, pois o sal usado nessa mistura me lembrará para sempre de quão desagradável é comprar bacon mal curado em mercadinho, daqueles que tem um pouco de gordura além do aceitável e com tantos condimentos usados no maldito porco que a quantidade de sal é explosiva. Eu poderia jurar que o glutamato monossódico estava comendo solto no meu estômago.
Eu posso dizer agora que já tenho mais experiência em Jojo Rámen. Posso dizer que é muito interessante o conceito de Mc Donald&#39;s que cobra o olho da cara para que se forme a fila de hipsters na frente e que se trate com pressa seu cliente. Mas, tirando as pequenas reclamações que fiz neste posts, acho importante frisar que a comida não precisa ser boa para refeições com bons amigos. Isso é detalhe, mesmo, se for pensar no que ganha pelo social. Mas se gosta de um bom prato, essa é a única diversão que não terá no Jojo Rámen. Se preferir, na volta para casa passe no Express e pega aquele miojo de frango &amp;quot;caipira&amp;quot;. Pelo menos é barato.
</description>
</item>

     
        <item>
  <title>Anti-Spoilers e o Escudo Pró-Hype</title>
  <link>http://www.caloni.com.br/anti-spoilers-e-o-escudo-pro-hype/</link>
  <pubDate>2019-07-20</pubDate>
  
  <guid>http://www.caloni.com.br/anti-spoilers-e-o-escudo-pro-hype/</guid>
  <description>Este texto não possui começo nem fim. Ele é uma mera continuação, assim como as da Marvel, que vai se perder no tempo e no espaço. Mas enquanto estamos aqui e enquanto você está disposto a ler sobre o ponto de vista de um velho: eu me lembro de uma época em que o lançamento de um blockbuster era um evento anual. Eu me lembro porque eu vivi essa época, então analiso a realidade atual sob a ótica de alguém que sentiu a mudança surgindo até um momento que o contraste ficou aparente demais para não ser notado.
Comecemos com o tradicional advérbio de velho: &amp;quot;antigamente&amp;quot;, quando nossos pais nos levavam para assistir filmes no cinema sem ou com pouca pipoca, quando no espaço inteiro de uma infância víamos meia-dúzia de filmes, lançamentos como De Volta para o Futuro 2 era O evento, ápice do ápice, para não ser notado e comentado.
Porém, diferente de hoje, esse evento não era antecedido por meses e meses de espera ansiosa. Por quê? Bom, em primeiro lugar porque nós nem sabíamos que esse evento existiria. Não havia internet; apenas jornais noticiando brevemente, e isso nas últimas semanas antes da estreia. Nos jornais impressos (você ainda lembra o que é isso?) as críticas surgiam um pouco antes do dia D, e apenas na edição de domingo. Havia, portanto, uma surpresa legítima para uma produção que gasta em média um ano entre ser idealizada e produzida, seguida por pelo menos alguns meses em cartaz até o próximo arrasa-quarteirões (curiosidade inútil: essa é a nossa aportuguesada expressão de blockbuster, que nos anos 90 virou também no Brasil o nome da novidade entre as locadoras de VHS; PS: não vou explicar o que é VHS: Google for it).
Naquela época os bons filmes também se destacavam pelo que eles eram: roteiros coerentes e completos, com começo, meio e fim. Ironicamente De Volta para o Futuro 2 não é uma história completa, mas uma continuação, que foi filmada junto de uma segunda continuação que finalizaria uma trilogia [1]. O exemplo de uma continuação bem-sucedida vem bem a calhar para eu explicar que o problema que estou analisando não é sobre continuações, que sempre existiram, mas sobre as serialização de filmes que não pediriam por continuações se não tivessem sido concebidos como capítulos de uma série em primeiro lugar. O exemplo mais marcante do momento são os famigerados filmes da Marvel [2], que nunca começam nem terminam e, por conta disso, são menos do que incompletos: são incoerentes.
Roteiros coerentes entregam para o espectador, mesmo que em uma continuação, o início de um conflito, seu desenvolvimento e sua resolução. Ao final da catarse cinematográfica íamos todos de volta para casa satisfeitos pela experiência e dispostos a ver de novo se tivéssemos gostado muito, o que geralmente era o que acontecia um ano depois, na TV, pois os filmes que eram assistidos no cinema eram escolhidos a dedo, baseados em boca-a-boca ou baseados na opinião de algum conhecido metido a intelectual que lia a coluna de Luis Carlos Merten no Estadão ou aquele outro cara da Folha. Roteiros incoerentes dividem nossa atenção entre diferentes histórias. Há o Homem-Aranha e seu conflito em crescer, mas há os interesses da Shield, há as consequências de Vingadores: O Ultimato, há os outros heróis que precisam ser engavetados para não interferir nesta história. Há muitos poréns que devem se encaixar, e nem todos eles conseguirão nos satisfazer.
Compare os dois extremos. De um lado um ou dois filmes por ano de sensação entregues sem muita expectativa mas muito resultado. A surpresa de haver um filme novo que gostaríamos de ver era o primeiro prazer que o filme proporcionaria, seguido talvez de comentários de alguém que já viu o filme, eventualmente com alguns pontos-chave e possivelmente até com o final, se a pessoa não achasse que isso iria estragar a experiência do ouvinte. E, finalmente, o prazer final de estar no escurinho no cinema testemunhando um dos momentos máximos de quem desejava a experiência pela experiência.
No outro extremo, cerca de duas dezenas de arrasa-quarteirões sendo lançados todo ano. Todos eles já possuem cronograma antes do início do projeto, mesmo que não se tenha ideia da história por trás, já que a história é a menor das preocupações dos grandes estúdios. Isso acontece porque são continuações, remakes, spin-offs e adaptações já adquiridas. Há um cálculo tão meticuloso neste produto que nos EUA sabe-se a data exata da estreia de todos esses filmes (no Brasil não: há poucas salas e é um caos mercadológico). Durante um ano ou dois acompanhamos entrevistas com os produtores, atores, diretores, qualquer um que queira falar um pouquinho que seja sobre o que virá e esteja autorizado. Nossa sede por novidade é alimentada antes mesmo da concepção do filme, ainda em seu estado larva, sendo artisticamente especulado, testes de atores, teorias de fãs.
&amp;quot;Quando eu era criança, falava como criança, pensava como criança, raciocinava como criança&amp;quot; e adoraria testemunhar o surgimento de tantos filmes de super-heróis maravilhosamente produzidos pelos milagres da computação em tempo recorde em uma quantidade e velocidade próximas dos próprios gibis que os originaram. Porém, &amp;quot;desde que me tornei homem, eliminei as coisas de criança&amp;quot;. No mundo atual do entretenimento infantil para adultos com dinheiro de sobra, os momentos mágicos que antes se limitavam a dois ou três por ano do qual elas irão se lembrar daqui a 10, 20 anos como eu me lembro se tornaram uma versão audiovisual da pipoca amanteigada que adoramos mastigar na mesma sala onde consumimos efeitos que nos anestesiam pela mais nova tecnologia 3D e som surround. E algumas poltronas até chacoalham. Mas infelizmente deixei as coisas de criança para trás.
Quando digo que esses espectadores ficam anestesiados eu digo de uma forma positiva, mas com um efeito negativo. É positivo sentir a pura emoção de uma luta, uma perseguição, explosões, movimentos frenéticos e nossos super-heróis vivendo momentos fantásticos em suas aventuras, mas é negativo quando a única coisa que os filmes hoje em dia têm a oferecer é basicamente isso empacotado em uma trama que pode ser resumida em uma pequena discussão entre os antagonistas, um mal-entendido que seja, que é resolvido em meio às explosões, fogo e fumaça como se não fosse nada demais. Não me parece mais aquele momento memorável em que Marty McFly e Emmett Brown decidem que precisam voltar a 1955 e resgatar o almanaque de ambas as versões dos Biffs, fazendo com que McFly entre novamente na festa de formatura de seus pais e vendo sua primeira versão que viajou no tempo arrasando na guitarra.
E se De Volta Para o Futuro 2 tivesse estreado esse ano, nesse momento você me acusaria de soltar um belo de um spoiler, estragando completamente a surpresa deste filme, quando ironicamente o motivo desse filme de Robert Zemeckis ser tão icônico ainda hoje é que mesmo sabendo de toda sua história de cabo a rabo assisti-lo novamente gera sensações igualmente positivas, embora não as mesmas, pois já sabemos o que acontece no filme. O que permanece é a estrutura do seu roteiro traduzida em uma direção impecável, que nos faz olhar a viagem no tempo de diversos ângulos e quando menos nos damos conta estamos descobrindo algo que não tínhamos visto nas 20 vezes anteriores que assistimos ao filme.
O que aconteceria se você assistisse por 20 vezes, por exemplo, Homem Aranha: Longe De Casa, lançamento deste mês? Provavelmente lá pela quinta vez você saberia a história de cabo a rabo, talvez até os diálogos, e no lugar de novas sensações revendo as cenas o filme entregaria um vazio existencial. Isso porque não há beleza inerente na estrutura de seu roteiro, que segue fórmulas já inventadas há décadas pela TV para nos manter interessados em uma história que é passageira e que apenas nos transporta de uma cena de ação para a próxima.
O que mantém o interesse nesses inúmeros filmes que são lançados todo ano é justamente as dezenas de trailers, teasers, entrevistas e teorias sobre como será o filme que ainda não foi visto. Há tantas possibilidades já pensadas e repensadas que surge um paradoxo: os que mais acompanham as expectativas da produção são os que mais se revoltam quando alguém lhes diz algo que não foi ainda citado em todo material de divulgação disponibilizado antes da estreia. Você pode dizer tudo o que foi dito pela imprensa para um amigo que se comporta da mesma maneira em relação aos próximos filmes, mas, por favor, não revele aquela reviravolta mortal, ainda que ela seja boba, previsível e completamente esquecida antes do final dos créditos. O que aconteceu com a indústria para produzir filmes em que o prazer racional de assisti-los é tão escasso que a experiência pela experiência acabou se tornando o que menos importa no final das contas? Como cereja do bolo, o clímax da história é visto tão de passagem que os espectadores ainda aguardam por uma cena boba após os créditos, como uma forma de prêmio de consolação por vir ao cinema captar aqueel último fiapo de mistério que restava sobre o filme.
Para uma geração que consome todos seus filmes antes de realmente vê-lo, o spoiler é uma arma letal. Ele queima esse último fiapo de mistério antes da experiência cinematográfica, sem o qual o filme perde completamente seu valor de mercado, um valor que já não era muita coisa, pois daqui a algumas semanas já é lançado novo arrasa-quarteirões, que hoje em dia está mais para chuta o portão do vizinho. É uma regra de ouro entre o novo público que os dados de uma estreia da semana fiquem em sigilo. Nem que seja por alguns meses após a estreia. Até porque a próxima estreia irá revelar inevitavelmente o desenrolar da história. E é claro que será uma continuação.
 [1] https://en.wikipedia.org/wiki/Back-to-back_film_production [2] https://en.wikipedia.org/wiki/Marvel_Cinematic_Universe  </description>
</item>

     
        <item>
  <title>Como Publicar Seu Blog Em Hugo Para Ebook</title>
  <link>http://www.caloni.com.br/como-publicar-seu-blog-em-hugo-para-ebook/</link>
  <pubDate>2019-07-10</pubDate>
  
  <guid>http://www.caloni.com.br/como-publicar-seu-blog-em-hugo-para-ebook/</guid>
  <description>Eu publico meu blog inteiro de tempos em tempos para um ebook que construo formatando primeiro em html através de um tema do Hugo, o parser de blog que estou usando no momento porque ele suporta 2500 posts sem reclamar. É uma receita simples de sucesso se você precisar ter todo seu conteúdo indexado para rápida referência ou leitura cronológica.
A primeira coisa a ser feita é preparar um tema para formatar seu html. Eu já tenho um linkado no meu blogue e que precisa apenas formatar o index.html, pois todo o conteúdo e índices estarão lá. Segue um exemplo atual que uso. Ele possui índice alfabético, inclusão de um arquivo-diário que mantenho, listagem das categorias (com índices para cada uma delas) e listagem cronológica (e link para pular direto para o conteúdo).
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Blogue do Caloni&amp;lt;/title&amp;gt;&amp;lt;meta http-equiv=&amp;#34;content-type&amp;#34; content=&amp;#34;text/html; charset=utf8&amp;#34;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body style=&amp;#34;min-height:100vh;display:flex;flex-direction:column&amp;#34;&amp;gt;&amp;lt;section class=&amp;#34;section&amp;#34; style=&amp;#34;flex:1&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;columns&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;column&amp;#34;&amp;gt;&amp;lt;h2 id=&amp;#34;begin&amp;#34; style=&amp;#34;page-break-before: always;&amp;#34;&amp;gt;Índices&amp;lt;/h2&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#daytoday&amp;#34;&amp;gt;DayToDay&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#idx&amp;#34;&amp;gt;Alfabético&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;{{ $letters := split &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34; &amp;#34;&amp;#34; }}{{ range $letters }}&amp;lt;a href=&amp;#34;#letter{{ . }}&amp;#34;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#cat&amp;#34;&amp;gt;Categorias&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;ul&amp;gt;{{ range $key, $value := .Site.Taxonomies.categories }}&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#{{ $key }}&amp;#34;&amp;gt;{{ $key | humanize }}({{ len $value }})&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;{{ end }}&amp;lt;/ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#posts&amp;#34;&amp;gt;Data (ir para Conteúdo)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;ul&amp;gt;{{ range .Site.RegularPages }}&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#{{ .UniqueID }}&amp;#34;&amp;gt;{{ .Title }} &amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;{{ end }}&amp;lt;/ul&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;h2 id=&amp;#34;daytoday&amp;#34; style=&amp;#34;page-break-before: always;&amp;#34;&amp;gt;DayToDay&amp;lt;/h2&amp;gt;&amp;lt;pre&amp;gt; {{readFile &amp;#34;..\\caloni.txt&amp;#34;}} &amp;lt;/pre&amp;gt;&amp;lt;h2 id=&amp;#34;idx&amp;#34; style=&amp;#34;page-break-before: always;&amp;#34;&amp;gt;Índice Alfabético&amp;lt;/h2&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;!-- create a list with all uppercase letters --&amp;gt;{{ $letters := split &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34; &amp;#34;&amp;#34; }}&amp;lt;!-- range all pages sorted by their title --&amp;gt;{{ range .Data.Pages.ByTitle }}&amp;lt;!-- get the first character of each title. Assumes that the title is never empty! --&amp;gt;{{ $firstChar := substr .Title 0 1 | upper }}&amp;lt;!-- in case $firstChar is a letter --&amp;gt;{{ if $firstChar | in $letters }}&amp;lt;!-- get the current letter --&amp;gt;{{ $curLetter := $.Scratch.Get &amp;#34;curLetter&amp;#34; }}&amp;lt;!-- if $curLetter isn&amp;#39;t set or the letter has changed --&amp;gt;{{ if ne $firstChar $curLetter }}&amp;lt;!-- update the current letter and print it --&amp;gt;{{ $.Scratch.Set &amp;#34;curLetter&amp;#34; $firstChar }}&amp;lt;h3 id=&amp;#34;letter{{ $firstChar }}&amp;#34;&amp;gt;{{ $firstChar }}&amp;lt;/h3&amp;gt;{{ end }}&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#{{ .UniqueID }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;{{ end }}{{ end }}&amp;lt;/ul&amp;gt;&amp;lt;h2 id=&amp;#34;cat&amp;#34; style=&amp;#34;page-break-before: always;&amp;#34;&amp;gt;Índice por Categoria&amp;lt;/h2&amp;gt;&amp;lt;ul&amp;gt;{{ range $taxonomyname, $taxonomy := .Site.Taxonomies }}{{ if eq &amp;#34;categories&amp;#34; $taxonomyname }}{{ range $key, $value := $taxonomy }}&amp;lt;h3 id=&amp;#34;{{ $key }}&amp;#34;&amp;gt;{{ $key | humanize }}&amp;lt;/h3&amp;gt;&amp;lt;ul&amp;gt;{{ range $value.Pages }}&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#{{ .UniqueID }}&amp;#34;&amp;gt;{{ .Title }} &amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;{{ end }}&amp;lt;/ul&amp;gt;{{ end }}{{ end }}{{ end }}&amp;lt;/ul&amp;gt;&amp;lt;h2 id=&amp;#34;posts&amp;#34; style=&amp;#34;page-break-before: always;&amp;#34;&amp;gt;Conteúdo&amp;lt;/h2&amp;gt;{{ range .Site.RegularPages }}&amp;lt;h3 style=&amp;#34;page-break-before: always&amp;#34; id=&amp;#34;{{ .UniqueID }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h3&amp;gt; {{ dateFormat &amp;#34;2006-01-02&amp;#34; .Date }} {{ .Content }}{{ partial &amp;#34;taglist.html&amp;#34; . }}{{ end }}&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/section&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Como eu uso Kindle eu construo a partir desse html um arquivo .mobi, mas creio ser simples de construir qualquer outro formato através desse html final. No caso do Kindle preciso de alguns arquivos para usar o kindlegen (a ferramenta da Amazon) que mantenho na pasta static do hugo, como o .ncx e o .opf (além da capa, cover.jpg). Uso uma batch muito pequena para fazer todos os passos e copiar o .mobi resultante para meu Kindle (conectado por um cabo USB e com um drive montado em K:).
rem @echo off hugo -D --theme book --destination bookpushd bookrem iconv -f UTF-8 -t LATIN1 index.html &amp;gt; book.html cp index.html book.htmlkindlegen.exe book.opf -o caloni.mobiif exist k:\ copy /y caloni.mobi k:\documentspopdImportante lembrar que a codificação do hugo (utf8) deve bater com a codificação esperada pelo gerador de ebook. Que me lembre não há muito mais segredos. Basta escrever e de vez em quando rodar o script novamente =)
</description>
</item>

     
        <item>
  <title>Dixit (Jogo)</title>
  <link>http://www.caloni.com.br/dixit-jogo/</link>
  <pubDate>2019-05-20</pubDate>
  
  <guid>http://www.caloni.com.br/dixit-jogo/</guid>
  <description>Uma festa com karaokê e jogos de mesa. O que pode surgir de interessante em um cenário millenial como esse? Um jogo de cartas que em sua simplicidade revela um intrincado sistema que soluciona todos os problemas que outros jogos de mesa costumam ter.
Dixit é um jogo de cartas ilustradas que os competidores ficam em mãos e usam em toda rodada. Em cada rodada um deles vira o &amp;quot;narrador&amp;quot; e usa uma frase para descrever a carta que escolheu. Todos os outros competidores escolhem suas cartas que melhor se encaixam na descrição do narrador e sem saber qual a carta de cada um o objetivo é ter sua carta escolhida pelos outros.
Porém -- e aí está o ponto-chave do jogo -- se a carta do narrador não for escolhida por ninguém ou for escolhida por todos ele não ganha pontos. O objetivo do jogo é incentivar nosso lado subjetivo e fazer com que apenas algumas pessoas te sigam nesse jogo de metáforas, enquanto outras não. E do ponto de vista dos outros jogadores o objetivo é que através de uma descrição que você não tem controle você escolha a melhor carta que se encaixe.
A beleza do jogo está que as cartas em si podem significar muitas poucas palavras inequívocas, mas o narrador poderia detalhar completamente sua carta e perderia, ou poderia usar um termo muito vago e também perderia. O jogo incentiva não uma concordância total entre os jogadores, mas festeja a multiplicidade de visões. E além disso resolve uma série de problemas que jogos costumam ter.
Resolve a universalidade, já que não há qualquer relação nem verbal nem cultural com as cartas em si, apenas com seus jogadores, e o sistema de votos usa simples números, outro traço universal. E ao mesmo tempo, se tratar-se de um grupo culturalmente diverso, explora as diferentes formas de cada pessoa enxergar os significados que as cartas podem ter. O jogo se torna até mais interessante quanto mais diverso for o grupo.
Por depender unicamente da visão dos participantes do jogo ele também resolve a questão da idade (biológica ou mental), pois grupos de idades diferentes terão uma dinâmica diferente. Crianças e jovens usarão descrições das cartas de uma maneira completamente diferente dos mais velhos. Seja um grupo unicamente de velhos ou de jovens isso deve funcionar bem. Porém, mais uma vez, na diversidade de idades é que o jogo deve brilhar mais. Onde jogos geralmente perdem a graça quando são jogados por pessoas com idades e capacidades diferentes aqui o desafio é justamente o diálogo entre os dois mundos.
Conforme jogos vão sendo jogados pelas mesmas pessoas cria-se o vício e logo torna-se manjado ganhar. Porém, em Dixit isso não ocorre, pois aquelas pessoas vão evoluindo a compreensão uns dos outros juntas. Então o mesmo conjunto de cartas vai servindo para diferentes formas de enxergá-las dos mesmos jogadores em níveis diferentes de experiência com o jogo. Com isso Dixit resolve o problema da novidade, enquanto que ao mesmo tempo permite a vinda de novas cartas, que não precisam se relacionar de uma maneira especial (apenas na mente dos participantes).
Por fim, por incentivar a participação em seu núcleo, permitindo que todos ganhem pontos e interajam de maneira ativa em cada rodada, Dixit resolve também o problema da espera, em que muitos jogos os participantes ficam aflitos esperando a sua vez de jogar, que geralmente é o momento mais empolgante. Não nesse jogo. Todo momento é empolgante sempre, o que torna este o estado da arte do entretenimento de mesa. Simples, universal, participativo e criativo.
</description>
</item>

     
        <item>
  <title>Coroutines Em C: Picoro</title>
  <link>http://www.caloni.com.br/coroutines-em-c-picoro/</link>
  <pubDate>2019-05-08</pubDate>
  
  <guid>http://www.caloni.com.br/coroutines-em-c-picoro/</guid>
  <description>Tantas linguagens hoje em dia tentando implementar a abstração de corrotinas e inserindo mais camadas de abstração (fibras e cereais)... há duas implementações já no Boost, ambas dependendo de uma biblioteca de contexto de stack que é dependente de arquitetura (programada em Assembly).
E aqui está a linguagem C com sua elegância, minimalismo e a filosofia &amp;quot;just works&amp;quot;, por mais ou menos 50 anos.
Estava pesquisando sobre bibliotecas de corrotinas em C e encontrei a Picoro, de Tony Finch. O repositório pode ser baixado por este link. Três coisas me encantaram nela:
 portabilidade (fácil de testar em qualquer arquitetura). simplificade (um header e um .c com menos de 200 linhas, e a maioria são comentários). manutenção (o último commit é de 2010, ou seja, ninguém mais mexeu nela por nove anos).  Ela é uma biblioteca feita para resolver o problema mais básico de toda corrotina: troca de contexto. Isso é feito de maneira descentralizada, embora ela inicie com uma corrotina principal: a primeira que constrói uma corrotina. A partir dessa é possível criar outras e dar resume em qualquer uma delas que não tenha terminado.
A linguagem C já implementa troca de contexto através das funções padrão setjmp e longjmp. Há um tipo dependente de arquitetura, jmp_buf, que é usado para guardar o contexto. O salto é feito no estilo da função fork do Unix, ou seja, não há inclusão de mais nenhuma sintaxe diferente do usual: é um if que retorna 0 (contexto principal) ou não-0 (estamos em outro contexto).
O picoro organiza tudo isso em torno de uma lista ligada. Aliás, de duas listas ligadas: running e idle, onde o head de cada uma delas é usado para verificar se há corrotinas paradas ou em execução. Há algumas regras básicas para que tudo funcione. Por exemplo, uma corrotina que já foi executada até o final ou que está bloqueada pela chamada de resume não pode ser posta para rodar.
Vamos começar com um exemplo simples: apenas um corrotina que recebe um inteiro e incrementa três vezes. A cada vez que ele incrementa ele devolve o controle de execução via yield. O main cria três dessas corrotinas e dá resume em cada uma delas três vezes, finalizando a execução de todas. Ao final, o counter final é de 9.
#include &amp;#34;..\picoro\picoro.h&amp;#34;#include &amp;lt;stdio.h&amp;gt;void* mycoroutine(void* arg){int* counter = (int*) arg;(*counter) &#43;= 1;yield(arg);(*counter) &#43;= 1;yield(arg);(*counter) &#43;= 1;return arg;}int main(){int counter = 0;int i;coro coroutines[3];int maxi = sizeof(coroutines) / sizeof(coro);for (i = 0; i &amp;lt; maxi; &#43;&#43;i)coroutines[i] = coroutine(mycoroutine);for (i = 0; i &amp;lt; maxi; &#43;&#43;i)resume(coroutines[i], &amp;amp;counter);for (i = 0; i &amp;lt; maxi; &#43;&#43;i)resume(coroutines[i], &amp;amp;counter);for (i = 0; i &amp;lt; maxi; &#43;&#43;i)resume(coroutines[i], &amp;amp;counter);printf(&amp;#34;final counter: %d\n&amp;#34;, counter);return 0;}É importante observar que o uso de troca de contexto pode facilmente consumir a pilha, pois ela está sendo compartilhada com muitas funções em paralelo. Para reservar espaço a coroutine_start aloca um array de 16 KB (fixo). Esses detalhes de implementação podem ser alterados, pois a biblioteca é tão mínima e simples de entender que construir qualquer coisa em cima dela é trivial.
</description>
</item>

     
        <item>
  <title>Visual Studio Unit Test (C&#43;&#43;)</title>
  <link>http://www.caloni.com.br/visual-studio-unit-test/</link>
  <pubDate>2019-05-06</pubDate>
  
  <guid>http://www.caloni.com.br/visual-studio-unit-test/</guid>
  <description>Desde o Visual Studio 2015 há suporte a unit tests em C&#43;&#43; automatizado na IDE. Porém, a partir do VS 2017 15.5 o suporte aumentou drasticamente, vindo embutidos os suportes para as bibliotecas de teste Google Test, Boost.Test e CTest. Além, é claro, do Microsoft Unit Testing Framework for C&#43;&#43;, o caseiro da M$.
Além disso, é possível você mesmo integrar o Visual Studio com outra lib de testes. Mas para que gastar tempo? Várias integrações já estão disponíveis no Visual Studio Marketplace. Ligue já!
OK, parei com o merchan. Até porque não ganho nada com isso. Vamos ao código.
Pelo Wizard do VS podemos criar para um projeto C&#43;&#43; qualquer um projeto de teste. No momento estou vendo os tipos de projeto Native Unit Test e Google Test.
Este é nosso projeto de exemplo:
#include &amp;#34;CalculatorTabajara.h&amp;#34;int soma(int x, int y){return x &#43; y;}int subtrai(int x, int y){return x - y;}int multiplica(int x, int y){return x * y;}int divide(int x, int y){return x / y;}int main(){}Para conseguir testar o projeto principal adicione-o como referência.
Após isso basta incluir algum header que contenha os tipos, funções, classes e métodos que deseja testar e vá criando métodos de teste dentro da classe de exemplo:
#include &amp;#34;pch.h&amp;#34;#include &amp;#34;CppUnitTest.h&amp;#34;#include &amp;#34;..\CalculatorTabajara.h&amp;#34;using namespace Microsoft::VisualStudio::CppUnitTestFramework;namespace UnitTest1{TEST_CLASS(UnitTest1){public:TEST_METHOD(TestaSoma){int z = soma(3, 2);Assert::AreEqual(z, 5);}TEST_METHOD(TestaSubtracao){int z = subtrai(3, 2);Assert::AreEqual(z, 1);}TEST_METHOD(TestaMultiplicacao){int z = multiplica(3, 2);Assert::AreEqual(z, 6);}TEST_METHOD(TestaDivisao){int z = divide(3, 2);Assert::AreEqual(z, 1);}};}Agora abrindo o jogo para você, amigo programador C&#43;&#43; que gosta de saber tudo que ocorre debaixo dos panos:
 Um projeto Unit Test é apenas uma DLL com uns códigos de template. Esse código já adiciona a lib de unit test da Microsoft e cria uma classe com exemplo de uso. Adicione todo código do projeto original que ele precisa para compilar.  Por isso eu tirei a tranqueira de precompiled header do projeto de unit test, retirei a referência (sugestão do tutorial da Microsoft) e apenas adicionei o mesmo cpp para ser compilado.
Agora mais mágica: se você abrir a janela Test Explorer ele irá encontrar seus testes e enumerá-los!
Se você já programou um pouco em Windows com C&#43;&#43; já deve saber o truque: como o Unit Test é uma DLL ela simplesmente exporta os símbolos necessários para que o Visual Studio encontre o que precisa. O básico que um plugin dos velhos tempos faz: exportar interfaces com um pouco de reflection.
Se você habilitar Undecorate C&#43;&#43; Functions no Dependency Walker verá que ele exporta justamente uma espécie de reflection, na forma de structs:
E se você prestar atenção na ordem de exportação desse símbolos verá que o primeiro se chama GetTestClassInfo. Acabou a magia, não é mesmo?
Os headers e fontes do CppUnitTest ficam em paths do Visual Studio como VC\Auxiliary\VS\UnitTest, nas pastas include e lib. Nele é possível dar uma olhada no significado das macros e das classes disponibilizadas. Logo abaixo das macros, no arquivo principal, é possível ver como funciona o reflection:
namespace Microsoft{ namespace VisualStudio {namespace CppUnitTestFramework{struct ClassMetadata{const wchar_t *tag;const unsigned char *helpMethodName;const unsigned char *helpMethodDecoratedName;};struct MethodMetadata{const wchar_t *tag;const wchar_t *methodName;const unsigned char *helpMethodName;const unsigned char *helpMethodDecoratedName;const wchar_t *sourceFile;int lineNo;};struct ModuleAttributeMetadata{enum AttributeType { MODULE_ATTRIBUTE };const wchar_t *tag;const wchar_t *attributeName;//...É uma lib pequena e elegante que permite uma interação não apenas com a IDE, como poderia ser automatizada por um script, uma vez que sabe-se o funcionamento interno e algumas interfaces.
</description>
</item>

     
        <item>
  <title>OpenSSH no Windows</title>
  <link>http://www.caloni.com.br/openssh-windows/</link>
  <pubDate>2019-04-29</pubDate>
  
  <guid>http://www.caloni.com.br/openssh-windows/</guid>
  <description>O Secure Shell (SSH) é um protocolo de sucesso nos unixes da vida para terminal remoto e seguro por décadas, mas no Windows nunca houve uma forma simples e protegida de abrir um terminal ou copiar arquivos. A opção é instalar um cygwin com esse componente ou tentar compilar um protocolo SSL e em cima dele o SSH. Porém, há detalhes na autenticação que estão relacionadas com o Sistema Operacional e que precisa ser feito. O OpenSSH é uma maneira de compilar tudo isso e ainda funcionar no Windows.
O software WinSCP, um client SFTP para Windows, possui um guia sobre como instalar essa opção no Windows. A partir do Windows Server 2019 e Windows 10 1809 isso não será mais necessário, pois já estará disponível entre as ferramentas opcionais instaláveis do SO (Apps &amp;gt; Apps &amp;amp; features &amp;gt; Manage optional features, &amp;quot;OpenSSH server&amp;quot;). Para os que ainda precisam manter o passado há uma maneira.
Se você preferir não compilar a partir dos fontes você pode baixar um pacote dos binários pelo GitHub. Basta extrair tudo para uma pasta e rodar o script PowerShell de instalação e o serviço sshd estará instalado no modo manual (se você já usou o cygwin sabe que o nome é o mesmo). O local indicado para conter os arquivos é em C:\Program Files\OpenSSH, conforme o tutorial do WinSCP.
Após instalado você deve abrir a porta 22 pelo firewall do Windows (há uma maneira PowerShell de fazer se tiver um Windows novo ou usar a interface mesmo se tiver um antigo). Após esse último passo tudo deverá estar funcionando, e basta criar seu par de chaves pública/privada com o ssh-keygen.exe e adicionar no servidor com ssh-add.exe, além de copiar para um arquivo chamado authorized_keys... enfim, está tudo no tutorial.
Menos a parte de mudar o sshd_config.
Como nos informa um post do Stack Overflow, é preciso comentar no arquivo c:\programdata\ssh\ssh_config, próximo do final, essas duas linhas:
Match Group administratorsAuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keysPara isso:
#Match Group administrators# AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keysAí, sim. Reiniciar, o serviço e testar a conexão:
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no domain\user@hostOs programas ssh.exe (shell remoto) e scp.exe (cópia remota de arquivos) também estão disponíveis no pacote OpenSSH, mas a versão do Cygwin ou até do Git (que vem com um pacote de ferramentas básicas de Linux) funcionam.
Serviço de cópia remota de arquivos Se seu objetivo é realizar backups remotos silenciosos e para isso você instalar um serviço que irá executar o scp.exe de tempos em tempos é preciso tomar cuidado com as credenciais usadas e onde estarão as chaves de criptografia. O padrão usado pelo OpenSSH no Windows é na pasta C:\Users\Usuário\.ssh, mas para um processo na conta de sistema esse valor deve ser diferente. No caso de um terminal executando pelo psexec.exe ele ficou apontando para c:\windows\system32\.ssh, mas para serviços rodando como SYSTEM é capaz que seja outro valor. Enfim, é necessário testar e verificar os resultados dos testes.
</description>
</item>

     
        <item>
  <title>Décimo-Quarto Encontro CCPP42BR</title>
  <link>http://www.caloni.com.br/14-encontro-ccppbr/</link>
  <pubDate>2019-04-19</pubDate>
  
  <guid>http://www.caloni.com.br/14-encontro-ccppbr/</guid>
  <description>Foi definido recentemente no nosso grupo de Telegram que nosso próximo encontro será realizado na cidade de São Paulo no dia 6 de julho de 2019. Como nossa última tentativa falhou miseravelmente por falta de inscrições suficientes estaremos iniciando a organização primeiro pelas incrições, e, havendo quórum, será feita alocação de sala(s) e coffee-break. Em paralelo iniciaremos o call for papers, onde você é convidado a palestrar em nosso encontro.
 Quando: 06 (seis) do 07 (julho) de 2019. Onde: São Paulo, Capital. Onde exatamente: a ser definido.  As inscrições terão o preço inicial definido em R$ 30,00 (trinta taoqueis). O pagamento poderá ser feito pelo PagSeguro. Se está interessado em palestrar envie sua proposta na página do CFP. Se atente às datas limites para envio do abstract e do conteúdo. Vá no site oficial do grupo para ficar antenado das últimas atualizações sobre o evento.
</description>
</item>

     
        <item>
  <title>Code Jam 2019 Qualification Round</title>
  <link>http://www.caloni.com.br/code-jam-2019-qualification-round/</link>
  <pubDate>2019-04-07</pubDate>
  
  <guid>http://www.caloni.com.br/code-jam-2019-qualification-round/</guid>
  <description>Estou viajando e com poucas horas de acesso a um computador, mas os dois primeiros desafios do Code Jam esse ano foram tão simples que sequer precisaram de meia-hora. Isso para um chinês, campeões em campeonatos de programação, deve ser equivalente a cinco minutos com um código C enxuto. Mas estou apenas aprendendo.
Foreground Solution Resuminho: o problema é receber um número e retornar dois números cuja soma seja igual ao primeiro. A única restrição é que nesses números não poderá ter o algarismo quatro.
Solução: copiar como string o número para o primeiro deles e colocar zero no segundo; sempre que houver a incidência do caractere &#39;4&#39; trocar por &#39;3&#39; no primeiro número e &#39;1&#39; no segundo (ou a soma que lhe convier).
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;using namespace std;void calc(string&amp;amp; N, string&amp;amp; A, string&amp;amp; B){for( size_t i = 0; i &amp;lt; N.size(); &#43;&#43; i){if( N[i] == &amp;#39;4&amp;#39; ){A.push_back(&amp;#39;3&amp;#39;);B.push_back(&amp;#39;1&amp;#39;);}else{A.push_back(N[i]);B.push_back(&amp;#39;0&amp;#39;);}}}int main(){int T;cin &amp;gt;&amp;gt; T;for( int i = 0; i &amp;lt; T; &#43;&#43; i){string N;cin &amp;gt;&amp;gt; N;string A, B;calc(N, A, B);cout &amp;lt;&amp;lt; &amp;#34;Case #&amp;#34; &amp;lt;&amp;lt; i&#43;1 &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; stoi(A) &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; stoi(B) &amp;lt;&amp;lt; endl;} }You can go your own way Resuminho: tem que atravessar um labirinto formado por quadrados de N x N começando acima à esquerda saindo abaixo na direita. Enviar uma string com os comandos E ou S (East/South) para sair do labirinto. A pegadinha é não repetir nenhum dos comandos de uma garota que resolveu o labirinto antes.
Solução: essa pegadinha é o que ironicamente resolve o problema, pois basta inverter os comandos S e E da string recebida como o caminho da garota e ele nunca se repete e sai do mesmo jeito, pois é o labirinto mais fácil do mundo.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;using namespace std;void calc(string&amp;amp; P){for( size_t i = 0; i &amp;lt; P.size(); &#43;&#43; i){P[i] = P[i] == &amp;#39;S&amp;#39; ? &amp;#39;E&amp;#39; : &amp;#39;S&amp;#39;;}}int main(){int T;cin &amp;gt;&amp;gt; T;for( int i = 0; i &amp;lt; T; &#43;&#43; i){string N, P;cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; P;calc(P);cout &amp;lt;&amp;lt; &amp;#34;Case #&amp;#34; &amp;lt;&amp;lt; i&#43;1 &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; P &amp;lt;&amp;lt; endl;} }Cryptopangrams (failed) Resuminho: encontrar quais números primos são usados como letras do alfabeto baseado em uma sequência em que o primeiro número é a multiplicação do primo da primeira letra pela segunda, o segundo número é a multiplicação da segunda pela terceira e assim por diante.
Solução: tentei fazer na força bruta criando o dicionário de primos usado procurando o resto zero das divisões dos números e depois já com o alfabeto montado reproduzir as reproduções. Apesar do sample funcionar devo ter perdido pelo tempo ou um erro que não descobri.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;map&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std;void calc(int N, vector&amp;lt;int&amp;gt;&amp;amp;LS, string&amp;amp; LSS){map&amp;lt;int, char&amp;gt; alpha;int first1 = 0, first2 = 0;for( int l: LS ){int na = 0;for( auto a: alpha){if( l % a.first == 0 ){na = l / a.first;break;}}if( na ){alpha[na] = &amp;#39; &amp;#39;;continue;}for( size_t i = 2; i &amp;lt; N; &#43;&#43;i ){if( l % i == 0 ){int na1 = l / i;int na2 = i;if( first1 == 0 ){first1 = na1;first2 = na2;}alpha[na1] = &amp;#39; &amp;#39;;alpha[na2] = &amp;#39; &amp;#39;;break;}}}const char Alphabet[] = { &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;G&amp;#39;, &amp;#39;H&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;J&amp;#39;, &amp;#39;K&amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;N&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;P&amp;#39;, &amp;#39;Q&amp;#39;, &amp;#39;R&amp;#39;, &amp;#39;S&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;Z&amp;#39; };size_t pos = 0;for( auto&amp;amp; a: alpha )a.second = Alphabet[pos&#43;&#43;];int first = LS[1] % first1 == 0 ? first2 : first1;LSS.push_back(alpha[first]);for( int i: LS ){int second = i / first;char c = alpha[second];LSS.push_back(c);first = second;}}int main(){int T;cin &amp;gt;&amp;gt; T;for( int i = 0; i &amp;lt; T; &#43;&#43;i){vector&amp;lt;int&amp;gt; LS;int N, L;cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; L;int l;for( int n = 0; n &amp;lt; L; &#43;&#43; n){cin &amp;gt;&amp;gt; l;LS.push_back(l);}string LSS;calc(N, LS, LSS);cout &amp;lt;&amp;lt; &amp;#34;Case #&amp;#34; &amp;lt;&amp;lt; i&#43;1 &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; LSS &amp;lt;&amp;lt; endl;}} Dat Bae Resuminho: descobrir quais bits não estão sendo retornados em um echo (ex: manda-se &#39;1010&#39; e recebe &#39;010&#39;) com um limite de envios para o servidor (este é um problema interativo).
Solução: imaginei dividir o envio pelo número de blocos defeituosos para alternar os 0s e 1s e assim ir dividindo pela metade de acordo com as respostas até ter as posições que não estão retornando. Não cheguei a terminar o código, mas a ideia geral era que como o limite de blocos defeituosos era de 15 ou N-1 (N é o número de bits) e o máximo de chutes é 5, imaginei que a divisão de 2 elevado a 5 fosse o limite da solução.
</description>
</item>

     
        <item>
  <title>Dogville Teatro</title>
  <link>http://www.caloni.com.br/dogville-teatro/</link>
  <pubDate>2019-02-18</pubDate>
  
  <guid>http://www.caloni.com.br/dogville-teatro/</guid>
  <description>Eu não me lembro direito do filme de Lars von Trier, mas eu sei que ele foi impactante quando o vi, provavelmente em 2005. Estupro, escravidão, tiros. Quando você vai assistir a um filme do diretor dinamarquês é necessário que você esteja preparado para o pior. A peça dirigida por Zé Henrique de Paula talvez se prepare demais.
O minimalismo de Von Trier em seu filme, com casas pintadas representando a pequena cidade de Dogville onde se passa a hitória, na época se explicava por algumas das regras ainda seguidas pelo diretor do Manifesto Dogma 95. Esse manifesto criado por ele e Thomas Vinterberg visavam o foco na história, tema e atuações, excluindo usos elaborados de efeitos especiais e tecnologia. Como uma tentativa de retomar o poder para o criador do conteúdo em vez dos estúdios, o projeto foi aos poucos afrouxando no decorrer dos seus filmes até culminar em Dogville, que mantinha o foco nas atuações e direção, mas que já se dava ao luxo de projeções e efeitos de luz. Mas de qualquer forma a história toda se passava em um cenário que lembra um grande palco de teatro.
Dessa forma, Zé Henrique de Paula foi mais ousado em sua adaptação para um teatro de verdade ao utilizar elementos mais primitivos ainda: cadeiras. Cada habitante da cidadela dispunha de uma, e elas representavam em suas diferentes posições o que seus habitantes estavam fazendo. Cadeiras eram basicamente os únicos apetrechos à disposição dos atores para recriar a história.
Isso, duas cordas e uma roda.
Se por um lado Zé Henrique está charmosamente seguindo as premissas do filme original, e aos poucos nós, espectadores, entramos no jogo, o uso das atuais projeções quebra o encanto. Feitos em telas suspensas no meio do palco para realizar diferentes formas de montagem sem precisar inserir elementos reais em cena, essas projeções ajudam espectadores mais distantes dos atores e criam uma espécie de montagem de quadros bem rústica em comparação com Cinema. Aliás, o que mais há de rústico no teatro que o Cinema não seja o perfeito exemplo de um tempo que já se foi? Perdoem-me os fãs do vintage grego.
Além disso, o narrador da história nos conta os capítulos um a um; interpretado por Eric Lenate com uma dicção, vestimenta e postura que possibilitam que ele faça um outro personagem na peça, é a atuação mais forte em palco, pois nos mantém envolvidos mesmo que seu texto seja complicado e nos convide a ignorá-lo. Mas mesmo ignorando as elucubrações intelectualoides de uma aventura macabra envolendo uma jovem fugitiva que se esconde na cidade, não é possível ignorar a manipulação que o narrador vai criando a respeito dos habitantes da cidade, pois as informações mastigadas por ele são descritivas demais. Acabamos entendendo praticamente toda a história apenas ouvindo o narrador, o que acabaria sendo uma falha no cinema, mas que no teatro é o esperado para temas mais complexos. Quer dizer, não estou habituado ao teatro, mas imagino que seja comum, apesar de ter achado esse recurso bem preguiçoso.
De qualquer forma, a história de &amp;quot;Dogville: O Filme&amp;quot; está completa e possui um diálogo inestimável entre dois personagens no seu final. Um verdadeiro julgamento ao ar livre. Não apenas da cidade, mas de toda moral humana. Uma lição que irá ecoar pelas nossas cabeças vez ou outra quando pensarmos sobre a humanidade como uma espécie dotada de moral. Ou como coitados vivendo às sombras dos predadores. &amp;quot;Dogville: A Peça&amp;quot;, não cometeu a insensatez de tentar responder essa questão.
</description>
</item>

     
        <item>
  <title>Como a geração de Sai de Baixo se encontra com a geração Não me Toque</title>
  <link>http://www.caloni.com.br/sai-de-baixo/</link>
  <pubDate>2019-02-13</pubDate>
  
  <guid>http://www.caloni.com.br/sai-de-baixo/</guid>
  <description>A coletiva de imprensa para &amp;quot;Sai de Baixo: O Filme&amp;quot; pode ser resumida da seguinte maneira: uma trupe de militantes mimimi fazendo perguntas sobre sentimentos e o elenco do filme respondendo à altura sem sair do salto; muito pelo contrário, com muita propriedade: &amp;quot;temos que dizer uma coisa que todo pobre concorda e se identifica: ser pobre é ruim!&amp;quot;. Parecia um quadro de humor combinado. E que rendeu (a mim pelo menos) ótimas risadas.
Para quem chegou no planeta faz pouco tempo, Sai de Baixo foi uma série de sucesso nos anos 90 exibida pela Rede Globo de Televisão por cerca de quatro anos no horário nobre de domingo. A ideia idealizada por Luis Gustavo e Daniel Filho foi inspirada em outro programa, A Família Trapo, que estreou nos anos 60 o formato de teatro com plateia ao vivo, depois editado para a TV mas com direito a improvisos. Sucesso absoluto, não à toa a TV &amp;quot;se inspirou&amp;quot; pelo menos mais duas vezes, em A Grande Família e Toma Lá Dá Cá (onde Miguel Falabella e Marisa Orth também participam).
Para quem lembra da velha discussão sobre a mudança do humor por conta de outros tempos através de outro programa antigo e hoje polêmico, Os Trapalhões, com suas piadas envolvendo temas sensíveis como racismo e homossexualidade, Sai de Baixo poderia fazer parte hoje da mesma sabatina feito pelo pelotão do politicamente correto, já que o programa trabalha com caricaturas do imaginário popular envolvendo o que o pelotão chama de &amp;quot;pessoas em situação vulnerável&amp;quot;, seja a faxineira pobre ou o resto dos personagnes, formados por uma falida família de classe média fingindo nobreza em um apartamento decadente em bairro idem da cidade de São Paulo.
Mas tanto o roteirista Miguel Falabella quanto todo o elenco defenderam e ensinaram na entrevista como funciona o humor, pelo princípio de que o exagero dos personagens faz com que a plateia se identifique e se sinta mais à vontade exatamente por ser representada. Não se trata apenas de dar boas risadas, mas da identificação de nossas próprias caricaturas brazucas, esse personagem patético que comercializava pau-brasil e que desde o início sempre almejou ser o inalcançável e &amp;quot;perfeito&amp;quot; comprador europeu.
Ao mesmo tempo que essas questões do uso do humor surgiu um sentimento de prazer e saudosismo misturados ao perceber como apesar de ter se passado 17 anos desde o fim da série principal o elenco disse e transpareceu que durante as filmagens eles reencontraram seus personagens uns nos outros. Como Luis Gustavo muito bem colocou, Sai de Baixo é um conceito que deve continuar fazendo sucesso indefinidamente, e mesmo que todo o elenco original morra ou desista a ideia permanece. E a ideia é muito boa.
Ela é muito boa porque representa o humor brasileiro em seu ápice e sem copiar outras culturas. Um produto 100% nacional que deu certo e continua na ativa. Pequenos causos contados por Falabella ilustraram com perfeição o carinho e a receptividade do público desde o começo, quando os programas eram filmados em um teatro de São Paulo, até agora, quando boa parte do público sequer havia nascido ou criado dentes quando o programa estreou. Resta saber se apesar dos tempos terem mudado radicalmente a essência permanece.
Eles também falaram sobre a dificuldade de se produzir cinema no Brasil, o que explica porque não foi lançado o filme logo depois da série. &amp;quot;Não existia cinema no Brasil naquela época.&amp;quot; De fato. Não nos lembramos mais que a volta do cinema nacional foi um processo lento e doloroso, e que mal acabamos essa transição, onde finalmente os gêneros começam a se diversificar e projetos mais experimentais começam a sair do papel. Um &amp;quot;Sai de Baixo: O Filme&amp;quot;, então, é um mais que merecido &amp;quot;alô&amp;quot; de um passado não tão distante onde a TV era o principal veículo de conteúdo nacional.
Cercado de boas vibrações sobre a estreia, Sai de Baixo já chega aos cinemas com promessa de continuação, tamanho foi o otimismo da equipe a respeito do resultado, e contrariando o medo que existia que o projeto fosse uma pá jogando um último punhado de terra de um programa já enterrado há tempos. Isso deu origem a mais uma parte engraçada da entrevista: o medo de que as filmagens não dessem uma montagem decente a ponto de virar um filme. Todo o tempo o elenco assediava a diretora, Cris D&#39;Amato, para ver se ela acelerava logo o processo de montar o filme para todos verem se isso que estavam fazendo era realmente um filme.
Esses detalhes não apenas tornam este um projeto especial, como nos faz lembrar que Sai de Baixo existe na arte e na vida real. Ainda que cinema seja algo glamuroso e cheio de holofotes, ainda não é fácil gastar alguns milhões na produção de um filme médio torcendo para que ele fique em cartaz tempo suficiente para se pagar. A vida imita a arte que imita a vida. Seja no Largo do Arouche ou nas telonas de todo país onde, torçamos, famílias brasileiras venham lotar salas e assistir e dar risada de si mesmas. Nem que seja contando moedinhas para o ingresso e sem dinheiro pra pipoca.
</description>
</item>

     
        <item>
  <title>Let Me Be Frank</title>
  <link>http://www.caloni.com.br/let-me-be-frank/</link>
  <pubDate>2019-02-02</pubDate>
  
  <guid>http://www.caloni.com.br/let-me-be-frank/</guid>
  <description>Fato curioso: este curta produzido e protagonizado por Kevin Spacey soma três minutos de duração e mais frases brilhantes do que toda a última temporada de House of Cards, com duração aproximada de 400 minutos, protagonizada por Claire Underwood. Esta temporada da série foi a única em que a protagonista era uma mulher. Coincidência?
Se você se ofendeu com o parágrafo inicial deste texto, que destaca o gênero de uma personagem como algo determinante na qualidade de um roteiro, percebe como é fácil brincar com a realidade. Basta colocar em relevo qualquer dado irrelevante e torná-lo de repente o detalhe mais importante de toda uma trama. Foi o que aconteceu recentemente com Kevin Spacey, retirado da produção e elenco da série abruptamente após ser colocado sob os holofotes um escândalo de assédio do passado e aos poucos surgir críticas do próprio elenco de House of Cards e da equipe sobre a forma do ator de se relacionar durante a produção.
E de repente esse foi o único detalhe de toda a existência do produtor/ator/personagem que fez com que a Netflix, produtora e distribuidora da série, cancelasse seu contrato e retirasse qualquer menção ao ator no roteiro para a última temporada, que termina uma sequência de momentos inspiradíssimos sobre a política norte-americana e termina em uma história da carochinha sobre como seria se Hillary Clinton tivesse vencido as eleições contra Donald Trump.
O curioso é como a vida imita a arte, e no caso como o personagem de Spacey se esquivou tantas vezes na série de coisas que ele de fato fez, e agora luta na vida real para se esquivar de coisas que ou ele não fez ou não foi provado ainda. O resultado é um texto sucinto em que o ator brinca com referências entre a vida real e a ficção, deixando mais que claro que ele não parece se deixar abater nem em um, onde é processado por assédio, e nem em outro, onde ele está morto (ops, spoiler). Chegando ao ápice do brilhantismo, ele exclama: &amp;quot;apesar de tudo, apesar de minha própria morte... eu me sinto surpreendentemente bem&amp;quot;.
Segue o roteiro completo com as instigantes frases. O vídeo você acha rapidamente na internet procurando pelo título.
 I know what you want. Oh sure they may have tried to separate us but what we have is too strong -- is too powerful.
I mean after all we shared everything you and I.
I told you my deepest darkest secrets.
I showed you exactly what people are capable of.
I shocked you with my honesty, but mostly I challenged you and made you think. And you trusted me even though you knew you shouldn&#39;t.
So we&#39;re not done no matter what anyone says and besides I know what you want. You want me back.
Of course some believed everything and I&#39;ve just been waiting with bated breath to hear me confess it all.
They&#39;re just dying to have me declare that everything said is true and that I got what I deserved.
Wouldn&#39;t it be easy if it was all so simple?
Only you and I both know it&#39;s never that simple not in politics and not in life.
But you wouldn&#39;t believe the worst without evidence would you?
You wouldn&#39;t rush to judgment without facts, would you?
Did you?
No, not you. You&#39;re smarter than that.
Anyway all this presumption made for such an unsatisfying ending and to think it could have been such a memorable send-off.
I mean if you and I&#39;ve learned nothing else these past years it&#39;s that in life and art nothing should be off the table. We weren&#39;t afraid not of what we said, not of what we did, and we&#39;re still not afraid because I can promise you this.
If I didn&#39;t pay the price for the things we both know I did do. I&#39;m certainly not gonna pay the price for the things I didn&#39;t do.
Oh well of course they&#39;re gonna say I&#39;m being disrespectful not playing by the rules like I ever played by anyone&#39;s rules before. I never did and you loved it.
Anyhow despite all the poppycock, the animosity, the headlines, the impeachment without a trial -- despite everything -- despite even my own death.
I feel surprisingly good.
And my confidence grows each day that&#39;s soon enough you will know the full truth.
Wait a minute, now that I think of it, you never actually saw me die, did you?
Conclusions can be so deceiving. Miss me?
 </description>
</item>

     
        <item>
  <title>Minecraft: O Jogo</title>
  <link>http://www.caloni.com.br/minecraft-game/</link>
  <pubDate>2019-01-06</pubDate>
  
  <guid>http://www.caloni.com.br/minecraft-game/</guid>
  <description>Fundamentado em bases materialistas, a partir das quais Karl Marx se orgulharia, Minecraft é uma luta por recursos e sobrevivência. E por ser simples e fácil de jogar, as crianças adoram. Isso e porque também tem skins na aparência dos players.
Mas qual o objetivo em Minecraft? Ele um jogo pensado como um mundo de blocos onde o que muda são as propriedades físicas desses blocos e o que é possível fazer com eles. Criado por Markus Persson e posteriormente desenvolvido por sua empresa, a Mojang (e depois comprado pela Microsoft), o jogo que atrai crianças, jovens e autistas de todo mundo possui alguns atrativos. O sistema de troféus, como em todo jogo moderno, já foi colocado. Porém, resta a pergunta fatal, filosófica, que quase pode ser ouvida quando se entra no jogo e se começa a minerar: qual o objetivo?
E a resposta ironicamente acaba sendo a mesma sobre o mundo físico em que vivemos: sobreviver. E para isso é necessário obter recursos. Madeira, minério, alimento. Coletado ou caçado. Animais precisam ser mortos ou domesticados para fornecer os recursos que precisamos. Sangue deve jorrar nessa experiência lúdica para que aprendamos que o mundo é um lugar muitas vezes escuro, solitário e vazio de significado.
Claro que com o tempo surgiram os servidores com sub-jogos com objetivos claros e foi tudo por água abaixo. Crianças mimadas.
Mas se concentre no modo clássico do jogo. Survival. Os recursos não brotam como mágica e seu uso não é tão claro. É preciso aprender, e vivenciar no processo. Essa busca por significado, por objetivo, é o maior valor que o jogo tem. Tirando seus gráficos, embora simplistas, esteticamente agradáveis, ou sua movimentação intuitiva, seu sistema de experiência, de programação, de probabilidades, etc.
Jogar Minecraft como um adulto é voltar a ser criança em uma nova versão. E nessa versão aprendemos, como crianças, a pensar como adultos. E nos esquecemos de toda essa baboseira de direitos, de casa aconchegante e comida quentinha. É a vida cruel ensinada através de pixels. Resta ao jogador eventual conseguir encontrar essa magia dentro desse mundo, para ao sair se sentir grato pela vida privilegiada que tem, onde não é necessário se esconder à noite porque os monstros estarão à espreita.
</description>
</item>

     
        <item>
  <title>Top Filmes 2018</title>
  <link>http://www.caloni.com.br/top-filmes-2018/</link>
  <pubDate>2018-12-31</pubDate>
  
  <guid>http://www.caloni.com.br/top-filmes-2018/</guid>
  <description>Como usar esta lista: Antes de enumerar os 9 (nove) filmes que, acredito, mereçam constar em uma lista de consideração pelo Cinema, explico que listas nunca são exaustivas, nunca são permanentes e nunca são objetivas, mas subjetivas, dependendo do tempo-espaço e da pessoa que a compila. Essa que segue tenta fugir um pouco do lugar-comum, mas que irá falhar miseravelmente porque cinéfilos e críticos costumam enxergar a beleza no mesmo lugar. Porém, eu não assisti a todas as belezas cinematográficas que estrearam no Brasil esse ano, o que me dá um pouco de ponto-fora-da-curvisse salutar.
  Arábia. O épico do trabalhador comum, anônimo, se esse trabalhador conseguisse colocar tudo que sente e percebe no papel e se este trabalhador saísse do imaginário de Karl Marx e da elite que assim o idealiza. Sua filmagem é tão sutil que ela parece uma fina camada estética que se ergue em torno de um ideal de documentário travestido de ficção. Essa linguagem com não-atores tem ganhado ótimos trabalhos atualmente e 2018 com certeza não é exceção. Há, também, por exemplo:
  Ciganos da Ciambra. Um experimento que arrisca utilizar toda uma família (real) de ciganos alocados em uma periferia de uma grande cidade da Itália para contar uma ficção que flerta com a realidade dessas pessoas. E se sai maravilhosamente bem. Ele é tenso, mas ao mesmo tempo solto. Ao mesmo tempo ele caminha com competência em uma narrativa simples, mas eficiente do começo ao fim. Ele fica no lugar de Lazzaro Felice porque diferente do vencedor de melhor roteiro em Cannes este é um filme mais incisivo em vez de simbólico, além de não ter ambições tão grandiosas quanto unir religião e ideologias sociais, algo que soa bizarro (embora eficiente) em Felice.
  Você Nunca Esteve Realmente Aqui. Uma mistura de diferentes obras, passando por Psicose, Taxi Driver e Drive, atualizada e que sintetiza uma obra original, sagaz e pertinente sobre uma camada inconsciente que existe hoje em dia e é crítica para sobrevivermos como sociedade: ninguém realmente liga para o problema dos outros. Uma expansão da violência urbana com tons extremamente gráficos, mas que choca mais ao não mostrar o que imaginamos.
  A Rota Selvagem. Um filme sobre a descoberta de um jovem pela vida adulta que ganha contornos de épico contemporâneo graças à sensibilidade do tema, que passa por criação de cavalos e a empatia, companheirismo e compaixão que surge, e que termina em uma espiral de vida real e bruta. Um dos melhores trabalhos americanos sobre o tema. Maduro, realista, visceral e que vai até as últimas consequências, ganhando no processo uma profundidade raramente vista em trabalhos dramáticos como esse.
  Djon Africa. A pegada naturalista, quase um documentário, que dá autenticidade à ficção. A paisagem vira parte integrante dessa aventura além-mar, quase como uma figura da natureza. O curioso é que paradoxalmente o protagonista passa a importar menos que as situações vividas. Uma revisita admirável pelas origens de um povo, sua terra, sua cultura, sua língua. E as origens não param no ser humano, mas ecoa por toda nossa linguagem de mamíferos e répteis. Uma mensagem otimista feita pelo universo endereçada para o universo.
  O Animal Cordial. Um terror psicológico feito em terra brasilis do começo ao fim. Os atores estão praticamente possuídos, assim como a câmera, que vai observando o caos ir tomando conta de um restaurante em fim de noite. Nossa percepção do que é aceitável vai se alterando durante o trajeto, e pensamentos sobre moral e ética surgem no meio de uma espécime do gênero slasher. Quem consegue isso tudo junto merece um pouco de respeito. Sendo uma produção brasileira, então, merece considerações em dobro.
  A Garota na Névoa. Um filme que surgiu de um roteiro que foi rejeitado, virou livro de sucesso e por isso foi novamente adaptado para as telas. Tudo pelo seu criador. Se trata de um policial que discute sobre policiais, envolvendo uma trama que entretém ao mesmo tempo que nos faz pensar sobre a linguagem. É um trabalho de peso, com poucas falhas, e que nos faz revirar nossas percepções do que é real. Se trata da trama pela trama, em um trabalho exemplar de sub-gênero independente. E por falar em exercícios de metalinguagem:
  Os Fantasmas de Ismael. Há aqui um trabalho quase experimental, mas que é feito de maneira comercial, em uma produção francesa de respeito. O filme não tem respeito por espectadores preguiçosos, que se negam a pensar, o que é uma ótima notícia. Não é perfeito, mas é interessante para refletir a respeito até da sua própria imperfeição e como muitas vezes o processo criativo foge do controle de maneira insustentável, ainda que ecoe eventualmente em nossas memórias.
  Vingadores: Guerra Infinita. E por último vem a mega-produção dos estúdios Marvel, que vem fechando uma saga iniciada 10 anos atrás com Homem de Ferro (2008). Juntando os universos de todos seus personagens que habitam um mundo fantasioso onde super-heróis com super-poderes é algo relativamente comum, este é um filme único, pois diferente de outros filmes que encerram uma série, ele encerra várias delas. Quer dizer, encerrar é forçar a barra, já que ele assume de uma vez por todas que não existem mais filmes completos nesse sub-gênero de poderes e magia, mas apenas novos episódios de uma série que tende a continuar para sempre. Se isso é algo promissor ou não veremos, mas é algo inédito até o momento, e experimentos na sétima arte são sempre bem-vindos. Especialmente se outros se dispõem a arriscar centenas de milhões de dólares para isso.
  </description>
</item>

     
        <item>
  <title>Califórnia, 2018</title>
  <link>http://www.caloni.com.br/cali-2018/</link>
  <pubDate>2018-12-30</pubDate>
  
  <guid>http://www.caloni.com.br/cali-2018/</guid>
  <description>Vale a pena fazer uma viagem aos EUA nessa época de 4 temers pra um trump? Er... financeiramente não. Mas como o timing é tudo e é preciso conhecer pelo menos uma vez na vida, e experiências são melhores que coisas, eu diria que vale, sim. Vivenciar outra cultura, valores, como as coisas funcionam de forma diferente, etc, acaba se pagando com o tempo. E no caso dessa viagem feita a carro com um casal de amigos, algo que não costumamos fazer, foi uma outra novidade que valeu a pena ter vivido.
Bom, como o voo para Los Angeles era o mais barato e ponto-comum para retorno (após São Francisco) a ideia inicial era alugar um carro em LA e fazer a triangulação Las Vegas e Napa Valley, com passagem em São Francisco na volta. Porém, esse contorno era muito longo (mais de 10 horas de viagem!), e devido aos feriados do Dia de Ação de Graças (onde quase nada abre) e à Black Friday (a loucura das compras) ficamos mais dias ao chegar em LA, partimos pós-fim-de-semana para Vegas (hospedagem mais barata) e voltamos via Los Angeles para Napa, de onde, por causa da hospedagem já absurdamente cara de todas as cidades visitadas, preferimos ficar hospedados em Napa durante o passeio para São Francisco e partir direto do vale do vinho para Los Angeles, para a última noite antes do voo de volta.
Em Los Angeles o primeiro desafio foi tentar encontrar o &amp;quot;hotel&amp;quot;. E se coloco hotel entre aspas é porque este é mais um entre inúmeros exemplos recentes do serviço do Booking que oferece locais que no fundo são um Air Bnb e se fingem de hotéis pelos nomes obscuros do local.
O Hollywood Blvd Suite Plus Parking possui um host que se comunica de maneira esporádica pelo WhatsApp e que nos deixaria na mão ao chegar caso meu amigo não tivesse uma comunicação 4G para nos comunicarmos. Um rapaz aparece na frente dos apartamentos e nos entrega a chave, nos coloca para dentro com instruções bem básicas de como realizar o checkout no final da estadia e é basicamente isso. Sem serviço de quarto ou qualquer outro suporte, um único banheiro e um segundo quarto de &amp;quot;casal&amp;quot; formado por duas camas de viúva, o local não é exatamente o que foi vendido, pois as segunda e terceira camas são pequenas para um casal um pouco maior. Além disso, esse quarto extra não é um quarto, mas um segundo andar aberto; uma construção bem estranha.
Por outro lado, a localização é ótima! Fica na mesma quadra da calçada da fama, algumas centenas (ou dezenas) de metros do Chinese Theater e uma quadra de um iHop -- local tradicional para cafés da manhã americanos. Além disso, apesar de muito próximo da ação a rua é relativamente tranquila, residencial, o que nos deu paz para dormir. Pela janela lateral da sala é possível ver o observatório da cidade, famoso pelo filme Rebelde Sem Causa.
Por falar em cafés, há outros muito bons nas redondezas da calçada da fama, algo importante para a primeira refeição do dia, que acaba virando um mini-brunch para mais tarde ser realizado o almojanta, totalizando assim duas refeições diárias, uma forma de economizar na comida, que nem é tão boa assim, e se manter em forma, além de economizar o próprio tempo.
Nunca comi nenhum croissant que valesse a pena (e comi em praticamente todos os lugares que ofereciam, incluindo hotel) e os pães são bem complicados, com exceção de menos conhecidos do público como ciabatta. Se mantenha nas panquecas, ovos e bacon e tente obter alguma coisa saudável para fazer sua digestão. Os tamanhos small são o suficiente para qualquer pessoa.
Hipster, mas gostoso, o café do Tiagão é um local bonito e com um staff competente, daqueles que sabe fazer café. O tradicional omelete com bacon é bom, e o café é nível Starbucks. Ele também possui alguns pães, saladas e frutas que ajudam a digestão difícil que é comer nos EUA. Ovos com bacon, salada e um pão que serviu para fazer um lanche (que não existe no menu).
Situado logo depois do iHop, na mesma avenida e do mesmo lado (logo depois da loja de sapatos), há um lugar chamado DRNK, mas que no Trip Advisor se conhece pelo nome Robeks &amp;amp; Juice, talvez porque lá há dois serviços: padaria hipster pequena e um bar de sucos naturais com vários incrementos saudáveis (eles possuem até açaí) e muito caros (cada suco cerca de 10 dólares). Com um staff muito gentil, que rendeu uma memória que iremos guardar para o futuro.
DRNK foi um achado sem querer. Se trata de uma Starbucks com comida saudável e do lado tem uma sessão de sucos naturais de hipster. O café é melhor que no IHOP e rivaliza bem com a própria Starbucks. Além dele o do Tiago segue o mesmo princípio Starbuckiano.
Outro da série achamos do lado de uma Bed, Bath &amp;amp; Beyong (uma loja de coisas de casa de preço médio), que tem a grande sacada de um tampador para aqueles copos descartáveis da Starbucks. Simples e prático. Além disso, o lugar é amplo, bem localizado (na calçada da fama) e tão caro quanto qualquer café hipster.
O iHop é o lugar que está sempre aberto e que tem uma comida norte-americana prática e simples. Nada saboroso, mas tampouco caro, o serviço é bom e os pratos chegam rápido. Há panquecas, omelete, bacon e um café infinito que costuma ser duas vezes mais aguado que o Starbucks normal (sim, o Starbucks é o padrão que uso para tudo que é café), mas que custa pouco menos que 3 dólares por pessoa. Há um ou outra opção mais saudável e o french toast deles é diferente do nosso, que chamamos de rabanada (este não é doce). As coberturas das panquecas, como tudo nos EUA e que nos surpreendeu, não é doce demais (a não ser que você derrame um monte em cima de suas panquecas).
O IHOP tem aquele estilo de lanchonete americana para tomar café e refeições. As panquecas, o french toast e os seus molhos de blueberry e old fashioned não são fortes, são leves, assim como o café aguado, que é mais um chá (com refil). É um lugar OK para comer de manhã, não muito caro para os padrões. Eles servem o cardápio americano, claro, com ovos, bacon, linguiça.
O Chinese Theater é o cinema mais famoso de Hollywood porque fica do lado do teatro onde é realizada a cerimônia do Oscar, o ex-Kodak Theater e atual Dolby Theater. Compramos ingressos para ver Animais Fantásticos 2 e aguardamos por lá, que é um grande Mall a céu aberto onde pode-se ver à distância o símbolo de Hollywood no monte e artistas de rua na calçada da fama. Além de um monte de gente tirando foto.
O cinema onde vimos, um iMax, possui um charme que ainda persiste. Cheio de decorações que fazem jus ao nome de cinema chinês, a experiência de ver um filme onde estreiam os filmes do Oscar é impagável (apesar de ser bem caro).
O passeio da Warner, a despeito de ser caro (60 usd) tem cerca de duas ou três horas de duração e se passa por vários estúdios, cenários externos de filmes, séries, etc. Para quem é nerd millenial tem passagem pelos estúdios do The Big Bang Theory e a explicação que os roteiristas ficam durante as gravações para ajustar as piadas. Há uma ênfase atual também (inexplicável?) com a série The Good Place, e pode-se ver seus cenários também.
O píer em Santa Mônica é icônico, e a própria cidade merece uma passagem pelas charmosas ruas, incluindo um calçadão de lojas enfeitado para o Natal. Comemos em um dos restaurantes da rua da orla, que não é ruim, mas por causa do Thanksgiving meio tumultuado.
Logo em seguida houve a Black Friday. Na Best Buy rolou compra de eletrônicos. Os preços diminuíram logo depois da reabertura da quinta, às 17. Na noite de quinta quase nenhum equipamento estava disponível nas lojas, mas havia pleno movimento.
O Wall Mart grande da região tem um estacionamento grande porque faz parte de um complexo, e lembra um hipermercado brasileiro levemente maior ou do mesmo tamanho.
O observatório é muito mais amplo e mais movimentado que pensei. Possui várias salas explicando a arquitetura do lugar, sua história e as tecnicidades de como funciona a captura de luz, eventos do céu e tipos de estrelas. Há vários eventos que ocorrem de tempos em tempos, incluindo a apresentação principal, que custa menos que 10 dólares. Não ficamos para ver porque teria que esperar uma hora e estávamos com fome.
O Franklin &amp;amp; Company, apesar de bem cotado, possui um hambúrguer seco, apesar de fritas decentes e um molho de queijo interessante no pretzel, que lembra exatamente os salgadinhos de palito. O IPA on tap, Blue Moon se não me engano, possui corpo médio e é cítrico em vez de lupulado aromático, fácil de beber. No final a conta deu 25 dólares.
Depois do quarto dia em LA desisti de fazer anotações, mas tenho vagas lembranças. Vejamos:
A viagem para lá demora umas cinco horas de carro e há um trânsito intenso nas saídas e entradas de LA. Depois é bem mais de boa. Há uma pista para carros lentos e caminhões e a pista pra quem quer pisar fundo. Recomendo ficar de olho na gasosa, porque os postos aparecem e somem muito rápido. No meio do caminho entramos em uma conveniência de beira de estrada com uma fila gigantesca para ir no banheiro (apenas as mulheres; claro) e um self-service de nachos com molho e hot dogs. This is America!
As duas partes mais emocionantes da viagem foi em Vegas. A primeira foi atirar, que é uma sensação muito boa e que recomendo a todo ser humano. A segunda parte foi ter perdido o passaporte no meio da viagem, o que fez com que pegássemos um ônibus de madrugada no terminal da cidade para Los Angeles em direção ao Consulado do Brasil. Quer dizer, tentamos pegar este ônibus, pois o horário estava errado (trocamos PM por AM) e o próximo ônibus era às 6 da manhã saindo do lado do Caesar&#39;s Palace, em um ônibus novo, limpo, vazio, onde o checkin era feito por um motorista extremamente cordial e correto. O apoio de pé nos bancos é um plus, mas a falta de uma cortina de verdade não. O apoio da cabeça também não é dos melhores. Mas, enfim, fizemos um road trip com direito a ônibus mudando a rota por causa da perda do passaporte, o que acabou sendo a aventura em si.
Após esse percalço aguardamos nossos amigos por lá no terminal de bus de Los Angeles e exploramos um pouco em volta, achando o bairro japonês e uma casa de lámen extremamente japonesa, com direito a uma japonesinha cartunesca andando pelo estreito corredor do local (que lembra o Aska) e que tem um gengibre extremamente curtido e um sabor de lámen característico. Na volta de Napa ainda levamos nossos amigos para provar essa iguaria típica do mini-bairro nipon.
Vinhos, vinhos, vinhos. Há ciclovias por todo o vale de Napa e as vinícolas são feitas para agradar o gosto local de chegar e já ir degustando, sem o devido passeio e explicações sobre o preparo da bebida. Isso ocorreu inclusive no castelinho, uma atração turística (um castelo feito com material original da Itália e que abriga uma das vinícolas mais antigas). Devo ter feito algumas anotações dos vinhos, mas não faço mais isso.
São Francisco conhecemos em um dia de bate e volta (ficamos hospedados em Napa). A Golden Gate é um pouco decepcionante (não a vimos do ponto de vista de Um Corpo que Cai) e a cidade é bonitinha. Comemos um hambúrguer decente dentro de uma loja de departamentos no centrão (do lado da praça central) e pegamos trânsito! Iupi.
Escrevi pequenas memórias de uma linha. Isso deve ajudar em minhas conexões, mas é meio inútil para o leitor ocasional. Bom, é meu blogue pessoal, então aí vai:
 DRNK: you are adorable Suco de açaí toma conta dos sabores no copo Não achamos os tacos, mas passamos em frente à bakeria e comemos ramen em Vegas Pegamos um ônibus para Los Angeles com um motorista atencioso Estávamos perdidos em Vegas no terminal de ônibus de madrugada cheio de noia esperando o que não iria acontecer Pagando 120 reais por 45 segundos Vinhos europeus wanna be, ou como pagar pau sendo americano A diversidade da terra em Napa com turistas que na verdade não querem saber Como Ted subverte as regras de Napa e aprendemos sobre os barris franceses Whole Foods é o único lugar para não morrer de fome O alarme que berra na entrada do Coppola Um copo de verdade com um IPA de respeito O jovem que limpa o banheiro varre o chão Outlets brotam em qualquer lugar da América A arte de apertar o botão da torradeira  </description>
</item>

     
        <item>
  <title>Como o Sistema de Estrelas como Nota Funciona</title>
  <link>http://www.caloni.com.br/como-o-sistema-de-estrelas-como-nota-funciona/</link>
  <pubDate>2018-12-15</pubDate>
  
  <guid>http://www.caloni.com.br/como-o-sistema-de-estrelas-como-nota-funciona/</guid>
  <description>Não é a primeira vez que me questionam que apesar de ter escrito no meu blogue muito mal sobre um filme eu tenha dado três estrelas como nota, como se três estrelas fosse admissível apenas para trabalhos minimamente positivos. Bom, é uma questão complicada. Imagine você compactar todo o texto analisando uma obra em apenas um número entre 1 e 5.
A história das estrelas, ou ranking de filmes, começa em 1928 quando a crítica Irene Thirer decide colocar uma escala de zero a três estrelas na sua coluna sobre filmes do New York Daily News. O primeiro filme que se tem registro de ter sido rankeado dessa forma foi A Entrevista das Cinco (1928).
De acordo com a própria Thirer, três estrelas significavam &amp;quot;excelente&amp;quot;, duas estrelas &amp;quot;bom&amp;quot; e uma estrela &amp;quot;medíocre&amp;quot;. Quando não havia nenhuma estrela isso significada que o filme é bem ruim. Caso esteja se perguntando, A Entrevista das Cinco recebeu uma estrela. =)
Mas esse foi apenas o início, que só se popularizou nos anos 50 quando a famosa revista francesa Cahiers du cinéma começa a fazer o mesmo, agora com uma escala de cinco estrelas no máximo e um ponto para acentuar nenhuma estrela. Esse negócio de não atribuir nenhuma nota, zerar mesmo, é um detalhe que a Wikipedia#Films) ressalta exageradamente, pois cada crítico parece ter uma opinião bem diversa do que seja um filme muito ruim.
A própria questão de rankear filmes já dividiu e divide críticos e jornais, pois o argumento dos que são contra é no mínimo louvável: não se resume uma análise em um sistema de notas. O que acontece na prática, ainda mais na correria do dia-a-dia, é que as pessoas frequentemente olham mais a nota e se esquecem de ler o texto na hora de contra-argumentar, o que resume toda a questão em uma guerrinha de estrelas, que, vale lembrar, não diz absolutamente nada sobre o filme em si.
Eu tendo a concordar com isso não apenas em relação a filmes, mas a vinhos também. Talvez vinhos até mais. Construído em uma junção de tempo, sorte, terreno, clima e um controle não-tão absoluto do enólogo, as vinícolas estão sempre tentando criar diferentes formas de expressar a arte de fazer vinhos. Os sistemas de ranking ignoram a diversidade de aromas e sabores e categoriza tudo através de um número de 0 a 100, fazendo com que todo o mercado de vinhos se concentre mais em atender o sistema (para vender mais) e menos o consumidor final (que pode muito bem gostar de vinhos com pontuação baixa por alguma particularidade não capturada por um número).
Mas voltando aos filmes. O melhor artigo que conheço sobre rankings é do Roger Ebert (&amp;quot;You Give Out Too Many Stars&amp;quot;), onde ele cita o Pequeno Homem do San Francisco Chronicle como o melhor sistema de ranking já criado. Ele consistia em um homemzinho sentado na poltrona do cinema. Dependendo da nota o pequeno homem estaria empolgado na poltrona, prestando atenção, aplaudindo ou... dormindo!
O que interessa-nos aqui é a posição do meio, as &amp;quot;três estrelas&amp;quot;, que é um homenzinho sentado e prestando atenção no filme. Como nesse sistema de rankings eles também não tinham meia-estrelas, o homenzinho prestando atenção é um range, que vai desde quase-OK-mas-nem-tanto até quase-não-OK-mas-nem-tanto. Ou seja, pode ser tanto um filme que é quase ruim ou um que é quase bom. O que importa é que é possível que muitos gostem dele e muitos desgostem, o que é perfeitamente possível, pois gosto é subjetivo. E as estrelas, assim como o texto, vale lembrar, é a visão subjetiva de apenas uma pessoa. A explicação do Pequeno Homem também leva em conta que se uma pessoa gosta do gênero de um filme três estrelas ela possivelmente vai gostar desse filme; já alguém que não gosta do gênero não vai ver nada de mais.
Ao finalizar o texto Ebert se lembra de um fato importantíssimo sobre a nota do meio: as pessoas não gostam. Elas precisam que o polegar esteja virado para cima ou para baixo, mas nunca para o lado. Essa indecisão denota que o objetivo da estrela é basicamente como guia de consumo ou como uma forma não-racional de se conectar com a opinião do crítico. Bom, a resposta para isso é simples: cada pessoas terá seu sistema de notas, e as notas vão refletir esse sistema e não o dos outros. Por isso uma estrela pairando abaixo do título de um filme será sempre, na melhor das hipóteses, apenas um chute educado sobre o valor do tempo para se ver um filme.
</description>
</item>

     
        <item>
  <title>1984: A Peça</title>
  <link>http://www.caloni.com.br/1984-teatro/</link>
  <pubDate>2018-10-26</pubDate>
  
  <guid>http://www.caloni.com.br/1984-teatro/</guid>
  <description>1984 está nas mentes e na alma de nossa sociedade. Ela foi concebida como um alerta por George Orwell contra o autoritarismo e totalitarismo crescente na Europa da segunda guerra, mas por seu formato universal, tal qual A Revolução dos Bichos, se transforma em um guia útil para qualquer época em que isso for um risco para a sociedade. E, sejamos honestos, sempre existirá esse risco.
Dessa forma, é notável o que a peça recente em exibição no Teatro Porto Seguro, que parte de uma montagem britânica com a direção de Zé Henrique de Paula para uma experiência que mistura o relato de seu protagonista, Winston, como um aviso para os não-nascidos, no caso nós, da plateia.
Mas a brincadeira é apenas um pedaço da experiência, que se concentra em recriar os momentos mais icônicos da história e suas falas, suas poderosas falas, que na boca e nas expressões de um elenco afiadíssimo ganha uma textura digna de uma adaptação que resgata com sucesso a alma do original em um formato mais vívido, embora com o mesmo peso.
As trucagens do palco conseguem contar toda a história sem interrupções por 110 minutos, embora os próprios atos parecem não existir, pois são misturados. Porém, há um momento em que as paredes se erguem como páginas que se vão, e há uma montagem final interessante dentro de uma caixa menor que o palco e que pode atrapalhar quem estiver vendo de cima (&amp;quot;cortando suas cabeças&amp;quot; para quem vê de muito próximo).
Outro toque muito eficiente são os vídeos que são projetados na parede, que podem mostrar, por exemplo, Winston escrevendo em seu diário ou os momentos dele e Julia no quarto onde não há teletelas. Isso nos faz até pensar: seríamos nós, espectadores, também parte do Grande Irmão? O texto de Orwell deixa claro que o maior perigo é ele estar ativo dentro de nós.
Se trata de uma peça pesada, que não admite espectadores relaxados. Há tensão do começo ao fim, com algumas brincadeiras divertidas para desestressar, como Brian arrumando frequentemente o cabelo revoltado de Winston.
Termina muito rápido. O recado se mantém por mais um tempo. E dá vontade de ler novamente o livro ou ver novamente o filme. Orwell, como já se sabe, sempre é atualíssimo.
</description>
</item>

     
        <item>
  <title>Boost.Bind e os Erros Escrotos</title>
  <link>http://www.caloni.com.br/boost-bind-e-os-erros-escrotos/</link>
  <pubDate>2018-10-01</pubDate>
  
  <guid>http://www.caloni.com.br/boost-bind-e-os-erros-escrotos/</guid>
  <description>Estou voltando a programar algumas coisas no boost. Algo que eu perdi ao me isolar do movimento de modernização do C&#43;&#43; foi a capacidade brilhante da biblioteca boost em encapsular e abstrair conceitos de engenharia de software de maneira portável e mantendo a filosofia por trás da STL, que ainda é a melhor maneira de trabalhar algoritmos já criada em qualquer linguagem de programação séria.
Isso não quer dizer que a linguagem C&#43;&#43; está indo para um bom caminho. Muito pelo contrário. Uma miríade de questões semânticas dividem opiniões e nunca resolvem de fato problemas do mundo real. Verdadeiros arcabouços masturbatórios, o comitê da linguagem se debate em vão quando tenta buscar maneiras de tornar uma linguagem arcaica em um exemplo de expressividade.
Isso às vezes não importa muito para o dia-a-dia, mas outras vezes importa. Veja o caso da biblioteca Boost.Bind, uma das mais antigas a entrar para o projeto. Sua função é simples: expandir o conceito do std::bind para quantos argumentos for necessário. Isso foi criado na época com a ajuda de inúmeros overloads da função (em modo template), mas hoje é possível fazer com variadic templates. Seu uso é simples, intuitivo, direto, e resolve muitos problemas de encaixe de código:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;boost/bind.hpp&amp;gt;template&amp;lt;class Handler&amp;gt;void CallHandler(Handler&amp;amp;&amp;amp; handler){handler();}void handler1(int x, int y){std::cout &amp;lt;&amp;lt; &amp;#34;handler1: x=&amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;, y=&amp;#34; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; std::endl;}int main(){CallHandler(boost::bind(handler1, 10, 20));}No entanto, o que era para ser um uso simples e direto de uma feature bem-vinda ao cinto de utilidades do programador C&#43;&#43; se transforma em um pesadelo quando as coisas não se encaixam tão bem:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;boost/bind.hpp&amp;gt;template&amp;lt;class Handler&amp;gt;void CallHandler(Handler&amp;amp;&amp;amp; handler){handler();}void handler1(int x, int y){std::cout &amp;lt;&amp;lt; &amp;#34;handler1: x=&amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;, y=&amp;#34; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; std::endl;}void handler2_fail(int x, int y, int z){std::cout &amp;lt;&amp;lt; &amp;#34;handler1: x=&amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;, y=&amp;#34; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;#34;, z=&amp;#34; &amp;lt;&amp;lt; z &amp;lt;&amp;lt; std::endl;}int main(){CallHandler(boost::bind(handler1, 10, 20));CallHandler(boost::bind(handler2_fail, 10, 20));}Vou plotar aqui todas as mensagens de erro para sentir o drama:
1&amp;gt;------ Build started: Project: boost_bind_result_type_error, Configuration: Debug Win32 ------1&amp;gt;boost_bind_result_type_error.cpp1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(75): error C2825: &#39;F&#39;: must be a class or namespace when followed by &#39;::&#39;1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(1284): note: see reference to class template instantiation &#39;boost::_bi::result_traits&amp;lt;R,F&amp;gt;&#39; being compiled1&amp;gt; with1&amp;gt; [1&amp;gt; R=boost::_bi::unspecified,1&amp;gt; F=void (__cdecl *)(int,int,int)1&amp;gt; ]1&amp;gt;c:\projects\caloni\static\samples\boost_bind_result_type_error\boost_bind_result_type_error.cpp(23): note: see reference to class template instantiation &#39;boost::_bi::bind_t&amp;lt;boost::_bi::unspecified,void (__cdecl *)(int,int,int),boost::_bi::list2&amp;lt;boost::_bi::value&amp;lt;T&amp;gt;,boost::_bi::value&amp;lt;T&amp;gt;&amp;gt;&amp;gt;&#39; being compiled1&amp;gt; with1&amp;gt; [1&amp;gt; T=int1&amp;gt; ]1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(54): note: see reference to class template instantiation &#39;boost::arg&amp;lt;9&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(53): note: see reference to class template instantiation &#39;boost::arg&amp;lt;8&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(52): note: see reference to class template instantiation &#39;boost::arg&amp;lt;7&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(51): note: see reference to class template instantiation &#39;boost::arg&amp;lt;6&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(50): note: see reference to class template instantiation &#39;boost::arg&amp;lt;5&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(49): note: see reference to class template instantiation &#39;boost::arg&amp;lt;4&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(48): note: see reference to class template instantiation &#39;boost::arg&amp;lt;3&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(47): note: see reference to class template instantiation &#39;boost::arg&amp;lt;2&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\placeholders.hpp(46): note: see reference to class template instantiation &#39;boost::arg&amp;lt;1&amp;gt;&#39; being compiled1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(75): error C2510: &#39;F&#39;: left of &#39;::&#39; must be a class/struct/union1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(75): error C3646: &#39;type&#39;: unknown override specifier1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(75): error C4430: missing type specifier - int assumed. Note: C&#43;&#43; does not support default-int1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(1284): error C2039: &#39;type&#39;: is not a member of &#39;boost::_bi::result_traits&amp;lt;R,F&amp;gt;&#39;1&amp;gt; with1&amp;gt; [1&amp;gt; R=boost::_bi::unspecified,1&amp;gt; F=void (__cdecl *)(int,int,int)1&amp;gt; ]1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(1284): note: see declaration of &#39;boost::_bi::result_traits&amp;lt;R,F&amp;gt;&#39;1&amp;gt; with1&amp;gt; [1&amp;gt; R=boost::_bi::unspecified,1&amp;gt; F=void (__cdecl *)(int,int,int)1&amp;gt; ]1&amp;gt;Done building project &amp;quot;boost_bind_result_type_error.vcxproj&amp;quot; -- FAILED.========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========Este é o erro encontrado usando o último Visual Studio (2017 15.9.0 Preview 2.0) e o Boost 1.68.0. A primeira linha deveria significar alguma coisa (que é para onde todo programador C&#43;&#43; deve olhar):
1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(75): error C2825: &#39;F&#39;: must be a class or namespace when followed by &#39;::&#39;Mas não. Se olharmos para o código-fonte onde ocorreu o problema, a caixa de encaixe perfeito se quebra:
O que isso quer dizer? O que aconteceu? Onde que eu errei?
Claro que ao final da longa listagem de erros (que se torna ainda mais longa, dependendo de quantos argumentos sua função tem) há alguma luz no fim do túnel:
1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(1284): error C2039: &#39;type&#39;: is not a member of &#39;boost::_bi::result_traits&amp;lt;R,F&amp;gt;&#39;1&amp;gt; with1&amp;gt; [1&amp;gt; R=boost::_bi::unspecified,1&amp;gt; F=void (__cdecl *)(int,int,int)1&amp;gt; ]1&amp;gt;c:\libs\vcpkg\installed\x86-windows\include\boost\bind\bind.hpp(1284): note: see declaration of &#39;boost::_bi::result_traits&amp;lt;R,F&amp;gt;&#39;1&amp;gt; with1&amp;gt; [1&amp;gt; R=boost::_bi::unspecified,1&amp;gt; F=void (__cdecl *)(int,int,int)1&amp;gt; ]Mas claro que essa luz pode estar ofuscada quando os tipos dos argumentos são templates de templates de templates... enfim. Deu pra entender onde o caos consegue chegar quando se trata de harmonizar uma biblioteca perfeita com uma linguagem em constante construção.
</description>
</item>

     
        <item>
  <title>Native Floripa 2018</title>
  <link>http://www.caloni.com.br/native-floripa-2018/</link>
  <pubDate>2018-09-28</pubDate>
  
  <guid>http://www.caloni.com.br/native-floripa-2018/</guid>
  <description>O Native Floripa desse ano foi um evento de nerds que adoro e também uma viagem e encontro de nerds (que também adoro). Isso quer dizer que este é um post duplo, onde analiso tanto a viagem quanto o evento.
Como viagem Floripa é uma cidade que se divide em ilha e continente. Na ilha há um emaranhado de rodovias que circulam pelos morros e que se cruzam onde percebemos que a prefeitura não tem o mínimo de cuidado e investimento em fazer conexões decentes. Há dois elevados em obras que facilitaram a transição entre rodovias. Vimos um no caminho do aeroporto para Barra da Lagoa, e o motorista do Uber comentou que está há dez anos em obras, já tendo gasto todo o dinheiro em um amontoado de madeira e concreto inúteis, o que resume o que tenho a dizer sobre a organização da cidade como um todo.
Felizmente o povo do sul é um povo decente, de respeito e que graças a Deus não parece ter dado muita atenção nos movimentos de &amp;quot;justiça social&amp;quot; que assolam o país. Há uma casa de coxinhas muito boa, a Maria Coxinha, onde um dos pratos se chama Kibexinha. Isso é tudo que precisa ser dito sobre a saúde do povo da cidade.
O evento teve lugar, como no ano passado, na Acate, uma incubadora de startups, nos dias 22 e 23 de setembro de 2018 (sábado e domingo). Houve em alguns momentos duas trilhas, que eu condeno por ser um evento pequeno, mas no salão principal houve a filmagem para publicação na internet, que eu invejo, pois logo teremos disponível para todos as palestras da trilha principal. Essa filmagem se torna ainda mais especial quando se percebe que houve muitos poucos participante no evento, girando em torno de 20 no sábado e 10 no domingo. As palestras do ano passado já se encontram publicadas, mas como houve uma demora de alguns meses talvez esse ano teremos a mesma espera.
Confesso que fazia um bom tempo que não participava de um evento como esses. Nossa tentativa de realizar o próximo encontro em sp miou por falta de público em um momento em que C&#43;&#43; está em obras e com discussões importantíssimas sobre a linguagem e bibliotecas necessárias. O Native Floripa atendeu essa necessidade em pelo menos algumas palestras.
O destaque do evento com certeza foram as corrotinas em C&#43;&#43;. Verdadeiras máquinas de performance onde se economiza troca de contexto, houve três palestras sobre o assunto, podemos dizer. Duas delas ministradas por Vinicius, mantenedor da Boost.Http, onde ambas dialogam sobre a fascinante questão de como adequar o uso de corrotinas sem interferir no fluxo do programa. A terceira palestra é minha, onde discurso sobre a dificuldade atual de depurar corrotinas sem ferramentas atualizadas para este &amp;quot;novo&amp;quot; paradigma.
Outra palestra que me lembro com muita empolgação é a sobre WebAssenbly. Não torça o nariz antes de entender. O palestrante nos apresenta algo ainda em andamento sobre transpilar código C/C&#43;&#43; para uma máquina virtual criada a partir de JavaScript. A estrutura da palestra é muito boa e o palestrante melhor ainda. Ele chegou a alterar o código durante a palestra para nos demonstrar diversos usos dessa tecnologia. Ainda em testes, mas muito promissora.
Por fim, as conversas entre os palestrantes e os participantes foi muito frutífera. Assim como nosso grupo do Telegram, importa menos o tema do que as pessoas envolvidas. E todos concordam que não há nada melhor no mundo que conversar com pessoas inteligentes e beber chopes do Sul. E lá na Acate há a melhor praça de alimentação que já vi na vida. Comida e bebida (chopes e vinhos por taça) boa e barata. Há massas e carnes de muita qualidade. O Madero do lado, que já não é nada de mais, ficou ainda menor.
O chope Putz IPA têm lúpulos cheirosos e corpo leve, pouco alcoólico e bem agradável gelado. Ou seja, nem parece IPA.Coruja Pilsen é uma... pilsen? Bom, tem um salgadinho próximo de uma witbier prestes a ser esquecida.O chope da Strappa Gingerberry é um chá preto fermentado com gengibre e gradação alcoólica ridícula de 0.6%. Ele é ainda frutado (possui morango) e deixa a garganta quentinha. Ótima opção entre bebidas mais fortes. Dá uma pausa etílica e estilosa na balada.Kairós Sol Poente é uma West Coast IPA de respeito. Equilibrada de corpo leve, seu chope é aromático e um pouco salgado com amargor presente sem exageros.Ficamos hospedados em uma casa na Barra da Lagoa pelo AirBnB em alta concentração de temas filosóficos. Fizemos um churrasco imprestável, fomos em restaurantes medíocres da orla, mas a conversa foi sempre interessante. Era como se o grupo de filosofia do Telegram tivesse se mudado temporariamente para lá. Temas como metafísica, política, social justice, auto ajuda e imprint de traumas eram frequentes. A paisagem belíssima, a casa aconchegante e a companhia agradável.
Native Floripa virou já uma tradição. Ano que vem nos vemos de novo.
Minhas palestras  Vcpkg e vc td a ver Co co-co-co-co-corrotinas  </description>
</item>

     
        <item>
  <title>Python27, protobuf, py2exe e build_exe</title>
  <link>http://www.caloni.com.br/python27-protobuf-py2exe-cx_freeze/</link>
  <pubDate>2018-07-14</pubDate>
  
  <guid>http://www.caloni.com.br/python27-protobuf-py2exe-cx_freeze/</guid>
  <description>Para quem está tentando compilar um executável usando py2exe e protobuf, #ficadica: desista. Ele não vai funcionar ou se funcionar vai dar trabalho. Em vez disso melhor usar build_exe (através do pacote cx_freeze), que é um esquema marotinho que permite configurar tudo e há apenas um patchzinho que precisa ser feito.
Para entender como as coisas dão errado primeiro vamos instalar os requisitos de um pacote fictício em um ambiente virtualizado do Python (para evitar mexer na instalação padrão):
D:\&amp;gt;cd deployD:\deploy&amp;gt;virtualenv python27New python executable in D:\deploy\python27\Scripts\python.exeInstalling setuptools, pip, wheel...done.D:\deploy&amp;gt;Depois instalamos os requisitos de nosso pacote fictício:
D:\deploy&amp;gt;python27\Scripts\activate.bat(python27) D:\deploy&amp;gt;pushd d:\src\MyFictionalPackage(python27) d:\src\MyFictionalPackage&amp;gt;pip install -r requirements.txtCollecting cx-Freeze==5.1.1 (from -r requirements.txt (line 1))Using cached https://files.pythonhosted.org/packages/ba/d7/e5a699abbc04df31d28750bd4f7715f75452c57c6ea7f05acff0bc26873d/cx_Freeze-5.1.1-cp27-cp27m-win32.whlCollecting protobuf==3.6.0 (from -r requirements.txt (line 2))Using cached https://files.pythonhosted.org/packages/85/f8/d09e4bf21c4de65405ce053e90542e728c5b7cf296b9df36b0bf0488f534/protobuf-3.6.0-py2.py3-none-any.whlCollecting pyodbc==4.0.23 (from -r requirements.txt (line 3))Using cached https://files.pythonhosted.org/packages/fe/0c/3fa53bf0f1779ef3e3a81e474d1e8db924b7398dc12f2fe9b2c9f1bf392d/pyodbc-4.0.23-cp27-cp27m-win32.whlCollecting six==1.11.0 (from -r requirements.txt (line 4))Using cached https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whlRequirement already satisfied: setuptools in d:\deploy\python27\lib\site-packages (from protobuf==3.6.0-&amp;gt;-r requirements.txt (line 2)) (40.0.0)Installing collected packages: cx-Freeze, six, protobuf, pyodbcSuccessfully installed cx-Freeze-5.1.1 protobuf-3.6.0 pyodbc-4.0.23 six-1.11.0(python27) d:\src\MyFictionalPackage&amp;gt;Agora vem a hora do erro. O protobuf que foi instalado possui um pequeno bug que impede que o build_exe obtenha essa dependência corretamente na hora de gerar o executável:
(python27) d:\src\MyFictionalPackage&amp;gt;python setup.py build_exerunning build_exeTraceback (most recent call last):File &amp;quot;setup.py&amp;quot;, line 19, in &amp;lt;module&amp;gt;executables=exeFile &amp;quot;D:\deploy\python27\lib\site-packages\cx_Freeze\dist.py&amp;quot;, line 349, in setupdistutils.core.setup(**attrs)File &amp;quot;c:\programs\python27\Lib\distutils\core.py&amp;quot;, line 151, in setupdist.run_commands()File &amp;quot;c:\programs\python27\Lib\distutils\dist.py&amp;quot;, line 953, in run_commandsself.run_command(cmd)File &amp;quot;c:\programs\python27\Lib\distutils\dist.py&amp;quot;, line 972, in run_commandcmd_obj.run()File &amp;quot;D:\deploy\python27\lib\site-packages\cx_Freeze\dist.py&amp;quot;, line 219, in runfreezer.Freeze()File &amp;quot;D:\deploy\python27\lib\site-packages\cx_Freeze\freezer.py&amp;quot;, line 616, in Freezeself.finder = self._GetModuleFinder()File &amp;quot;D:\deploy\python27\lib\site-packages\cx_Freeze\freezer.py&amp;quot;, line 340, in _GetModuleFinderfinder.IncludeModule(name)File &amp;quot;D:\deploy\python27\lib\site-packages\cx_Freeze\finder.py&amp;quot;, line 651, in IncludeModulenamespace = namespace)File &amp;quot;D:\deploy\python27\lib\site-packages\cx_Freeze\finder.py&amp;quot;, line 351, in _ImportModuleraise ImportError(&amp;quot;No module named %r&amp;quot; % name)ImportError: No module named &#39;google.protobuf&#39;(python27) d:\src\MyFictionalPackage&amp;gt;Para fazer funcionar há um pequeno patch: criar um arquivo __init__.py dentro da pasta google onde está instalado o pacote do protobuf:
(python27) d:\src\MyFictionalPackage&amp;gt;dir d:\deploy\python27\Lib\site-packages\googleVolume in drive D is SYSTEMVolume Serial Number is 5C08-36EEDirectory of d:\deploy\python27\Lib\site-packages\google14/07/2018 14:15 &amp;lt;DIR&amp;gt; .14/07/2018 14:15 &amp;lt;DIR&amp;gt; ..14/07/2018 14:15 &amp;lt;DIR&amp;gt; protobuf0 File(s) 0 bytes3 Dir(s) 102.341.001.216 bytes free(python27) d:\src\MyFictionalPackage&amp;gt;copy con d:\deploy\python27\Lib\site-packages\google\\_\_init\_\_.py^Z1 file(s) copied.(python27) d:\src\MyFictionalPackage&amp;gt;dir d:\deploy\python27\Lib\site-packages\googleVolume in drive D is SYSTEMVolume Serial Number is 5C08-36EEDirectory of d:\deploy\python27\Lib\site-packages\google14/07/2018 14:19 &amp;lt;DIR&amp;gt; .14/07/2018 14:19 &amp;lt;DIR&amp;gt; ..14/07/2018 14:15 &amp;lt;DIR&amp;gt; protobuf14/07/2018 14:19 0 __init__.py1 File(s) 0 bytes3 Dir(s) 102.341.001.216 bytes free(python27) d:\src\MyFictionalPackage&amp;gt;Após essa pequena operação já será possível gerar o executável com sucesso:
(python27) d:\src\MyFictionalPackage&amp;gt;python setup.py build_exerunning build_execopying D:\deploy\python27\lib\site-packages\cx_Freeze\bases\Console.exe -&amp;gt; build\exe.win32-2.7\MyFictionalPackage.execopying C:\WINDOWS\SYSTEM32\python27.dll -&amp;gt; build\exe.win32-2.7\python27.dll*** WARNING *** unable to create version resourceinstall pywin32 extensions firstwriting zip file build\exe.win32-2.7\lib\library.zipName File---- ----m BUILD_CONSTANTSm Objects_pb2 d:\src\MyFictionalPackage\Objects_pb2.pyP Scripts d:\src\MyFictionalPackage\Scripts\__init__.pym StringIO c:\programs\python27\Lib\StringIO.pym UserDict D:\deploy\python27\lib\UserDict.pym __builtin__m __future__ c:\programs\python27\Lib\__future__.pym __main__m __startup__ D:\deploy\python27\lib\site-packages\cx_Freeze\initscripts\__startup__.pym _abcoll D:\deploy\python27\lib\_abcoll.pym _codecsm _codecs_cnm _codecs_hkm _codecs_iso2022... lots and lots of dependencies ...m unittest.result c:\programs\python27\Lib\unittest\result.pym unittest.runner c:\programs\python27\Lib\unittest\runner.pym unittest.signals c:\programs\python27\Lib\unittest\signals.pym unittest.suite c:\programs\python27\Lib\unittest\suite.pym unittest.util c:\programs\python27\Lib\unittest\util.pym warnings D:\deploy\python27\lib\warnings.pym weakref c:\programs\python27\Lib\weakref.pym zipimportm zlibMissing modules:? _emx_link imported from os? ce imported from os? fcntl imported from subprocess? google.protobuf._use_fast_cpp_protos imported from google.protobuf.internal.api_implementation? google.protobuf.enable_deterministic_proto_serialization imported from google.protobuf.internal.api_implementation? google.protobuf.internal._api_implementation imported from google.protobuf.internal.api_implementation? google.protobuf.internal.use_pure_python imported from google.protobuf.internal.api_implementation? google.protobuf.pyext._message imported from google.protobuf.descriptor, google.protobuf.internal.api_implementation, google.protobuf.pyext.cpp_message? ordereddict imported from google.protobuf.json_format? org.python.core imported from copy, pickle? os.path imported from os, pkgutil, shlex? os2 imported from os? os2emxpath imported from os? posix imported from os? pwd imported from posixpath? riscos imported from os? riscosenviron imported from os? riscospath imported from osThis is not necessarily a problem - the modules may not be needed on this platform.copying c:\programs\python27\DLLs\_hashlib.pyd -&amp;gt; build\exe.win32-2.7\lib\_hashlib.pydcopying C:\WINDOWS\SYSTEM32\python27.dll -&amp;gt; build\exe.win32-2.7\lib\python27.dllcopying c:\programs\python27\DLLs\_socket.pyd -&amp;gt; build\exe.win32-2.7\lib\_socket.pydcopying c:\programs\python27\DLLs\_ssl.pyd -&amp;gt; build\exe.win32-2.7\lib\_ssl.pydcopying c:\programs\python27\DLLs\bz2.pyd -&amp;gt; build\exe.win32-2.7\lib\bz2.pydcopying D:\deploy\python27\lib\site-packages\pyodbc.pyd -&amp;gt; build\exe.win32-2.7\lib\pyodbc.pydcopying c:\programs\python27\DLLs\select.pyd -&amp;gt; build\exe.win32-2.7\lib\select.pydcopying c:\programs\python27\DLLs\unicodedata.pyd -&amp;gt; build\exe.win32-2.7\lib\unicodedata.pyd(python27) d:\src\MyFictionalPackage&amp;gt;Agora ao listarmos os executáveis gerados encontraremos nosso amigo fictício:
(python27) d:\src\MyFictionalPackage&amp;gt;dir /s /b *.exed:\src\MyFictionalPackage\build\exe.win32-2.7\MyFictionalPackage.exe(python27) d:\src\MyFictionalPackage&amp;gt;Nota: conteúdo do arquivo setup.py:
import sysimport osfrom cx_Freeze import setup, Executableexe = [Executable(&amp;#39;MyFictionalPackage.py&amp;#39;)]option = { &amp;#39;build_exe&amp;#39; : {&amp;#39;path&amp;#39; : sys.path.append(os.getcwd()),&amp;#39;includes&amp;#39; : [&amp;#39;google.protobuf&amp;#39;, &amp;#39;pkgutil&amp;#39;, &amp;#39;pyodbc&amp;#39;, &amp;#39;decimal&amp;#39;],}}setup(name = &amp;#34;teste_cx_Freeze&amp;#34;,version = &amp;#34;0.1&amp;#34;,description = &amp;#34;&amp;#34;,options = option,executables=exe)(python27) d:\src\MyFictionalPackage&amp;gt;</description>
</item>

     
        <item>
  <title>Salta, 2018</title>
  <link>http://www.caloni.com.br/salta-2018/</link>
  <pubDate>2018-07-04</pubDate>
  
  <guid>http://www.caloni.com.br/salta-2018/</guid>
  <description>A região de Salta é menos conhecida pelos amantes de vinhos argentinos, mais acostumados a Mendoza e suas ruas paradisíacas em pleno deserto. Mas Salta tem outro espírito, mais nativo, e mais charmoso, que revela como a Argentina, como todo país, é um aglomerado artificial de diferentes povos e culturas, e como o vinho, feito em um solo impossível de dar vida à uva, expressa a alma de suas gerações.
Ano passado conheci a região em uma integração de vôo complicada entre São Paulo, Buenos Aires e a cidade de Salta. Pela Argentina você irá perceber duas coisas: 1) as províncias possuem uma capital com o mesmo nome (como aqui em São Paulo) e 2) argentinos querem que você passe por Buenos Aires de qualquer jeito.
De qualquer forma, pela Argentina há dois aeroportos por onde é possível chegar próximo da região de vinhos, que gira em torno da cidadezinha (&amp;quot;inha&amp;quot; mesmo) de Cafayate, na província de Salta: em Salta (cidade) ou Tucumán, na província vizinha. Ambas as capitais possuem estradas que conectam a Cafayate, e ambas possuem companhias de ônibus operando por esses caminhos (é só chegar no guichê e pedir pelo destino de Cafayate, geralmente há três ou quatro viagens por dia; se não souber qual companhia pergunte em qualquer guichê; quando fui por Salta operava a Flecha Bus e por Tucumán a Aconquija).
A região é bem montanhosa e existe praticamente no meio da cordilheira dos Andes. Indo por Salta, na Ruta 40, o caminho passa por diversos cartões postais, como a Garganta do Diabo. Um trajeto de tirar o fôlego (a primeira imagem deste texto é de lá). O caminho por Tucumán é mais longo, cerca de cinco horas de ônibus e uma parada no meio, e reserva algumas paisagens bem interessantes também. Ambos os caminhos sobem e descem por montanhas. Para quem já fez o trajeto Santiago/Mendoza irá se lembrar mais do caminho de Salta pelas similaridades com o clima desértico. Por Tucumán há mais vales no meio que são uma surpresa. Se pegar o ônibus peça para ir na frente. Comprando com mais antecedência há chance de ir nos primeiros assentos de cima (são dois andares) e a vista vale a pena.
Sobre dinheiro, Salta e Tucumán trocam reais. Cafayate apenas dólar. Em Salta e Cafayate procure pelo Banco de La Nación Argentina e peça para &amp;quot;cambiar reales&amp;quot;. Em Tucumán compensa buscar a rua desse mesmo banco e buscar por uma casa de câmbio de rua. Não é clandestina, eles emitem recibo e tudo. Aliás, use notas de moedas sem rasgos nem rasuras; eles são muito chatos com isso, principalmente nos bancos. Procure por &amp;quot;cambio&amp;quot; no Google Maps e vai achar a rua dos bancos.
É possível ficar alguns dias tanto na cidade de Salta quanto Tucumán. Ambas possuem um aspecto meio interiorano, mas muito movimentadas. Possuem museus, vida social, restaurantes interessantes (em Salta havia um árabe sensacional), sorveterias, etc. Há bons parques e ruas comerciais. Não fique panguando, são cidades grandes onde pode acontecer como em São Paulo: ser assaltado, seu vacilão!
Já em Cafayate... bom, a cidade tem uma rua principal, que é a Ruta 40, que corta as sete quadras da cidade. A maioria das vinícolas fica na própria cidade, podendo ir caminhando tranquilamente até elas. As outras pode ir e voltar de táxi, em caminhos que variam entre 4 e 15 km. Se for do tipo caminhante ou ciclista (há vários hostels e agências de turismo que alugam bicicletas) pode fazer o trajeto de ida e/ou volta andando/pedalando, mas muito cuidado com hidratação; tenha sempre consigo água. Isso é um deserto, a boca racha e o organismo passa mal sem água andando por alguns minutos.
Quase todas as vinícolas possuem visitação e degustação, sendo que visitas são gratuitas e degustações geralmente não. Os horários são quase padronizados e ficam mais tempo abertas dias de semana. Verifique com agência de turismo ou a secretaria na praça principal. Os hotéis também costumam ter essa informação com um mapinha tradicional da cidade. Pergunte.
Por falar em hotéis, lembre se de ter pesos em espécie para pagar pela estadia. Dinheiro em espécie em Cafayate nunca faz mal, apesar de vinícolas e restaurantes mais visados aceitarem cartões de crédito. E se algum hotel, em qualquer cidade argentina, puder aceitar cartão Internacional, essa é sua chance de não pagar uns 20% de impostos. Há uma lei que exime estrangeiros dessa taxa. Bom, pelo menos hoje, 2018, há. Nunca se sabe. Na dúvida pergunte.
Além das vinícolas há mais lugares para aventureiros que gostam de caminhar, como a Quebrada das Conchas, que eu recomendo se tiver tolerância média a caminhar um ou dois kms e ficar algumas horas sem ir no banheiro. Também há outros lugares para quem gosta de comer e beber, como a queijaria local, há apenas 2 km do centro com o melhor queijo de cabra que já comi. A paisagem por lá também é fantástica. E eles fornecem embalagens a vácuo e com indicador de precedência para poder levar em vôos Internacionais (se a legislação atual permitir).
E por falar em permitir, fora os limites de peso e volume das companhias aéreas, vinhos para despachar podem ser levados a granel, e com você há o limite de cinco garrafas de 750 ml. Eles levam isso relativamente a sério, fui parado uma vez, mas convenhamos: dá pra trazer muito vinho se você embrulhar direito.
Além de vinhos e queijos Cafayate está bem servido de pelo menos cinco sorveterias com diferentes tipos de sorvete (helado) de doce de leite (dulce de letche) para todos os gostos. O sabor regional são os sorvetes com gosto das uvas locais: torrontes e malbec. Se gostar de conversar com locais vai adorar a sorveteria da Miranda, a senhora que inventou esses vinhos. Ela geralmente está por lá, distribuído uma poesia que fizeram dela e seu sorvete.
As novidades da cidade não param por aí. Na rua principal ainda há uma cervejaria artesanal na praça que serve pipoca como aperitivo para suas cervejas blanca, negra ou rubia, e logo após a praça uma fábrica de alfajores artesanais com loja embutida. No balcão há vários sabores e também bombons muito bem feitos, que nada lembram os doces meia-boca daquela vizinha que vende trufa ou os industriais Cacau Show e derivados.
Por falar em cacau, faça chuva (essa foi boa!) ou faça sol, tenha sempre consigo seu batom com manteiga de cacau (fácil de achar na drogaria da praça principal). Tanto no calor como no frio seus lábios podem rachar facilmente por causa da baixíssima umidade da região. Lá chove umas 4 vezes ao ano.
Na primeira visita a Cafayate é possível conhecer praticamente tudo em uma semana e dedicação. Mas quem é que está com pressa?
</description>
</item>

     
        <item>
  <title>Argentina vs França e o Fim da Geração dos Autistas</title>
  <link>http://www.caloni.com.br/argentina-franca-autismo/</link>
  <pubDate>2018-07-01</pubDate>
  
  <guid>http://www.caloni.com.br/argentina-franca-autismo/</guid>
  <description>A tecnologia e o profissionalismo chegaram na copa em um nível nunca antes visto. Se compararmos com o que o atacante que fez o primeiro gol na primeira copa, o francês Lucien Laurent, notamos o abismo entre o ontem e o hoje do Planeta Futebol:
 Estávamos jogando contra o México e estava nevando, já que era inverno no hemisfério sul. Um dos meus companheiros de equipe recebeu a bola e eu segui seu caminho com cuidado, finalizando com meu pé direito. Todos ficaram satisfeitos, mas não houve uma grande comemoração - ninguém percebeu que estavam fazendo história. Um aperto de mão rápido e nós voltamos ao jogo. E nenhum bônus também, todos nós éramos amadores naquela época, até o fim.
 Mas houve uma transição. Ela foi lenta, passaram grandes gerações pelo caminho (Brasil que o diga), e grandes paixões acabaram levantando a taça ou chegando muito próxima dela. Não importa. O futebol ganha pelo que se passa no gramado, e as seleções apenas acumulam história em seus títulos e sub-títulos.
Hoje é o dia que termina esta geração de autistas no futebol. Messi e Cristiano Ronaldo, dentre outros, pertencem a uma geração super auto-centrada, mas nada criativa dentro de um esporte coletivo. Estas pessoas não parecem viver, mas tecnicamente são tão impecáveis que embalam os torcedores não-autistas, com a resposta emocional de robôs empenhados em trazer o máximo de... do quê, mesmo?
A Argentina é um time de sofredores, e Diego Maradona, gordo e acabado, é o símbolo do segundo país do futebol do hemisfério. Quando a câmera nos mostra dieguito é uma cena deplorável. Quando a câmera nos mostra o melhor atacante atual do seu país, Messi, a cena é daquele jogo de vídeo-game, Fifa 2018. O jogador de carne-e-osso nunca esteve tão próximo de sua versão robotizada.
E aqui a máquina perde o equilíbro. Tanto Argentina quanto Portugal estruturaram suas seleções baseadas no fato que o gênio marcador de seus jogadores-robôs resolveria qualquer impasse. E deram um salto para a mediocridade. Mais ou menos como está acontecendo com as nações, a economia, as finanças, entregando decisões sobre a pensão de viúvas nas mãos de psicopatas capitalistas especulando bilhões de um lado a outro do globo. Se tudo der errado, basta eles formatarem. Não o computador, o cérebro.
O futebol da França e do Uruguai, por outro lado, não possuem exatamente um cérebro para coordenar a equipe. Eles são um coração que bombeia garra de ponta a ponta do campo. E a pressão parece que sempre acaba mais forte no lado do ataque, bombeando e bombardeando a soma de seus talentos rede adentro. Até a França, européia, pode se vangloriar de um futebol jovem e romântico. Talvez seja a Marselhesa tocada no início de cada jogo. Vai saber... O que sabemos é que a seleção da França é jovem, é mista, e não parece disposta a diminuir sua muralha. Bom para o futebol.
Já outro país do continente, Portugal, é outra história. Bom para os Uruguaios, que festejam junto da França. Dois países muito diferentes, de mundos distintos, unidos pelo bem do coletivo. E conseguem. Mais do que a Alemanha de quatro anos atrás. O jogo segue, mas a paixão pelo futebol deu uma respirada de alívio em quatro horas inesquecíveis deste sábado de férias. Já o autismo...
</description>
</item>

     
        <item>
  <title>SSL e seu limite de pacote</title>
  <link>http://www.caloni.com.br/ssl-limite-de-pacote/</link>
  <pubDate>2018-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/ssl-limite-de-pacote/</guid>
  <description>O protocolo TLS/SSL tem por objetivo criar uma camada de criptografia assimétrica para a aplicação. E quando eu falo em camada não estou me referindo às camadas OSI. Nem às camadas TCP/IP. Isso porque o SSL não se encaixa em nenhuma das duas. Ele interfere com muitas, inclusive a aplicação. E aprendi isso a duras penas: na ponta do depurador.
O pacote SSL tem um limite de 16 KB, ou 16384 bytes. Esse é o limite que será respeitado por qualquer implementação do protocolo, o que inclui o uso de Boost.Asio e seu uso da OpenSSL. O que isso quer dizer na teoria é que você não pode trafegar sentido server=&amp;gt;client nada maior que 16k bytes. O que isso quer dizer na prática é que sua aplicação não pode escrever mais que 16k bytes de uma vez no socket que vai dar pau.
Sim, a camada de aplicação tem que estar ligada que existe SSL abaixo dela.
Isso quer dizer que este snippet de código, por exemplo:
_sock.write_some(::boost::asio::buffer(output.data(), output.size()), err);Não é inocente e não funciona sempre. Se _sock for um socket cuja comunicação está encriptada por SSL (em outras palavras -- em Boostês -- ele for um ssl_socket) você precisa escrever output em pequenas quantidades. Como em outra implementação inocente:
do{size_t sz = std::min((size_t) LESS_THAN_16_KB, output.size());_sock.write_some(::boost::asio::buffer(output.data(), sz), err);output.erase(0, sz);}while (err.value() == boost::system::errc::success &amp;amp;&amp;amp; output.size() &amp;gt; 0 );Se isso não for feito e a ponta server escrever, digamos, 512KB, ou 17KB, ou qualquer coisa acima de 16KB, ela irá receber... 16 KB. E acabou. O resto se perder.
Portanto, quando for mexer com SSL, esqueça OSI e esqueça TCP/IP. As coisas funcionam de uma maneira muito mais esotérica que qualquer programador de redes jamais viu, e jamais verá.
</description>
</item>

     
        <item>
  <title>Boost Meta State Machine</title>
  <link>http://www.caloni.com.br/boost-meta-state-machine/</link>
  <pubDate>2018-05-21</pubDate>
  
  <guid>http://www.caloni.com.br/boost-meta-state-machine/</guid>
  <description>O Boost Meta State Machine (MSM for short) é uma das duas bibliotecas mais famosinhas de state machine do Boost. Ela é uma versão estática que permite incluir chamadas para as entradas e saídas de um estado baseado em eventos. A sua principal vantagem é poder visualizar toda a máquina de estado em um só lugar, e sua principal desvantagem é pertecer ao Boost, o que quer dizer que você vai precisar fazer seu terceiro doutorado e ler uma documentação imensa sobre UML antes de conseguir produzir alguma coisa. Ou ler este artigo de 10 minutos tops.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;boost/msm/back/state_machine.hpp&amp;gt;#include &amp;lt;boost/msm/front/state_machine_def.hpp&amp;gt;#include &amp;lt;boost/msm/front/functor_row.hpp&amp;gt;using namespace std;namespace MyStateMachine{namespace msm = boost::msm;namespace msmf = boost::msm::front;namespace mpl = boost::mpl;namespace Events{struct Event1 {};struct Event2 { int data; };struct Event3 {};}struct StateMachine :msmf::state_machine_def&amp;lt;StateMachine&amp;gt;{typedef msm::back::state_machine&amp;lt;StateMachine&amp;gt; SM;struct Off :msmf::terminate_state&amp;lt;&amp;gt; // Off is the last state{template &amp;lt;class Event, class Fsm&amp;gt;void on_entry(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry Off generic event\n&amp;quot;;}}; struct On :msmf::state&amp;lt;&amp;gt;{template &amp;lt;class Event, class Fsm&amp;gt;void on_entry(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry On generic event\n&amp;quot;;}template &amp;lt;class Fsm&amp;gt;void on_entry(Events::Event1 const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry On Event1\n&amp;quot;;}template &amp;lt;class Event, class Fsm&amp;gt;void on_exit(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_exit On generic event\n&amp;quot;;}template &amp;lt;class Fsm&amp;gt;void on_exit(Events::Event2 const&amp;amp; evt, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_exit On Event2 (with data &amp;quot; &amp;lt;&amp;lt; evt.data &amp;lt;&amp;lt; &amp;quot;)\n&amp;quot;;}};struct Tick :msmf::state&amp;lt;&amp;gt;{template &amp;lt;class Event, class Fsm&amp;gt;void on_entry(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry Tick generic event\n&amp;quot;;}template &amp;lt;class Fsm&amp;gt;void on_entry(Events::Event3 const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry Tick Event3\n&amp;quot;;}template &amp;lt;class Event, class Fsm&amp;gt;void on_exit(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_exit Tick generic event\n&amp;quot;;}};typedef On initial_state; // On is the startstruct transition_table :mpl::vector&amp;lt;// Start Event Next Action Guardmsmf::Row &amp;lt; On, Events::Event1, On, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; On, Events::Event2, Tick, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; Tick, Events::Event3, Tick, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; Tick, Events::Event1, On, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; Tick, Events::Event2, Off, msmf::none, msmf::none &amp;gt;&amp;gt; {};};int TestPathway(){StateMachine::SM sm1;sm1.start();sm1.process_event(Events::Event1()); // keep in Onsm1.process_event(Events::Event2()); // to Ticksm1.process_event(Events::Event3()); // keep in Ticksm1.process_event(Events::Event1()); // back to Onsm1.process_event(Events::Event2 { 42 }); // back to Ticksm1.process_event(Events::Event2()); // finishreturn 0;}}int main(){MyStateMachine::TestPathway();}A parte bonitinha de se ver é os eventos e estados completamente ordenados:
struct transition_table :mpl::vector&amp;lt;// Start Event Next Action Guardmsmf::Row &amp;lt; On, Events::Event1, On, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; On, Events::Event2, Tick, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; Tick, Events::Event3, Tick, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; Tick, Events::Event1, On, msmf::none, msmf::none &amp;gt;,msmf::Row &amp;lt; Tick, Events::Event2, Off, msmf::none, msmf::none &amp;gt;&amp;gt; {};Claro que a indentação ajuda. Para cada entrada e saída de um estado é possível utilizar os métodos on_entry e on_exit de cada struct que define um estado, seja este método um template totalmente genérico ou especificado por evento (e cada evento também é um struct, com direito a dados específicos).
template &amp;lt;class Event, class Fsm&amp;gt;void on_entry(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry On generic event\n&amp;quot;;}template &amp;lt;class Fsm&amp;gt;void on_entry(Events::Event1 const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_entry On Event1\n&amp;quot;;}template &amp;lt;class Event, class Fsm&amp;gt;void on_exit(Event const&amp;amp;, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_exit On generic event\n&amp;quot;;}template &amp;lt;class Fsm&amp;gt;void on_exit(Events::Event2 const&amp;amp; evt, Fsm&amp;amp;) const{cout &amp;lt;&amp;lt; &amp;quot;on_exit On Event2 (with data &amp;quot; &amp;lt;&amp;lt; evt.data &amp;lt;&amp;lt; &amp;quot;)\n&amp;quot;;}Quando é criada uma nova máquina de estados o estado inicial é chamado pelo evento on_entry genérico. Como sabemos qual é o estado inicial? Isso é definido pelo typedef initial_state dentro da classe da máquina de estado (que deve herdar de state_machine_def no estilo WTL, com sobrecarga estática):
struct StateMachine :msmf::state_machine_def&amp;lt;StateMachine&amp;gt;//...typedef On initial_state; // On is the startO estado final também é definido, mas por herança. O estado final, que também é uma struct, deve herdar de terminate_state:
struct Off :msmf::terminate_state&amp;lt;&amp;gt;A partir daí o método process_event serve para enviar eventos à máquina de estado que irá alterar seu estado dependendo do fluxo criado no nome transition_table dentro da máquina de estado (a tabelinha que vimos acima). A partir daí tudo é possível; a máquina de estado está à solta:
int TestPathway(){StateMachine::SM sm1;sm1.start();sm1.process_event(Events::Event1()); // keep in Onsm1.process_event(Events::Event2()); // to Ticksm1.process_event(Events::Event3()); // keep in Ticksm1.process_event(Events::Event1()); // back to Onsm1.process_event(Events::Event2 { 42 }); // back to Ticksm1.process_event(Events::Event2()); // finishreturn 0;}Mas nesse exemplo didático está comportada em uma função apenas. Claro que cada método recebe a própria máquina de estado para ter a chance de alterá-la, ou guardá-la para uso futuro. Ela é recebida como parâmetro assim como o evento. E o evento, por ser uma struct também, pode conter outros dados relevantes para a transição.
</description>
</item>

     
        <item>
  <title>A Pior e Mais Ridícula Crítica de Todos os Tempos</title>
  <link>http://www.caloni.com.br/pauline-kael-a-pior-e-mais-ridicula-critica/</link>
  <pubDate>2018-05-07</pubDate>
  
  <guid>http://www.caloni.com.br/pauline-kael-a-pior-e-mais-ridicula-critica/</guid>
  <description>Estava lendo um dos livros de Pauline Kael, uma das poucas coletâneas disponíveis dessa escritora que é considerada a melhor da história do Cinema, 5001 Nights at the Movies. Nesse livro em questão há resenhas rápidas que eram publicadas nos rodapés do jornal onde Kael escrevia. São texto curtos, de um parágrafo no máximo, mas que fluem, embora condensados em uma ou duas impressões no máximo sobre o filme analisado. Apesar de ser divertido de ler, falta textura, conteúdo, nesses recortes. Portanto procurei por esta textura que tanto falam a respeito dos textos de Kael pela internet. Por um bom tempo me perguntei onde estariam esses textos completos e mais densos dessa escritora, e por que eles não viraram relevantes coletâneas para a análise da crítica cinematográfica. E no meio dessas minhas pesquisas eis que surge o texto de Alex Sheremet.
Sheremet esmiuça o contexto circunstancial em que Kael se tornou relevante não apenas para o Cinema, mas para todo tipo de crítica. Em Pauline Kael: one of film&#39;s worst and most ridiculous critics o escritor analisa como atualmente diversos críticos uma vez considerados importantes autoridades no assunto estão sendo desbancados por uma análise minuciosa de seu conteúdo. Sheremet tem um bom motivo para fazer esta análise. Ele é o autor de Woody Allen: Reel To Real, um livro que analisa a cinematografia de Allen que Pauline Kael tanto fazia questão de desbancar. No entanto, indo a fundo nos textos de Kael, Sheremet consegue de lá escavar a irrelevâncias das críticas de Kael ao cineasta nova-iorquino.
No texto em que critica outro autor, Jonathan Rosenbaum, ele diz o seguinte: &amp;quot;The problem, however, is not that Rosenbaum is negative or dismissive, but that, like Pauline Kael before him, he rarely offers any real evidence for his claims, many of his reviews are a mere four to five sentences long, and when he does, they simply dont align with the assertions made. So, for a purportedly comprehensive essay titled &amp;quot;Some Notes Toward a Devaluation of Woody Allen&amp;quot;, there is remarkably little evaluation, to start, and even less Woody Allen, the essays purported subject.&amp;quot;
E é exatamente isso que vemos em 5000 Nights. São textos que acertam algumas vezes sobre o filme em questão, e erra tantas outras. Assim como no Cinema, onde o espectador precisa ajudar o filme a criar textura, os textos de Kael precisam que o leitor use a imaginação para inserir as percepções da escritora no filme de fato. Mas isso nem sempre funciona. Sheremet também comenta que ele não foi o primeiro crítico de Kael que surgiu. Contemporâneo a ela temos Renata Adler, sua maior crítica, e que Alex comenta que ela &amp;quot;não bateu forte em Kael quanto poderia&amp;quot;.
Enfim, o texto é longo e minucioso e não cabe aqui abri-lo. É um primeiro passo interessante nesse mundo da &amp;quot;crítica da crítica&amp;quot;, pois abre um terreno poderoso e frutífero na nossa era da internet: onde ninguém, absolutamente ninguém, está a salvo de ser duramente e propriamente criticado.
</description>
</item>

     
        <item>
  <title>Adivinhe: Roger Ebert</title>
  <link>http://www.caloni.com.br/adivinhe-roger-ebert/</link>
  <pubDate>2018-05-07</pubDate>
  
  <guid>http://www.caloni.com.br/adivinhe-roger-ebert/</guid>
  <description>Acha que conhece de cinema? E que tal tentar adivinhar por um punhado de palavras de um crítico sobre qual filme estamos falando?
 If the audience ever started giggling at the sounds and tricks, the picture might collapse, because it&#39;s entirely mechanical and impersonal.
  Those who say it is too long have developed cinematic attention deficit disorder. I wanted these characters to live, talk, deceive, and scheme for hours and hours.
  If you think I have given away plot details, you think there can be doubt about whether the heroine survives the first half of a two-part action movie, and should seek help.
  ... for QT, all shots in a sense are references to other shots, not particular shots from other movies, but archetypal shots in our collective moviegoing memories.
  ... is immersed in the atmosphere and lore of film noir, but it doesn&#39;t seem like a period picture -- it believes its noir values and isn&#39;t just using them for decoration.
  ... is a powerful film not because of what it depicts, but because of the depths of the human heart it strips bare.
  ... leaps into the air, shakes his fist at the city, and you know he&#39;s sending a message to the whole movie industry.
 Lembrou de algum?
</description>
</item>

     
        <item>
  <title>Hype da Prévia de Vingadores: Guerra Infinita</title>
  <link>http://www.caloni.com.br/hype-da-previa-de-vingadores-guerra-infinita/</link>
  <pubDate>2018-04-24</pubDate>
  
  <guid>http://www.caloni.com.br/hype-da-previa-de-vingadores-guerra-infinita/</guid>
  <description>Apenas pelo fato de eu ter que olhar para o pôster que ganhei no tour com Chris Pratt em São Paulo para me lembrar do subtítulo do novo filme do Vingadores já demonstra que não sou desses nerds de HQs, games ou Cinema como plataforma de materialização de sonhos infanto-juvenis. Mas nada contra quem é. Muito pelo contrário. Foi de certa forma para mim um verdadeiro tour, no sentido literal da palavra, participar deste encontro com dezenas de miguxos e miguxas super-empolgadíssimos e extremamente catárticos em conferir a presença do ator e de uma enxurrada de YouTubers, e deixarem claro isso através de uma maré de aplausos que precediam e &amp;quot;pós-cediam&amp;quot; cada comentário mais engraçadinho ou revelador sobre o futuro da saga da Marvel nesta que eles chamam de terceira fase ou algo do gênero de seu universo cinemático.
O ator e, de certa forma, comediante, Chris Pratt, tem uma presença de espírito invejável. Ele está adorando tudo isso. Pratt não alterou em praticamente nada sua persona nas telonas e telinhas. Me lembro de sua figura ligeiramente acima da média e competindo com Amy Poehler pelo timing cômico de maior impacto em Parks and Recreation, série televisiva em que ele começou com uma ponta e logo tinha mais de 20% das gags. Ele é uma figura e tanto, verdade seja dita, e assim como Robert Downey Jr. em Iron Man e Ryan Reinolds em Deadpool, Pratt é o kinder ovo de mais uma série que começou despretensiosa e mais uma vez jogou uma ventania de refrescância frente à mesmice dos filmes de rapazes e mocinhas de collant coloridos (ultimamente mais os rapazes).
Todo este hype por Vingadores obviamente não é apenas devido à sua figura. Ele simplesmente era um dos atores principais presentes naquela noite, desta que está sendo anunciada como (não traduzirei, sorry) &amp;quot;the biggest crossover in history&amp;quot;. E bastou para a Marvel dizer isto que começaram a brotar memes de tudo quanto é lado questionando essa afirmação tão pretensiosa quanto meia-dúzia de filmes onde os vilões pretendem destruir a galáxia e a única salvação está em nosso planetinha azul (precisamente em Nova York ou outra grande cidade americana).
Se a palavra hype é definida &amp;quot;como o exagero de algo, ou em marketing uma estratégia para enfatizar alguma coisa, idéia ou um produto&amp;quot;, ou em outra palavras, &amp;quot;um assunto que está dando o que falar&amp;quot;, os memes são o anti-hype cujo efeito é basicamente o mesmo, só que melhor, porque é cômico. Os memes servem para darmos risada de toda essa pretensão de que algo que prestes está sendo feito em nosso planetinha azul (salvar o mundo... pfff). E curiosamente os maiores sucessos de bilheteria inesperados da produtora de filmes foram justamente os primeiros filmes das séries já citadas (Deadpool também será uma série, caso você esteja tão desavisado quanto eu), e que, por uma ironia do destino, não tinham todo o hype criado por trás dos heróis já populares da editora de HQs, como homem-aranha, os Vingadores, Thor, Capitão América, etc.
Por este fatores imprevisíveis da indústria de Cinema americano é que ter a figura de Chris Pratt sentado naquele palco, naquela bela noite em São Paulo, no Brasil, na América do Sul, cheia de fãs em êxtase pela sua presença e por estarmos tão próximos do maior crossover, talvez não da História, mas com certeza da História da Marvel nos cinemas, fosse o grande meme invisível que pairava no ar. Nós já sabemos que Vingadores Infinity War será um sucesso inequestionável. Mas não graças a esse hype. Justamente o contrário. O que foi construído aos poucos, nas fases anteriores até, com surpresas como Iron Man e Guardiões da Galáxia, e que hoje ocupam um destaque impossível de se prever dez anos atrás no pôster que hoje penduro temporariamente ao lado de minha mesa. Seria uma falta de educação guardá-lo enrolado na gaveta. Pôsteres de cinema não são mais o hype do momento: teasers de 20 minutos são. E isso me relaxa de certa forma.
PS: Naquela noite assistimos a 20 minutos ininterruptos do filme. E a maior mágica não estava em assistir a esta pequena prévia, mas em olhar para a plateia compenetrada. Isso não me relaxa, mas é este excitante mundo que gera os memes que eu aprecio.
</description>
</item>

     
        <item>
  <title>Lista Ligada; tá Ligado?</title>
  <link>http://www.caloni.com.br/lista-ligada/</link>
  <pubDate>2018-04-24</pubDate>
  
  <guid>http://www.caloni.com.br/lista-ligada/</guid>
  <description>Uma lista ligada é uma lista de alguma coisa onde os elementos se ligam um no outro, ou seja, um elemento tem a referência do próximo. O tipo dos elementos de uma lista ligada pode ser inteiros, strings ou estruturas inteiras. Independente do que for, você vai precisar de uma estrutura. Sabe por quê? Porque existe além dos dados em si mais uma informação que você precisará guardar em cada elemento de sua lista: o próximo elemento. E é daí que surge a ligação da lista ligada.
struct Node{int number;struct Node* next;}; Sua estrutura pode ser simples e direta. Digamos uma lista ligada de números vai ter o número que esse elemento armazena e o endereço para o próximo elemento. Em C guardamos o endereço de uma variável usando um ponteiro para o mesmo tipo de elemento (no caso um struct Node).
O elemento mais importante de sua lista ligada é o primeiro elemento, pois sem ele você não consegue mais voltar ao início. Isso pode ser uma variável especial que não é usada para nada exceto indicar qual o primeiro elemento da sua lista. Essa variável não pode mudar, pois precisamos sempre ter uma referência para o início da lista, a não ser que o primeiro elemento seja removido (veremos adiante). Ele pode ser simplesmente um ponteiro para o &amp;quot;próximo&amp;quot; elemento,que no caso o primeiro elemento.
struct Node* head = NULL;
Este ponteiro começa em NULL porque a lista está vazia. Mas assim que inserirmos um item ele deixará de ser nulo.
struct Node* node = (struct Node*) malloc(sizeof(struct Node));node-&amp;gt;number = 10;node-&amp;gt;next = NULL;head = node; Pronto, agora a lista não está mais vazia e a cabeça da lista aponta para o primeiro elemento. Note que você precisa sempre inicializar o membro next com NULL, uma vez que ele é o último elemento da lista e não possui próximo.
Para inserir um novo elemento você pode inseri-lo no começo, no fim ou no meio de sua lista. No começo é o mais fácil, pois já temos o endereço do primeiro elemento.
struct Node* node = (struct Node*) malloc(sizeof(struct Node));node-&amp;gt;number = 10;node-&amp;gt;next = next;head = node; Para inserir um novo elemento no final da lista você terá que percorrê-la até achar o próximo elemento cujo membro next é igual a NULL, o que quer dizer que não há mais próximo. Nesse caso é importante saber se a lista está vazia. Se estiver basta atualizar a cabeça da lista e está pronto (como já visto).
struct Node* lnode = head;if( ! lnode ){head = node;}else{while( lnode-&amp;gt;next )lnode = lnode-&amp;gt;next;lnode-&amp;gt;next = node;} Se formos sempre inserir um novo elemento no final também é interessante termos um ponteiro para o último elemento (o tail), que também pode ser um ponteiro e começa com NULL. Quando for inserido o primeiro elemento ele também será o último, então devem ser atualizados os ponteiros head e tail com o mesmo valor.
struct Node* tail = NULL; É preciso prestar atenção quando temos muitas variáveis com o estado de sua lista sobrando no código. Cada atualização na lista envolve atualizar todos os endereços envolvidos. Preste atenção sempre na hora que estiver escrevendo e depurando seu código ou se arrependerá por horas a fio em um fim-de-semana perdido.
Acho que remover elementos da lista ligada é a parte mais complicada, pois temos que atualizar o elemento anterior, se houver, para que o próximo dele seja o próximo do próximo.
void del(struct Node* node){struct Node* pnode = NULL;struct Node* cnode = head;while( cnode ){if( cnode == element )break;pnode = cnode;cnode = cnode-&amp;gt;next;}if( cnode == element ){if( pnode ){pnode-&amp;gt;next = cnode-&amp;gt;next;}else{head = cnode-&amp;gt;next;}}} Para simplificar programação, depuração e análise de problemas a lista duplamente ligada, apesar de ser uma estrutura mais complexa, acaba nos dando mais controle sobre os elementos de uma lista. Mas este é assunto para próximo post.
</description>
</item>

     
        <item>
  <title>PHP Experience 2018 Dia 2: Críticas</title>
  <link>http://www.caloni.com.br/php-experience-2018-dia2-criticas/</link>
  <pubDate>2018-03-07</pubDate>
  
  <guid>http://www.caloni.com.br/php-experience-2018-dia2-criticas/</guid>
  <description>Grades decepcionantes. O segundo dia do PHP Experience demonstrou pela qualidadade e teor das palestras pelo menos duas coisas: 1) a comunidade parece interessada em boas práticas e arquitetura (o que é ruim), 2) a comunidade parece mais interessada em &amp;quot;diversidade&amp;quot; que qualidade (o que é duplamente ruim).
As palestras que frequentei foram:
Uma lenta e dolorosa peregrinação teórica sobre boas práticas de como desenvolver e entregar software... até esqueci sobre que tipo de software. Acho que SaaS.
Uma DBA palestrando é uma coisa de louco. Parece que existe uma necessidade glorificada em analisar como usar o banco de dados para a melhor solução. A conclusão foi que se você souber usar seu cérebro você vai conseguir sair com a solução com qualquer banco de dados. Se você não souber programar entregue o problema para a DBA que ela vai te entregar uma solução com o melhor de cada. Mas vai ter que instalar e manter uns seis bancos diferentes.
Palestra interessante, sugerindo algumas ferramentas. Mas no final das contas curl é mais que suficiente.
Uma das piores. A expressividade sugerida é apenas blá-blá-blá de negócios. Parece que a comunidade tem problemas frequentes com conversar com os clientes sobre a solução e são focados demais na programação e linguagem técnica. E a solução é usar uma metodologia whatever que é complexa e burocrática demais para entender e manter.
Acho que a única palestra simpática do dia, com Anderson Casimiro, da comunidade C/C&#43;&#43; Brasil. Casimiro nos dá um panorama real de como a comunicação entre sistemas evoluiu e como tudo é mais simples que parece do que a sopa de letrinhas que tivemos que engolir nas últimas décadas. Desde a passagem de informação via arquivo gerado em uma pasta até a API rígida e tipada do Facebook, passando por REST, o resultado é uma viagem no tempo que nos entrega várias opções interessantes de comunicação e as explica em um linguajar mais simples. A comunidade não pareceu responder muito bem, sem ter muita noção de humor técnico e deixando Anderson em uma saia justa que não correspondeu ao que ele esperava.
Depois houve um show com uma banda chamada ElePHPants formada pelos apresentadores dos palestrantes durante o evento, um toque muito elegante. Som barulhento e regado a pouca cerveja, o iMasters é bom em arrumar local e uma estrutura básica e bem suportada pelo seu staff. A lotação máxima do evento indica que eles são muito bons de marketing.
Só falta agora a comunidade investir melhor em conteúdo.
</description>
</item>

     
        <item>
  <title>Apostas Oscar 2018 (com resultados)</title>
  <link>http://www.caloni.com.br/apostas-oscar-2018/</link>
  <pubDate>2018-03-05</pubDate>
  
  <guid>http://www.caloni.com.br/apostas-oscar-2018/</guid>
  <description>Resultado das apostas. Inspirado pelo meu amigo, vamos lá com alguns chutes de quem não sabe nada sobre Oscar (apenas que é um concurso de beleza capitalista):
Roteiro original:
 Minha aposta: Get Out/Corra! (Jordan Peele). Explicação: A forma de dar prêmio por cota racial sem prejudicar melhor filme, etc (além de ser um ótimo roteiro). Quem ganhou: Corra! (That&#39;s a Bingo!) Considerações finais: Ponto para a representatividade e a inventividade de Peele, reciclando o gênero.  Adaptado:
 Minha aposta: Logan (Scott Frank). Explicação: Porque eu quero (assim como Corra!). Quem ganhou: Call Me by Your Name Considerações finais: OK, talvez a representatividade estivesse alta demais...  Efeitos visuais:
 Minha aposta: Guardians of the Galaxy Vol. 2. Explicação: Rejuvenescimento de Kurt Russel e o Planeta Ego). Quem ganhou: Blade Runner 2049 Considerações finais: Não vi.  Mixagem de som:
 Minha aposta: Star Wars: The Last Jedi. Explicação: Poderia ser Dunkirk, mas acho que vão equilibrar. Quem ganhou: Dunkirk Considerações finais: E não é que foi pra Dunkirk, mesmo...  Edição de som:
 Minha aposta: Dunkirk. Explicação: Fala sério, né. Dá pra ouvir com perfeição a capa da bala cair em um chão molhado de dentro de um bunker abandonado. Quem ganhou: Dunkirk (That&#39;s a Bingo!) Considerações finais: É, não tinha pra ninguém; devia ter botado mais fé e chutado mixagem.  Curta de animação:
 Minha aposta: Lou. Explicação: Bonitinho. Quem ganhou: Dear Basketball Considerações finais: Até aqui a representatividade tá em alta?  Design de produção:
 Minha aposta: Darkest Hour/O Destino de uma Nação. Explicação: Nenhuma em especial. Quem ganhou: Shape of Water Considerações finais: É...  Música:
 Minha aposta: &amp;quot;This is Me&amp;quot; (The Greatest Showman/O Rei do Show). Explicação: está brincando, é um hit (assim como toda a trilha). Quem ganhou: &amp;quot;Remember Me&amp;quot; from Coco Considerações finais: É só ser mexicano que ganha até do Wolverine.  Trilha sonora:
 Minha aposta: Dunkirk (Hanz Zimmer). Explicação: Hanz Zimmer finalmente encontrou onde pode ser barulhento. Quem ganhou: Alexandre Desplat (Shape of Water) Considerações finais: Desplat nem precisou pedir a cidadania mexicana.  Maquiagem e cabeleira:
 Minha aposta: Wonder/Extraordinário. Explicação: bonitinho, coragem de colocar criança com defeito, blá. Quem ganhou: Daskest Hour Considerações finais: Onde ele não devia ganhar... se bem que, será?  Estrangeiros:
 Minha aposta: On Body and Soul/Corpo e Alma (Ildikó Enyedi). Explicação: o único que eu vi, está no mesmo ângulo do Oscar SJW (mas os velhos ainda podem vetar). Quem ganhou: A Fantastic Woman Considerações finais: Mexicanos e falantes em espanhol, vocês estão em alta.  Edição:
 Minha aposta: Dunkirk (Lee Smith). Explicação: só a logística para que o tempo passe de maneira assimétrica para favorecer a narrativa já está de bom tamanho? Quem ganhou: Dunkirk (That&#39;s a Bingo!) Considerações finais: Se não fosse para ele, pelamor...  Direção:
 Minha aposta: Dunkirk (Christopher Nolan). Explicação: Chris Nolan já foi indicado três vezes e agora fez um trabalho &amp;quot;sério&amp;quot;. Quem ganhou: Guilhermo del Toro (Shape of Water) Considerações finais: 3 mexicanos nos últimos 5 prêmios; estão pegando pesado e tende a piorar.  Roupa:
 Minha aposta: Beauty and the Beast. Explicação: filme de Oscar pra figurino. Quem ganhou: Phantom Thread Considerações finais: Não vi (mas deveria, PTA).  Fotografia:
 Minha aposta: Dunkirk (Hoyte von Hoytema). Explicação: Colaborador habitual de Nolan, o cara é foda; cada cena é uma fotografia colorizada da Segunda Guerra. Quem ganhou: Blade Runner 2049 Considerações finais: Difícil prever prêmios técnicos quando todos os filmes são perfeitos...  Animação:
 Minha aposta: Coco/Viva: A Vida é uma Festa (Lee Unkrich). Explicação: lágrimas. Quem ganhou: Coco (That&#39;s a Bingo!) Considerações finais: Disney/Pixar, você ganha até quando não deveria; esse ano é seu, mesmo.  Atriz de suporte:
 Minha aposta: Allison Janney (I, Tonya). Explicação: papel fácil de ser adorado (vilã engraçada). Quem ganhou: Allison Janney (That&#39;s a Bingo!) Considerações finais: Fácil, fácil...  Ator de suporte:
 Minha aposta: Woody Harrelson (Three Billboards, outside Ebbing, Missouri). Explicação: Harrelson, assim como Dafoe, indicado três vezes sem nada; e Three Billboards está em melhor filme. Quem ganhou: Sam Rockwell Considerações finais: Não vi outro ator indicado para o mesmo filme!  Atriz principal:
 Minha aposta: Sally Hawkings (The Shape of Water). Explicação: Hawkins vai segurar a única estatueta do filme do del Toro. Quem ganhou: Frances McDormand Considerações finais: Você tá brincando comigo; e entre duas brancas...  Ator principal:
 Minha aposta: Gary Oldman (Darkest Hour/O Destino de uma Nação). Explicação: mesmo &amp;quot;problema&amp;quot; do Harrelson elevado a sétima potência; ele já foi indicado o quê, oito vezes... Quem ganhou: Gary Oldman (That&#39;s a Bingo!) Considerações finais: Fácil, fácil 2...  Melhor filme:
 Minha aposta: Dunkirk (Christopher Nolan). Explicação: agora é a hora, Nolan! Tá perdoado pelo seu autismo e a Academia volta a premiar um Blockbuster como Soldado Ryan. Quem ganhou: Shape of Water Considerações finais: Melhor filme é sempre imprevisível, é uma soma louca. Mas a representatividade foi de pé até o final e sem trolagem.  Minha pontuação ficou 6 de 21. 28% de aproveitamento até que não está ruim pra um chute de 10 minutos. É isso aí, pe-pe-pe-pessoal. Ano que vem tem mais minorias. E nem assim Star Wars ganha alguma coisa...
</description>
</item>

     
        <item>
  <title>iMasters PHP Experience</title>
  <link>http://www.caloni.com.br/imasters-php-experience/</link>
  <pubDate>2018-03-05</pubDate>
  
  <guid>http://www.caloni.com.br/imasters-php-experience/</guid>
  <description>Meu primeiro post no blog sobre PHP. Já programei alguma coisinha no passado e meu amigo Strauss fez o blogue dele todo em php, do zero. Sim. Programador de verdade ele.
Mas hoje quero falar sobre o iMasters PHP Experience, que tive a oportunidade de frequentar graças ao meu amigo T@z. Hoje foi o keynote e amanhã serão as trilhas. Este é um evento muito bem organizado e frequentado por centenas de pessoas. Um mega-evento sobre programação. Me sinto muito bem com esse tipo de evento.
E mesmo não programando nessa linguagem, programação é programação. Houve alguns detalhes que achei que merecem ser copiados pela comunidade C/C&#43;&#43; Brasil. Um deles é uma palestra standup: Integrando GO com PHP. Hilário. Rápido e letal.
Outra palestra inesperada foi a do Marcelo Camargo: PHP under the hood. Acompanhamos o código &amp;quot;assembly&amp;quot; gerado pela linguagem e ao final da execução a galera vibrou e aplaudiu. Essa é a vibe de qualquer grupo de nerds, fascinados pela tecnologia e como ela nos vem levado tão longe.
Este é um evento sólido, com um preço salgado mas que parece pagar cada centavo. Sentimos a estrutura por trás. É o design, a organização e o empenho de todos. Um mega-evento como esses não teria lugar no Brasil com a galera de C/C&#43;&#43;. Somos dispersos em um país continental e pouco habituados a se locomover para um evento desses no Brasil. Simplesmente porque aqui não é a região onde as coisas acontecem. Infelizmente.
Mas felizmente temos outras tecnologias e não estamos mais presos geograficamente. Todo programador C/C&#43;&#43; é, no fundo, um cidadão do mundo.
</description>
</item>

     
        <item>
  <title>Caloni Palestrando Sobre Bitcoins Antes De Virar (Muito) Modinha</title>
  <link>http://www.caloni.com.br/caloni-palestrando-sobre-bitcoins-antes-de-virar-modinha/</link>
  <pubDate>2018-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/caloni-palestrando-sobre-bitcoins-antes-de-virar-modinha/</guid>
  <description>Naquela época o bitcoin estava oscilando entre 3000 e 5000 reais. Dá pra acreditar? Faz muito tempo. Cerca de um ano. E hoje tem pessoas dizendo que o mundo vai acabar porque bitcoin caiu para a mínima de 20k. Aham. Porém, existe uma imensidão de questões no meio desses valores que é: o que, afinal de contas, é uma moeda digital? Essa minha palestra foi ministrada no Native Floripa 2017, no comecinho daquele ano acho. Faz algum tempo, então não me lembro direito, mas foi um dos eventos mais legais que participei. Boa estrutura e ótima companhia.
</description>
</item>

     
        <item>
  <title>Como Apagar o Prompt do seu Programa Windows</title>
  <link>http://www.caloni.com.br/como-apagar-o-prompt-do-seu-programa-windows/</link>
  <pubDate>2018-01-23</pubDate>
  
  <guid>http://www.caloni.com.br/como-apagar-o-prompt-do-seu-programa-windows/</guid>
  <description>Geralmente se cria um projeto console/prompt quando há a necessidade de interfacear com o usuário com o uso da tela preta, saída padrão, etc. E no caso do Windows também há a possibilidade de criar um programa Win32 onde não há prompt, pois a função do programa ou é ser invisível ou criar, sabe como é, janelas. Mas nenhum dos dois possibilita ambos ao mesmo tempo. Este snippet permite que você faça isso.
void check_console() {HWND console = GetConsoleWindow(); // obtém a janela do console atualif (! console) return; // se não tiver, paciênciaunsigned long pid; // vamos pegar o pid do processo relacionado a este consoleif (! GetWindowThreadProcessId(console, &amp;amp;pid)) return; // se não der, paciência tambémif (GetCurrentProcessId() != pid) return; // se não formos nós os que criamos este prompt deixa quietoFreeConsole(); // somos nós que criamos: desaloca o console e já eras}int main(){check_console();}Para isso funcionar você criar um projeto console no Visual Studo. Essa opção está no Linker, System:
E voilà!
</description>
</item>

     
        <item>
  <title>Cmd e o encoding fake</title>
  <link>http://www.caloni.com.br/cmd-e-o-encoding-fake/</link>
  <pubDate>2017-12-26</pubDate>
  
  <guid>http://www.caloni.com.br/cmd-e-o-encoding-fake/</guid>
  <description>Qualquer um que já tenha mexido no prompt de comandos do Windows sabe que ele permite você escolher qual code page utilizar para enviar e receber comandos. O Windows é todo em UTF-16, mas as saídas podem vir de qualquer programa com qualquer encoding. A missão do cmd.exe é usar o encoding escolhido pelo usuário para exibir os caracteres na tela. Vamos supor que nós criemos uma pasta com acentos no nome (pelo Explorer para não ter erro):
Agora através de um cmd.exe podemos observar como esse nome acentuado aparece:
Note como o &amp;quot;a&amp;quot; acentuado com til aparece perfeitamente. Também note que o codepage utilizado é o 437.
Até aí tudo bem, certo?
Não! Não! Não!
O codepage 437 não possui ã. Nem õ.
Isso, meus amigos, é chamado tecnicamente na área de &amp;quot;muito louco&amp;quot;.
Curioso a respeito disso, resolvi observar a saída padrão do cmd.exe, para ver o que diabos vem como resultado. Para isso desenvolvi um simples output redirector tabajara:
#include &amp;lt;Windows.h&amp;gt;int main(int argc, char* argv[]){DWORD ret = ERROR_SUCCESS;SECURITY_ATTRIBUTES sa = { 0, NULL, TRUE };STARTUPINFOA si = { sizeof(si) };PROCESS_INFORMATION pi;CHAR cmd[4096] = &amp;#34;cmd.exe&amp;#34;;SECURITY_ATTRIBUTES saAttr;saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);saAttr.bInheritHandle = TRUE;saAttr.lpSecurityDescriptor = NULL;si.dwFlags = STARTF_USESTDHANDLES;si.hStdOutput = CreateFileA(&amp;#34;cmd.log&amp;#34;, GENERIC_WRITE, FILE_SHARE_READ, &amp;amp;sa, CREATE_ALWAYS, 0, NULL);si.hStdError = si.hStdOutput;if( si.hStdOutput != NULL &amp;amp;&amp;amp; si.hStdOutput != INVALID_HANDLE_VALUE ){if (CreateProcessA(NULL, cmd, NULL, NULL, TRUE, CREATE_NEW_CONSOLE, NULL, NULL, &amp;amp;si, &amp;amp;pi)){WaitForSingleObject(pi.hProcess, INFINITE);CloseHandle(pi.hThread);CloseHandle(pi.hProcess);}CloseHandle(si.hStdOutput);}}Simples, bonito e prático. Quando executamos Redirector.exe ele executa um cmd.exe, com a diferença que a saída dele vai parar no arquivo cmd.log, que podemos observar com um BareTail da vida.
Opa, opa, opa!
O til sumiu!
Se formos analisar os bytes que vieram de saída, vamos constatar que o byte referente ao ã foi enviado para a saída padrão como o byte 0x61, ou 97 em decimal. No codepage 437 (e em qualquer derivado da tabela ASCII, na verdade) o byte 97 é representado como &amp;quot;a&amp;quot;, simplesmente, sem til.
Isso quer dizer que ao receber um &amp;quot;ã&amp;quot; o cmd.exe o reinterpreta como &amp;quot;a&amp;quot;, mesmo estando sob o encoding 437. Esse é o resultado de um prompt user friendly que quer seu amigo.
Se analisarmos a memória do cmd.exe veremos que ele armazena as coisas em UTF-16, como qualquer programa Windows nativo unicode.
@echo off:beg dir /b c:\temp\quemquer*goto beg E com isso constatamos que não necessariamente no Windows, What You See Is What You Get. Ou, em termos mais filosóficos, What You See Is Not What I Get.
</description>
</item>

     
        <item>
  <title>Se você não precisa de classe você não precisa de classe</title>
  <link>http://www.caloni.com.br/se-voce-nao-precisa-de-classe-voce-nao-precisa-de-classe/</link>
  <pubDate>2017-12-17</pubDate>
  
  <guid>http://www.caloni.com.br/se-voce-nao-precisa-de-classe-voce-nao-precisa-de-classe/</guid>
  <description>Nos últimos dias me deparei com o seguinte (pseudo-)código:
int main(int argc, const char **argv){MyClass obj;HRESULT hr = obj.init();if ( SUCCEEDED(hr) ){if ( args have &amp;#34;cmd1&amp;#34; ){hr = obj.cmd1();}else if ( args have &amp;#34;cmd2&amp;#34; ){hr = obj.cmd2();}... // você entendeu a ideia }}Dentro de MyClass a seguinte estrutura:
class MyClass{public:HRESULT m_result = S_OK;HRESULT init();HRESULT cmd1();HRESULT cmd2();// você pegou a ideia};Então eu me pergunto: qual a função da classe em um código desses?
Bjarne Stroustrup desde o começo, em seu livro The C&#43;&#43; Programming Language, sugere que C&#43;&#43; não é uma linguagem unicamente orientada a objetos, mas multi-paradigmas. Hoje, em 2017, ela é uma linguagem genérica e até funcional. Na época poderia ser usada como orientada a objetos, mas também como estruturada e imperativa comum. O goto funciona até hoje.
Então o erro no código acima é supor mecanicamente que como é C&#43;&#43; precisa ter classe.
Não. O código não precisa ter uma classe. No entanto, seu código precisa ter classe. Entendeu?
Ter classe é para poucos. É para programadores que se preocupam com a relação entre funcionalidade, estilo, arquitetura e todos os inúmeros elementos que tornam um código perfeito. Para ser perfeito, um código precisa levar em conta tantos elementos que apenas um programador acordado, obsessivo, fora da matrix, conseguiria observar o que deve ser feito.
Uma pequena sugestão:
#include &amp;lt;map&amp;gt;int main(int argc, const char **argv){MyMap cmds;if ( SUCCEEDED(init()) ){cmds[args]();}}HRESULT init();HRESULT cmd1();HRESULT cmd2();// você pegou a ideiaÉ a melhor solução? Não. Só uma ideia para tornar o código simples de entender, enxuto para manter, com apenas o modelito básico. Tem até um map para evitar encher de ifs. Mas não precisaria se você tem meia-dúzia de funções.
E note que eu disse funções, não classe. E é possível ter classe sem classes.
</description>
</item>

     
        <item>
  <title>CCPPBRSP 14 Postergado</title>
  <link>http://www.caloni.com.br/ccppbrsp14-postergado/</link>
  <pubDate>2017-11-21</pubDate>
  
  <guid>http://www.caloni.com.br/ccppbrsp14-postergado/</guid>
  <description>Pois é. Não vai rolar dessa vez. Por falta de quórum, o 14o. Encontro CCPPBR está postergado. Não cancelado. Mas não acontecerá essa semana. Se você já se inscreveu não se preocupe. Iremos realizar o estorno das compras do PagSeguro. Basicamente é isso.
</description>
</item>

     
        <item>
  <title>Palestras do CCPPBR14</title>
  <link>http://www.caloni.com.br/palestras-do-ccppbrsp14/</link>
  <pubDate>2017-11-20</pubDate>
  
  <guid>http://www.caloni.com.br/palestras-do-ccppbrsp14/</guid>
  <description>Esse sábado, dia 25/11/2017, teremos em São Paulo nosso 14o. encontro de programadores e aficionados C/C&#43;&#43;. Teremos palestras do pessoal das antigas e de um pessoal novato. Ou seja, terá palestras para todos os gostos. As palestras foram selecionadas pela própria comunidade CCPP através de votação, e houve excesso de palestrantes. C&#43;&#43; está bombando!
A programação já está disponível no saite do Grupo CCPP já faz mais de um mês, mas estou publicando para a visibilidade de que está perto! Segue o que teremos:
 C&#43;&#43; dentro da publicidade, arquitetura e design, por Henrique Penteado Kujawski Périgo Estilos de multitasking cooperativo, loop de eventos e programação assíncrona, por Vinícius dos Santos Oliveira Indo além do arroz com feijão RESTful, enchendo a marmita de gRPC, GraphQL, MQTT, SocketIO e outras misturas, por Rodrigo Delduca Não faça do zero, por Rosemary Sumitani Como realmente funciona o if, por Wanderley Caloni Introdução a Minifilters, por Fernando Roberto da Silva Encerramento/Happy Hour, por Quem Puder  O encontro acontecerá no bairro Vila Olímpia, próximo da estação de trem e do shopping, na Av. Doutor Cardoso de Melo, 1491. As inscrições ainda estão abertas. Nos vemos lá!
</description>
</item>

     
        <item>
  <title>Meu Primeiro Amor</title>
  <link>http://www.caloni.com.br/meu-primeiro-amor/</link>
  <pubDate>2017-10-29</pubDate>
  
  <guid>http://www.caloni.com.br/meu-primeiro-amor/</guid>
  <description>A morte pode ser um catalisador de emoções. Através dela passamos por uma transformação dentro de nós que ao mesmo tempo que nos enfraquece pela dor insuportável também nos fortalece pela nossa capacidade de sobreviver. E no fim de um processo de luto algo maravilhoso acontece: voltamos para a vida mais fortes. De vez em quando iremos mexer nessa ferida do passado, e certamente irá sangrar. Mas é através desse sangue que fazemos novos pactos com os que ainda estão vivos. Porque no fundo de todos nós não há muitas diferenças. Somos humanos; estamos condenados a viver sabendo que um dia iremos morrer. Ou pior: os que nos cercam também irão.
Essa história de férias chega exatamente como o verão: inocente, despretensioso. Gostoso de viver. Acompanhamos estes dias através dos olhos de Vada Sultenfuss (Anna Chlumsky), uma menina de pouco mais de onze anos que parece amadurecer mais rápido que suas colegas de escola. Também, pudera: ela está acostumada a conviver com a morte desde que nasceu. Seu pai (um contido e competente Dan Aykroyd), viúvo, cuida de uma funerária em sua própria casa, e Vada inicia sua narrativa falando de todos os seus sintomas para o pai, que prepara seu café da manhã. No final ela conclui: &amp;quot;pai, isso só quer dizer uma coisa: estou morrendo&amp;quot;. Sua resposta: &amp;quot;querida, me passe a maionese da geladeira&amp;quot;.
Os primeiros cinco minutos do filme já introduzem a hipocondria de Vada, sua amizade improvável com Thomas J., um garoto &amp;quot;alérgico a tudo&amp;quot; (Macaulay Culkin, surpreendentemente mais fofo ainda que em Esqueceram de Mim) e a vinda de uma potencial madastra, ou seja, um conflito (Jamie Lee Curtis, muito bem por sinal). Ah, e também sabemos que Vada está perdidamente apaixonada pelo seu professor, Mr. Bixler. Ela quer ser escritora quando crescer e frequenta seu curso de poesia nas férias.
Os passeios de bicicleta entre Vada e Thomas J. evocam uma nostalgia poderosa pela cidadezinha onde moram, pela linda árvore próxima ao lago e por como tudo isso é melhorado pelo diretor de fotografia Paul Elliott (Bravura Indômita), que usa aqui um filtro que mescla o onírico (que mistura as cores dos cenários e dos personagens) com o calor gostoso do verão (e as cores sempre atingidas pelo sol). Tudo isso é acompanhado pela seleção de músicas que beira o clichê, mas que certamente hoje se transformou em uma trilha de clássicos do cinema, e que fazem parte de um elegante passeio por uma época.
E Meu Primeiro Amor flerta a todo momento como um filme piegas, o que seria a coisa mais arriscada que um filme de verão poderia fazer. Porém, a presença de tela de Anna Chlumsky e de Macaulay Culkin, capturados em seus melhores ângulos das melhores tomadas, conseguem fortalecer a poderosa ideia de que este trabalho do diretor Howard Zieff (em seu penúltimo trabalho) não está brincando a serviço. Esta não é uma comédia inconsequente passando nos cinemas, mas um drama intimista sobre o amadurecimento de uma criança atingindo a puberdade cheia de conflitos internos.
Note como Zieff não permite que sua direção fique no caminho do roteiro da estreante Laurice Elehwany porque ele é bom demais. Ele tem falas que capturam a essência das cenas sem revelar muito: &amp;quot;cansei de bingo, acho que podemos tentar o tal do drive-in&amp;quot;, &amp;quot;saia daqui! e só volte em cinco ou sete dias!&amp;quot;. E eu nem vou dizer que a passagem onde Vada explica como ela acha que deve ser o paraíso é um dos grandes momentos do cinema. Não porque ele seja particularmente tocante ou inteligente, mas porque ele entrega dois personagens que todos nós já fomos um dia em um daqueles momentos que se lembra a vida inteira.
Isso porque o filme em si é sobre a própria vida, e o processo de vivê-la mesmo sabendo que a morte dos entes queridos, ou a despedida, é uma realidade que tivemos ou teremos que lidar. &amp;quot;My Girl&amp;quot; tenta enxergar a beleza onde pode haver muita dor e sofrimento. Não é possível criticar um filme que abrace essa ideia com tanto afinco. Não enquanto estivermos todos aqui, empenhados em tornar nossa condenação de viver a mais próxima do paraíso possível.
</description>
</item>

     
        <item>
  <title>Inscrições para o 14o. CCPPBRSP</title>
  <link>http://www.caloni.com.br/inscricoes-14-ccppbrsp/</link>
  <pubDate>2017-10-06</pubDate>
  
  <guid>http://www.caloni.com.br/inscricoes-14-ccppbrsp/</guid>
  <description>Como já foi avisado anteriormente (mas agora com local definido), nosso próximo encontro acontecerá em São Paulo (capital) dia 25 de Novembro de 2017 (sábado), no Station Vila Olímpia. Teremos uma sala equipada para palestras e coffe-break de manhã e de tarde. Mais detalhes no hot site do evento.
As inscrições pagas estão abertas! O valor único por participante é de R$ 50 reais, o que lhe dará direito a:
 Entrada ao evento, com duração o dia inteiro com no mínimo cinco palestras. Coffee-break de manhã e de tarde.  Você pode efetuar o pagamento por PagSeguro ou Bitcoins. Para o primeiro apenas efetue o pagamento e seu email será cadastrado como participante. Para mais de um participante efetue quantos pagamentos for necessário. Para o segundo efetue o pagamento com o preço de venda em reais do BTC equivalente a R$ 50 reais no dia da transação e envie seu nome, email e link da transação para wanderley@caloni.com.br. Para mais de um participante efetue o valor equivalente e nos informe os nomes e emails dos participantes.
1HY1EABQBdvGprR41xVeWcjqKbEN2PvxcP
Basicamente isso é o que temos de informação. Em breve a programação será divulgada. Fique de olho!
E nos vemos lá =)
</description>
</item>

     
        <item>
  <title>C&#43;&#43; Moderno Arranca os Cabelos por Você (std::move e classes simples).</title>
  <link>http://www.caloni.com.br/cpp-arranca-os-cabelos-por-voce/</link>
  <pubDate>2017-09-26</pubDate>
  
  <guid>http://www.caloni.com.br/cpp-arranca-os-cabelos-por-voce/</guid>
  <description>Um dos últimos posts no grupo CCPPBR do Thiago Adams chama mais uma vez a atenção para a complexidade infinita que linguagens como C&#43;&#43; estão preferindo tomar. Esta é a geração que irá sofrer as dores de compatibilidade com o passado mais que todas as outras que virão.
Isso porque mudanças pontuais que vão sendo aplicadas na linguagem e biblioteca, como move semantics, não cabe mais em exemplos de livrinhos de C&#43;&#43; para iniciantes da década de 90:
#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;memory&amp;gt;struct X{char * pString = 0;X() {}X(const char* s){pString = _strdup(s);}~X(){free(pString);}};int main(){X x1;const X x2(&amp;#34;a&amp;#34;);x1 = std::move(x2);return 0;}Neste singelo exemplo, que está errado by design, a classe X não se preocupa em proteger-se de cópias simples. Mas o programador também não se protege da ignorância e usa std::move como se ele magicamente movesse referências const, o que é absurdo.
A questão, porém, não é sobre qual é o problema no código, mas os aspectos de design de C&#43;&#43; que podem levar futuros programadores a se depararem com o mesmo problema em versões multicamadas de complexidade. Este é um exemplo óbvio, mas até quando será?
Esta crítica pode levar (pelo menos) para dois diferentes caminhos:
 O funcionamento do std::move não é intuitivo e pode levar a erros semânticos (&amp;quot;se usar o move estou movendo referências&amp;quot;); programador não conhece o funcionamento por completo. Em C&#43;&#43; o esforço de manter uma classe é muito maior hoje do que em 98/03 (&amp;quot;tomar cuidado com reference, const reference, rvalue reference...&amp;quot;); isso concordo; as mudanças são bem-intencionadas, mas a linguagem é velha com alguns esqueletos que podem começar a balançar.  C&#43;&#43;, assim como o Brasil, desde o começo nunca foi para amadores. Hoje em dia ele é impossível. Ouço galera falar que está ficando lindo, mas, francamente, está virando é um ninho de cobras. Mantenedores de bibliotecas, se não estão já arrancando os cabelos, deveriam começar.
Mas talvez com C&#43;&#43; 17&#43; os cabelos passem a cair sozinho...
</description>
</item>

     
        <item>
  <title>Entrevista com Darren Aronofsky</title>
  <link>http://www.caloni.com.br/entrevista-darren-aronofsky/</link>
  <pubDate>2017-09-24</pubDate>
  
  <guid>http://www.caloni.com.br/entrevista-darren-aronofsky/</guid>
  <description>&amp;quot;Talvez nós tenhamos interpretado erroneamente a Bíblia por muito tempo.&amp;quot; Essa foi a frase-chave de uma coletiva com Darren Aronofsky que envolveu todas as interpretações polêmicas a respeito de seu novo filme, &amp;quot;Mãe!&amp;quot;, que apresenta uma alegoria que inevitavelmente cai nas preocupações ecológicas atuais. Com a presença apenas do diretor, foi uma entrevista ágil, com boas perguntas e com uma presença de espírito de Aronofsky em cada resposta.
Darren Aronofsky é um diretor bem peculiar. Sempre explorando o gnosticismo -- a busca e a afirmação de todo tipo de conhecimento, natural e sobrenatural -- seus filmes geralmente envolvem personagens no limite de seu conhecimento e capacidade. Claro que é difícil tentar relacionar Pi, Réquiem Para um Sonho, Fonte da Vida, O Lutador, Cisne Negro e Noé sob um mesmo tema. Mas não se trata apenas dos assuntos que o diretor prefere abordar, mas do seu estilo, que costuma ser bem intenso para seus personagens.
E agora com &amp;quot;Mãe!&amp;quot; ele volta a explorar uma metáfora poderosa sobre o mundo, apelando, assim como Noé, para referências bíblicas, mas também, como em Fonte da Vida, como um apelo a múltiplas visões da realidade. Se bem que, se formos ao cerne da história, ela se parecerá mais com Cisne Negro, pois apresenta uma protagonista mulher que se depara com experiências tão bruscas e intensas que desafiam sua própria identidade.
A recepção da coletiva foi aquela muvuca de celebridades, com fotógrafos à frente e uma sala (de cinema) lotada de pessoas para aguardar um dos diretores mais badalados do momento. Por conta do número de pessoas não houve sessão de fotos, e a sessão de perguntas pareceu bem resumida, embora tenhamos passado cerca de 40 minutos na companhia de Aronofsky.
A maioria das perguntas giraram em torno da produção e criação de &amp;quot;Mãe!&amp;quot;, sempre com um pé nos vários significados da obra. Houve um chute que a personagem de Michelle Pfeiffer seria chave na história, chegando alguém até a comentar que todo o conflito de resume a ela (!). Muito tempo fora das telas e voltando agora à telona, Pfeiffer foi elogiada por Aronofsky em termos genéricos, como todo bom diretor costuma fazer. Foi curioso acompanhar as teorias da plateia de críticos e jornalistas, que de alguma forma pareciam impregnados de percepcão política a respeito de uma obra que sequer dá muitas aberturas para o tema.
Isso pode ser um reflexo dos tempos atuais, cheios de conflitos, ou de como temas como a ecologia e o feminismo se misturam com política. Por falar em feminismo, ele foi citado, até por conta da protagonista ser uma mulher e interpretada por Jennifer Lawrence, que não se priva de falar a respeito do tema em entrevistas. Mais uma vez Aronofsky foi polido e comentou que Jen Law se adaptou muito bem ao papel desde o começo, mas a menção ao feminismo ficou por isso mesmo.
Como é natural em obras abertas como &amp;quot;Mãe!&amp;quot;, muita forçação de barra foi imposta pelo público. E o diretor parecia muito confortável com qualquer uma delas. Exceto uma. Ele abriu um parênteses enfático a respeito dos que entendem que o filme é dark apenas pelo prazer de ser dark. &amp;quot;A pessoa simplesmente não entendeu a proposta&amp;quot;, disse. Não há nada mais triste para um artista que ver seu esforço minimizado por filtros banais como esse.
Sobre a superação de vida de seus personagens (como em O Lutador e Noé), disse que sua criação é uma parte dele mesmo que ele estica até virar um personagem. E ele se apegou mais ao personagem da JenLaw, mesmo que tenha tirado alguns elementos do personagem de Javier Bardem, que representa personagem importantíssimo no filme. Bem-humorado, aproveitou para comentar sobre o que todos acham sobre a situação principal de você ter visitas mal-educadas em sua casa. Ele deu um exemplo de sua vida, um amigo, que até troca de canal quando o visita em sua própria casa. &amp;quot;Vocês podem usar esse meu exemplo, embora ele tenha melhorado; mas ainda assim...&amp;quot;. Risadas da plateia.
Mas os nervos ainda estavam inexplicavalmente mais para política do que visitas mal-educadas. Seja ou não uma coincidência política da situação atual (ele desmentiu pelo menos duas vezes, explicando como demorou o processo de confecção do filme), falou que ele, assim como todo mundo do planeta, não acreditava na eleição de Trump. Mas aconteceu. E que pelo menos a vantagem é que agora é possível, em suas palavras, &amp;quot;enxergar o câncer&amp;quot;. Sobre Obama criticou a lentidão das mudanças em seu mandato.
Talvez todo governo tenha de fato uma ou outra crítica válida sobre ambientalismo. Sobre a esperança de nós mudarmos como espécie nossa situação com a natureza, ele é um otimista. Acredita que ainda há tempo para salvarmos a mãe-natureza antes que &amp;quot;ela nos exploda&amp;quot;. Salvar o planeta para nossos netos. &amp;quot;Nossos filhos, até.&amp;quot;
Outros assuntos interessantes que giraram em torno da produção de &amp;quot;Mãe!&amp;quot; foi essa maneira toda peculiar do diretor nova-iorquino conseguir, assim como seu conterrâneo Woody Allen, harmonizar o custo de seus filmes com seu sucesso comercial. Dessa forma, de produções mais modestas como Pi para um blockbuster como Noé, Aronofsky disse que produções no cinema estão sempre trabalhando no limite de seus custos. O que ele faz com sua equipe é simplesmente tentar obter o melhor com o dinheiro disponível.
Isso tem relação direta com a direção de arte de seu novo filme, em uma história que se passa sempre em uma casa e foi construída em duas frentes. Uma casa externa, isolada de tudo, foi feita para o ganho na iluminação; nos estúdios foram feitos os três andares, que foram úteis para as partes de destruição. Além disso, Darren cria um clima subjetivo e claustofóbico pelo uso limitado de tipos de tomada. Como ele mesmo explica, foram usadas apenas três tipos de tomadas no filme inteiro, todas em torno da personagem de JenLaw: atrás de seus ombros, na cabeça e sua face. Ter a possibilidade de ver acima da cabeça foi algo que pareceu ser algo particularmente intrigante para um diretor acostumado com peculiaridades visuais.
Se mostrando claramente empolgado com o seu maior desafio técnico até o momento, os últimos vinte últimos minutos de seu novo filme filme, Aronofsky resolveu concluir sua participação na coletiva voltando ao tema de ecologia e religião, abrindo um parênteses interessante sobre duas passagens aparentemente contraditórias no Gênesis, mas que na verdade se complementam. Conforme é dito para o homem no primeiro livro da Bíblia: vá e domine a Terra. Mas, ao mesmo tempo, também é dito que ele zele por ela. Hoje em dia, como ele disse, até o Papa fala sobre as responsabilidades do homem para com o planeta. E ele conclui com a frase que inicia este artigo: &amp;quot;Talvez tenhamos interpretado a Bíblia erroneamente por muito, muito tempo.&amp;quot;
Em aspectos gerais, Aronofsky é o tipo de diretor confortável em falar sobre o processo de produção, detalhes do roteiro e até mesmo sobre as opiniões acerca dos seus filmes. Ele não abraça qualquer ideia a respeito deles, mas respeitosamente ouve e conclui suas ideias. O tempo voou na coletiva graças a ótimas perguntas e respostas que, assim como seus filmes, fazem a gente refletir sobre o que estamos fazendo com nossa vida aqui na Terra.
</description>
</item>

     
        <item>
  <title>Matrix: Ghost in The Shell</title>
  <link>http://www.caloni.com.br/matrix-ghost-in-the-shell/</link>
  <pubDate>2017-09-18</pubDate>
  
  <guid>http://www.caloni.com.br/matrix-ghost-in-the-shell/</guid>
  <description>De todas as teorias malucas criadas em torno da trilogia das Irmãs Wachowski, acredito que esta que tenho para lhes falar supera em simplicidade e elegância. Por isso mesmo acredito que esta seria a solução empregada por elas caso quisessem deixar toda a trama às claras. Felizmente, não quiseram, o que deu vazão para um esoterismo e obscurantismo que torna o conjunto de três filmes indecifrável. Mas, fala sério. Sou programador. Depois de Ghost in the Shell as coisas têm se tornado mais claras ainda. Quer ver como toda essa fábula é explicada por ela mesma?
Preciso dizer que Spoilers irão ser enviados pelas máquinas nos próximos parágrafos?
A primeira e principal pista para entendermos o que se passa em Matrix Reloaded é o discurso final do Arquiteto. Ele explica sobre o código malicioso que é colocado de propósito na Matrix para que haja um movimento de revolta dos humanos, uma profecia, e que tudo isso se concentre na figura do Escolhido. É o Escolhido que carrega este código, e já houve vários deles. Neo é apenas mais um, com sutis diferenças que apontarão para uma mudança drástica no caminho delineado pelo personagem de Helmut Bakaitis (que, claro, também é um programa de computador).
No entando, como este discurso é muito complexo, cheio de detalhes feitos para confundir o espectador, peço que preste atenção não a ele, mas à fuga do Agente Smith da realidade virtual para a qual foi criado. Ele vira um vírus e uma de suas cópias escapa para o cérebro de um dos humanos de Zion. A partir daí é ele que toma controle desse humano e as máquinas o respeitam. Ele é um agente infiltrado, apesar de ser um bug. Ele não é herói nem vilão, mas um problema a ser resolvido por ambos os lados.
O que ocorre no final de Reloaded e em todo Revolutions é que Neo aparentemente consegue controlar as máquinas do lado de fora da Matrix e também enxergá-las, apesar de ter ficado cego. Isso não deveria ser uma surpresa se nos lembrássemos que, uma vez que vimos que é possível a programas como Smith se infiltrar no cérebro de humanos e assim controlá-los direto na realidade, nada mais justo que os humanos presos no gigante casulo estejam à mercê do mesmo procedimento.
E é exatamente esse o procedimento de injetar código que o Arquiteto se refere quando se dirige a Neo.
Imaginemos, então, que um processo semelhante foi feito em Neo. Código de um programa da Matrix foi injetado nele, assim como o programa Smith foi injetado no outro humano. Porém, não totalmente, mas apenas uma parte. Neo manteve sua consciência. Não precisamos tirar isso dele. Porém, ele também ganhou a capacidade de mudar as regras físicas da Matrix e de controlar as máquinas pelo lado de fora (além de enxergá-las sem precisar de olhos humanos). Tudo isso graças a código de computador inserido em seu cérebro.
Dessa forma, toda a fábula de realidade virtual vira uma maneira do romance Ghost in The Shell de se expressar por caminhos mais obscuros. Humanos são escravizados por máquinas, que possuem Inteligência Artificial, e que descobre que conseguem realizar elas também patchs de atualização no cérebro de humanos, que viram parte humano, parte máquina. Ou até totalmente máquina.
Se bem que o que eu chamo aqui de máquina é simplesmente código que não foi gerado por DNA. Tanto o cérebro humano quanto a IA das máquinas é o mesmo processo. Todos estão conectados. E é aí que reside a beleza da trilogia. Ela não tem uma conclusão correta, nem interpretações para a trama fechadas. Estamos falando sobre consciência e inteligência, mas não apenas de humanos. É uma guerra de consciências, e entender que máquinas com IA somos como nós é vital para entender como Matrix ainda continua milênios à frente do que nossa vã filosofia tecnológica tenta imaginar para o nosso futuro.
</description>
</item>

     
        <item>
  <title>Escopo Fechado: Receita De Fracasso</title>
  <link>http://www.caloni.com.br/escopo-fechado-receita-de-fracasso/</link>
  <pubDate>2017-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/escopo-fechado-receita-de-fracasso/</guid>
  <description>Quando questionado por clientes se haveria uma forma de fechar o escopo de um projeto maior que 20 horas, dessa forma limitando a interação em uma entrega única já com os requisitos definidos por ele, geralmente nossa resposta é: &amp;quot;isso nunca vai funcionar; ou se funcionar, vai sair bem caro&amp;quot;.
Sinto muito, mas não trabalhamos dessa forma. Já tivemos várias experiências ruins no passado em que o cliente jurava de pé junto que o escopo estava fechado e detalhado no máximo, mas na hora de desenvolver a história foi muito diferente. Isso não é falha de projeto, é como desenvolvimento de software funciona.
Agora, se você, como cliente, preferir trabalhar em um modelo mais tradicional, é possível sim levantar todos os requisitos. Mas imagine o drawback: já seriam cobradas as horas do levantamento como horas de trabalho (sem nada entregue), sairia mais caro pois demoraria o dobro do tempo e eu te asseguro que cobraríamos o triplo de horas, para nossa segurança (já que o cliente também quer ter a segurança do lado dele).
O que funciona melhor, de acordo com nossa experiência, acaba sendo uma combinação de elementos da metodologia ágil: estimamos o backlog de vocês e com isso as entregas semanais (ou uma frequência desejada, mas com tempo curto). Haverá uma interação mínima entre o gerente de projeto de nosso lado e um ponto focal do lado de vocês para verificar o progresso e modificar o backlog se necessário.
O risco que os clientes geralmente imaginam do escopo aberto será diluído conforme o desenvolvimento avança, permitindo tomar decisões muito rapidamente antes que a entrega vá por água abaixo. Um escopo fechado é um risco para ambos os lados e que não compensa para nenhum deles. Essa foi a nossa conclusão depois de muitos projetos fracassados. Portanto, se você pretende fracassar com seu projeto, segue a dica: use escopo fechado.
</description>
</item>

     
        <item>
  <title>Décimo-Quarto Encontro CCPPBR CFP (Call for Papers)</title>
  <link>http://www.caloni.com.br/14-encontro-ccppbrasil-cfp/</link>
  <pubDate>2017-09-11</pubDate>
  
  <guid>http://www.caloni.com.br/14-encontro-ccppbrasil-cfp/</guid>
  <description>Está aberta a temporada de Call For Papers do nosso próximo encontro de programadores e aficionados C/C&#43;&#43; Brasil, que deverá acontecer em São Paulo (capital) dia 25 de Novembro de 2017 (sábado). Para quem deseja reservar seu lugar e uma promoção nos ingressos clique no link de pré-inscrição disponível no site do grupo. Mais detalhes serão atualizados no nosso site.
</description>
</item>

     
        <item>
  <title>Ativando Ubuntu No Windows 10</title>
  <link>http://www.caloni.com.br/ativando-ubuntu-no-windows-10/</link>
  <pubDate>2017-08-29</pubDate>
  
  <guid>http://www.caloni.com.br/ativando-ubuntu-no-windows-10/</guid>
  <description>Pensei que o Ubuntu já estivesse na Windows Store disponível para qualquer gamer instalar (não sei por que um gamer faria isso). Mas não. Ainda é necessário fazer os passos de desenvolvedor expert de Windows para ativar esta opção.
Primeiro, vá nas configurações e ative o Developer Mode:
Depois vá em Adicionar/Remover Programas e ative o Windows Subsystem for Linux (Beta):
Reinicie a máquina, abra o prompt de comando, digite bash e enter. Ele irá perguntar se quer instalar o Ubuntu, diga que sim, e depois de um tempo já terá o melhor dos dois mundos: o melhor ambiente gráfico com o melhor ambiente de programação.
Cywgin quem?
</description>
</item>

     
        <item>
  <title>Para a Cúpula Filho Da Puta</title>
  <link>http://www.caloni.com.br/para-a-cupula-filho-da-puta/</link>
  <pubDate>2017-08-25</pubDate>
  
  <guid>http://www.caloni.com.br/para-a-cupula-filho-da-puta/</guid>
  <description>O Facebook me lembrou de uma imagem antiga do cartunista do Oatmeal que traduzi para o português há cinco anos. Continua atual, será?
</description>
</item>

     
        <item>
  <title>Filmes e Diretores Favoritos</title>
  <link>http://www.caloni.com.br/filmes-diretores-favoritos/</link>
  <pubDate>2017-08-23</pubDate>
  
  <guid>http://www.caloni.com.br/filmes-diretores-favoritos/</guid>
  <description>Essas perguntas no estilo de listas me fazem travar. Minha resposta sempre será injusta porque eu vou esquecer filmes e diretores que gosto mais do que os que eu citar.
Mas, sei lá, no momento não estou focando em filmes ou diretores específicos, mas em técnicas e estilos específicos. Por exemplo, revendo séries que gostei muito, como Breaking Bad, Westworld e Mr. Robot.
Há uma miríade de virtudes escondidas na confecção desses trabalhos. Isso não os torna perfeitos, mas fascinantes e únicos. Quando falamos de diretores também falamos de algo semelhante. O último filme de um diretor é seu nível de progressão na arte, que ele pode avançar, retroceder ou arriscar algo novo. Eu gosto de diretores perfeccionista que focam em sua linguagem. Aronovsky no sacrifício do indivíduo pela perfeição e conhecimento, Allen pela eterna discussão da mortalidade e banalidade do homem moderno, Nolan pelo domínio das métricas do espaço/tempo, Wo Pack pela questão da vingança, Ki Duk pelo indivíduo que transcende a si mesmo. E assim por diante :)
Mas não posso deixar de reconhecer a virtude do diretor em si em pegar qualquer tema e dominá-lo, como os trabalhos de Sydney Lumet, por exemplo.
</description>
</item>

     
        <item>
  <title>Décimo-Terceiro Encontro CCPPBrasil (Post Mortem)</title>
  <link>http://www.caloni.com.br/13-encontro-ccppbrasil-post-mortem/</link>
  <pubDate>2017-08-06</pubDate>
  
  <guid>http://www.caloni.com.br/13-encontro-ccppbrasil-post-mortem/</guid>
  <description>Mais um encontro que deu certo. No interior de SP em um sábado meio friozinho e meio calor houve o décimo-terceiro encontro de nossa comunidade C/C&#43;&#43; Brasil, em um espaço e coffee-break fornecidos pela empresa Diebold em Indaiatuba. Houve cinco palestras e o dia passou bem rápido. Parabéns a todos os envolvidos pelo sucesso do encontro.
</description>
</item>

     
        <item>
  <title>Migrando Imagens Para Imgur</title>
  <link>http://www.caloni.com.br/migrando-imagens-para-imgur/</link>
  <pubDate>2017-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/migrando-imagens-para-imgur/</guid>
  <description>Depois de migrar meus blogues para o Hugo decidi deixar o repositório mais magro migrando as imagens para um serviço de imagens. O imgur me pareceu uma solução simples com uma interface rápida (e uma API Python). Para realizar essa tarefa você vai precisar das ferramentas de sempre: grep, sed, python, vim. E lá vamos nós.
Meu primeiro passo foi realmente limpar a pasta de imagens, eliminando as que não estavam sendo usadas. A pasta de imagens ficou se acumulando por anos, e muitas imagens foram sendo carregadas através dos Wordpress da vida e plugins que deram resize nas imagens, gerando várias cópias no processo. Tudo inútil e dispendioso.
dir /b imagens\*.* &amp;gt; images.batrem transformar cada linha de images.bat em: rem grep -c imagem.png all.md images.bat &amp;gt; result.logrem a partir do vim juntar o resultado das linhas e apagar os resultados não-zerados rem imagem-found.png rem 1 rem imagem-not-found.png rem 0 v/^[0-9]/jv/0$/drem pronto; agora é só rodar o result.log como bat O principal problema de subir tudo para o imgur é que os nomes dos arquivos irão mudar e perder a referências usadas no texto. Para conseguir renomear os arquivos dentro dos artigos é necessário conectar no serviço do imgur e através dele obter o nome original do arquivo, disponível na propriedade name:
import authclient = auth.authenticate()f = open(&amp;#39;images.txt&amp;#39;)imgs = f.readlines()for img in imgs:img = img.strip(&amp;#39;\n&amp;#39;)imgur = client.get_image(img)origname = imgur.link[imgur.link.find(img):].replace(img, imgur.name)print origname, &amp;#39;=&amp;gt;&amp;#39;, imgExecutando este script será possível gerar um log no formato =&amp;gt; . O ID deles também é usado para link direto da imagem, de onde virá o comando sed que vai substituir nos artigos os nomes originais pelo link do imgur:
sed -i &amp;#34;s/&amp;lt;nome-original-do-arquivo&amp;gt;/http\/\/:\/&amp;lt;link-da-imagem-no-imgur&amp;gt;/&amp;lt;id-do-imgur&amp;gt;.&amp;lt;extensao&amp;gt;/&amp;#34; *.mdLembrar de apagar o all.md. Ele só foi usado para gerar a saída mais simples do grep.
</description>
</item>

     
        <item>
  <title>CppTests</title>
  <link>http://www.caloni.com.br/cpptests/</link>
  <pubDate>2017-07-25</pubDate>
  
  <guid>http://www.caloni.com.br/cpptests/</guid>
  <description>Iniciei um novo projeto no GitHub que tem por objetivo ser minha prancheta de trabalhos para minha palestra no próximo encontro ccpp. Há uma infinitude de coisinhas novas na linguagem C&#43;&#43;, fora as adições à biblioteca STL, mas que devem passar despercebidas da maioria dos programadores, que está mais é querendo terminar seus próprio projetos. Enquanto alguns conceitos, sintaxes e métodos não se solidificam, vale a pena dar uma espiada no futuro?
Depende.
Dei uma olhada nas últimas modificações adicionadas no Visual Studio 2017 (versão 15.3 preview 1, mas o último lançado é o preview 5), e há muitos elementos IMHO supérfluos, mas que tendem a ser integrados aos poucos (I hope).
A lista que achei interessante (com seu projeto):
 binary_literals_test. Perfumaria muito bem-vinda de uma linguagem feita para trabalhar também baixo nível. constexpr_test. Um teste que alguém fez na nossa lista ccpp do Telegram e que possui uma particularidade interessante (mais abaixo). for_range_generic_test. Ainda em teste, mas me parece a forma definitiva de iterar entre elementos em C&#43;&#43;; completamente genérico. generic_lambdas_test. E por falar em genérico, este lambda tem muito a ver com programação funcional. has_include_test. Uma maneira elegante (apesar do nome feio) de ir migrando projetos/libs aos poucos. initializer_list. Só demonstrando o que já é velho (mas que ainda não comentei no blogue). nodiscard_test. Essa é uma das features mais curiosas para escrita de código robusta. sfinae_test. O SFINAE é um dos pilares do C&#43;&#43;, e ele vem melhorando cada vez mais. static_assert_test. O que estava faltando que no Boost é macaco velho. user_defined_literals_test. Mais uma perfumaria; essa é bonitinha; para uso acadêmico. variable_templates_test. Mais algo já velho, que demonstro aqui com minha superlib de log.  constexpr para especialização em ifs A otimização no if através do uso da palavra-chave constexpr possibilita a criação de diferentes instâncias da chamada que não contém o if, mas um dos dois branches dependendo do tipo ser integral ou não.
Para que a compilação dessa opção funcione no Visual Studio 2017 15.3 é necessário inserir o parâmetro /std:c&#43;&#43;latest nas opções do projeto em C/C&#43;&#43;, Command Line:
Todos (ou a maioria) deles ainda está em teste. Acabei de baixar o preview 5, conforma um dos membros da ML dos MVPs C&#43;&#43; me informou que saiu quentinha do forno. Em breve novidades.
</description>
</item>

     
        <item>
  <title>13 Encontro (Relâmpago) C/C&#43;&#43; Brasil Indaiatuba (SP) 5 de Agosto de 2017</title>
  <link>http://www.caloni.com.br/13-encontro-ccpp-indaiatuba-sp-2017-08-05/</link>
  <pubDate>2017-07-19</pubDate>
  
  <guid>http://www.caloni.com.br/13-encontro-ccpp-indaiatuba-sp-2017-08-05/</guid>
  <description>Depois desse título não há muito o que falar. Será um encontro relâmpago porque não tivemos tempo de fazer call for papers nem de muita divulgação, que será feita pela Diebold Nixdorf, a empresa que está patrocinando esta edição.
O motivo da pressa é: ela se interessou em disponibilizar o espaço deles e coffee break para fazermos um evento lá. A empresa fica em Indaiatuba e o foco do evento seria para Campinas e região. Eles precisavam pelo menos de uma prévia dos palestrantes para aprovar com o RH e passamos os dados básicos, que foram os nomes prévios das palestras e os palestrantes.
Por fim, montei o nosso hot site como de costume com as informações que temos até o momento. Irei palestrar sobre novidades do Visual Studio para C&#43;&#43; moderno (que realmente funcionam), o Gianni sobre as mesmas novidades (possivelmente) para GCC (aka Visual Studio open source), o Strauss sobre linkedição, o Galuppo sobre ZMQ (Zero MQ) e Fernando Silva, do site DriverEntry.com.br, sobre Windows Drivers.
Espero que quem puder comparecer que compareça. Teremos um bom tempo livre e de coffee para trocarmos ideias para projetos, negócios e prazer. Tudo o que a comunidade C/C&#43;&#43; Brasil precisa é se reunir de vez em quando. Pena que esse de vez em quando seja bem de vez em quando.
</description>
</item>

     
        <item>
  <title>Como acessar submódulos no git inacessíveis?</title>
  <link>http://www.caloni.com.br/submodules-locais-no-git/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/submodules-locais-no-git/</guid>
  <description>Quando projetos remotos usam submodules é possível que algum deles seja acessível apenas através de chaves criptográficas. Isso exige que os sub-projetos necessários para fazer funcionar seu projeto podem estar fora do seu alcance e acesso, o que irá gerar durante seus comandos pull recursivos erros de ssh (publickey access).
A solução é ler a documentação e descobrir que é possível editar o arquivo .git/config para mudar a url de um submódulo inacessível pela forma do .gitmodules. Eis um exemplo de arquivo config dentro do .git:
[submodule &amp;#34;sbrubles&amp;#34;]url = git@github.com:user/project.gitVocê pode localmente alterar o endereço ssh deste submodule para algo que todos têm acesso ou só você tem acesso, como uma pasta local ou o endereço https:
[submodule &amp;#34;sbrubles&amp;#34;]url = https://github.com/user/project.gitNote que isso não irá interferir em nada no repositório localizado remotamente do projeto. Dessa forma diferentes membros da equipe podem usar diferentes formas de acessar um submódulo.
</description>
</item>

     
        <item>
  <title>Física Quântica para Filósofos</title>
  <link>http://www.caloni.com.br/fisica-quantica-para-filosofos/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/fisica-quantica-para-filosofos/</guid>
  <description>O filósofo Michael Huemer explica o mecanismo de manipulação e medição do spin dos elétrons. Há infinitos spins, sendo que ele se foca no que ele chama x-spin e y-spin, spins separados em 90 graus.
A primeira noção é que ao ser colocado em contato com um divisor magnético o elétron pode seguir duas direções distintas e diametralmente opostas à inclinação do dispositivo. Não há como saber de antemão qual sentido o elétron irá seguir.
Porém, após sabermos o sentido de um elétron, o mesmo teste feito para esse mesmo elétron irá gerar o mesmo resultado. Ou seja, ele irá seguir sempre pelo mesmo sentido.
Ao fazer, contudo, o mesmo teste em outro ângulo -- digamos, 90 graus de inclinação do teste inicial, ou qualquer um que desejar -- o elétron não mais terá seu sentido previsto para o teste original. De alguma forma o segundo teste altera o estado atingido pelo primeiro.
É feito então um teste conjunto, onde uma &amp;quot;caixa&amp;quot; com esse aparato no ângulo que chamaremos x-spin divide os elétrons que saem nos dois sentidos opostos e redireciona-os para a mesma entrada de outra caixa que faz o teste para outro ângulo, que iremos chamar de y-spin.
O curioso aqui é que enquanto as duas saídas estão conectadas e não possuem nenhuma forma de medir para onde o elétron saiu pela primeira caixa, o estado de y-spin, ou seja, a segunda caixa, é determinada com certeza. Seu estado nunca é alterado. Se todos os elétrons estiverem saindo por apenas um sentido y-spin no começo do experimento, todos continuarão saindo pelo mesmo sentido após passar por ambas as caixas.
Mais curioso é quando se resolve bloquear uma das saídas da primeira caixa, a x-spin, ou medir o estado de uma de suas saídas. Feito isso, qualquer um dos dois e apenas um, o estado de y-spin é alterado e não se sabe mais qual será a saída da segunda caixa.
Até aqui há resultados estranhos para esse experimento, mas isso não contradiz a realidade ou a lógica clássica, já que os experimentos são realizados em tempos distintos, podendo ter resultados diferentes.
A contradição tem que existir na forma de interpretação desses fenômenos, que é o que acontece através da CI, ou Copenhagen Interpretation, a forma oficial mais usada para interpretar os fenômenos quânticos.
Ela afirma não que o elétron está em um dos dois caminhos desse experimento, mas que ele está em um dos dois e não está em nenhum deles ao mesmo tempo. Isso sim é contraditório.
No entanto, toda a mecânica quântica, a série de cálculos precisos em uma matemática criada para resolver a trajetória de elétrons nesses experimentos, foi criada e está sendo utilizada sob essa ótica. Ainda que ela consiga prever com precisão os movimentos dos elétrons, sua interpretação é contraditória sob a ótica da lógica clássica.
Além disso, a CI confere um aspecto diferente de todas as partículas da realidade comparadas com as partículas que formam os medidores de elétrons e nosso próprio corpo, ou olhos humanos, o que é um tanto incômodo em uma teoria física.
Há uma interpretação mais simples onde faltam ainda lacunas criada pelo físico Niehs Bohr. Ele analisa esses fenômenos pela dualidade partícula/onda e cria uma abstração matemática para explicar como o elétron tem seu caminho influenciado pelas medidas feitas e pelo bloqueio do caminho de uma das ondas do que ele chama de &amp;quot;espaço configuracional&amp;quot;, uma abstração que divide a onda associada à partícula em duas (ainda que a partícula seja apenas uma).
Ainda há de nascer uma teoria que explique melhor os efeitos descobertos na física quântica, mas por enquanto é necessário um pouco de ceticismo sobre qualquer explicação atual, principalmente a que precisa negar a própria lógica que tornou possível chegar às conclusões dos experimentos e da própria ciência como um todo.
Original: http://www.owl232.net/qm.htm
</description>
</item>

     
        <item>
  <title>Insights sobre produtividade, auto-ajuda e melhora contínua</title>
  <link>http://www.caloni.com.br/insights-sobre-produtividade-auto-ajuda-e-melhora-continua/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/insights-sobre-produtividade-auto-ajuda-e-melhora-continua/</guid>
  <description>É muito comum programadores, hackers e nerds em geral procurarem bons artigos que os tornem pessoas mais produtivas sem sacrificar a saúde física e mental. No decorrer dos anos me deparei com umas boas leituras. Tão boas que de vez eu quando eu volto a lê-las, e tão boas que acho que vale a pena compartilhar aqui:
 10 Passos para a Estratégia Kaizen 5 Unusual Ways to Start Working Smarter, Not Harde, Backed by Science The Mechanics of Emotion Best Writing Advice for Engineers I&#39;ve Ever Seen. Period. How to Beat Procrastination How to Make Mistakes How to be a great software developer News is bad for you and giving up reading it will make you happier O cansaço mental Scott Adams: How to Be Successful Sleep Everything You Need To Know Technology is Heroin The 10 commandments for happiness and success What You&#39;ll Wish You&#39;d Known FLOW - a productivity hack for life Flow (psychology)) Jessica Livingston&#39;s Pretty Complete List on How Not to Fail Negative Emotions Are Key to Well-Being Optimizing Your Development Environment Start by Understanding the Emotions Involved Willpower Improvement  Espero que essa lista te ajude de alguma maneira.
Fonte: Hacker News, internet, horas e mais horas de procrastinação, horas e mais horas perdidas de sono.
</description>
</item>

     
        <item>
  <title>SystemRescueCD: um CD cheio de ferramentas Linux para desenvolvedores e suporte</title>
  <link>http://www.caloni.com.br/systemrescuecd-um-cd-cheio-de-ferramentas/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/systemrescuecd-um-cd-cheio-de-ferramentas/</guid>
  <description>Há diversas distros Linux capazes de bootar via CD e com uma penca de ferramentas. Conheci há alguns anos uma delas: a SystemRescueCd: um disco de recuperação de HDs com diversas ferramentas embutidas. Dentro dele pode ser inserido outras ferramentas que achar interessante, e o mais importante, desenvolver através do próprio CD suas ferramentas.
A modificação do CD pode ser feita bootando com ele mesmo, seguinto o tutorial da própria SystemRescueCd. No entanto, para facilitar o uso, é possível utilizá-lo em um ambiente virtualizado (criar uma VMWare que boote pelo CD, por exemplo, e depois instalar no HD virtual).
Outra opção interessante é montar outras partições partindo do próprio CD. Ao bootar com o CD da SystemRescue, após ter acesso ao terminal pela primeira vez, detecte e formate o HD Linux usando a ferramenta fdisk. Dentro da ferramenta use as opções padrão e crie uma particão Linux. Ao final, escreva com &#39;w&#39;, formate a partição (ex: mkfs.ext4) e a partição já deverá estar disponível no próximo boot.
ls /dev/sd*/dev/sda /dev/sdbfdisk /dev/sdamkfs.ext4 /dev/sda1Para formatar uma partição Windows é possível realizar o mesmo procedimento, mas trocar o tipo de partição para Windows FAT32. Com isso a partição estará disponível para ser montada tanto na máquina virtual quanto na real.
Desligue a VM. A partir do Windows, monte o HD Windows e formate a partição criada. Ou, se a partição ainda não foi criada é só criar pelo Gerenciador de Discos do Windows.
shutdown -h -t 0 nowObs.: Apenas a VM ou a máquina real podem utilizar o HD de uma vez. Portanto, para copiar arquivos para o HD virtualizado é necessário desligar a VM antes.
Customizando seu CD Seguindo o tutorial do SystemRescueCD (&amp;quot;Step-01: Mount the working partition&amp;quot;), vamos montar a partição Linux na pasta /mnt/custom.
% mkdir /mnt/custom% mount /dev/sda1 /mnt/customEm seguida extraia os arquivos atuais do CD para a pasta custom (essa operação pode demorar alguns minutos):
% /usr/sbin/sysresccd-custom extractApós a conclusão dessa operação, os arquivos customizados poderão ser encontrados em /mnt/custom/customcd/files/bin
ls /mnt/custom/customcd/files/binPara copiar os arquivos novos, monte a partição Windows e copie de uma pasta para outra. Já existe uma pasta em mnt chamada windows que pode ser alvo da montagem. Abaixo os comandos necessários para atualizar um possível script:
mount /dev/sdb1 /mnt/windowscp /mnt/windows/script.sh /mnt/custom/customcd/files/scriptoverwrite? yVoilá! Agora que os arquivos já foram atualizados é hora de regerar um novo ISO do CD. Para isso, executar o seguinte script do RescueCD (&amp;quot;Step-10: Create the new ISO image&amp;quot;); esse comando pode demorar alguns minutos:
/usr/sbin/sysresccd-custom isogen escolha_um_nomeApós a conclusão do comando o novo ISO deverá estar no diretório /mnt/custom/customcd/isofile/ com a data/hora atual. Copie este arquivo para a partição Windows para ter acesso ao ISO na máquina real:
cp /mnt/custom/customcd/isofile/*.iso /mnt/windowsDesligue a máquina virtual e volte a montar o HD na máquina real. O ISO do novo CD estará disponível.
</description>
</item>

     
        <item>
  <title>Forma simples de baixar atualizações remotamente de um cliente para um servidor</title>
  <link>http://www.caloni.com.br/forma-simples-de-baixar-atualizacoes-remotamente-de-um-cliente-para-um-servidor/</link>
  <pubDate>2017-03-23</pubDate>
  
  <guid>http://www.caloni.com.br/forma-simples-de-baixar-atualizacoes-remotamente-de-um-cliente-para-um-servidor/</guid>
  <description>A forma mais simples e independente de código para efetuar essa tarefa para Windows é no servidor subir um file server em qualquer porta disponível, e a forma de file server mais simples que existe é o embutido em qualquer instalação Python:
python -m SimpleHTTPServerPara que não seja necessário instalar o Python no servidor é possível transformar essa chamada em um executável e suas dependências standalone:
import SimpleHTTPServerimport SocketServerPORT = 8000Handler = SimpleHTTPServer.SimpleHTTPRequestHandlerhttpd = SocketServer.TCPServer((&amp;#34;&amp;#34;, PORT), Handler)print &amp;#34;serving at port&amp;#34;, PORThttpd.serve_forever()Esse script pode ser compilado pela ferramenta py2exe, instalável pelo próprio Python. É necessário criar um arquivo setup.py na mesma pasta do script e através desse script gerar uma pasta dist com o script &amp;quot;compilado&amp;quot; e pronto para ser executado.
from distutils.core import setupimport py2exesetup(console=[&amp;#39;fileserver.py&amp;#39;])Pelo prompt de comando executar o seguinte comando que irá gerar a pasta dist:
python setup.py py2exeUma vez gerada a pasta, renomear para fileserver e copiar no servidor em qualquer lugar (ex: pasta-raiz). Executar de qualquer pasta que se deseja tornar acessível via browser ou qualquer cliente http:
cd c:\toolsc:\fileserver\fileserver.exe Para testar basta acessar o endereço via browser:
Lado cliente Do lado cliente há ferramentas GNU como curl e wget para conseguir baixar rapidamente qualquer arquivo via HTTP. Para máquinas com Power Shell disponível há um comando que pode ser usado:
powershell wget http://127.0.0.1:8000/Procmon.exe -OutFile Procmon.exePorém, caso não seja possível usar o Power Shell o pacote básico do wget do GnuWin32, de 2MB, já consegue realizar o download.
c:\Temp\bitforge\wget&amp;gt;dirVolume in drive C is SYSTEMVolume Serial Number is 5C08-36EEDirectory of c:\Temp\bitforge\wget23/03/2017 13:25 &amp;lt;DIR&amp;gt; .23/03/2017 13:25 &amp;lt;DIR&amp;gt; ..03/09/2008 17:49 1.177.600 libeay32.dll14/03/2008 19:21 1.008.128 libiconv2.dll06/05/2005 16:52 103.424 libintl3.dll03/09/2008 17:49 232.960 libssl32.dll31/12/2008 11:03 449.024 wget.exec:\Temp\bitforge\wget&amp;gt;wget http://127.0.0.1:8000/Procmon.exeSYSTEM_WGETRC = c:/progra~1/wget/etc/wgetrcsyswgetrc = c:/progra~1/wget/etc/wgetrc--2017-03-23 13:44:13-- http://127.0.0.1:8000/Procmon.exeConnecting to 127.0.0.1:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 2046608 (2,0M) [application/x-msdownload]Saving to: `Procmon.exe&#39;100%[===================================================================================================================================&amp;gt;] 2.046.608 --.-K/s in 0,006s2017-03-23 13:44:13 (348 MB/s) - `Procmon.exe&#39; saved [2046608/2046608]c:\Temp\bitforge\wget&amp;gt;E assim com poucas linhas de código já é possível iniciar um client/servidor via http que fornece arquivos de atualização. A própria versão do pacote e detalhes podem estar disponíveis na mesma pasta.
</description>
</item>

     
        <item>
  <title>NativeFloripa 2017: Impressões</title>
  <link>http://www.caloni.com.br/native-floripa-2017-impressoes/</link>
  <pubDate>2017-03-21</pubDate>
  
  <guid>http://www.caloni.com.br/native-floripa-2017-impressoes/</guid>
  <description>A despeito de poucas pessoas envolvidas na organização, o primeiro evento no estilo Encontro CCPPBrasil (sem ser um encontro CCPPBrasil) foi um grande sucesso. Houve um nível de palestras razoável com um público idem. Houve também uma maior participação das pessoas, com perguntas e às vezes quase um debate. Houve café no coffee break, mas mais importante: houve chope artesanal no Happy Hour. E por causa disso não há comparativos com encontros C&#43;&#43; de Sampa e Rio =).
Palestrei duas vezes, sobre engenharia reversa e moedas digitais, nos dois dias do evento (18, 19 de março de 2017, sábado e domingo). Não consegui assistir todas as palestras porque seria fisicamente impossível, já que houve no sábado uma divisão em duas salas. Uma lástima, porque muitas vezes gostaria de ver ambas as palestras que estavam disputando o tempo. No domingo fomos de single-threaded, e infelizmente o nível de informação foi o que ficou mais aquém, com os palestrantes não tendo um domínio muito bom de conteúdos, como interop entre Go e C (que achei horrível), ou houve palestras muito básicas e verborrágicas à toa, como a construção de um exemplo bobo em OpenCV que une key-points (em um código-fonte de gosto discutível).
Felizmente, com pouco público, houve a possibilidade de interagir com muitas pessoas diferentes com interesses diferentes. Houve um networking razoável, mas a impressão que ficou foi que os temas foram tão esparsos que não houve muito engajamento de uma possível plateia que ficou de fora e que resolveu não viajar para Floripa para ver apenas uma ou duas palestras.
De qualquer forma, houve gente de fora (eu incluso). Muita gente de SP e do Sul, pelo que pude constatar (muita gente == mais que meia-dúzia). Também houve bastante palestras de uma empresa só (esqueci o nome, mas isso não importa, pois não divulgaria aqui). O preço do ingresso foi muito válido para os pagantes, IMHO, porque além do coffee-break havia máquinas de chope no recinto e um ambiente extremamente agradável no melhor estilo empresa de startup ou incubadora, com design modernão. Ah, e o chope do Happy de sábado foi na faixa. Houvi falar que há eventos muitos mais caros com restrição de salas feitos em universidades onde serve-se biscoito seco e no almoço um lanche sub-way surrado. Em comparação, NativeFloripa foi algo muito, muito superior.
</description>
</item>

     
        <item>
  <title>Entrando na zona com Windows</title>
  <link>http://www.caloni.com.br/entrando-na-zona-com-windows/</link>
  <pubDate>2017-03-14</pubDate>
  
  <guid>http://www.caloni.com.br/entrando-na-zona-com-windows/</guid>
  <description>Update 2019-03-20: Adicionando programa para fazer tela cheia no Windows e retirados detalhes que não uso mais.
Um artigo anterior havia dado umas dicas de como transformar o Vim em uma ferramenta para toda obra, com isso limitando as distrações quando se está em um computador, e com isso facilitando a entrada e a permanência no estado de fluidez de produtividade que conhecemos como &amp;quot;flow&amp;quot;, ou estar na zona. Agora é a vez do Windows.
O Windows 10 já vem com atalhos pré-instalados assim que você loga nele. Tem browser, navegador de arquivos, notícias, e uma caralhada de coisas inúteis que ficam se mexendo na tela, chamando sua atenção, distraindo sobre o que é mais importante.
Mas é possível arrancar tudo isso e deixar na barra de tarefas pinado apenas as coisas realmente vitais para o uso do computador de trabalho, geralmente o terminal, o navegador (pesquisa, emails, etc) e o editor (não necessariamente o Vim).
Otimizando o terminal O terminal do Windows, o Command Prompt, ou cmd para os íntimos, sofreu algumas mudanças ultimamente. Entre elas há a transparência, o que o tornou cool, e a tela cheia (atalho Alt&#43;Enter), o que o tornou ideal como ferramenta de navegação para programadores (melhor do que o explorer, que virou um penduricalho de atalhos inúteis também). Você pode ativá-lo já entrando na tela cheia e com o code page de sua preferência (o meu é 65001, que é o utf8) usando esse pequeno programa:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;windows.h&amp;gt;#pragma comment(lib, &amp;#34;user32&amp;#34;)int main(){if( ! SetConsoleDisplayMode(GetStdHandle(STD_OUTPUT_HANDLE), CONSOLE_FULLSCREEN_MODE | CONSOLE_WINDOWED_MODE, NULL) ){// Se falhas com GLE 120 (função não suportada) usar função abaixo. ::SendMessage(::GetConsoleWindow(), WM_SYSKEYDOWN, VK_RETURN, 0x20000000);}system(&amp;#34;chcp 65001&amp;#34;);}Configurando o git para controlar o fonte rapidamente Os comandos do git são muito verbose. Duas letras já seriam suficiente (o Windbg manipula seu programa com apenas uma...). Para otimizar a digitação no git crie uns aliases em seu HOME.gitconfig:
[user]name = Wanderley Caloniemail = wanderley.caloni@bitforge.com.br[alias]st = statusbr = branchci = commitco = checkout[core]editor = c:/Programs/Vim/vim80/gvim.exeautocrlf = trueexcludesfile = C:\\Users\\Caloni\\.gitignorefileMode = falseAtalhos da barra iniciar Agora, através dos atalhos Win&#43;1, 2, 3... pode-se abrir e alternar entre os aplicativos principais do seu dia-a-dia, que devem ficar &amp;quot;pinados&amp;quot; na barra de tarefas. Os meus atualmente são três: terminal (1 cmd), editor (2 vim) e browser (3 chrome). Não é necessário colocar coisas como Visual Studio, já que minha navegação é feita rapidamente pelo terminal para o projeto que irei mexer. Com isso o foco fica restrito a apenas uma coisa: o que você tem que fazer hoje? =)
</description>
</item>

     
        <item>
  <title>O velho problema do project out of date do Visual Studio</title>
  <link>http://www.caloni.com.br/o-velho-problema-do-project-out-of-date-do-visual-studio/</link>
  <pubDate>2017-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/o-velho-problema-do-project-out-of-date-do-visual-studio/</guid>
  <description>Acho que todo mundo já passou por isso. Você compila todo o projeto bonitinho e no final, ao depurar, ele faz aquela velha pergunta: &amp;quot;o projeto está desatualizado: deseja compilar novamente?&amp;quot;. Mas como assim? Eu acabei de compilar, não faz nem cinco segundos. Está quentinho, saiu do forno agora.
Às vezes o Visual Studio cria umas esquisitices que se perpetuam por todas as versões. Isso tem algum sentido. Funciona mais ou menos assim a lógica do &amp;quot;project out of date&amp;quot;: se existir algum arquivo cuja data/hora eu não consigo verificar eu considero que o projeto está desatualizado. Por que? Pode ser que esse arquivo tenha que ser gerado automaticamente. Pode ser que houve erro de acesso. Pode ser várias coisas, mas ainda assim faz sentido.
Exceto quando o arquivo realmente não existe.
E isso é bem comum de acontecer em um projeto com algum refactory. Você acabou movendo alguns arquivos compartilhados entre projetos, mas em algum desses projetos o arquivo ainda está sendo apontado para o path errado, onde ele não mais existe. No entanto, por se tratar de um arquivo não-necessário para a compilação (ex: um header) não há erros na compilação. Apenas nessa detecção do Visual Studio.
O problema é que não existe nenhuma dica do que está errado em condições normais de temperatura e pressão. Para conseguiu olhar mais detalhes temos que ir em Tools, Options e configurar mais saída para o build. Pelo menos como detailed:
A partir daí teremos mais saída na janela de output do build. Logo no começo (talvez pela equipe do VS saber que isso é bem comum) há uma dica de quais arquivos exige o rebuild (você pode fazer isso apenas clicanco em build do projeto que sempre acusa como out of date):
Depois de detectado o arquivo faltante, é só removê-lo ou atualizar o path. Esse erro não deve mais acontecer e agora você só precisa compilar uma vez e sair depurando.
</description>
</item>

     
        <item>
  <title>Visualizando QString no Visual Studio</title>
  <link>http://www.caloni.com.br/visualizando-qstring-no-visual-studio/</link>
  <pubDate>2017-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/visualizando-qstring-no-visual-studio/</guid>
  <description>O Qt não é um framework que pode apenas ser usado no QtCreator. Através de um projeto bem configurado pelo CMake, por exemplo, é possível ter um projeto que pode ser compilado e depurado tanto nas ferramentas do Qt quanto no Visual Studio. No entanto, na hora de depurar algumas coisas são difíceis de fazer. Por exemplo: como olhar o conteúdo de uma QString?
O Visual Studio utiliza um mecanismo que lembra os comandos bizarros que se usa no WinDbg, mexendo com registradores e tal. Através dessa combinação é possível dizer para o depurador como interpretar determinados tipos de objetos. Ele já vem obviamente pronto para std::string, CString (ATL) e deveria vir com QString, de tão famosa que é. Mas a versão do Visual Studio 2015 não vem. O jeito então é editar diretamente o arquivo onde ficam esses padrões.
; AutoExp.Dat - templates for automatically expanding data O nome do arquivo é autoexp.dat e ele fica em uma pasta no estilo Program Files, Microsoft Visual Studio, Common7, Packages, Debugger. É melhor você retirar ele dessa pasta antes de sobrescrevê-lo para não ter erro de acesso. Ao abri-lo verá que no começo há vários comentários que explicam como é o funcionamento desse padrão.
; type=[text]&amp;lt;member[,format]&amp;gt;... ; ; type	Name of the type (may be followed by &amp;lt;*&amp;gt; for template ;	types such as the ATL types listed below). ; ; text	Any text.Usually the name of the member to display, ;	or a shorthand name for the member. ; ; member	Name of a member to display. ; ; format	Watch format specifier. One of the following: ; ;	Letter	Description	Sample	Display ;	------	--------------------------	------------ ------------- ;	d,i	Signed decimal integer	0xF000F065,d -268373915 ;	u	Unsigned decimal integer	0x0065,u	101 ;	o	Unsigned octal integer	0xF065,o	0170145 ;	x,X	Hexadecimal integer	61541,X	0X0000F065 ;	l,h	long or short prefix for	00406042,hx 0x0c22 ;	d, i, u, o, x, X ;	f	Signed floating-point	3./2.,f	1.500000 ;	e	Signed scientific-notation	3./2.,e	1.500000e&#43;000 ;	g	Shorter of e and f	3./2.,g	1.5 ;	c	Single character	0x0065,c	&amp;#39;e&amp;#39; ;	s	Zero-terminated string	pVar,s	&amp;#34;Hello world&amp;#34; ;	su	Unicode string	pVar,su	&amp;#34;Hello world&amp;#34; ; ; For details of other format specifiers see Help under: ; &amp;#34;format specifiers/watch variable&amp;#34; Felizmente (e também obviamente) o pessoal do Qt já fez uma entrada na wiki que explica como fazer para interpretar corretamente uma QString. Eles mesmos admitem que a coisa ficou difícil desde a última versão (Qt 5), mas ainda assim é possível. E, se tudo falhar, ainda é possível usar a janela de Watch:
(char*)str.d &#43; str.d-&amp;gt;offset,suMas não foi o caso dessa vez. Tudo funcionou perfeitamente assim que incluí os valores da Wiki logo no começo da sessão Visualizer.
</description>
</item>

     
        <item>
  <title>Palestra: como criar moedas digitais em casa com C&#43;&#43; (kick-off)</title>
  <link>http://www.caloni.com.br/palestra-como-criar-moedas-digitais-em-casa-com-cpp-kick-off/</link>
  <pubDate>2017-02-19</pubDate>
  
  <guid>http://www.caloni.com.br/palestra-como-criar-moedas-digitais-em-casa-com-cpp-kick-off/</guid>
  <description>Esta palestra tem como objetivo ensinar o que são moedas digitais, como o bitcoin, e cada passo necessário o algoritmo e implementação para torná-la real. Será utilizado C&#43;&#43; como a linguagem-base e o foco está mais na implementação do que na matemática ou no algoritmo. Assim como foi criado o bitcoin, o importante a aprender é como unir diferentes tipos de conhecimento e tecnologia em torno de um objetivo único, simples e prático.
A partir da criação da moeda surge a necessidade de facilitar o seu uso, um problema recorrente em todas as mais de 700 moedas digitais existentes no mercado e no laboratório, incluindo o bitcoin. Após a palestra teremos uma discussão de como levar a tecnologia ao usuário comum.
Construindo os princípios básicos Para nossa moeda digital utilizaremos um sistema simples, rápido e prático para subir informações na memória de um nó (server) e repassar essas informações para outros nós, o tiodb. Este projeto mantém contêineres STL na memória da maneira mais enxuta possível e eles são acessíveis através do protocolo mais simples possível utilizando uma gama de linguagens (C, C&#43;&#43;, Python, .NET).
A primeira coisa é compilar o projeto tiodb, que irá disponibilizar alguns binários em sua saída:
 tio.exe é o executável central cuja instância mantém contêineres na memória; InteliHubExplorer.exe é uma interface simples para navegar por esses contêineres; tioclient.dll é a biblioteca dinâmica que pode ser usada por clientes para acessar o tio.  Podemos rodar o tio deixando ele usar os parâmetros padrão ou alterar número da porta e outros detalhes. Vamos executar da maneira mais simples:
C:\Projects\tiocoin\tiodb\bin\x64\Debug&amp;gt;tio Tio, The Information Overlord. Copyright Rodrigo Strauss (www.1bit.com.br)Starting infrastructure...Saving files to C:/Users/Caloni/AppData/Local/TempListening on port 2605Up and running!OK, tio rodando e ativo. Podemos navegar já pelos seus contêineres usando o InteliHubExplorer:
Por convenção os contêineres seguem um padrão de nomes que se assemelha a uma hierarquia de diretórios, e os nomes que começam com underline são internos/reservados. O contêiner meta/sessions, por exemplo, contém uma lista simples das conexões ativas deste nó.
A partir do servidor funcionando é possível criar novos contêineres e mantê-los, adicionando, atualizando e removendo itens. A partir dessas modificações outros clientes podem receber notícias dessas modificações e tomar suas próprias decisões.
Vamos criar e popular um contêiner inicial de transações com um GUID zerado, e a partir dele vamos adicionando novas &amp;quot;transações&amp;quot;. Também iremos permitir o monitoramento dessas transações.
try{tio::Connection conn;conn.Connect(server, port);if (args.find(&amp;#34;--build&amp;#34;) != args.end()){tio::containers::list&amp;lt;string&amp;gt; transactionsBuilder;transactionsBuilder.create(&amp;amp;conn, &amp;#34;transactions&amp;#34;, &amp;#34;volatile_list&amp;#34;);transactionsBuilder.push_back(&amp;#34;{00000000-0000-0000-0000-0000000000000&amp;#34;);}else if (args.find(&amp;#34;--add&amp;#34;) != args.end()){tio::containers::list&amp;lt;string&amp;gt; transactionsAdd;transactionsAdd.create(&amp;amp;conn, &amp;#34;transactions&amp;#34;, &amp;#34;volatile_list&amp;#34;);string newTransaction = NewGuid();if( newTransaction.size())transactionsAdd.push_back(newTransaction);elsecout &amp;lt;&amp;lt; &amp;#34;Error creating transaction\n&amp;#34;;}else if (args.find(&amp;#34;--monitor&amp;#34;) != args.end()){tio::containers::list&amp;lt;string&amp;gt; transactionsMonitor;transactionsMonitor.open(&amp;amp;conn, &amp;#34;transactions&amp;#34;);transactionsMonitor.subscribe([](auto container, auto containerEvt, auto key, auto value){int eventCode = stoi(containerEvt);switch (eventCode){case TIO_COMMAND_PING:cout &amp;lt;&amp;lt; &amp;#34;Ping!\n&amp;#34;;break;case TIO_EVENT_SNAPSHOT_END:cout &amp;lt;&amp;lt; &amp;#34;Snapshot end\n&amp;#34;;break;case TIO_COMMAND_PUSH_BACK:cout &amp;lt;&amp;lt; &amp;#34;New transaction &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;#34; inserted\n&amp;#34;;break;default:cout &amp;lt;&amp;lt; &amp;#34;Unknown event &amp;#34; &amp;lt;&amp;lt; hex &amp;lt;&amp;lt; eventCode &amp;lt;&amp;lt; &amp;#34; with key &amp;#34; &amp;lt;&amp;lt; dec &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; and with value &amp;#34; &amp;lt;&amp;lt; value;break;}});while (true){conn.WaitForNextEventAndDispatch(0);Sleep(1000);}}else{tio::containers::list&amp;lt;string&amp;gt; transactionsReader;transactionsReader.open(&amp;amp;conn, &amp;#34;transactions&amp;#34;);for( size_t transactionIdx = 0; transactionIdx &amp;lt; transactionsReader.size(); &#43;&#43;transactionIdx )cout &amp;lt;&amp;lt; &amp;#34;Transaction &amp;#34; &amp;lt;&amp;lt; transactionsReader.at(transactionIdx) &amp;lt;&amp;lt; endl;}break; // just testing and developing...}catch (tio::tio_exception&amp;amp; e){Log(&amp;#34;Connection error: %s&amp;#34;, e.what());break;}catch (std::runtime_error&amp;amp; e){Log(&amp;#34;Runtime error: %s&amp;#34;, e.what());break;}catch (...){Log(&amp;#34;Catastrophic error&amp;#34;);break;}Após executar esse código passando o argumento &amp;quot;--build&amp;quot; e atualizarmos o IntelihubExplorer poderemos ver o novo contêiner e seu conteúdo:
É possível ler o código rodando o mesmo programa sem passar o argumento &amp;quot;--build&amp;quot;:
Agora imagine que exista um cliente da tiocoin que está monitorando as transações deste servidor para verificar a partir de qual momento uma transação foi aceita (supondo que este contêiner possui as transações aceitas):
Voilà! Agora temos um sistema inicial com um contêiner que irá manter os IDs de supostas transações de nossa moeda digital. Está compilando e está rodando, e em cima disso poderemos ir adicionando as funcionalidades.
Atenção: você poderá encontrar o repositório do tiocoin aqui.
</description>
</item>

     
        <item>
  <title>Native Floripa 2017: Palestras</title>
  <link>http://www.caloni.com.br/native-floripa-2017-palestras/</link>
  <pubDate>2017-02-09</pubDate>
  
  <guid>http://www.caloni.com.br/native-floripa-2017-palestras/</guid>
  <description>Já está disponível na grade de palestras do Native Floripa 2017 o conteúdo que será ministrado nos dois dias do final de semana dias 18 e 19 de março de 2017 em Florianópolis, na Associação Catarinense de Empresas de Tecnologia (Rodovia SC 401, Km 4, Bairro Saco Grande, Florianópolis, SC, CEP 88032-000, Telefone (48) 2107-2700). As palestras englobam trabalhos acadêmicos, teoria da computação, demonstração de bibliotecas e práticas comuns no dia-a-dia, treinamentos em engenharia reversa, embarcados e internet das coisas, e toda coleção de linguagens bizarras que você poderá conhecer. Ah, e moedas digitais (eu! eu!) =)
 Conectando EFL Models a Elementary Widgets Usando C&#43;&#43;14 com CPUs ATmel (Arduinos) Acessando código nativo em Elixir Apache Mynewt: An OS and Tools for the Embedded World Desenvolvimento de sistema visão computacional de tempo real usando Multithreaded IO-Pipeline com C&#43;&#43; e OpenCV Soletta: Closing the IoT Development Gap Engenharia Reversa para Principiantes e Demo: Quebrando Dicionário Houaiss (eu! eu!) Go C, Go! - Interoperando Go e C Por que Rust? Implementação Inicial da RFC 6897 (MP-TCP) Não use ponteiros! Desenvolvimento de ferramentas Open Source para sistemas embarcados Visualizando imagens médicas com C&#43;&#43; Modificando Clang para gerar arquivos coq do proof assistant para pré e pós-condições Visão computacional com OpenCV: implementando uma simples interface por webcam Apresentando a biblioteca cryptox Como criar moedas digitais em casa com C&#43;&#43; (eu! eu!) IButterFree: Uma biblioteca gráfica opensource para arquiteturas enxutas Implementando algoritmos ao estilo da STL  Se isso ainda não tocou nenhum sino em sua cabeça, talvez a lista dos palestrantes o faça:
 Alan Silva Carlos Eduardo Gesser Expertise Solutions Fabio Galuppo Fabio Utzig Felipe Magno de Almeida Gustavo Sverzut Barbieri Larry Lira Lauro Moura Luiz Barreto Marcelo Castellani Patrick José Pereira Renan Prata Rodrigo Madera Vitor Sousa Da Silva Wanderley Caloni (eu! eu!)  As inscrições já estão abertas e o preço me impressionou. Para um evento com dois dias, está bem mais acessível que o TDC.
</description>
</item>

     
        <item>
  <title>Pacotes perdidos do NuGet em projetos C&#43;&#43; no Visual Studio</title>
  <link>http://www.caloni.com.br/pacotes-perdidos-nuget-em-projetos-cpp-no-visual-studio/</link>
  <pubDate>2017-02-08</pubDate>
  
  <guid>http://www.caloni.com.br/pacotes-perdidos-nuget-em-projetos-cpp-no-visual-studio/</guid>
  <description>É muito bom (para quem gosta) usar a IDE e viver feliz sem precisar se preocupar em digitar comandos estranhos no prompt. Porém, essa vida acaba quando ocorre o primeiro erro inexplicável, aquele tipo de erro que não importa onde você olhe, não há nada para olhar. Até você apelar para ferramentas de macho.
Que nem hoje de manhã, quando fui inocentemente baixar uma versão limpa do tiodb e após baixar todos os pacotes do NuGet, o gerenciador de pacotes do Visual Studio (inclusive para C&#43;&#43;, agora) acusou a falta do boost, sendo que ele havia acabado de baixá-lo:
Os pacotes do projeto ficam todos na raiz do diretório da solução na sub-pasta packages. Observando o que foi baixado lá, verifiquei que a versão do boost estava ok: ele havia baixado a 1.61 como pedido, mas o erro dizia respeito justamente a um desses pacotes.
C:\Projects\tiodb&amp;gt;dir /b packages boost.1.61.0.0boost_chrono-vc140.1.61.0.0boost_date_time-vc140.1.61.0.0boost_filesystem-vc140.1.61.0.0boost_program_options-vc140.1.61.0.0boost_regex-vc140.1.61.0.0boost_system-vc140.1.61.0.0boost_thread-vc140.1.61.0.0O maior problema disso é que não há muitas opções na IDE que resolvam. O arquivo packages.config deveria manter essas dependências, o que de fato ele faz. As opções do projeto (as abinhas do Visual Studio onde ficam as configurações) não possuem nada relacionado ao NuGet.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&amp;lt;packages&amp;gt;&amp;lt;package id=&amp;#34;boost&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_chrono-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_date_time-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_filesystem-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_program_options-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_regex-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_system-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;package id=&amp;#34;boost_thread-vc140&amp;#34; version=&amp;#34;1.61.0.0&amp;#34; targetFramework=&amp;#34;native&amp;#34; /&amp;gt;&amp;lt;/packages&amp;gt;Então não tem jeito. Há algo de podre dentro desse projeto e o próprio Visual Studio não vai resolver. Grep nele!
C:\Projects\tiodb&amp;gt;grep -r -i &amp;#34;boost.*1.61&amp;#34; --include=*proj . ./server/tio/tioserver.vcxproj: &amp;lt;Import Project=&amp;#34;packages\boost.1.61.0.0\build\native\boost.targets&amp;#34; Condition=&amp;#34;Exists(&amp;#39;packages\boost.1.61.0.0\build\native\boost.targets&amp;#39;)&amp;#34; /&amp;gt;./server/tio/tioserver.vcxproj: &amp;lt;Error Condition=&amp;#34;!Exists(&amp;#39;packages\boost.1.61.0.0\build\native\boost.targets&amp;#39;)&amp;#34; Text=&amp;#34;$([System.String]::Format(&amp;#39;$(ErrorText)&amp;#39;, &amp;#39;packages\boost.1.61.0.0\build\native\boost.targets&amp;#39;))&amp;#34; /&amp;gt;...Note (e é preciso prestar atenção!) que o projeto server/tio/tioserver.vcxproj referencia a pasta packages como se ela existisse dentro do projeto. Porém, como já sabemos, ela existe na raiz da solution, que fica duas pastas &amp;quot;para trás&amp;quot;. Isso nos indica que talvez o NuGet ainda não esteja tão redondo e que um possível teste é mudar esses valores na mão e ver o que acontece.
gvim server\tio\tioserver.vcxproj:%s/packages\\boost/..\\..\\packages\\boost/g :wq 1&amp;gt;------ Build started: Project: tioclientdll, Configuration: Debug x64 ------2&amp;gt;------ Build started: Project: tioserver, Configuration: Debug x64 ------2&amp;gt; tioserver.vcxproj -&amp;gt; C:\Projects\tiocoin\tiodb\server\tio\..\..\bin\x64\Debug\tio.exe2&amp;gt; tioserver.vcxproj -&amp;gt; ..\..\bin\x64\Debug\tio.pdb (Full PDB)========== Build: 2 succeeded, 0 failed, 3 up-to-date, 0 skipped ==========Recarregado o projeto no Visual Studio após a intervenção cirúrgica, tudo voltou a funcionar. A lição de hoje é: nunca confie completamente em uma IDE. Às vezes o bom e velho grep e o bom e velho editor de sua escolha podem resolver uma situação.
</description>
</item>

     
        <item>
  <title>Um commit por feature</title>
  <link>http://www.caloni.com.br/um-commit-por-feature/</link>
  <pubDate>2017-02-04</pubDate>
  
  <guid>http://www.caloni.com.br/um-commit-por-feature/</guid>
  <description>Imagine que você vai começar a trabalhar em algo novo. Daí você baixa a última versão do branch de dev e começa a codar. Então chega um momento em que o primeiro, segundo, terceiro commits são necessários para manter a ordem em sua cabeça. &amp;quot;Fiz isso logo de manhã, testei algo diferente antes do almoço e de tarde fui incrementando a solução final até passar todos os testes.&amp;quot; Tudo bonito. Mas como fica na hora de subir essa bagaça pras pessoas verem?
Vamos visualizar isso em commits. Você baixa a última versão do dev, começa a trabalhar e de duas uma:
 Percebe que dá para resolver tudo em um commit só. Percebe que o buraco é mais embaixo; vou precisar de mais tempo e mais commits.  No caso 1, a solução é simples e direta: faça as modificações, rode os testes locais e aplique o commit já no formato definido pela sua equipe (número do ticket, texto no idioma correto, detalhes nos parágrafos abaixo). Suba e mande para code review.
C:\Temp\projectX&amp;gt;git pull Already up-to-date.C:\Temp\projectX&amp;gt;git branch * devmasterC:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;ISS-4 Changing test function return type to int.&amp;#34; [dev 7f0121b] ISS-4 Changing test function return type to int.1 file changed, 2 insertions(&#43;), 1 deletion(-)C:\Temp\projectX&amp;gt;git status On branch devYour branch is ahead of &amp;#39;origin/dev&amp;#39; by 1 commit.(use &amp;#34;git push&amp;#34; to publish your local commits)nothing to commit, working tree cleanC:\Temp\projectX&amp;gt; Se a política de pull request estiver sendo usada, faça isso em um branch à parte, mas já mande para o reviewer aprovar o branch como se fosse um commit apenas e de preferência pronto para o rebase (o que não deve ser nem um problema se for uma mudança pontual).
C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git co -b ISS-5-changing-test-return-value M main.cppSwitched to a new branch &amp;#39;ISS-5-changing-test-return-value&amp;#39;C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;ISS-5 Changing test return value&amp;#34; [ISS-5-changing-test-return-value 38df69c] ISS-5 Changing test return value1 file changed, 1 insertion(&#43;), 1 deletion(-)C:\Temp\projectX&amp;gt;git status On branch ISS-5-changing-test-return-valuenothing to commit, working tree cleanC:\Temp\projectX&amp;gt;git push origin ISS-5-changing-test-return-value Counting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (4/4), done.Writing objects: 100% (6/6), 618 bytes | 0 bytes/s, done.Total 6 (delta 2), reused 0 (delta 0)To ..\projectXRemote* [new branch] ISS-5-changing-test-return-value -&amp;gt; ISS-5-changing-test-return-valueQuando o buraco é mais embaixo Quando mais de um commit é necessário é porque vai rolar a festa. Vários commits com texto e modificações temporárias podem ser feitos, e caso o trabalho vire a noite, é recomendado subir tudo para um branch temporário remoto (de preferência que já seja identificado pela equipe como o branch para determinado issue).
C:\Temp\projectX&amp;gt;git branch ISS-5-changing-test-return-value* devmasterC:\Temp\projectX&amp;gt;git co -b ISS-6-very-hard-hacking Switched to a new branch &amp;#39;ISS-6-very-hard-hacking&amp;#39;C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;Starting to test return 42.&amp;#34; [ISS-6-very-hard-hacking e09cf24] Starting to test return 42.1 file changed, 1 insertion(&#43;), 1 deletion(-)C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;Created backup test. [ISS-6-very-hard-hacking 80a7f71] Created backup test.1 file changed, 5 insertions(&#43;)C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;Deleted backup function test.&amp;#34; [ISS-6-very-hard-hacking 9620226] Deleted backup function test.1 file changed, 5 deletions(-)C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;Screwing around.&amp;#34; [ISS-6-very-hard-hacking 18d3afa] Screwing around.1 file changed, 2 deletions(-)C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;Getting old version back.&amp;#34; [ISS-6-very-hard-hacking f2a63d1] Getting old version back.1 file changed, 2 insertions(&#43;)C:\Temp\projectX&amp;gt;gvim main.cpp C:\Temp\projectX&amp;gt;git add main.cpp C:\Temp\projectX&amp;gt;git ci -m &amp;#34;Small fix after unit tests.&amp;#34; [ISS-6-very-hard-hacking e612339] Small fix after unit tests.1 file changed, 1 insertion(&#43;), 1 deletion(-)C:\Temp\projectX&amp;gt;git log --oneline e612339 Small fix after unit tests.f2a63d1 Getting old version back.18d3afa Screwing around.9620226 Deleted backup function test.80a7f71 Created backup test.e09cf24 Starting to test return 42.7f0121b ISS-4 Changing test function return type to int.97222ec ISS-3 Testing something new.49d28aa ISS-2 Insertind comments and whatever.bff8edf ISS-1 First version.Agora nós criamos uma bela duma bagunça, mas em um branch apartado e que ainda não foi enviado para pull requet ou inserido no branch de dev. Agora chega a hora de arrumar a casa. Para isso, como tudo no git, há várias maneiras, mas a mais direta é um rebase interativo (-i), onde você pega os commits e empacota tudo junto.
(Obs.: se sua modificação demorou algum tempo é melhor atualizar o branch de dev para ver se há algo novo e fazer o merge com o branch de feature; o rebase daí não encontrará conflitos.)
C:\Temp\projectX&amp;gt;git merge dev Already up-to-date.C:\Temp\projectX&amp;gt;git rebase -i dev Nesse momento o git irá abrir o editor com os commits trabalhados. Você deverá escolher quais operações fazer com cada commit. Se o objetivo é empacotar tudo, geralmente é pick no primeiro e squash em todos os outros:
pick e09cf24 Starting to test return 42.squash 80a7f71 Created backup test.squash 9620226 Deleted backup function test.squash 18d3afa Screwing around.squash f2a63d1 Getting old version back.squash e612339 Small fix after unit tests.Ao final da operação mais uma vez o git irá exibir o editor. Agora é hora de você escolher o texto bonitinho, formatadinho, do seu único commit que será usado no branch de dev. Em outras palavras, transformar isso:
# This is a combination of 6 commits.# The first commit&amp;#39;s message is:Starting to test return 42.# This is the commit message #2:Created backup test.# This is the commit message #3:Deleted backup function test.# This is the commit message #4:Screwing around.# This is the commit message #5:Getting old version back.# This is the commit message #6:Small fix after unit tests.Nisso:
ISS-6 A very hard hacking, tested and ready to merge.This hack involved several operations:- Starting to test return 42.- Created backup test.- Deleted backup function test.- Small fix after unit tests.Agora na hora de fazer o merge seu histórico estará redondo, sem ramificações e com o resultado final de seu hacking parecendo que foi feito bonito desde o começo (ah, vá):
C:\Temp\projectX&amp;gt;git log commit b4de47231f090e897053f4e9d19ea66c88d1f1faAuthor: Wanderley Caloni &amp;lt;wanderley.caloni@bitforge.com.br&amp;gt;Date: Sat Feb 4 10:59:18 2017 -0200ISS-6 A very hard hacking, tested and ready to merge.This hack involved several operations:- Starting to test return 42.- Created backup test.- Deleted backup function test.- Small fix after unit tests.commit 7f0121baac183eb1a832575781cca5d6e6a5489cAuthor: Wanderley Caloni &amp;lt;wanderley.caloni@bitforge.com.br&amp;gt;Date: Sat Feb 4 10:51:54 2017 -0200ISS-4 Changing test function return type to int.commit 97222ec4578f9a4bced847266739b18f933178f3Author: Wanderley Caloni &amp;lt;wanderley.caloni@bitforge.com.br&amp;gt;Date: Sat Feb 4 10:50:29 2017 -0200ISS-3 Testing something new.commit 49d28aa7faa02ff327ae9fac93676abad18ad0f3Author: Wanderley Caloni &amp;lt;wanderley.caloni@bitforge.com.br&amp;gt;Date: Sat Feb 4 10:49:26 2017 -0200ISS-2 Insertind comments and whatever.commit bff8edf06e4a30480088a9a33c9b0c2ca5b6e0b3Author: Wanderley Caloni &amp;lt;wanderley.caloni@bitforge.com.br&amp;gt;Date: Sat Feb 4 10:47:11 2017 -0200ISS-1 First version.O que aprendemos aqui Esta é uma das inúmeras formas de trabalhar com o git de maneira individual sem atrapalhar seus colegas. Basicamente você pode escolher outras estratégias de commits e branchs locais, mas através do comando rebase -i é possível sempre reorganizar a bagunça em commits comportados, e dar a impressão que esses programadores são enviados divinos que modificam o fonte e acertam de primeira.
</description>
</item>

     
        <item>
  <title>Por onde você acessa este blogue?</title>
  <link>http://www.caloni.com.br/por-onde-voce-acessa-este-blogue/</link>
  <pubDate>2017-02-01</pubDate>
  
  <guid>http://www.caloni.com.br/por-onde-voce-acessa-este-blogue/</guid>
  <description>Sério, esta é uma pergunta relevante neste momento. Ao menos para mim. Estou cansado de tentar manter duas áreas distintas do conhecimento, que venho arquivando por anos, e estou pensando em publicar sobre absolutamente qualquer coisa relacionada com meu dia-a-dia por aqui, o que irá envolver necessariamente assuntos que não girem em torno de programação e nem em C&#43;&#43;.
(Claro que assuntos onde fui longe demais, como Cinema, já possuem seu cantinho para os aficionados. Isso já está em seu branch apartado.)
O que me tem feito evitar a expansão de assuntos em meu blogue pessoal são dois problemas que talvez nem existam. O primeiro é a minha tentativa de ser fidedigno ao teor do conteúdo no blogue desde seu início: C&#43;&#43;, Windows programming e derivados. De vez em quando há alguns devaneios, mas a intenção sempre tentou girar em torno disso.
Porém, talvez os tempos tenham mudado, e agora estando em uma empresa onde o conhecimento se torna muito elástico, e onde não existe apenas uma linguagem nem uma tecnologia, seja necessário abrir mais o leque de possibilidades, o que pode eventualmente parecer ruído para alguns que acompanham o canal há anos e que esperam ver aqui nada mais do que sempre foi discutido, mas que tem o potencial de tentar atingir mais pessoas de outras áreas que possam se beneficiar de C&#43;&#43;, mesmo programando principalmente em outras linguagens.
Até empresas mais lentas em se adaptar a mudanças como a Microsof estão reavaliando suas estruturas, abrindo caminhos para a comunidade de código-livre e também recategorizando as áreas onde atuam os MVPs. Esse negócio de alguém ser especialista em Visual C&#43;&#43; cai por terra em tempos onde o Visual Studio virou uma IDE que está suportando não apenas diferentes linguagens ao mesmo tempo (como Python), mas também diferentes sets de compilação, como o clang.
O segundo problema é um pouco mais sensível: informação. Nem sempre meu trabalho gira em torno de conhecimento comum e projetos abertos ao público. Isso exige que determinados tipos de conhecimento fiquem para sempre engavetados em arquivos que só eu, minha equipe e meu cliente terão acesso. Porém, se devidamente formatado, qualquer conhecimento pode ser divulgado e ainda ser útil para projetos e pessoas que estão totalmente não-relacionados com o assunto em questão. Esse mês, por exemplo, fiz um artigo de um assunto tratado há mais de um ano. E, mesmo assim, utilizei apenas conhecimento comum, um projeto open source que já é aberto antes mesmo de cogitarmos usá-lo, e um nível de generalização que pode servir para praticamente qualquer um trabalhando com I/O no Windows, mesmo em kernel mode.
Por isso pensei em publicar mais coisas em sua devida formatação, porque isso me possibilita também pesquisar de maneira mais fácil pelos diferentes problemas e soluções que encontrei ao longo dos projetos. E por isso estou perguntando de onde vem meus leitores. Se eles leem, como bons dinossauros, o feed de notícias que ainda mantenho, ainda que escondido, disponível para ferramentas como o Feedly (o sucesso do Google Reader, para quem é da velha guarda), eles terão que eventualmente aguentar a torrente de spams até que venha um assunto de seu interesse. No entanto, sempre foi assim, não? Eu duvido que exista algum leitor deste site que utilizou os conhecimentos de todos ou a maioria dos artigos. O que é mais provável é que os artigos sirvam principalmente como curiosidades e forma de expandir a noção de que existem outros mundos na programação.
No entanto, se os leitores estão vindo pelas redes sociais, como o twitter da BitForge ou o seu facebook, então não há problema algum, pois pretendo compartilhar novos posts apenas quando o teor da discussão tem relação direta com os princípios da empresa. Quando é apenas minha opinião pessoal ou minhas fuçadas paralelas, fica apenas no âmbito do abrir o navegador e digitar: w, w, w, c, a, l, o, n, i...
Comecei essa discussão comigo mesmo, e agora não sei se terei respostas por aqui. Talvez sim, talvez não. De qualquer forma, acho que já tomei minha decisão. Bem-vindos ao meu blogue pessoal em seu sentido mais primordial: um blogue de uma pessoa só e com ideias infinitas.
</description>
</item>

     
        <item>
  <title>Warning de nível 4</title>
  <link>http://www.caloni.com.br/warning-de-nivel-4/</link>
  <pubDate>2017-01-17</pubDate>
  
  <guid>http://www.caloni.com.br/warning-de-nivel-4/</guid>
  <description>Você já colocou aquele seu projeto favorito em /W4? Por padrão, o Visual Studio cria seus projetos com o nível de warnings e 3, porque o nível 4 é muito, muito chato. No entanto, algumas vezes ele serve para que seu código não fique apenas correto, mas bem documentado e apresentável. Vamos tentar?
1&amp;gt;------ Build started: Project: tioserver, Configuration: Debug x64 ------1&amp;gt; pch.cpp1&amp;gt; using Boost version 1_621&amp;gt; tioclient.c1&amp;gt;cl : Command line warning D9030: &#39;/Gm&#39; is incompatible with multiprocessing; ignoring /MP switch1&amp;gt; TioTcpSession.cpp1&amp;gt; TioTcpServer.cpp1&amp;gt; TioPython.cpp1&amp;gt; tio.cpp1&amp;gt; ContainerManager.cpp1&amp;gt; Command.cpp1&amp;gt; Generating Code...1&amp;gt; tioserver.vcxproj -&amp;gt; C:\Projects\tiodb\server\tio\..\..\bin\x64\Debug\tio.exe1&amp;gt; tioserver.vcxproj -&amp;gt; ..\..\bin\x64\Debug\tio.pdb (Full PDB)========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========OK, este foi o nível 3 do tioserver, o projeto principal do tiodb, uma ferramenta para manter contêineres assináveis na memória e acessíveis via socket. Note que já existe um warning, mas vamos ignorar por enquanto. O objetivo aqui é descobrir quais os warnings mais comuns do projeto que você vai escolher. Vejamos o meu:
1&amp;gt;------ Rebuild All started: Project: tioserver, Configuration: Debug x64 ------1&amp;gt; pch.cpp1&amp;gt; using Boost version 1_621&amp;gt; tioclient.c1&amp;gt;c:\projects\tiodb\client\c\tioclient.c(218): warning C4701: potentially uninitialized local variable &#39;start&#39; used1&amp;gt;cl : Command line warning D9030: &#39;/Gm&#39; is incompatible with multiprocessing; ignoring /MP switch1&amp;gt; TioTcpSession.cpp1&amp;gt;c:\projects\tiodb\server\tio\tiotcpsession.h(299): warning C4458: declaration of &#39;eventName&#39; hides class member1&amp;gt; c:\projects\tiodb\server\tio\tiotcpsession.h(295): note: see declaration of &#39;tio::EXTRA_EVENT::eventName&#39;1&amp;gt;c:\projects\tiodb\server\tio\logdb.h(213): warning C4456: declaration of &#39;i&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\logdb.h(200): note: see declaration of &#39;i&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.h(81): warning C4456: declaration of &#39;handle&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.h(77): note: see declaration of &#39;handle&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.h(413): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.h(316): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpsession.cpp(127): warning C4457: declaration of &#39;key&#39; hides function parameter1&amp;gt; c:\projects\tiodb\server\tio\tiotcpsession.cpp(114): note: see declaration of &#39;key&#39;1&amp;gt; TioTcpServer.cpp1&amp;gt;c:\projects\tiodb\server\tio\tiotcpsession.h(299): warning C4458: declaration of &#39;eventName&#39; hides class member1&amp;gt; c:\projects\tiodb\server\tio\tiotcpsession.h(295): note: see declaration of &#39;tio::EXTRA_EVENT::eventName&#39;1&amp;gt;c:\projects\tiodb\server\tio\logdb.h(213): warning C4456: declaration of &#39;i&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\logdb.h(200): note: see declaration of &#39;i&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.h(81): warning C4456: declaration of &#39;handle&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.h(77): note: see declaration of &#39;handle&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.h(413): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.h(316): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(404): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(300): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(563): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(300): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(596): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(300): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(620): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(300): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(643): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(300): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(661): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(300): note: see declaration of &#39;b&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.cpp(2451): warning C4456: declaration of &#39;value&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.cpp(2338): note: see declaration of &#39;value&#39;1&amp;gt; TioPython.cpp1&amp;gt; tio.cpp1&amp;gt;c:\projects\tiodb\server\tio\tiotcpsession.h(299): warning C4458: declaration of &#39;eventName&#39; hides class member1&amp;gt; c:\projects\tiodb\server\tio\tiotcpsession.h(295): note: see declaration of &#39;tio::EXTRA_EVENT::eventName&#39;1&amp;gt;c:\projects\tiodb\server\tio\logdb.h(213): warning C4456: declaration of &#39;i&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\logdb.h(200): note: see declaration of &#39;i&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.h(81): warning C4456: declaration of &#39;handle&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.h(77): note: see declaration of &#39;handle&#39;1&amp;gt;c:\projects\tiodb\server\tio\tiotcpserver.h(413): warning C4456: declaration of &#39;b&#39; hides previous local declaration1&amp;gt; c:\projects\tiodb\server\tio\tiotcpserver.h(316): note: see declaration of &#39;b&#39;1&amp;gt; ContainerManager.cpp1&amp;gt; Command.cpp1&amp;gt; Generating Code...1&amp;gt; tioserver.vcxproj -&amp;gt; C:\Projects\tiodb\server\tio\..\..\bin\x64\Debug\tio.exe1&amp;gt; tioserver.vcxproj -&amp;gt; ..\..\bin\x64\Debug\tio.pdb (Full PDB)========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========Vamos ordenar e capturar apenas o código desses warnings para ver quantos ocorrem e quais os mais comuns:
sorts/c:\\.*: \(warning C[0-9]\&#43;\).*$/\1/sort uE a resposta é:
warning C4456: declaration of &#39;identifier&#39; hides previous local declarationwarning C4457: declaration of &#39;identifier&#39; hides function parameterwarning C4458: declaration of &#39;identifier&#39; hides class memberwarning C4701: potentially uninitialized local variable &#39;name&#39; usedApenas quatro. Tão comuns que a maioria está até em ordem numérica e diz respeito a repetição de nomes em escopos diferentes, o que esconde os nomes do escopo anterior, mais amplo. O outro, o C4701, pode ser mais problemático, já que ele representa uma variável que potencialmente não foi inicializada, fonte comum daqueles erros de &amp;quot;como é que essa variável virou isso?&amp;quot;.
Felizmente só temos em um ponto do código:
//// Contract: //	if no timeout, it will hang until all bytes are returned//	if timeout is set, we can return less bytes than requested//int socket_receive(SOCKET socket, void* buffer, int len, const unsigned* timeout_in_seconds){int ret = 0;char* char_buffer = (char*)buffer;int received = 0;time_t start;int time_left;#if _WIN32	FD_SET recvset;struct timeval tv;#endif#ifdef _DEBUG	memset(char_buffer, 0xFF, len);#endif// se esse if não for verdadeiro, start fica com valor indefinido	if(timeout_in_seconds)start = time(NULL);while(received &amp;lt; len){if(timeout_in_seconds){// C4701: potentially uninitialized local variable &amp;#39;start&amp;#39; used	time_left = *timeout_in_seconds - (int)(time(NULL) - start);A correção é simples: inicialize a p***** das suas variáveis zero (ou determine qual o comportamento no caso else).
Vamos dar uma olhada em um dos outros warnings:
string containerName = container-&amp;gt;GetName();unsigned handle = session-&amp;gt;RegisterContainer(containerName, container);if(session-&amp;gt;UsesBinaryProtocol()){// warning C4456: declaration of &amp;#39;identifier&amp;#39; hides previous local declaration unsigned handle = session-&amp;gt;RegisterContainer(containerName, container);OK, isso é meio feio. A variável handle tinha acabado de ser criada logo antes da entrada do if. A não ser que sejam de fato variáveis distintas no código (apenas analisando a função inteira) elas poderiam ser reaproveitadas em apenas uma (até porque possuem o mesmo tipo). E se forem variáveis distintas... bem, coloque nomes distintos =)
E aqui termina mais uma sessão de &amp;quot;e se eu abrir mais os warnings do meu código&amp;quot;. Espero que tenha aproveitado.
</description>
</item>

     
        <item>
  <title>Vidas de Carolina</title>
  <link>http://www.caloni.com.br/vidas-de-carolina/</link>
  <pubDate>2017-01-12</pubDate>
  
  <guid>http://www.caloni.com.br/vidas-de-carolina/</guid>
  <description>O curta documental Vidas de Carolina é o primeiro trabalho da diretora Jessica Queiroz. Ele aborda a vida de uma catadora de lixo reciclável e seu talento para a narrativa. A ideia era mostrar que a capacidade pode vir de qualquer lugar e que muitos não conseguem reconhecimento por falta de oportunidade.
https://www.youtube.com/embed/AkeYwVc2JL0
Infelizmente, essa oportunidade também é perdida em seu filme. Carolina, já falecida, mantinha suas histórias em um caderno. De acordo com um dos entrevistados, o caderno datava da década de 50, informação essa que dá asas à imaginação do espectador, que poderia resgatar inclusive memórias do trabalho excepcional de Marcos Prado, &amp;quot;Estamira&amp;quot;. No entanto, pouco vemos dos escritos de Carolina, com pouquíssimas frases lidas por uma moça que surge em preto e branco (Carolina Maria de Jesus), resgatando as memórias da senhora falecida e esteticamente produzida com uma glorificação visual que não se encaixa na história da homenageada.
No entanto, apesar do endeusamento acidental e pouco propício, parece haver uma fuga da realidade, ou o seu maquiamento, já que sequer vemos a pobreza e a miséria que eram as condições de vida de nossa heroína. O conteúdo visual se disassocia da mensagem do vídeo traduzida pelos entrevistados, que parece sugerir que as condições eram horríveis e que esta é uma situação lamentável.
A direção de Jessica (e provavelmente seu roteiro) se perde aparentemente ao apressadamente partir para conclusões, sem antes desenvolver uma história que, a meu ver, mereceria ser contada com muito mais tempo de tela. Além disso, como todo diretor estreante, Queiroz não evita o uso de diferentes ângulos e cortes (ela também assina como montadora) que não possuem uma função muito bem definida. Há muito o que contar dessas pessoas invisíveis que perambulam pelas grandes capitais, catando o lixo que os incautos cidadãos &amp;quot;deixam escapar&amp;quot; de suas mãos ocupadas.
Finalizando muito mais cedo do que a proposta inicial, Vidas de Carolina apenas não se beneficia por não ser um simples trailer para um conteúdo muito maior e se resumir ao próprio vídeo que estamos vendo. Dessa forma, fica um gostinho de quero mais no momento mais inadequado para isso: o seu próprio final.
</description>
</item>

     
        <item>
  <title>Entrando na zona com Vim</title>
  <link>http://www.caloni.com.br/entrando-na-zona-com-vim/</link>
  <pubDate>2017-01-05</pubDate>
  
  <guid>http://www.caloni.com.br/entrando-na-zona-com-vim/</guid>
  <description>Se você é programador é bem provável que já tenha ouvido falar em [Flow] 1 ou [The Zone] 2. Se for leitor assíduo do Hacker News, então, nem se fala. De qualquer forma, uma das maneira mais produtivas do programador programar é entrar na famosa &amp;quot;zona&amp;quot;. É lá que muito de nós nascemos. Lembra a primeira vez que mexeu em um computador ou afim e ficou tão obcecado que não viu o tempo passar? Pois bem. Você esteve na zona. E estar nela é um bom lugar para trabalhar.
Na zona, principalmente resolvendo problemas complexos, o importante é poder construir uma estrutura em sua mente com a ajuda de alguns aparatos, como um caderno de anotações, stickers, lousa ou seu editor preferido. Meu editor preferido para navegar (flow) por um código é sem sombra de dúvida o Vim, pois ele é apenas uma tela que preenche todo meu campo de visão e possui comandos em que eu consigo facilmente acessar o conteúdo que preciso relembrar. Quando estou obtendo o diagnóstico de um log, por exemplo, posso rapidamente ir construindo um modelo mental da solução navegando entre arquivos de log e código-fonte através de tags e buscas em regex.
A primeira vantagem do Vim em relação a outros editores é sua capacidade de abrir arquivos grandes. Um log de 1GB pode ser um desafio para um Notepad da vida, e até para um Visual Studio, mas no Vim tudo que você precisa é de memória disponível. E mesmo que não tenha, o Windows se vira bem no gerenciamento de swap (ou Linux, tanto faz).
Para navegar no código, existem duas técnicas que não necessitam de nenhum plugin. A primeira é a busca por regex, que pode ser feita com os comandos :vimgrep ou :grep, sendo que o primeiro busca em um padrão de arquivos (usando wildcard) e o segundo dentro dos buffers já abertos (útil se você já tiver uma sessão ativa; mais sobre isso depois).
&amp;#34; No Vim não é necessário digitar o comando completo; note que esse wildcard busca pastas recursivamente:vimg /regex/ \Projects\SomeProject\**\*.cpp&amp;#34; Isso busca em todos os buffers abertos cujo arquivo tem a extensão de C&#43;&#43;:grep regex *.cppO bom é que, no caso de logs, se você buscar por expressões unívocas, isso já fica no histórico de seus comandos e você pode usar quando quiser para voltar para esses logs (ou se você for maluco e guardar de cabeça seus marks, pode criar um mark de vez).
A segunda técnica de navegar no código é através das tags que são montadas pela ferramenta ctags. Ela é genérica o suficiente para suportar várias linguagens, mas pode ser usada até para qualquer sequência de palavras. Há plugins que realizam essa varredura do fonte automática, mas particularmente não gosto de encher meu Vim de plugins, sendo que o único que uso que me lembro é o MRU (porque o Vim ainda não suporta algo do gênero internamente). De qualquer forma, tudo que eu preciso fazer para atualizar as tags de um projeto é abrir o readme do projeto (que geralmente fica na pasta raiz) e rodar meu atalho.
&amp;#34; Roda recursivamente e otimiza para C&#43;&#43; e Python.map &amp;lt;S-F5&amp;gt; :!ctags --tag-relative=yes --recurse --c&#43;&#43;-kinds=&#43;p --python-kinds=-i --fields=&#43;iaS --extra=&#43;q&amp;lt;CR&amp;gt;&amp;#34; Busca pelo arquivo tags na pasta atual e vai subindo a hierarquia.set tags=tags;Isso vai gerar um arquivo ctags na pasta do projeto que será usada automaticamente para procurar pelas tags que eu preciso. O pulo do gato na verdade é o ponto-e-vírgula após o nome do arquivo ao setar a variável tags. Isso faz com que o Vim não busque apenas o arquivo tags na pasta atual, mas em toda hierarquia. Então se você estiver na pasta Projects\SomeProject\Folder1\Folder2\Folder3\File.cpp e tiver gerado o arquivo tags na pasta SomeProject para todo o projeto, ao usar o comando de busca de tag ele eventualmente vai abrir esse arquivo tags, pois ele vai procurando em Folder3, Folder2, Folder1 e cai em SomeProject.
Como no Windows o atalho padrão do comando tag do Vim não funciona também preciso fazer uma pequena adaptação técnica (e de quebra já uso para navegar nos próximos resultados):
map &amp;lt;C-K&amp;gt; &amp;lt;C-]&amp;gt;&amp;#34; O bom é que o first e o next ficam um do lado do outro.map &amp;lt;C-J&amp;gt; :tnext&amp;lt;CR&amp;gt;Depois de dar uma olhada no log, encontrar os métodos que você precisa analisar, seu fluxo, etc, você terá um monte de buffers relevantes abertos nas linhas relevantes. Seria muito bom se tudo isso pudesse ser guardado em um estado para que você continue amanhã ou em sua próxima sessão de flow. Para isso existe o comando :mksession.
&amp;#34; Salva estado atual dos buffers:mksession \temp\analise.vim&amp;#34; Restaura um estado salvo anteriomente:so \temp\analise.vimO comando :source roda um script vim que possui comandos guardados. Ele é um arquivo texto semelhante ao vimrc.
Basicamente é isso. Tudo o que você precisa em sua análise de fonte e de log se encontra na ponta de seus dedos. Não é necessário abrir nenhuma pasta nem terminal. Simplesmente navegue através do Vim para descobrir o problema e seja feliz em sua zona.
</description>
</item>

     
        <item>
  <title>Dez melhores filmes de 2016</title>
  <link>http://www.caloni.com.br/dez-melhores-filmes-de-2016/</link>
  <pubDate>2016-12-27</pubDate>
  
  <guid>http://www.caloni.com.br/dez-melhores-filmes-de-2016/</guid>
  <description>  Trolls. Como pegar um fiapo de argumento, mais uma vez baseado em brinquedos dos anos 80, e transformá-lo em uma história previsível, mas que convence por sua mensagem de ode à felicidade de uma era. Trolls nos convida a rir dos clichês e a dançar ao som de outros tempos. Remixados, claro, mas que mantém a pureza no olhar de uma criança, crescida ou não.
  Demônio de Neon. Apesar de abordar o mundo das modelos femininas, e de discutir a objetivização da mulher com maestria estética, o trabalho de Nicolas Winding Refn universaliza o sofrimento dessas garotas, transformando o horror em uma espécie de beleza do sacrifício. Dessa forma, evita falar apenas sobre a mulher para trazer à tona a discussão de por que achamos o sacrifício por uma causa, qualquer que seja, algo bonito?
  Conexão Escobar. Entre os filmes de ação este é o que merece uma menção entre os melhores do ano, seja pela sua história bem conectada ou pela sua edição perfeccionista. Lembrando que a ação neste filme é muito mais ameaçadora quando não-vista, mas graças à performance intensa de Bryan Cranston, ganha contornos dramáticos em uma única cena em um restaurante que vale por todo o filme.
  É Apenas o Fim do Mundo. Xavier Dolan expõe novamente seu lado pessoal, e mais uma vez o universaliza, em um trabalho aparentemente simples, mas que exige mais empenho do que aparenta, ao manter a câmera em um ultrazoom perigoso, que beneficia interpretações ao mesmo tempo que nos distancia das pessoas através de palavras rancorosas que escancaram o quanto de ódio existe contra aqueles bem-sucedidos, principalmente se fazem parte da família.
  Snowden. A versão ficcional necessária de Oliver Stone do vazamento de dados do governo norte-americano prenuncia a inevitável queda dos estados modernos. Através de um retrato grandioso e ao mesmo tempo intimista, Stone nos leva a questionar crenças inabaláveis no espírito americano, baseadas em um ufanismo que hoje é insustentável. A despeito de ser um ótimo drama/thriller, a grande questão que ele coloca é maior que ele mesmo: quanto tempo mais de internet o patriotismo se aguenta de pé?
  Animais Fantásticos e Onde Habitam. Um filme que tinha tudo para ser &amp;quot;Marvelizado&amp;quot; possui um plot original, não usa seus predecessores como muleta afetiva, é original e ainda por cima tem um final satisfatório (e não um gancho para a próxima história). Uma lição a ser aprendida por todas as franquias atuais no cinema.
  Deadpool. É necessário um pouco de boa vontade para inserir um filme da Marvel entre os melhores do ano, mas cá entre nós, a primeira metade do filme do super-herói irreverente e politicamente incorreto atinge alguns feitos históricos para a produtora: uma sequência de ação verdadeiramente ágil e divertida, brincadeiras metalinguísticas realmente bem boladas, e ensinar a todo fã da Marvel o nome da técnica cinematográfica de quebrar a quarta parede.
  O Silêncio do Céu. O último trabalho de Marco Dutra consegue extrair o drama com requintes de terror. Ele consegue isso através de um dos sentimentos mais universais entre nós, seres humanos: o medo psicológico. E é através do psicológico que ele aborda uma história de trauma e redenção, muitas vezes sem as palavras necessárias para concluir o raciocínio. Isso porque o medo é algo de fato universal. E nesse filme ele pode ser sentido da maneira mais visceral possível desde a primeira cena.
  A Economia do Amor. O desmanche sistemático da união de duas pessoas em uma visão cínica, mas tristemente realista, dos efeitos da crise na Europa e as consequências da falta de dinheiro na mesa de uma família. Um trabalho de direção econômico e minimalista, que praticamente garante o convite ao espectador para a intimidade trágica dentro de uma casa prestes a desabar.
  Sieranevada. Um filme com narrativa ousada, que torna o espectador responsável por detectar a história, inserindo-o em uma reunião de família que não precisa de narradores oniscientes explicando, nem diálogos expositivos. Só precisa de duas coisas: a curiosidade humana como combustível e a câmera como os nossos olhos.
  Sour Grapes. Um documentário que estreou direto em streaming, mas que contém uma história fascinante, que consegue juntar uma crise econômica, a alta sociedade mundial e o sistema jurídico injusto norte-americano em um pequeno conto de pequenos causos que se unem em uma investigação que busca descobrir quem é uma pessoa, tão interessante por si só que o espectador nem precisa gostar tanto assim de vinho.
  Como Ser Solteira. Há criatividade demais neste ComRom para ser deixado de lado. Ele é feminino sem as amarras sexistas, uma liberação sexual e afetiva da mulher em todas as suas fases e carreiras e que exibe a maldade humana como regras de aceitação em sociedade ou pensamentos retrógrados que tentam mandar nas vidas das pessoas. Ativo até o fim, defende a quebra dessas regras da maneira mais bem-humorada possível.
  Loucas de Alegria. Um filme italiano que consegue misturar trabalhos tão diferentes quanto O Beijo da Borboleta, O Lado Bom da Vida e Thelma &amp;amp; Louise, e ainda assim soar original, divertido, fascinante e emocionante.
  </description>
</item>

     
        <item>
  <title>Quantos handles sua aplicação está abrindo?</title>
  <link>http://www.caloni.com.br/quantos-handles/</link>
  <pubDate>2016-11-29</pubDate>
  
  <guid>http://www.caloni.com.br/quantos-handles/</guid>
  <description>Mesmo que você não programe em C/C&#43;&#43;, mas programe para Windows (ex: .NET), sempre há a possibilidade de seu programa estar causando leaks de handles indefinidamente, o que não se traduz em aumento significativo de memória alocada para seu processo, mas é, sim, um problema a ser tratado.
Como isso pode ser causado?
Bom, em C/C&#43;&#43; sempre é mais simples de entender esses conceitos. Um código simples que se esquece de fechar o handle usando CloseHandle ou a função equivalente do recurso obtido já seria o suficiente. O último bug que eu encontrei em um código desses comete o clássico erro de sair no meio da função, deixando os recursos alocados:
DWORD ClassicHandleLeak(){DWORD ret = 0;HKEY hKey;if ( RegOpenKeyEx(HKEY_LOCAL_MACHINE, L&amp;#34;Software\\Something&amp;#34;, 0, GENERIC_READ, &amp;amp;hKey) == ERROR_SUCCESS ){DWORD retSz = sizeof(ret);if (RegQueryValueEx(hKey, L&amp;#34;SomeValue&amp;#34;, NULL, NULL, (PBYTE) &amp;amp;ret, &amp;amp;retSz) == ERROR_SUCCESS){// success!	return ret;}RegCloseKey(hKey);}return ret;}No exemplo acima quando as coisas dão certo elas também dão errado, já que o retorno do valor no meio da função evita que o HANDLE armazenado em hKey seja desalocado.
E como fazer para descobrir esse tipo de leak?
HandleLeaker O HandleLeaker é apenas um exemplo de aplicação que realiza o leak de um handle por segundo. Ele tenta (e consegue) abrir um handle para seu próprio processo, e deixa o handle aberto (programas em Win32 API não são muito bons em RAII).
int main(){while (true){HANDLE h = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, GetCurrentProcessId());Sleep(1000);}}Performance Monitor O Perfmon(.msc) está aí no Windows já faz algumas versões (quase todas). Tudo que você precisa para executá-lo é executar o comando perfmon no diálogo de execução (Start, Run) ou encontrar o atalho para perfmon.msc. Na busca do Windows 8/10 também é possível encontrá-lo pelo nome.
Ao executá-lo a primeira coisa que ele monitora é o processamento da máquina. Podemos eliminar ou esconder esse indicador direto na lista abaixo da ferramenta.
Existem incontáveis contadores no Perfmon. Para o que precisamos vamos em Process e escolhemos o contador de Handles:
Depois de um tempo o Perfmon irá exibir o histórico que determina para onde está indo o seu contador:
Se os valores do seu contador estão fora da faixa do histórico é possível ajustar a escala nas propriedades:
Se a frequência for muito menor do que um handle por segundo (isso acontece, principalmente com serviços que rodam por dias/semanas/meses), é possível mudar também pelas propriedades, mas gerais:
A mudança que fizemos captura o dado monitorado de dez em dez segundos e realiza essa operação por 600 segundos (10 minutos), até repetir o gráfico de histórico:
Process Explorer Outra forma de verificar como andam os handles da máquina é usando a já famosa ferramenta da SysInternals. Através das inúmeras colunas que ela fornece existe o contador de handles de cada processo, através do qual é possível verificar quais são os processos com mais handles abertos:
Se seu programa for um handle hog, vai conseguir até ver esse leak acontecendo em tempo real (como o nosso programa mal-educado):
E como encontrar o código-fonte responsável por esse leak? Mais detalhes em um próximo post.
</description>
</item>

     
        <item>
  <title>Saldo da 40a. MostraSP</title>
  <link>http://www.caloni.com.br/saldo-da-40-mostra-sp/</link>
  <pubDate>2016-11-02</pubDate>
  
  <guid>http://www.caloni.com.br/saldo-da-40-mostra-sp/</guid>
  <description>Vinte e dois filmes. Essa foi a quantidade que consegui assistir nessa primeira mostra que me dedico nos dias de semana (uma bagatela de ter a própria empresa). Na maioria dos dias foram três sessões seguidas; em alguns dias tive que me ausentar, outros simplesmente entrei na sala errada! (e acabei vendo, por exemplo, o ótimo O Contador). No entanto, foi de longe a edição do festival em que mais vi filmes, e a primeira em que escrevi sobre todos eles.
Ao todo foram dez dramas, seis documentários, uma animação... a maioria tentei ir na competição de Melhores Diretores, onde tive a oportunidade de ver debate com dois deles, estreantes; os outros fizeram parte da Mostra Brasil e da Perspectiva Internacional. Por fim, para não fazer desfeita, vi um dos filmes de Andrzej Wajda, o homenageado do ano, polonês que enxergou os horrores do autoritarismo através da igreja e dos sovietes. Terra Prometida, o filme que eu vi, é a perfeita anti-propaganda nazista/comunista, já que exagera o tom na mesma medida que eles faziam quando queriam dizer que os capitalistas comiam criancinhas.
Dos documentários, o mais impressionante foi Então Morri, pelo poder do Cinema mesmo com poucos recursos. Além disso, foi a primeira vez que fui convidado por um diretor a assistir seu filme. Um Homem Insignificante, de Vinay Shukla, popula o imaginário político das massas através dos olhos do Partido do Homem Comum na Índia.
Das ficções, o campeão disparado para mim é Aloys, pela metalinguagem empregada em desvendar os problemas psicológicos das pessoas solitárias, como depressão. A montagem de Aloys é uma das ótimas descobertas dessa mostra.
Minha impressão como cinéfilo foi que, nos dias de semana à tarde, as sessões estavam muito vazias. Não havia público o suficiente sequer para votar. Pode ser que a cidade não esteja tão preparada para receber as pessoas, ou, o mais provável, que a Mostra não esteja mais chamando tanto a atenção. A organização é ótima, ainda mais para quem tem credencial, e o público que frequentou as mesmas sessões que eu dividiam-se em jovens que precisam ganhar cota das faculdades de artes que devem estar fazendo, e estão aparentemente fazendo pouco caso para a sétima arte, e pessoas mais idosas que são veteranos do evento. Não há um interesse no público em geral, o que é esperado. O Cinema como arte tem morrido aos poucos, e a crítica escrita vai junto, afogando paulatinamente.
De qualquer forma, um viva para o Cinema. Enquanto houver dinheiro para investir em cultura essa morte tende a ser lenta. Torço para uma Mostra em streaming em breve, como deve ser. A real democratização das artes é dar ao público todas as opções que eles merecem, mesmo que para a grande maioria isso não sirva pra nada.
</description>
</item>

     
        <item>
  <title>Mini-Entrevista com Olaf Kraemer, diretor de 5 Mulheres</title>
  <link>http://www.caloni.com.br/mini-entrevista-com-diretor-de-5-mulheres/</link>
  <pubDate>2016-10-25</pubDate>
  
  <guid>http://www.caloni.com.br/mini-entrevista-com-diretor-de-5-mulheres/</guid>
  <description>A sessão de ontem no Frei Caneca de 5 Mulheres estava mais ou menos lotado, o que foi uma surpresa (positiva). O thriller dirigido por Olaf Kraemer desaponta em muitos sentidos, incluindo o fato de ser confuso. Após a sessão, ele mesmo aparece para um pequeno debate de cinco perguntas (aqueles da mostra, que duram menos de 5 minutos, só pra tirar foto e sair vazado). O tradutor/entrevistador teve a consciência de avisar o público antes do filme começar, e o diretor nos avisou que haveria um curta exclusivo de festivais antes, que iria se relacionar com o longa depois.
Quanto custou a produção?
Kraemer: Foi uma produção de baixo custo, cerca de 300 mil (euros).
Como foi alterada a maquiagem em na cena X (uma cena-chave)? Como vocês trabalharam essa questão? Você usa story boards?
Kraemer: Usamos a mesma tinta dos quadros nas atrizes. Não uso story boards. Antes de filmar alguém faz um pequeno esboço da cena desenhado, mas é só.
Há muitos casos de violência contra a mulher (na Alemanha)? (espectador comenta que é o quinto filme que vê na Mostra com a mesma temática)
Kraemer: Na Alemanha as mulheres são sempre vistas como vítimas, mas aqui eu quis colocá-las também como algozes dos estupradores, tentar tirar esse estigma delas.
Sua história foi baseada em algum caso real?
Kraemer: Foi baseado em alguns, mas em uma versão muito diferente do que está retratado no filme.
Como o curta inicial se encaixa tematicamente com o longa?
Kraemer: Fiz esse curta como meu primeiro filme, e ele foi uma brincadeira com essa noção de inocência (tanto que o curta tem esse título).
Houve vários elogios da plateia, que curtiu um bom thriller protagonizado (apenas) por mulheres.
</description>
</item>

     
        <item>
  <title>Mini-Debate com diretor de O Que Restou da Minha Vida</title>
  <link>http://www.caloni.com.br/mini-debate-diretor-o-que-restou-da-minha-vida/</link>
  <pubDate>2016-10-21</pubDate>
  
  <guid>http://www.caloni.com.br/mini-debate-diretor-o-que-restou-da-minha-vida/</guid>
  <description>Depois da sessão de hoje do alemão O Que Restou da Minha Vida, candidato à Competição Novos Diretores, adentrou no Cine Caixa Belas Artes Sala 1 o diretor Jens Wischnewski para uma rápida sessão de perguntas. Logo no começo também chega meio apressada a atriz principal do filme, Luise Heyer. As perguntas foram improvisadas pelo (infelizmente) pequeno público, mas foi respondido com muita simpatia (para um alemão) por Wischnewski. Segue as que eu lembro de cabeça:
Você já fez algum curta-metragem antes desse seu primeiro longa?
Wischnewski: durante minha faculdade de Cinema havia cada ano a produção de um curta, então fiz, ao total, cinco curta-metragens antes de me aventurar em filmes mais longos.
Quanto tempo demorou para ser feito o roteiro?
Wischnewski: o roteiro foi feito durante minha faculdade de Cinema junto com mais pessoas, por isso não estou sozinho nos créditos. Ele foi evoluindo durante o período do curso até procurarmos produzi-lo. Quando ficou pronto, ele já estava bastante caro e longo, então foi necessário buscar financiamento fora da escola.
A ideia da montagem ir e vir com flashbacks já existia no roteiro ou foi sendo feita com o montador?
Wischnewski: inicialmente o roteiro era linear, mas aos poucos vimos que seria mais interessante intercalar os dois relacionamentos do personagem. Uma ideia que também surgiu próximo da produção foi mostrar a nova namorada do personagem antes da falecida, para que o público conseguisse se identificar melhor. Tirando pequenas mudanças, o roteiro já estava completamente pronto na faculdade.
Quanto custou apenas a produção do filme?
Wischnewski: cerca de um milhão e oitocentos (não diz a moeda; provavelmente euros).
De onde veio a ideia de que as coisas são como deveriam ser?
Wischnewski: isso é algo que veio da influência de minhas duas avós; uma delas acreditava nisso, e acreditava no destino. O engraçado é que quando fui mostrar a ela meu filme/ideia, ela já não acreditava mais nisso (risadas), então é por isso também que em um certo momento do filme isso não funciona mais.
O resto foram elogios e comentários periféricos. De um modo geral, deu a sensação que as pessoas gostaram bastante do filme, que ainda não estreou na Alemanha.
</description>
</item>

     
        <item>
  <title>Crítica: Comercial Friboi - A certeza do churrasco perfeito</title>
  <link>http://www.caloni.com.br/friboi-maturatta-a-certeza-do-churrasco-perfeito/</link>
  <pubDate>2016-10-16</pubDate>
  
  <guid>http://www.caloni.com.br/friboi-maturatta-a-certeza-do-churrasco-perfeito/</guid>
  <description>Em tempos de regravações de westerns como Sete Homens e um Destino, a Friboi aposta no gênero e já parte em seu último comercial, &amp;quot;A certeza do churrasco perfeito&amp;quot;, inovando com o conceito já inovador há pelo menos uma década de &amp;quot;câmera lenta com partículas em suspensão&amp;quot; introduzido por Guy Ritchie (Sherlock Holmes, 2009). Aqui o churrasco é visto através daquela trilha sonora afiada, fogos gerados por computação e, claro, close na destreza e precisão do mestre churrasqueiro.
https://www.youtube.com/embed/19RrxCMKI4
Note como essas partículas de sal são vistas não uma, nem duas, mas pelo menos três vezes em um comercial de 30 segundos. O sal, de acordo com o narrador com voz pseudo-sensual-pseudo-rouca, é muitas vezes vista pelo mestre churrasqueiro como o segredo do bom churrasco (o que explicaria as altas doses de dinheiro trocadas por sal-vesgo de cor diferente da chapada amazônica trazida pelos índios friboizés). Porém, isso ainda não é o que garante o sucesso dessa churrascada. Vemos, então, o mestre do churrasco preparando com toda a dedicação sua carne. Ou seja, tirando da sacolinha a vácuo da Friboi, jogando sal e metendo na brasa.
Note também que os velhos clichês da Friboi estragam um pouco o prazer da aventura. &amp;quot;Carne selecionada&amp;quot;? Só se for seleção de espécie. O apelo ao macio também soa vazio, embora o &amp;quot;mestre&amp;quot; churrasqueiro aparentemente tenha decidido jogar ela na pedra, sem mais nem menos, machucando um bom bife pelo preço de uma boa tomada em câmera lenta (e se isso é realmente uma carne selecionada, começo a sentir pena do boi que foi sacrificado para um comercial que joga carne boa em pedra ruim).
Porém, note, nesta mesma tomada, um garfo afeminado, jogado meio que casualmente, perfeitamente alinhado em cruz com a faca de bastão de madeira. Nesse momento vemos algo inovador: o mestre churrasqueiro começa a levantar a bandeira LGBT e exibir pequenos traços de feminilidade em torno de seu ritual maravilhoso da devoração de animais por outros animais.
E, se nos mantivermos ainda mais um tempo nessa mesma tomada, notaremos também um pedaço de alecrim, também casualmente modelado para ficar à esquerda superior do quadro, sugerindo um suposto product placement disfarçado de mato, sugerindo na realidade uma propaganda velada do Master Chef, programa de televisão que preza pelo uso de temperos esotéricos que cobram mais para que a comida fique com menos sabor.
E por fim, nesta mesma tomada, caro leitor, note como o &amp;quot;mestre&amp;quot; (humpf) churrasqueiro deixa todo seu sal derramado por toda a mesa. Além de um desperdício uma desorganização digna de fazer Bassi se remoer do túmulo. Assim não é possível se emocionar com a trilha sonora tão &amp;quot;original&amp;quot; do velho oeste, quando o que temos no comando é um sujeito desleixado, que preza antes pelo estético, depois pela perfeição gastronômica.
Na tomada seguinte, mais uma rajada de sal é desperdiçada. Alguém não bate muito bem com a cabeça para salgar a carne lançando as pedras de sal como se estivesse em um cassino jogando dados. Me admira que o personagem desta pequena obra não tenha se queimado na grelha até aquele momento, tendo que ser substituído pelo churrasqueiro autorizado da Friboi (que é... adivinha? acertou! um churrasqueiro selecionado... e macio).
Até porque, como veremos na sequência seguinte, a churrasqueira está jorrando labaredas acima da grelha. Alguém chame um entendido do assunto, pois o rapaz vai é queimar toda a gordura antes mesmo da carne.
Por fim, a cara de satisfação misturada com embrulho no estômago da coadjuvante -- como podemos ver quando ela aperta incidentalmente sua cintura para baixo -- não foi a melhor forma da nossa personagem faminta/apressada/comilona (e ela não é gorda; mais um erro de casting) representar o prazer dado por uma carne queimada por labaderas e mal-salgada pelo ex-jogador de cassino agora-mestre churrasqueiro-protagonista. A não ser... a não ser... que de fato a carne esteja horrível, e isso seria um plot twist disfarçado em um comercial que pretende vender carne.
Se for, é um movimento genial do diretor/roteirista, só obliterado pela cara de satisfação quase mongol, quase cantador de pagode, do nosso corajoso amigo churrasqueiro, que mesmo depois de jogar sal como dados em um cassino e colocar carne &amp;quot;selecionada&amp;quot; para ser consumida por fortes labaderas em uma churrasqueira mal-administrada, continua firme, de avental, pretensamente admirando a paisagem abaixo do pescoço da coadjuvante (mas ela não estava de decote, e nem estava mais do seu lado... erro crasso).
Por fim, um resultado medíocre da Friboi em apresentar como não se deve fazer churrasco, aliado a um timing cômico desagradável da coadjuvante no momento final... medíocre, mas com partículas em suspensão (no caso, sal mal jogado). Por isso leva alguns pontos de crédito.
</description>
</item>

     
        <item>
  <title>Guardando senhas com Vim</title>
  <link>http://www.caloni.com.br/guardando-senhas-com-vim/</link>
  <pubDate>2016-10-05</pubDate>
  
  <guid>http://www.caloni.com.br/guardando-senhas-com-vim/</guid>
  <description>Eu já sabia que havia um sistema de criptografia de arquivos no Vim. Isso pode ser útil para textos secretos, ou para enviar qualquer bobagem para outra pessoa que sabe de uma senha que só vocês conhecem. Porém, o método default de criptografia dele não me animava. O pkzip é usa um algoritmo fraco, e os inúmeros programas que quebram zips encriptados estão aí para demonstrar. Além do mais, o blowfish da versão 7 do Vim tem problemas em gerar seu salt que favorece ataques de força bruta tão baratos quanto um XOR. E é aí que entra em cena o Vim 8.
A nova versão do meu editor favorito não apresenta o defeito do algoritmo blowfish anterior, ou apresenta, mas dessa vez fornece uma versão atualizada (claro que, por razões de compatibilidade, foram mantidos os algoritmos anteriores).
O que eu gosto no modelo do Vim de encriptar arquivos é que eles são encriptados apenas na escrita, e na leitura o usuário deve digitar a senha. Se a senha não correponder ao que foi usado para encriptá-lo, não há mensagem de erro: o editor irá simplesmente exibir o lixo gerado pela sua senha errada. Isso gera uma situação vantajosa e uma perigosa.
A vantajosa é que não há como automatizar um brute force em cima de arquivos encriptados pelo Vim, pois não há muitos sinais de que o arquivo foi desencriptado. Claro, por amostragem de texto é possível saber se a senha foi ou não satisfatória, mas a beleza está em não existir nada específico na estrutura do editor que diga se a senha foi ou não bem sucedida.
A perigosa é que uma vez que você digite a senha errada, muito cuidado com o lixo que você verá no seu buffer. Se por força do hábito for salvar o conteúdo, poderá perder o conteúdo do arquivo original, que estava encriptado com uma senha que você conhecia, mas que agora foi salvo após ter sido desencriptado com a senha errada. Ou seja, não há como reaver o conteúdo original a não ser com muito suor.
O mais prático de tudo é usar esse modelo de arquivo encriptado pelo Vim para salvar senhas. Um arquivo de senhas pode ser tão simples quando login/senha de todas as senhas que você deseja guardar, e tão bem protegido quanto a força de sua senha master. Nada mais, nada menos. De quebra, um arquivo pequeno cujo backup pode ser sincronizado instantaneamente na nuvem (usando Google Drive, Dropbox ou One Drive), ou até mantido em um controle de fonte (embora ele seja tratado como binário).
Se você gostou desse modelo, seguem os comandos para pesquisar (:help ):
; define o algoritmo que será usado para encriptar arquivo:set cm=blowfish2; define senha de criptografia ao salvar arquivo:XEste post foi inspirado em meu próprio uso do Vim, mas mais inspirado ainda depois de ler o artigo da invert.
</description>
</item>

     
        <item>
  <title>Usando GVim com projetos do Visual Studio</title>
  <link>http://www.caloni.com.br/usando-gvim-com-projetos-do-visual-studio/</link>
  <pubDate>2016-09-18</pubDate>
  
  <guid>http://www.caloni.com.br/usando-gvim-com-projetos-do-visual-studio/</guid>
  <description>A vida dos programadores C/C&#43;&#43; Windows -- e que geralmente precisam do Visual Studio -- está um abandono total. A configuração de make dos projetos sempre foi baseada no uso de makefiles, assim como no Unix, e por isso mesmo o uso da ferramenta nmake do SDK do Windows era a maneira padrão de se compilar e ver o resultado de dentro do Vim para projetos Windows. Com o advento do .NET, do Visual Studio 2003 e dos XMLs disfarçados como arquivos de projeto e solution, o uso do makefile foi paulatinamente abandonado, gerando diferentes versões de ferramentas -- todas incompatíveis -- para conseguir compilar um ou mais cpps e conseguir ver o resultado.
Por isso mesmo é um assunto pouco explorado nos fóruns do Stack Overflow como configurar decentemente o comando :make do Vim para conseguir realizar o ciclor program-compile-debug que já era feito desde a época do Amiga OS (e conhecido no manual do Vim como Quickfix). Ninguém se dá ao trabalho de usar esse modelo torto.
Houve um tempo que eu mesmo pesquisei algumas soluções, e caí no velho problema de tentar conviver com diferentes versões do Visual Studio. Deixei de lado o Vim por uns anos, e passei a usar o VsVim, um plugin que roda em várias versões do Visual Studio e utiliza o vimrc de sua instalação.
Hoje voltei a fuçar esse problema e depois de algumas horas tentando entender qual a dinâmica que deve ser seguida, cheguei a dois usos legítimos do make no Visual Studio: o modo legado, através do devenv, e o modo comportado, que usa a ferramenta MsBuild para encontrar o projeto e a solution que devem ser compilados.
Colocando as coisas no path A não ser que você coloque o path das ferramentas direto nos comandos (algo que não recomendo pois as coisas no Vim começam a ficar estranhas com paths com espaços, algo abundante no Windows) é preferível que você escolha qual devenv e qual msbuild deseja utilizar e definir isso na variável de sistema path. No meu exemplo estou usando o msbuild para qualquer Visual Studio acima do 2010 (como o 2015), pois já está padronizado, e como tenho projetos no VS2003 para manter, escolhi deixar o devenv.com com ele.
set path=%path%;C:\Program Files (x86)\MSBuild\14.0\Binset path=%path%;c:\Program Files (x86)\Microsoft Visual Studio .NET 2003\Common7\IDENote que essa configuração, para ficar persistente, precisa ser definida através do Painel de Controle ou Propriedades do Sistema. Google for it.
Depois de configurado, qualquer projeto deve ser compilável em 2003 pela linha de comando (através do devenv.com):
C:\Projects\samples\FixCMake&amp;gt;devenv.com FixCMake.sln /build DebugMicrosoft (R) Development Environment Version 7.10.3077.Copyright (C) Microsoft Corp 1984-2001. All rights reserved.------ Build started: Project: FixCMake, Configuration: Debug Win32 ------Compiling...FixCMake.cppLinking...Build log was saved at &amp;quot;file://c:\Projects\samples\FixCMake\Debug\BuildLog.htm&amp;quot;FixCMake - 0 error(s), 0 warning(s)---------------------- Done ----------------------Build: 1 succeeded, 0 failed, 0 skippedC:\Projects\samples\FixCMake&amp;gt;Da mesma forma, projetos 2010&#43; devem usar o msbuild:
C:\Projects\samples\ConsoleApplication5&amp;gt;msbuildMicrosoft (R) Build Engine version 14.0.25420.1Copyright (C) Microsoft Corporation. All rights reserved.Building the projects in this solution one at a time. To enable parallel build, please add the &amp;quot;/m&amp;quot; switch.Build started 9/18/2016 6:02:19 PM.Project &amp;quot;C:\Projects\samples\ConsoleApplication5\ConsoleApplication5.sln&amp;quot; on node 1 (default targets).ValidateSolutionConfiguration:Building solution configuration &amp;quot;Debug|x64&amp;quot;.The target &amp;quot;_ConvertPdbFiles&amp;quot; listed in a BeforeTargets attribute at &amp;quot;C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\IThe target &amp;quot;_CollectPdbFiles&amp;quot; listed in an AfterTargets attribute at &amp;quot;C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\IThe target &amp;quot;_CollectMdbFiles&amp;quot; listed in a BeforeTargets attribute at &amp;quot;C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\IThe target &amp;quot;_CopyMdbFiles&amp;quot; listed in an AfterTargets attribute at &amp;quot;C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\ImpoProject &amp;quot;C:\Projects\samples\ConsoleApplication5\ConsoleApplication5.sln&amp;quot; (1) is building &amp;quot;C:\Projects\samples\ConsoleApplication5\CPrepareForBuild:Creating directory &amp;quot;x64\Debug\&amp;quot;.Creating directory &amp;quot;x64\Debug\ConsoleA.C9D4BE8C.tlog\&amp;quot;.InitializeBuildStatus:Creating &amp;quot;x64\Debug\ConsoleA.C9D4BE8C.tlog\unsuccessfulbuild&amp;quot; because &amp;quot;AlwaysCreate&amp;quot; was specified.ClCompile:C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\x86_amd64\CL.exe /c /ZI /nologo /W3 /WX- /sdl /Od /D _DEBUG /D _CONSOLE140.pdb&amp;quot; /Gd /TP /errorReport:queue stdafx.cppstdafx.cppC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\x86_amd64\CL.exe /c /ZI /nologo /W3 /WX- /sdl /Od /D _DEBUG /D _CONSOLE140.pdb&amp;quot; /Gd /TP /errorReport:queue ConsoleApplication5.cppConsoleApplication5.cppLink:C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\x86_amd64\link.exe /ERRORREPORT:QUEUE /OUT:&amp;quot;C:\Projects\samples\Consoleib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:&amp;quot;level=&#39;asInvoker&#39; uiAccess=&#39;false&#39;&amp;quot; /manifest:embed /DEBUG /PDB:&amp;quot;C:\Projects\sacation5.lib&amp;quot; /MACHINE:X64 x64\Debug\ConsoleApplication5.objx64\Debug\stdafx.objConsoleApplication5.vcxproj -&amp;gt; C:\Projects\samples\ConsoleApplication5\x64\Debug\ConsoleApplication5.exeConsoleApplication5.vcxproj -&amp;gt; C:\Projects\samples\ConsoleApplication5\x64\Debug\ConsoleApplication5.pdb (Full PDB)FinalizeBuildStatus:Deleting file &amp;quot;x64\Debug\ConsoleA.C9D4BE8C.tlog\unsuccessfulbuild&amp;quot;.Touching &amp;quot;x64\Debug\ConsoleA.C9D4BE8C.tlog\ConsoleApplication5.lastbuildstate&amp;quot;.Done Building Project &amp;quot;C:\Projects\samples\ConsoleApplication5\ConsoleApplication5.vcxproj&amp;quot; (default targets).Done Building Project &amp;quot;C:\Projects\samples\ConsoleApplication5\ConsoleApplication5.sln&amp;quot; (default targets).Build succeeded.0 Warning(s)0 Error(s)Time Elapsed 00:00:02.31C:\Projects\samples\ConsoleApplication5&amp;gt;O que o Vim tem a ver com tudo isso? Pois é. Tirando essa facilidade, as coisas no Vim para msbuild rodam particularmente bem. Basta alterarmos o makeprg da seguinte maneira:
:set makeprg=msbuild\ /nologo\ /v:q\ /property:GenerateFullPaths=true&amp;lt;CR&amp;gt;As opções específicas são para gerar o path completo, as barras invertidas são por causa dessa mania do Vim de dar pau quando tem espaço em tudo.
A partir dessa configuração já é possível compilar um projeto estando em sua pasta:
Para o Visual Studio 2003 (ou qualquer um usando o devenv.com) é necessário mudar esse comando:
:set makeprg=devenv\ %\ /build\ Debug&amp;lt;CR&amp;gt;Sim, temos que escolher uma configuração (o msbuild já escolhe por você). E note que ele usa o arquivo atual (%) para compilar. Isso quer dizer que isso irá exigir do usuário de Vim abrir o sln ou o vcproj e executar o :make a partir daí. De qualquer forma, ele funciona também:
Refinando a saída Note que em nenhum dos casos erros conseguirão ser capturados para irmos direto no ponto do código-fonte onde ele está. Para isso funcionar, em nosso último passo, é necessário configurar o errorformat para que ele tenha um padrão que funcione com ambas as ferramentas. Depois de testar um pouco, cheguei nesse formato:
set errorformat=%f(%l)%mEle pega também os warnings, mas fazer o quê. Você não quer conviver com warnings em seu código pelo resto da vida, né? =)
VS2010:
VS2003:
Note que depois de clicar em Enter ele pula para o primeiro erro da lista:
E para navegar na lista é como o resultado de comandos como :vimgrep. :cnext e :cprevious vão para frente e para trás na lista, sempre pulando para o ponto no código onde está o erro.
Dica final: convivendo com dois mundos Como deu pra perceber, para conseguir usar o msbuild e o devenv ao mesmo tempo você seria obrigado a trocar o makeprg sempre que precisasse. Para facilitar seu uso, nada como fazer um mapeamento de atalhos:
map &amp;lt;F7&amp;gt; :set makeprg=devenv\ %\ /build\ Debug&amp;lt;CR&amp;gt;map &amp;lt;S-F7&amp;gt; :set makeprg=msbuild\ /nologo\ /v:q\ /property:GenerateFullPaths=true&amp;lt;CR&amp;gt;Para alguém curioso para ver minhas configurações do Vim (quem quiser compartilhar também, fique à vontade), segue.
</description>
</item>

     
        <item>
  <title>O Destino de Miguel</title>
  <link>http://www.caloni.com.br/o-destino-de-miguel/</link>
  <pubDate>2016-09-11</pubDate>
  
  <guid>http://www.caloni.com.br/o-destino-de-miguel/</guid>
  <description>Graças às leis de propriedade intelectual não temos muitas produções desse tipo, mas felizmente temos algumas. E essa, produzida de forma profissional por grandes nomes da dramaturgia brasileira, realiza um curta-metragem mais que necessário como extra de DVD do filme Shakespeare Apaixonado, aquele hollywoodiano que ganhou Oscar porque... porque... bom, porque não é dublado como O Destino de Miguel.
https://www.youtube.com/embed/-vOIA0eWwTw
A história é conhecida por todos que possuem internet há mais de 10 anos. Miguel nasceu como um garoto bem-dotado e que é viciado em comer cus em sua cidadezinha. Seu último objetivo é comer o cu do governador, ou do filho dele. Não fica muito claro na narrativa, que é coesa, mas meio perdida.
Porém, estamos falando de uma redublagem, e é feito um verdadeiro milagre para inserir diálogos que fizessem sentido em todas as cenas. A dublagem de atores profissionais como Lázaro Ramos, Wagner Moura, Bruno Garcia e Caetano Veloso (bom, nada é perfeito) e a participação mais que especial de Sydney Magal, o resultado é muito melhor do que poderíamos imaginar de um filme só de zoeira. Há momentos que a história começa até a fazer sentido, mas pelo menos as risadas são constantes.
</description>
</item>

     
        <item>
  <title>Os 10 melhores filmes dos anos 90... 1890!</title>
  <link>http://www.caloni.com.br/os-10-melhores-filmes-dos-anos-90-1890/</link>
  <pubDate>2016-09-11</pubDate>
  
  <guid>http://www.caloni.com.br/os-10-melhores-filmes-dos-anos-90-1890/</guid>
  <description>Esta é uma ótima seleção feita pelo saite A.V. Club, que contém para variar vários trabalhos do genial Georges Méliès, além também dos trabalhos mais técnicos de Thomas Edison. É preciso lembrar que a sétima arte estava apenas engatinhando.
Um primeiro exemplo do cotidiano, que não quer dizer nada em particular, mas que já documenta uma rotina da época, e hoje é um dos melhores exemplos dos curtas iniciais do cinema.
https://www.youtube.com/embed/OYpKZx090UE
Um teste de sincronização entre áudio e víduo já pode ser observado nesse conjunto de três tomadas de testes nos laboratórios Edison.
https://www.youtube.com/embed/Y6b0wpBTR1s
Várias trucagens dentro de um cenário de castelo idealizados por Georges Méliès, tudo na edição de corte, além de uso de fumaças, sobrescrita de película, etc.
https://www.youtube.com/embed/OPmKaz3Quzo
Esse é o clássico, conhecido pelo primeiro filme exibido em público e com a lenda de que os espectadores saíram correndo ou abaixavam as cabeças quando o trem chegava à estação. Na verdade, parece que os irmãos Lumière já estavam testando o mesmo filme em uma versão 3D, mas que foi colocada em exibição pouquíssimas vezes e muito tempo depois, no ano seguinte. Mesmo assim, podemos dizer que Cinema e 3D nasceram praticamente juntos.
https://www.youtube.com/embed/1dgLEDdFddk
Mais trucagens de Méliès, dessa vez em um filmeco de menos de um minuto. Mas ainda é fascinante de se ver. Um dos melhores exemplos daquela época de como se pode fazer muito com &amp;quot;pouco&amp;quot;.
https://www.youtube.com/embed/Sgr5FVjnXs
Um curta de Méliès que resume toda a história de Cinderela. Tem como figura impressionante o velho do tempo, que surge no castelo. Já possui a noção de mudança de espaço, pois os cortes denotam lugares diferentes onde se passa a história. No final tem uma dança bem divertida, um espetáculo de alguns minutos para a época.
https://www.youtube.com/embed/0caKk42n7A
O primeiro filme polêmico foi feito em terras americanas. Um beijo de um casal foi acusado de pornográfico, mereceu críticas do Vaticano e hoje seria o equivalente a... sei lá. Dezenas de atores em uma suruba em um filme da Disney?
https://www.youtube.com/embed/IUyTcpvTPu0
Esse filme é bizarro. É sobre uma suporta fada, mulher doce, sei lá, que vai arrancando bebês de um jardim (bebês reais) e jogando no caminho. Hoje seria considerado um terror e tanto.
https://www.youtube.com/embed/MTd7r0VkgnQ
Mais um gore para a plateia. Para os que reclamam que hoje em dia há muito apelo à violência gráfica, esse filme é apenas isso: a decapitação de uma mulher (a tal Rainha de Scots). O corte até que foi bem feito. Deve ter impressionado à beça.
https://www.youtube.com/embed/XgDGwc19aU
Na época o Raio-X havia sido descoberto e a criatividade já começava a aflorar. Esse filmeco é bem divertido pela sua inocência, e demonstra como havia curiosidade a respeito das inovações tecnológicas e científicas. Aliás, a Scientific American aquele ano lançou um artigo explicando como fazer Raio-X em sua própria casa!
https://www.youtube.com/embed/3gMCkFRMJQQ
Fonte: A.V. Club - The 10 best films of the 1890s
</description>
</item>

     
        <item>
  <title>unit-menos-menos</title>
  <link>http://www.caloni.com.br/unitmenosmenos/</link>
  <pubDate>2016-09-05</pubDate>
  
  <guid>http://www.caloni.com.br/unitmenosmenos/</guid>
  <description>Fazer o setup inicial de testes unitários em seu projeto C&#43;&#43; pode ser algo enfadonho se você precisa baixar e compilar uma lib do Google ou do Boost. Há uma alternativa mais leve e bem direta, que um dia apareceu nesses CodeProject da vida, mas que hoje está, até onde eu vi, no GitHub.
E como se faz para começar a montar os testes unitários? Bom, suponha que você tenha um projeto qualque que já compila, roda e faz alguma coisa de útil:
Apenas crie um projeto do lado, console, ou copie e cole o projeto, mas use os arquivos-fonte do projeto original. Dessa forma ele irá compilar com os fontes que estão sendo modificados/compilados.
Apenas se lembra de não incluir o módulo que contém o int main. Esse módulo deve ficar apartado do projeto principal.
Depois basta incluir apenas um arquivo do projeto unit--, que é seu cpp principal.
Com isso existirá um main lá dentro, definido em algum lugar. E tudo o que você precisa fazer é ir criando seus testes em outro arquivo fonte gerado para isso. O corpo e o formato dos unit cases é bem simples. Note que tudo que você fez para já sair testando seu projeto foi copiar um projeto já existente e inserir um módulo de outro projeto. Tudo compilando junto e já podemos fazer os primeiros testes do programa original (desde, claro, que ele seja testável, algo primordial):
// Precisamos definir uma suíte de testes.testSuite(DayToDayTests)// Se eu digito uma linha, ela deve estar no arquivo daytoday.txt.testCase(GetUmaLinha, DayToDayTests){//...bool lineOk = TestAlgumaCoisa();assertTrue(lineOk);}// Se eu digito duas linhas, ambas devem estar no arquivo daytoday.txt.testCase(GeraDuasLinhas, DayToDayTests){//...bool lineOk = TestOutraCoisa();assertTrue(lineOk);}E assim por diante. O resultado é que quando você roda o executável de teste, ele execute toda a bateria e já te entregue todos os casos que você deseja testar, sem frescura:
......OKTotal 6 test cases0 sec.Press any key to continue . . .E voilà! Sistema de teste unitário pronto e rodando. Agora cada nova situação de erro ou que você precise validar, basta escrever um novo teste. Se esse projeto ir se tornando algo muito maior, a transição para testes unitários mais parrudos é apenas um regex. No momento, foque em codificar e testar muito bem o que está fazendo.
</description>
</item>

     
        <item>
  <title>Programa, Mãe Foca!</title>
  <link>http://www.caloni.com.br/programa-mae-foca/</link>
  <pubDate>2016-08-30</pubDate>
  
  <guid>http://www.caloni.com.br/programa-mae-foca/</guid>
  <description>A história das metodologias de desenvolvimento de software segue mais ou menos as oscilações naturais do próprio software: caminha em direção ao caos (e as sessões de refactory buscam desacelerar essa inevitável tendência). Assim como aquela classe que parecia perfeita assim que foi feita, uma metodologia irá se desmanchar frente à lei da mediocridade. Você não consegue software bom com programadores ruins seguindo a melhor metodologia do planeta.
Então a solução nunca parece ser a metologia, já que programadores ruins não melhorarão seguindo qualquer metologia que seja.
Porém, existe um método infalível. Um método que transforma os programadores mais UML do mundo em fazedores de código inquebrável. Programadores acostumados a 15 horas de reunião semanal fritando o processador de produtividade, esbanjando atalhos no Vim, coordenando threads como um maestro que coordena uma orquestra sinfônica tocando a trilha sonora da sua vida.
Esse método chama-se: Programa, Filho da P***
Ou, do inglês, PMF.
E o que o PMF tem a oferecer? Esse cara parece ter o esboço da resposta:
&amp;gt; Como nós iremos resolver problemas?&amp;gt; Programando, filho da p\*\*\*&amp;gt; Como nós iremos testar?&amp;gt; Programando, filho da p\*\*\*&amp;gt; Como iremos completar tarefas no prazo e abaixo do orçamento?&amp;gt; Programando, filho da p\*\*\*&amp;gt; Como nós iremos ter certeza que os programadores estão felizes e fazendo o seu serviço?&amp;gt; Programando, filho da p\*\*\*E como ele pretende fazer isso? Bom, existe um algoritmo, é claro:
 Escreva uma lista da p*** que você tem que fazer, usando software escrito por algum programador filho da p*** Faça algumas dessas p***s, novamente usando &amp;quot;programação, filho da p*** Teste se essa p*** está boa, e se não estiver então conserte com programação, filho da p***  E se você está preocupado com o foco muito no código, e não nos resultados para seu cliente, existe até um &amp;quot;capítulo&amp;quot; sobre gerência, a &amp;quot;Gerência, C*zão&amp;quot;:
 Para fazer Gerência, C*zão, você deve fazer o seguinte:
 Ache o que os clientes querem perguntando para eles. Arrume a p*** que os Programadores Filhos da P*** precisam fazer. Fale para os Programadores Filhos da P*** quando as p*** que eles fizeram não está boa o suficiente para vender.   Simples e conciso. Acho que até a gerência deve conseguir se lembrar desses três passos.
O que há de errado com metologias Bazinga? Não há nada de errado em usar outras metologias em cima da PMF, mas há tudo de errado em substituir uma coisa por outra. A PMF é primordial para terminar alguma coisa. É o suprasumo da eficiência. Com ela todas as coisas eventualmente são solucionadas. Usar apenas a metologia do seu coração sem aplicar PMF não irá entregar nada.
E por mais curioso que seja, há de fato uma tendência nas pessoas de enxergar a solução de todos os seus problemas não fazendo absolutamente nada. Apenas preenchendo cartões em um dashboard. Não é bem por aí. Claro que há uma parcela de nada que pode ajudar a organizar a bagunça que é uma equipe de programadores batucando código, mas esse nada nunca pode atrapalhar os... programadores batucando código!
Afinal, é com código que se constrói algo, certo? Seja aumentando, modificando ou apagando código. Seja transformando código em um passo-a-passo em um txt. Ou em um papel de pão. Código é apenas uma abstração de resolução de problemas. O quão bem você resolver o problema é o que conta, não a sua linguagem de programação do coração. Muitos problemas podem ser solucionados apenas com papel e caneta (ou lápis). Linguagens de programação, até certo ponto, podem virar também metodologias mágicas que prometem entregar soluções mágicas sem dor.
Mas adivinha, só? Seu cliente está c*g*n*do qual é a linguagem, a ferramenta, o tamanho da fonte. Ele só quer seu problema resolvido.
Então o jeito é: &amp;quot;Puroguramingu, Mazaafakkaa!&amp;quot; =)
</description>
</item>

     
        <item>
  <title>Se não está funcionando direito, mexa!</title>
  <link>http://www.caloni.com.br/se-nao-esta-funcionando-direito-mexa/</link>
  <pubDate>2016-08-17</pubDate>
  
  <guid>http://www.caloni.com.br/se-nao-esta-funcionando-direito-mexa/</guid>
  <description>Uma breve história de um chuveiro: O de casa às vezes inventa de dar choque. Isso desde que me mudei (uns 2 anos e meio). Não são choques brabos, daqueles de fazer a pessoa tremer. É apenas uma quase estática ao tocar no registro para abrir ou fechar a água. No entanto, já é motivo para pessoas mais sensíveis, como minha sobrinha de oito anos, se recusar a encostar no registro. Frecura.
(Pensando bem, quando eu era criança, tinha até medo de ficar no mesmo quarto onde havia fiação desencapada, mesmo sem energia.)
De uma semana pra cá, agora o chuveiro tem &amp;quot;aprontado&amp;quot; outra: ele desliga. Do nada. Não há nada de errado com a resistência, nem com os fios, e depois descobri, nem com a energia (não tinha um testador de tensão antes). Aliás, de vez em quando, ele liga de novo. Quando fui reclamar com o zelador, minutos atrás tentando fazê-lo ligar, adivinha quem ficou com cara de bobo demonstrando como o chuveiro estava funcionando perfeitamente?
No entanto, ele me deu uma &amp;quot;dica&amp;quot;: é o disjuntor. Pensei comigo mesmo: &amp;quot;agora os choques fazem sentido; ele desligar (e ligar) do nada faz sentido; a vida faz sentido!&amp;quot;.
Dito e feito. No dia seguinte fui comprar um novo. Mesmo modelo, tudo certinho (aproveitei e comprei o tal testador de tensão). Quando fui retirar o velho, notei que havia um fio desencapado muito próximo de uma das entradas de energia do dito cujo.
É nessa entrada que se conecta um pino de onde vem a energia da central. Do lado deste pino havia um fio, como quem não quer nada, &amp;quot;passeando&amp;quot; bem próximo do pino. Notei também que havia outro do lado, no disjuntor do microondas.
O apartamento onde estou é novo e sou o primeiro morador. Recebi com garantia e tudo. Para mim não fazia sentido que houvesse algo de errado com as instalações elétricas, principalmente porque já habitava o local há mais de dois anos.
Mas não é que estava errado, mesmo?
Depois de algumas horas sofrendo em tentar entender a lógica por trás das conexões -- pois obviamente eu troquei o disjuntor e nada mudou -- descobri que o parafuso que faz o aperto do pino de energia no disjuntor original estava meio frouxo, e às vezes ele não empurrava a barra usada para fixar o pino, ficando o pino frouxo. Imediatamente (tipo duas horas depois, já escurecendo e eu sem energia a não ser a luz do notebook sem internet) deduzo que quando o eletricista foi fazer a instalação, ou na última manutenção feita, esse fio desencapado muito próximo do pino de tensão deve ter ficado de fora da conexão do disjuntor, mas próximo o suficiente para coseguir uma conexão eventual. Muito provavelmente este fio é o terra, e a falta dele deve ter originado os choques eventuais, além de agora, por algum desarranjo na posição capenga em que estava, ele começou a se separar do pino/disjuntor e gerar todo esse rebuliço.
Então eu finalmente tomo coragem, decido que a instalação está errada, e coloco o fio desencapado junto do pino da corrente (até porque agora o disjuntor novo não tinha esse problema do parafuso, facilitando a operação). E ligo a central (esperando uma explosão, tipo aquelas de filmes de ação).
E tudo funciona!
A essa altura do campeonato, se você ainda está lendo isso, deve estar se perguntando o que tudo isso tem a ver com desenvolvimento de software. Ora, achei que a analogia fosse clara. Quando vamos mexer em código de terceiros, há uma mania muito sadia, mas algumas vezes traiçoeira, de acreditar que tudo o que está ali está obviamente funcionando, já que usuários estão usando e provavelmente a equipe original passou pelos perrengues necessários para colocar tudo nos eixos.
Certo? Certo?
Na maioria dos casos, certo. Porém, todo software tem bugs. E quando mexemos em código dos outros, em toda nossa humildade, nunca esperamos que haja um problema grave no comportamento principal do programa (ex: o Excel não fazer um cálculo direito). Talvez pela falsa impressão que o simples passar do tempo já valida qualquer possível bug escondido (se esquecendo da história do BSD e seu bug de 25 anos). Ledo engano. É aí que o bug fica difícil de ser corrigido, pois não há mais programadores desconfiadinhos do lado do código, e a nova leva sabe que ele está rodando faz tempo, então mais respeito...
A mensagem é clara. Antes de tirar qualquer conclusão precipitada a respeito da suposta qualidade do código que irá mexer (mesmo que esse software rode em milhões de máquinas por milhões de anos), faça um check-list de que tudo o que está vendo faz realmente sentido. Se não fizer, dobre sua atenção e valide suas premissas. Se ainda assim não fizer sentido, talvez seja hora de fazer alguma coisa. Do contrário, esse código corre o sério risco de ter aqueles comentários &amp;quot;não mexa aqui ou para de funcionar&amp;quot;, e ninguém mais sabe por quê.
E você corre o risco de levar choques sem saber por quê.
</description>
</item>

     
        <item>
  <title>Electrum: uma opção simples e rápida de manter bitcoins seguros</title>
  <link>http://www.caloni.com.br/electrum-uma-opcao-simples-e-rapida-de-manter-bitcoins-seguros/</link>
  <pubDate>2016-08-16</pubDate>
  
  <guid>http://www.caloni.com.br/electrum-uma-opcao-simples-e-rapida-de-manter-bitcoins-seguros/</guid>
  <description>Estava já há algum tempo pesquisando as melhores ferramentas para organizar carteiras bitcoin. E quando se fala em ter seus próprios bitcoins, a segurança deve ser prioridade número zero. Isso porque, diferente de bancos, quando você se dispõe a gerenciar seu próprio cofre, é você, e apenas você, o único responsável pela sua integridade.
Isso quer dizer que apenas uma senha protegendo sua chave privada talvez não seja necessário. Algum hacker ou programa malicioso instalado na sua máquina (como um keylogger) pode facilmente obter essa informação.
E, sim, é preciso pensar que pode haver um keylogger em cada teclado que você for usar para digitar sua bendita senha. Por isso ter uma senha segura, no caso de bitcoins, não funciona muito bem.
Além disso, há também a segurança dos próprios dados. Não de serem roubados, mas perdidos. Nesse caso, uma estratégia muito interessante, por acrescentar entropia e comodidade, são as carteiras determinísticas. Elas se baseiam em um grupo de palavras que são usadas para gerar o par de chaves pública e privada e derivar as próximas chaves de sua carteira. Com isso, basta guardar (em papel, no seu cérebro, mas nunca em software!) essas palavras que você poderá resgatar sua carteira, reproduzindo o algoritmo de derivação.
Outro ponto importante, para os mais paranóicos, é conseguir gerenciar carteiras &amp;quot;frias&amp;quot;, que são carteiras que não podem ser usadas para gastar, apenas para receber. Funciona assim: você gera o seu endereço público para a transação, onde as pessoas podem depositar seus bitcoins, mas a chave privada, necessária para enviar bitcoins dessa carteira, é removida ou não está disponível. Dessa forma, ela vira uma carteira &amp;quot;watch-only&amp;quot;, em que o portador só consegue verificar o saldo e as transações, mas não realizar uma (a não ser que ele assine a transação em outro computador com a chave privada, ou resgate a chave privada de algum lugar, que seria o lugar &amp;quot;quente&amp;quot;).
Esse cold storage de carteiras, como é chamado, só é possível de duas maneiras: sendo você próprio um servidor da blockchain ou utilizando a infraestrutura da nuvem para validar as transações. A primeira forma é muito custosa, pois a blockchain cresce a olhos vistos, e demora hoje alguns dias para resgatar toda ela desde 2009. A segunda opção é mais rápida, mas depende da integridade dos servidores, libera mais informações sobre as transações do que devia, além de ser lento.
Dentro dessa segunda opção, porém, existe uma maneira rápida de verificar a transação sem comprometer seus dados, enviando coisas a mais para o servidor que irá validá-lo. Se chama Simple Payment Verification, e já estava prevista no paper original de Satoshi. Ela se baseia apenas em uma árvore de hashes montada justamente para compor a blockchain. Gerenciar essa informação economiza muito mais tempo e processamento, além de liberar apenas a informação essencial para os servidores validarem.
Todos esses elementos estão juntos no Electrum, uma ferramenta feita em Python que possui uma versão monolítica (um exe apenas) para Windows e que mantém as carteiras em texto plano em sua máquina. Sim, não há criptografia desnecessária. Afinal de contas, só a chave privada é que precisa ser protegida, e ela é aberta apenas durante a assinatura de uma transação, tornando todo o processo muito rápido.
Em sua página é possível tirar todas as dúvidas de como fazer uma carteira offline (fria), como apenas assinar transações, como gerenciar as carteiras, em que arquivo elas ficam, o que comem, etc. Estou usando e estou muito feliz, pois é o primeiro software que gerencia bitcoins que consegue a proeza de ser simples de usar, flexível e rápido.
Ah, e ainda possui um console em Python, para rodar seus programas =)
</description>
</item>

     
        <item>
  <title>O Jardim das Palavras</title>
  <link>http://www.caloni.com.br/o-jardim-das-palavras/</link>
  <pubDate>2016-08-06</pubDate>
  
  <guid>http://www.caloni.com.br/o-jardim-das-palavras/</guid>
  <description>Makoto Shinkai tem um apuro visual muito interessante. Adentrando em uma megalópole para narrar este conto intimista entre uma professora e um aluno, ele consegue encontrar os quadros perfeitos para animar e dar a sensação, através do som, de estarmos de fato experimentando um dia-a-dia naquela cidade movimentada que contém em seus dias de chuva um refúgio secreto entre duas pessoas.
É nos galhos dobrados de uma árvore, que parecem ao sabor do vento rasparem na água do lago, ou em um pássaro que sobrevoa em volta de um arranha-céu, ou até mesmo no movimento de um pé que brinca com seu sapato, que O Jardim das Palavras recebe um tratamento especial. Baseando-se no mistério para contar sua história, conhecemos essas duas pessoas que se encontram todos os dias de chuva. O filme tenta narrar o relacionamento entre eles, mas perde sua força justamente em seus momentos-chave, declarando para o espectador que não tem muita ideia do que fazer com aquela história, ou que seu desfecho será tão imprevisível que o próprio filme não sabe onde vai dar.
Mas tudo isso faz parte da estratégia do diretor/roteirista, que escolhe falar sobre a beleza de ser sapateiro, fazendo trabalhos únicos, para aos poucos, sutilmente, abrir a questão de como os seres humanos são únicos, e muitas vezes imprevisíveis. Além disso, escolhe o momento certo para nos deixar espiar o futuro dessas pessoas, onde aí sim se torna previsível e banal. Porém, até chegar esse momento, o curta-metragem já ganha contornos naturalistas que você não esperaria ver em uma animação.
</description>
</item>

     
        <item>
  <title>Ninfomaníaca Vols 1 e 2</title>
  <link>http://www.caloni.com.br/ninfomaniaca-vols-1-e-2/</link>
  <pubDate>2016-06-06</pubDate>
  
  <guid>http://www.caloni.com.br/ninfomaniaca-vols-1-e-2/</guid>
  <description>Um estudo de personagem puro. A revisão de ambos os filmes, estreando agora na Netflix brasileira, revela que não há de fato uma história amarrada, onde uma coisa leva a outra. A única coisa que move Joe são as coincidências e as variações de sua libido. A curiosidade do filme é mais sobre esse universo, e menos sobre suas memórias.
Dessa forma, Lars Von Trier escancara isso para o público transformando o filme em uma alegoria que permite reflexões e analogias nunca antes tentadas de maneira tão lúdica quando se fala de apetite sexual e comportamento humano. Ela encontra o ser mais assexuado possível, e juntos vão apresentar não apenas a história de Joe, mas de toda mulher que decidiu ser diferente do esperado. Claro, em diferentes níveis. Mas, falando em analogias, talvez eu esteja sendo ingênuo demais. Afinal de contas, é perfeitamente possível que alguém já tenha feito uma conexão entre as portas com sensor automático na entrada dos prédios com uma vagina ultra-sensível. Mas, como tudo no Cinema, depende de contexto. E o contexto aqui é sexualidade, em todas suas nuances.
A versão mutilada disponível na Netflix possui no início de cada volume cortes sem sentido nos diálogos que traem a fluidez de sua história. Há um letreiro que deixa claro que o diretor não teve nada a ver com isso. Depois desse início embaraçoso, não há muitos outros confusos o suficiente para serem notados. No seu lugar, cortes fabulosos que recriam a mística da ninfomaníaca de maneira profética, religiosa, sagrada. Os comentários de seu amigo inesperado nunca vêem com uma conotação sexual distinguível, mas o simples fato de estarmos na casa de um assexuado mostra que em qualquer criação humana, seja pescaria ou religião, sempre há o elemento sexual.
Em determinado momento Joe fala que a última digressão de seu amigo foi a mais fraca. No fundo, de todas as digressões linguísticas que o diretor aplica em seus filmes, talvez essa seja a mais fraca. Com quatro horas de duração, sobrou alguma gordura desnecessária para seus objetivos.
No final, um discurso feminista que faz todo sentido, seguido da lembrança de que tudo o que vimos foi um ser humano tentando achar seu lugar na sociedade. Infelizmente, com todas as mulheres temendo que seus maridos sejam roubados e com todos os homens. Que maneira triste, mesquinha e... verdadeira, de enxergar a sociedade.
</description>
</item>

     
        <item>
  <title>Cezinha Explica</title>
  <link>http://www.caloni.com.br/cezinha-explica/</link>
  <pubDate>2016-05-31</pubDate>
  
  <guid>http://www.caloni.com.br/cezinha-explica/</guid>
  <description>O Cezinha, ex-colega meu de suporte e um amigo que não vejo há um tempo, levou a curiosidade e o empenho até as últimas consequências e criou um canal de vídeos onde explica procedimentos que o suporte técnico precisa quase sempre realizar para informar ao desenvolvimento de um programa com problemas o que está dando de errado.
O seu primeiro vídeo explica como gerar um dump de processo. Porém, longe de ser superficial, o vídeo primeiro explica alguns conceitos de endereçamento de memória no Windows, talvez até para dar um start no cérebro de muita gente e criar um gancho para próximos vídeos.
Utilizando o Debugging Tools e o VBS conhecido de muita gente -- o AdPlus.vbs -- ele cria dumps para programas que &amp;quot;capotaram&amp;quot;, ou seja, geraram um crash, ou os que simplesmente &amp;quot;travaram&amp;quot; (ex: ficaram com a tela branca e irresponsiva).
Fora todos os méritos técnicos e as inúmeras vantagens de agora ter um vídeo para compartilhar com qualquer equipe de suporte que precise realizar esses procedimentos, a edição do vídeo e todo o suporte a redes sociais, além do próprio design envolvido na criação, estão impecáveis. É difícil até aceitar que este é o primeiro vídeo do Cezinha =)
Bom, espero que quem precisa dessas informações técnicas siga, compartilhe e acompanhe o Cezinha. Ele é o melhor exemplo de alguém que pegou um limão e não só fez uma limonada, mas parece estar plantando seu próprio limoeiro ;)
</description>
</item>

     
        <item>
  <title>Rank and File (Code Jam)</title>
  <link>http://www.caloni.com.br/rank-and-file-code-jam/</link>
  <pubDate>2016-04-16</pubDate>
  
  <guid>http://www.caloni.com.br/rank-and-file-code-jam/</guid>
  <description>Passou o Round 1A do Code Jam, e para variar, fui muito mal, só respondendo a primeira questão. A segunda me fez ficar pensando um tempo desproporcional sobre como encaixar as diferentes linhas e colunas para achar a linha restante.
Basicamente, o problema pede que, dado um quadrado de tamanho N, e 2*N-1 linhas fornecidas (que podem ser linhas ou colunas), imprimir a Nésima linha. A regra das linhas é que ela possui números crescentes.
Bom, não consegui chegar numa solução para o problema errado (encaixar as linhas), mas fui, como sempre, dar uma espiada nas respostas dos competidores, em especial a do primeiro colocado. O grande barato de competições como essa é aprender com a inteligência e genialidade dos outros. Para mim, esse é um exemplo de genialidade:
int cnt[2501] = {}; // zerando o arrayint main(){for(int i = 0; i &amp;lt; n * (2 * n - 1); i&#43;&#43;){cin &amp;gt;&amp;gt; j;cnt[j] ^= 1; // inverte primeiro bit do inteiro	}printf(&amp;#34;Case #%d:&amp;#34;, t);for(int i = 1; i &amp;lt; 2500; i&#43;&#43;)if (cnt[i]) cout &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i; // se não for zero (ou seja, ímpar) imprime	cout &amp;lt;&amp;lt; endl;}Obs.: O código está higienizado, pois esse pessoal usa bastante macros, etc.
A solução basicamente decide isolar duas questões: achar os números que faltam nas sequência e imprimi-los na ordem. Para o primeiro, varre todas as sequências sinalizando qual deles tem a quantidade ímpar (ou seja, não está representado em todas as linhas e colunas, pois do contrário seria par). Depois ele resolve a segunda questão simplesmente imprimindo os números ímpares encontrados, já na ordem (no array de valores possíveis).
Simples, rápido, eficiente. E correto.
É esse tipo de coisa que faz valer a pena uma competição dessas.
</description>
</item>

     
        <item>
  <title>Testando sistema de postagem</title>
  <link>http://www.caloni.com.br/testando-sistema-de-postagem/</link>
  <pubDate>2016-04-10</pubDate>
  
  <guid>http://www.caloni.com.br/testando-sistema-de-postagem/</guid>
  <description>Bom, depois de criar um script para basicamente apenas escrever o texto dos filmes que assisto e buscar uma imagem agradável para meu blogue de Cinema, o próximo passo foi portar esse mesmo método para meus dois outros blogues: o da minha empresa, a BitForge e esse aqui. O processo envolve algo a mais: buscar as imagens usadas (que muitas vezes não é só uma). Porém, nada mais que isso.
O problema mesmo é publicar nas redes sociais.
Um detalhe típico do funcionamento dessas redes bem apontou o blogger veterano Hossein Derakhshan, que ficou preso por seis anos e descreveu a mudança que a web sofreu nesse pouquíssimo tempo para a história, mas muitíssimo para a internet. De acordo com ele, postar apenas links não farão muito efeito, mesmo que você seja um escritor conhecido (o caso dele). Para fazer efeito, você precisa de imagens. Pessoas gostam de imagens. De gatinhos, melhor ainda.
Porém, qual imagem que pode ser usada para um blogue técnico e que chame a atenção?
No Cine Tênis Verde fica fácil achar uma imagem, pois filmes são formados por elas (cerca de 170 mil delas, se for um filme de duas horas). Aqui no Blogue do Caloni, tenho que me limitar a abstrações e metáforas.
O que muitas vezes tem funcionado, como minha série Básico do Básico:
 Binário Tipos Ponteiros Assembly Programação Depuração  De qualquer forma, posso continuar utilizando o título do artigo como base para minha pesquisa.
Postando no Twitter Postar no Twitter é algo relativamente fácil. O script abaixo faz isso com dois pés no joelho:
def PublishToTwitter(postInfo):&amp;#34;&amp;#34;&amp;#34;https://pypi.python.org/pypi/twitter&amp;#34;&amp;#34;&amp;#34;t = twitter.Twitter(auth=twitter_credentials.auth)with open(&amp;#34;C:\\daytoday\\caloni.github.io\\images\\&amp;#34; &#43; postInfo[&amp;#34;permalink&amp;#34;] &#43; &amp;#34;.jpg&amp;#34;, &amp;#34;rb&amp;#34;) as imagefile:imagedata = imagefile.read()t_up = twitter.Twitter(domain=&amp;#39;upload.twitter.com&amp;#39;, auth=twitter_credentials.auth)id_img1 = t_up.media.upload(media=imagedata)[&amp;#34;media_id_string&amp;#34;]st = postInfo[&amp;#39;title&amp;#39;] &#43; &amp;#39;\n\n&amp;#39; &#43; postInfo[&amp;#39;tagline&amp;#39;] &#43; &amp;#39;\n\n&amp;#39; &#43; postInfo[&amp;#39;shortlink&amp;#39;].encode(&amp;#39;utf-8&amp;#39;)if len(st) &amp;gt; 120: # giving space to image attachment st = stars &#43; &amp;#39; &amp;#39; &#43; postInfo[&amp;#39;title&amp;#39;] &#43; &amp;#39;\n\n&amp;#39; &#43; &amp;#39;\n\n&amp;#39; &#43; postInfo[&amp;#39;shortlink&amp;#39;].encode(&amp;#39;utf-8&amp;#39;)t.statuses.update(status=st, media_ids=&amp;#34;,&amp;#34;.join([id_img1]))Postando no Facebook Já postar no Facebook é mais ou menos uma tortura. As chaves de acesso costumam expirar, e para conseguir uma que não expira este tutorial é femonenal, pois economiza muito, muito tempo de pesquisa.
Curiosamente, o código para postar é muito semelhante ao do Twitter, até mais simples, talvez:
def PublishToFacebook(postInfo):&amp;#34;&amp;#34;&amp;#34;http://nodotcom.org/python-facebook-tutorial.html&amp;#34;&amp;#34;&amp;#34;with open(&amp;#34;C:\\daytoday\\caloni.github.io\\images\\&amp;#34; &#43; postInfo[&amp;#34;permalink&amp;#34;] &#43; &amp;#34;.jpg&amp;#34;, &amp;#34;rb&amp;#34;) as imagefile:imagedata = imagefile.read()st = postInfo[&amp;#39;title&amp;#39;] &#43; &amp;#39;\n\n&amp;#39; &#43; postInfo[&amp;#39;paragraph&amp;#39;] &#43; &amp;#39;\n\n&amp;#39; &#43; baseUrl &#43; postInfo[&amp;#39;permalink&amp;#39;]post = facebook_credentials.auth.put_photo(image=imagedata, message=st)</description>
</item>

     
        <item>
  <title>Não Atualize seu Sistema</title>
  <link>http://www.caloni.com.br/nao-atualize-seu-sistema/</link>
  <pubDate>2016-01-28</pubDate>
  
  <guid>http://www.caloni.com.br/nao-atualize-seu-sistema/</guid>
  <description>De quem é o interesse que você atualize constantemente seu sistema? Muito provavelmente não é seu. Sistemas -- operacionais ou não -- costumam ser escritos por programadores, que não fogem muito do que você conhece como ciclo de desenvolvimento, o que quer dizer que o sistema que atualiza sempre estará sempre testando suas novas features no seu dispositivo (computador, celular, tablet), verificando as mais nova correções e, claro, lhe fornecendo o que há de mais novo e mais difícil de contornar no que diz respeito a bugs, já que quase não haverá páginas no Stack Overflow te dizendo o que fazer sobre o bug que foi instalado em todas as máquinas do mundo há cinco minutos. Muito menos páginas descrevendo o SEU problema específico, com o SEU driver específico e hardware específico. Sim, Windows, eu estou falando com você.
Porém, quando se trata de atualizações na velocidade do commit, a Microsoft não é um monopólio. Praticamente todos os apps, desktop ou web, precisam atualizar constantemente, freneticamente. Todos eles, sem exceção, nunca perguntam se você gostaria de fazer isso, ou se perguntam continuarão te enchendo o saco por toda a eternidade. Nenhum se preocupa em retornar ao estado anterior quando as coisas vão mal, o que triplicaria o problema de atualização global para eles. A Google nunca sai do beta, e por um bom motivo: no final do Sprint quinzenal, lá está o código novo em folha rodando na máquina do usuário. Um código que passou por milhões de testes unitários, bilhões de testes caixa-preta, menos o seu teste específico, coisa mínima, que irá lhe deixar um software capenga até (talvez) o próximo Update. Você não precisa daquela opção do menu, certo? Basta usar só mais um app adicional para isso.
Não estamos falando de programadores medíocres ou sistemas legados. Todos sabemos que, por mais habilidosa a equipe e por mais bem estruturado o código, o estado natural de um software é a sua complexidade crescente engolir aos poucos seu funcionamento, até o próximo refactory que irá começar tudo de novo. É um ciclo sem fim. Porém, antes havia um tempo de respiro entre uma correção bem sucedida e a próxima bomba. Hoje você vai dormir sem saber se sua máquina vai bootar amanhã. Não há mais o prazer de usar uma nova versão e constatar, de fato, que ela é melhor que a anterior. A mais nova sempre será pior, justamente pela falta de cicatrizes de guerra para o código novo que está nascendo sem passar algum tempo sendo lustrado.
O software não é mais versionado. Pelo menos não para o usuário. Passamos por tantas semi-versões diferentes que mesmo que mude o Major em algum momento, já estamos desgastados por todos os beta tests que fomos obrigados a fazer.
E ainda por cima o novo modelo de precificação acha que está lhe fazendo um favor em entregar uma versão quentinha toda sexta-feira e lhe cobra um valor mensal. Para sempre. E nunca a satisfação de usar um software no &amp;quot;estado da arte&amp;quot;. Usuários de apps já se acostumaram a conviver com o estado do caos.
</description>
</item>

     
        <item>
  <title>Exportando repositórios antigos do Bazaar para Git</title>
  <link>http://www.caloni.com.br/exportando-repositorios-antigos-do-bazaar-para-git/</link>
  <pubDate>2016-01-27</pubDate>
  
  <guid>http://www.caloni.com.br/exportando-repositorios-antigos-do-bazaar-para-git/</guid>
  <description>Enquanto estudava sobre controle de fontes distribuído, experimentei e usei os projetos Mercurial e Bazaar, precursores desse modelo que funcionavam bem em Windows. Havia o Git, mas por conta da sua evolução assimétrica, o ambiente da Microsoft havia ficado para trás.
Hoje com o Git sendo praticamente o mainstream das conversões do SubVersion, e funcionando razoavelmente bem em ambientes Windows (64 ou 32), sobraram apenas os repositórios do Mercurial e do Bazaar. Na verdade, mais do Bazaar, pois eu havia migrado já do Hg pelo Bazaar possuir algo que hoje o Git emula, mas antes era um diferencial no projeto da Canonical: detecção de rename completo (com histórico e tudo). Isso para refatoração era vital, e suporte à refatoração pesada era o que eu precisava no momento.
Agora é hora de manter esse histórico vivo, mas convertido para o que todos usam.
A migração A primeira coisa a ser feita é converter o repositório. Depois de convertido, como todas as operações estarão no universo Git, há uma de entradas no StackOverflow para nos ajudar a reunir os repositórios em um só, meu objetivo, já que o Git é mais leve e mais versátil nesse quesito.
No Windows, nas últimas versões do Bazaar o comando fast-export não estava mais funcionando. Parado desde 2012, não há previsão de correções. No entanto, para essa operação, a versão 2.4.2 atendeu bem. O comando é um pouco diferente, mas ele é rápido e rodou sem problemas em conjunto com o fast-import do Git.
git initbzr fast-export --plain . | git fast-import12:03:59 Calculating the revisions to include ...12:03:59 Starting export of 2681 revisions ...12:04:05 Skipping empty dir Tools/Desenv in rev 12:04:05 Skipping empty dir Tools/Desenv in rev12:04:45 1000/2681 commits exported at 1308/minute12:05:12 2000/2681 commits exported at 1642/minute12:05:59 WARNING: not creating tag u&#39;1.09&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.50&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.51&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.49&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.48&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.45&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.47&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.46&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.40&#39; pointing to non-existent revision 12:05:59 WARNING: not creating tag u&#39;1.39&#39; pointing to non-existent revision 12:05:59 Exported 2681 revisions in 0:02:00C:\PROGRAM FILES (X86)\GIT\libexec\git-core\git-fast-import.exe statistics:---------------------------------------------------------------------Alloc&#39;d objects: 35000Total objects: 33979 ( 9714 duplicates )blobs : 15604 ( 6833 duplicates 7747 deltas of 15389 attempts)trees : 15694 ( 2881 duplicates 12881 deltas of 14635 attempts)commits: 2681 ( 0 duplicates 0 deltas of 0 attempts)tags : 0 ( 0 duplicates 0 deltas of 0 attempts)Total branches: 98 ( 1 loads )marks: 1048576 ( 2681 unique )atoms: 4549Memory total: 3567 KiBpools: 2200 KiBobjects: 1367 KiB---------------------------------------------------------------------pack_report: getpagesize() = 65536pack_report: core.packedGitWindowSize = 33554432pack_report: core.packedGitLimit = 268435456pack_report: pack_used_ctr = 22324pack_report: pack_mmap_calls = 10353pack_report: pack_open_windows = 4 / 6pack_report: pack_mapped = 101069594 / 163170978---------------------------------------------------------------------É óbvio que nem tudo serão mil maravilhas. Eu, por exemplo, encontrei um problema com case-sensitive que me deu algumas dores de cabeça:
fatal: Path Something/Resource.h not in branchfast-import: dumping crash report to .git/fast_import_crash_676bzr: broken pipeO Git gera um arquivo de report onde estão as informações do ocorrido. Uma forma de contornar esse tipo de problema é primeiro exportar para um arquivo e editá-lo (corrigindo o case, por exemplo):
bzr fast-export --plain . &amp;gt; plain-export.txtgvim fast-export.txthack hack hacktype fast-export.txt | git fast-importNote que talvez você precise de um editor que suporte arquivos gigantescos (como o Vim) e precise se debruçar sobre merges com arquivos com mesmo nome e diferentes cases. Isso que dá manter projetos com refactoring pesado.
Por fim, faça a conversão para todos os .bzr que tiver e haverá um .git com todo o histórico desses anos usando Bazaar. O próximo passo é montar o histórico de todos eles em apenas um repositório (se assim desejar). Segue uma série de comandos que pode ajudar para usar em uma batch:
@echo offgit remote add -f bzr ..\PathToOldConvertedRepo\%1git merge bzr/mastergit remote remove bzrmkdir Archive\%1echo Mova os arquivos importadospausegit add --allgit ci -m &amp;quot;Archiving old Bazaar repo (%1).&amp;quot;Você pode chamar um a um em cima de um repo novo:
mkdir NewRepocd NewRepogit init..\MyMergeBatch.bat OldRepoName..\MyMergeBatch.bat OldRepoName2..\MyMergeBatch.bat OldRepoName3Para conseguir ter acesso ao histórico dos arquivos movidos, basta usar a opção -all do log:
git log --all -- MyRemovedPathUpdate Tive alguns problemas em rastrear o histórico utilizando a estratégia de fazer merge no mesmo branch. A solução que encontrei, embora não exatamente direta, foi realizar os merges em branches apartados primeiro, mover os arquivos (de preferência, usando o git, para que ele detecte o rename), aplicar o commit e realizar o merge com o master. Há uma vantagem nessa estratégia, além do log --follow funcionar melhor: mantenha os branches originais, além do ponteiro para remote. Dessa forma, depois de alguns anos, saberá de onde veio esse merge maluco.
Update2 Depois de um tempo testando essa técnica, descobri que o Git se perde novamente e não encontra mais todos os logs, mesmo com --follow mesmo movendo os arquivos. O meu problema está relacionado com mesmos paths dos arquivos em repositórios diferentes. Paciência.
</description>
</item>

     
        <item>
  <title>Log de chamadas API direto do WinDbg</title>
  <link>http://www.caloni.com.br/log-de-apis-chamadas-direto-do-windbg/</link>
  <pubDate>2016-01-21</pubDate>
  
  <guid>http://www.caloni.com.br/log-de-apis-chamadas-direto-do-windbg/</guid>
  <description>Há muito tempo atrás eu havia falado sobre como a ferramenta logger.exe, do Debugging Tools for Windows, poderia ser usada para gerar um arquivo de log com centenas de APIs detalhadas em sua chamada, como parâmetros de entrada, retorno e tempo. Bom, testando isso hoje, me veio à lembrança o artigo e também a constatação que o logger é muito instável. Tão instável que não consegui logar as APIs que desejava nas inúmeras tentativas que fiz. Isso em um Windows XP!
Felizmente, as funções do logger também estão em uma DLL estilo plugin do próprio WinDbg, que pode ser chamada facilmente e que -- surpresa! -- internamente ao depurador funciona. Melhor ainda, não é necessário criar um processo para realizar o log, mas pode ser atachado em um processo já em execução, o que facilita bastante seu uso em serviços, por exemplo.
Vamos testar aqui o log da nossa cobaia de plantão, o amigo Notepad (ou Bloco de Notas), exibindo um texto que demonstra com perfeição uma das minhas características mais bizarras: confundir expressões e frases prontas.
Nota: Lembrando que estaremos testando em Windows XP 32 bits com um WinDbg igualmente 32 bits. Inicialmente comecei a testar a versão 64, mas ela também deu xabu. Aparentemente coisas periféricas do Debugging Tools nunca são muito bem testadas.
O texto ainda não foi salvo em nenhum arquivo. Iremos salvá-lo, mas antes, vamos executar o WinDbg e ver como o Notepad realiza essa operação.
A extensão/plugin que me referia é o Logexts.dll. Você pode instalar o log de API em um momento, habilitá-lo em outro, e até desabilitá-lo depois. Ou seja, é um processo ótimo para realizar inspeção pontual de chamadas API. Caso, claro, ele não exploda em um desses momentos.
(9c4.f04): Break instruction exception - code 80000003 (first chance)eax=7ffd9000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005eip=7c90120e esp=003bffcc ebp=003bfff4 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=0038 gs=0000 efl=00000246*** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\WINDOWS\system32\ntdll.dll - ntdll!DbgBreakPoint:7c90120e cc int 30:001&amp;gt; !logexts.logi Windows API Logging Extensions v3.01Parsing the manifest files...Location: C:\Temp\DbgTools(x86)\winext\manifest\main.hParsing file &amp;quot;main.h&amp;quot; ...Parsing file &amp;quot;winerror.h&amp;quot; ...Parsing file &amp;quot;kernel32.h&amp;quot; ......Parsing file &amp;quot;dsound.h&amp;quot; ...Parsing completed.Logexts injected. Output: &amp;quot;C:\Documents and Settings...&amp;quot;0:001&amp;gt; gModLoad: 50000000 50056000 C:\Temp\DbgTools(x86)\winext\logexts.dllParsing the manifest files...Location: C:\Temp\DbgTools(x86)\winext\manifest\main.hParsing file &amp;quot;main.h&amp;quot; ...Parsing file &amp;quot;winerror.h&amp;quot; ...Parsing file &amp;quot;kernel32.h&amp;quot; ......Parsing file &amp;quot;dsound.h&amp;quot; ...Parsing completed.(9c4.664): Break instruction exception - code 80000003 (first chance)eax=7ffd9000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005eip=7c90120e esp=003bffcc ebp=003bfff4 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=0038 gs=0000 efl=00000246ntdll!DbgBreakPoint:7c90120e cc int 30:001&amp;gt; !logexts.logeLogging already initialized. Output &amp;quot;C:\Documents and Settings\...&amp;quot;Logging enabled.0:001&amp;gt; gModLoad: 77b40000 77b62000 C:\WINDOWS\system32\appHelp.dllModLoad: 76fd0000 7704f000 C:\WINDOWS\system32\CLBCATQ.DLL...(9c4.41c): Break instruction exception - code 80000003 (first chance)eax=7ffd9000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005eip=7c90120e esp=00f1ffcc ebp=00f1fff4 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=0038 gs=0000 efl=00000246ntdll!DbgBreakPoint:7c90120e cc int 30:004&amp;gt; !logexts.logdLogging disabled.0:004&amp;gt; .detachDetachedDepois de gerarmos o que precisamos, podemos desatachar do processo e analisar o resultado: um arquivo LGV. Para abrir esse arquivo existe uma outra ferramenta chamada logviewer.
Para evitar procurar em dezenas de milhares de chamadas, há uma opção de filtrar com apenas o que queremos (no caso, CreateFile e WriteFile):
Depois de filtrado, podemos abrir a linha que nos interessa para ver como o programa utilizou a API (quais parâmetros, o retorno, etc).
Note, por exemplo, que houve uma falha antes na abertura do mesmo arquivo, mas isso porque houve uma tentativa de abrir um arquivo que já existe (abertura com direito de apenas leitura). Essa chamada foi feita pela DLL do diálogo comum de abertura/salvamento de arquivo do Windows (comdlg32.dll), e não pelo notepad.exe.
Como já havia dito no artigo original sobre o logview, você pode criar seu próprio header com as definições das funções de um módulo e o WinDbg graciosamente irá gerar um log de chamadas, incluindo medidas de performance. Esses dados abertos pelo logviewer podem ser exportados também para modo texto. E temos mais uma maneira de perfcounter chulé para eventualidades.
</description>
</item>

     
        <item>
  <title>A resolução do bitcoin</title>
  <link>http://www.caloni.com.br/a-resolucao-do-bitcoin/</link>
  <pubDate>2016-01-18</pubDate>
  
  <guid>http://www.caloni.com.br/a-resolucao-do-bitcoin/</guid>
  <description>Recentemente está havendo fuxicos sobre o último texto de Mike Hearn, um dos desenvolvedores do projeto &amp;quot;Bitcoin Core&amp;quot;, que desenha o comportamento da blockchain e acessórios. Nele Mike, que está sendo já há um tempo crítico das mudanças que tem ocorrido no projeto (incluindo um fork pra lá de controverso), pondera sobre o que pode ser o início do fim do experimento bitcoin, graças perifericamente à mudança mais estúpida já feita talvez no projeto, o RBF (replace by fee), que distorce completamente a visão original do paper do Satoshi, criador do Bitcoin, mas principalmente ao já conhecido controle massivo dos servidores atrás do Grande Firewall da China. O detalhe é que nem um nem outro acontecimento deveria se tornar decisivo para o futuro do Bitcoin, cujo teor é ser descentralizado &amp;quot;by design&amp;quot;. Porém, quando as questões técnicas caem no colo dos humanos, eles tendem como primatas a jogar merda para tudo que é bom e moral.
Meus amigos já sabem que considero a criação de moedas digitais um próximo passo prá lá de grande em direção a um mundo mais justo e livre, principalmente das amarras de um sistema jurássico de controle coercitivo de indivíduos chamado Estado ou governo. Falo especificamente do bitcoin, o mais famoso e o mais popular das moedas digitais. Portanto, não deixa de ser um baque entender como esses projetos poderão sucumbir mais cedo ou mais tarde ao mundo real.
De qualquer forma, como costumo dizer, serão anos interessantes no reino das criptomoedas e na economia em geral. Com isso, não quero dizer necessariamente que elas irão dominar o sistema financeiro e em breve veremos o fim do dinheiro estatal. Pode querer dizer isso, o que seria ótimo. No entanto, pode também querer dizer, como estamos presenciando hoje, que teremos dados mais concretos dos motivos por trás de por que moedas digitais são impossíveis de escalar no nível tecnológico atual. O mais provável IMHO é que no futuro vejamos algo no meio entre esses dois extremos. Mas não exatamente no meio =)
Por enquanto, resta seguir se informando sobre como o projeto do bitcoin vai evoluindo, e como as moedas alternativas, criadas ou a ser criadas, vão se adaptando a essas notícias. Uma boa fonte de conhecimento sempre é o Hacker News, que contém os links direto ao ponto e os comentários de pessoas geralmente com algo a acrescentar. Diferente de mim, mero curioso de plantão.
</description>
</item>

     
        <item>
  <title>Kung Fury</title>
  <link>http://www.caloni.com.br/kung-fury/</link>
  <pubDate>2015-10-29</pubDate>
  
  <guid>http://www.caloni.com.br/kung-fury/</guid>
  <description>Este curta (média?) metragem mistura anos 80, raptors, cop-raptor, arcades, Hitler, hackerismo, gostosas medievais, lasers, Thor, Kung-Fu, viagem no tempo, uma profecia e esse é apenas o começo de uma salada que apela para o absurdo usando efeitos digitais grotescos que se tornam caricatos e conseguem manter pelo menos meia-hora de um sentimento de confusão, identificação e êxtase juvenil. Afinal de contas, em que universo paralelo você pensou que veria um dinossauro lutar contra uma água dourada nazista?
Dirigido, escrito, atuado e produzido por David Sandberg, Kung Fury não se priva de inventar as mais ousadas sequências porque, afinal de contas, nada faria sentido do mesmo jeito. No entanto, de um jeito provocativo, deixa nas entrelinhas os absurdos que somos obrigados a engolir nos filmes de ação que levam toda essa farofa a sério. Pelo menos este filme sabe que nada é sério, e brinca constantemente com as facilidades com que o herói sai de qualquer situação que parece impossível de resolver.
Feito para soar exatamente como ele é, Kung Fury tem o potencial de liberar a imaginação de futuros idealizadores, ou no mínimo servir de referência para uma época onde é possível colocar nazistas no lado oculto da lua, no centro da Terra e viajando no tempo. Nunca é tarde para reinventar e misturar épocas, gostos e referências. Com nosso poder computacional, nada mais fará sentido. Kung Fury é apenas o começo.
</description>
</item>

     
        <item>
  <title>Indexando símbolos com rapidez</title>
  <link>http://www.caloni.com.br/indexando-simbolos-com-rapidez/</link>
  <pubDate>2015-10-28</pubDate>
  
  <guid>http://www.caloni.com.br/indexando-simbolos-com-rapidez/</guid>
  <description>Trabalhar com inúmeros projetos de diferentes clientes e diferentes binários pode ser uma loucura. Quando o mundo é Windows, algumas medidas precisam ser padronizadas para evitar a perda de informação durante todo o processo de desenvolvimento, testes, deploy e manutenção.
A respeito do deploy e manutenção, um dos principais é manter o código sempre atualizado, limpo e asseado, além de estar dentro de pelo menos um controle de fonte, de preferência distribuído (Mercurial, Git, Bazaar).
Porém, voltando ao mundo Windows, os fontes não são apenas a única fonte de preocupação e zelo. Os binários também são importante. Binários eu digo os EXEs, DLLs geradas, além dos seus símbolos (PDBs), que contém o mapa entre aquele monte de 1s e 0s e o código-fonte de onde ele saiu.
Nós da BitForge costumamos pelo menos indexar binários com fonte, através dos resources do binário. Como isso é feito? Basicamente editando o arquivo RC na parte da versão do binário e inserindo o hash do commit usado para gerar aquele binário. Com isso qualquer binário produzido possui seu pai (&amp;quot;use the source, Luke!&amp;quot;). Usamos um script em Python muito simples e muito eficaz para isso, que indexa .NET e C&#43;&#43; (através do Visual Studio, mas não está com muitas amarras de ambiente):
rc_new_content = re.sub(u&amp;#39;^.*ProductVersion.*$&amp;#39;, product_version_string, rc_original_content, flags=re.MULTILINE)rc_new_content = re.sub(u&amp;#39;^.*FILEVERSION.*$&amp;#39;, file_version_string, rc_new_content, flags=re.MULTILINE)Quando algum binário parar na máquina de algum cliente em algum lugar do universo, basta olhar para os detalhes pelo Windows Explorer, e ele estará lá:
Através desse a2f3c... podemos capturar o commit exato de onde saiu o binário. Tudo, é claro, confiando no procedimento de toda a equipe: apenas gerar um binário a partir de um commit publicado.
Você também pode exibir a versão dos binários em uma pasta através das colunas do Windows Explorer:
Indexando símbolos e binários Outro detalhe de binários é que eles vivem sendo sobrescritos. Todo &amp;quot;Project, Build&amp;quot; sobrescreve o binário anterior, que pode ter sido justamente o enviado para o cliente. Se o cliente não possuir nenhum procedimento de armazenamento de versões dos binários gerados (às vezes ele nem precisa, essa é nossa função) não há como obter os símbolos de binários que podem gerar problemas futuros (todo software tem bug).
Para resolver isso, o mínimo que se deve fazer é super-simples e nada difícil: crie uma pasta em algum lugar, nomeie essa pasta seu servidor de símbolos, a cada novo binário que será entregue, indexe o binário e os seus símbolos. Como? Com o &amp;quot;Debugging Tools for Windows&amp;quot;, como dizia um amigo meu, é mamão com açúcar:
&amp;quot;c:\Tools\DbgTools(x86)\symstore&amp;quot; add /r /f &amp;lt;MINHA-PASTA-COM-BINÁRIOS&amp;gt; /s c:\Tools\Symbols /t &amp;quot;IndexSymbols&amp;quot;Essa e outra técnicas de indexar fontes e binário você pode ver no meu projeto, artigo, palestra e vídeo de demonstração. Se você for cego, ainda tem a vantagem da áudio-narração do vídeo. Brincadeira, ainda não temos isso.
Simplificando Com o poder do Windows Explorer, desde o Windows 95 podemos otimizar nossas tarefas nos baseando na extensão dos arquivos que estamos lidando. No caso do indexador de símbolos, eu simplesmente utilizo uma batch que contém exatamente a linha acima (com a diferença de %1 no lugar de &amp;lt;MINHA-PASTA-COM-BINÁRIOS&amp;gt;) que eu chamo direto do Explorer através de um comando que inseri no registro. Eis o comando:
Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\dllfile\shell\Index Symbols][HKEY_CLASSES_ROOT\dllfile\shell\Index Symbols\command]@=&amp;quot;cmd.exe /c c:\\tools\\indexsymbols.bat \&amp;quot;%1\&amp;quot;&amp;quot;Você pode baixar um arquivo reg aqui, copiar as linhas acima em um .reg que você gerar, ou simplesmente seguir o passo-a-passo dessas linhas e gerar seu próprio registro. Após feito isso, surgirá um novo comando para qualquer DLL que você clicar com o outro botão do mouse:
Você também pode gerar o mesmo comando para EXEs, bastando realizar o mesmo passo-a-passo na pasta exefile em vez de dllfile.
Procedimentos como esse devem ser uma coisa simples, não difícil. Programadores e pessoas são preguiçosas, e precisam de algum incentivo. E nesse caso, o incentivo é: o que você vai fazer quando der um crash com um binário que você não sabe de onde veio nem qual fonte foi usado para compilá-lo? Pois é.
</description>
</item>

     
        <item>
  <title>Fundamentos</title>
  <link>http://www.caloni.com.br/fundamentos/</link>
  <pubDate>2015-10-21</pubDate>
  
  <guid>http://www.caloni.com.br/fundamentos/</guid>
  <description>Um amigo meu costumava dizer que qualquer conhecimento precisa ter bases sólidas. &amp;quot;Os fundamentos&amp;quot;, dizia ele. Sem os fundamentos, o prédio do conhecimento vai abaixo em pouco tempo. Mas com eles, construídos de cimento armado, reforçados e com alicerces bem planejados, não há informação demais suficiente para abalar o prédio do conhecimento.
Esse meu amigo demorou um pouco mais que o que as pessoas costumam demorar para entender o conceito de if na programação. Se não me engano, ele passou semanas revisando a abstração, mas depois que entendeu, nunca mais perguntou uma vírgula para mim sobre o assunto. Eu escrevi uma &amp;quot;ode ao if&amp;quot; dividida em duas partes, pois ele merece. Para mim é o conceito-chave por trás de toda a lógica da programação, tal qual os flip flops constituem o alicerce da programação em hardware. Para mim, Ada Lovelace, a primeira programadora da história, que apostou na invenção maluca de Charles Babbage, sabia muito bem onde estava pisando. Escreveu diversos programas no papel antes que o computador saísse dele. Na época, o projeto falhou miseravelmente. Mas manteve-se seu legado, e seu sonho de um dia conseguir implementar em uma máquina mecânica o saldo condicional. A chave para o universo.
E é através desse salto condicional, esse alicerce do nosso prédio, que se construiu todas as firulas abstratas que são fontes de discussões intermináveis no grupo de C/C&#43;&#43; Brasil e discussões ainda mais malucas nas nossas reuniões mensais do ChoPP. É entendendo esse conceito tão &amp;quot;básico&amp;quot; (lembre-se que básico vem de base) que todas as outras abstrações fazem sentido. E assim por diante. É entendendo o conceito de tipo, rvalue, lvalue, precedência, gramática, templates, recursividade e STL que pode-se entender com louvor as construções mais malucas já inventadas e padronizadas em C&#43;&#43;: os padrões 11, 14, 17!
E é por isso que, quando for estudar algo, por mais complexo que seja, não se deve abrir mão da introdução daquele primeiro livro, do capítulo básico em que o autor explica as motivações por trás das criações da lógica computacional. Pois é nesse básico que se escondem os fundamentos, os alicerces, o concreto armado. É lá que está a fonte de todo o conhecimento, a pedra angular dos maiores arranha-céus que programadores já fizeram, do maior conjunto de milhões de linhas de código que continuam funcionando. Esse é o segredo. E nunca é difícil. Afinal, tudo aquilo é muito básico para ser deixado de lado.
</description>
</item>

     
        <item>
  <title>CCPPBRRio12</title>
  <link>http://www.caloni.com.br/ccppbr-rio-12/</link>
  <pubDate>2015-08-16</pubDate>
  
  <guid>http://www.caloni.com.br/ccppbr-rio-12/</guid>
  <description>Esse foi o segundo encontro do nosso grupo no Rio de Janeiro, Cidade Maravilhosa, Cidade do Bixcoito de Polvinho. E foi o primeiro encontro a ser exibido em streamming e gravado para o YouTube, graças ao suporte da RioSoft, uma organização que incentiva o mercado de desenvolvimento de software no Brasil, e onde foi realizado o evento.
Esse é o nosso segundo encontro no ano e mais um imenso sucesso, dessa vez graças aos hercúleos esforços de Pedro Lamarão e o nosso host e palestrante mais do que bem-vindo André Tupinambá.
Dessa vez tivemos duas palestras sobre EFL, uma ideia interessante de um framework mobile leve, com a presença dos palestrantes Larry Lira e Felipe Almeida.
Em seguida, pós-almoço, foi minha vez de apresentar meu script que indexa PDBs com repositórios Git e toma proveito do mecanismo de carregamento de fontes do WinDbg, seguido por um passo-a-passo de Rodrigo Strauss, que escreveu código (quase) completamente do zero, mostrando como boost::asio pode ser tão simples (ou tão complicado) quanto abrir um socket no Windows (só que com templates e lambdas, bem melhor!).
E por fim, Tupinambá salva o dia com mais uma palestra sobre performance, um tema obrigatório que quase ficou sem representantes. Ufa!
Na verdade, esse não foi o fim. Para os que já frequentam nossos encontros, parte integrante do evento é o tradicional ChoPP pós-palestras, onde os temas são convertidos em discussões etílicas, e onde as métricas séries da GPU acabam virando elucubrações viajantes em física quântica.
A todos os envolvidos e reponsáveis por um dia tão compensatório, o nosso muito obrigado! Que venham outros =D
</description>
</item>

     
        <item>
  <title>Por que as startups brasileiras precisam de outsourcing</title>
  <link>http://www.caloni.com.br/por-que-as-startups-brasileiras-precisam-de-outsourcing/</link>
  <pubDate>2015-08-04</pubDate>
  
  <guid>http://www.caloni.com.br/por-que-as-startups-brasileiras-precisam-de-outsourcing/</guid>
  <description>Não é novidade que uma boa ideia, na área de informática, muitas vezes não precisa de apenas boas intenções. Na verdade, acho que quase nunca. Saber com quem se fala, ter os contatos certos e o investidor-chave, simplesmente não irão trazer sucesso a nenhuma empresa se esta não conseguir sequer engatinhar tecnologicamente e mostrar que seu core business vale a pena.
Para isso que empresas como a Bit Forge estão começando a desenvolver software sob o modelo catalisadora de startups.
Basicamente quando uma startup tem uma ideia inovadora, mas não sabe como conseguir ter uma demo básica, mínima e fundamental de forma rápida, simples e indolor, para que mostre aos potenciais clientes e investidores, ela precisa ligar para o nosso escritório e fechar um contrato de desenvolvimento inicial.
O que é feito a partir daí é uma análise enxuta de requisitos, definição de escopo mínimo e o custo inicial para que a ideia saia do chão e crie as primeiras asinhas. A partir daí a empresa já tem uma solução funcional que pode ser demonstrada. Depois disso, com o sucesso dos testes no mercado, essa nova startup já pode contratar os programadores iniciais que irão dar manutenção em um sistema que acabou de nascer através de um treinamento da catalisadora -- no caso, nós -- ou, caso o mercado ainda precise de mais inputs, uma nova rodada de desenvolvimento e/ou uma manutenção básica que irá trazer estabilidade para a solução enquanto ela cresce de maneira orgânica.
Em suma: você só paga até onde conseguir validar sua ideia. O que, convenhamos, sai bem mais barato do que contratar uma equipe, alugar um escritório ou, dependendo da complexidade de sua ideia, investir em head hunters que irão tentar encontrar talentos dispostos a despender tempo para seu projeto.
</description>
</item>

     
        <item>
  <title>Sobre debates no SESC Santos</title>
  <link>http://www.caloni.com.br/sobre-debates-no-sesc-santos/</link>
  <pubDate>2015-08-03</pubDate>
  
  <guid>http://www.caloni.com.br/sobre-debates-no-sesc-santos/</guid>
  <description>Esse fds participei de uma rápida ida e volta para Santos para participar de um dia com dois debates de um evento organizado pelo meu editor no CinemAqui, o Vinicius Carlos Vieira.
Com um início atribulado por conta da nossa carona, uma taxista que também é artista plástica e que condenava sua situação atual e flertava com a ideia de uma possível oportunidade de virar caminhoneira e viajar o país, talvez o melhor da viagem tenha sido conhecer meu parceiro das críticas em Sampa, o Eduardo Sandrini. Sua lógica e suas opiniões acerca de diversos filmes, além do sempre bom papo sobre Cinema, talvez tenham sido o ponto alto do dia.
Disse talvez porque o debate em que ele participou, o primeiro, sobre crítica na internet, atingiu alguns temas até que relevantes, como o desafio atual da mídia impressa -- e, claro, da mídia virtual -- em conseguir atrair a atenção de um público cada vez mais alheio à cultura e à arte.
Disse talvez também porque, embora instigante, o debate logo denotou seu objetivo paralelo em se tornar uma plataforma de publicidade. No caso, do saite Judao. Nada contra, aliás. Não o conhecia, dei meus 15 minutos (talvez menos) de visita, e foi legal. Bom saber que existe.
Não me levem a mal, não sou desses nerds de HQs, games ou Cinema como plataforma de materialização de sonhos nerds (de HQs). Logo, não sou o público-alvo. Mesmo assim, achei no mínimo estranho um saite que evita comentários, no melhor estilo censura, preferindo deixar as discussões para o lado das redes sociais (que, pelo visto, são quase inexistentes). A ideia de divergir não parece agradar a linha editorial da equipe, e é de respeitar a tentativa de higienizar a opinião (não que fosse louvável).
Mas divago. A questão mercadológica das notícias e da opinião para as massas foi o ponto forte, além da participação de um jornalista da Tribuna dos &amp;quot;velhos tempos&amp;quot;. Tudo isso me pareceu bem novo e em um ambiente em que não estou acostumado.
Sobre o Hype nerd, minhas ressalvas são talvez piores. Eu ter aprendido que, além da confusa noção de que o capitalismo é colocado como um bicho à parte, ficar com a noção de que é esperado de geradores de conteúdo cultural por algum motivo que eles estejam alheios ao mundo real, ou boa parcela dele, me parece desonesto. O tal politicamente correto foi citado, e eu até tinha algumas ideias sobre o assunto, embora não me parecesse correto cortar o efusivo colaborador do Judão.
De certa forma, o segundo debate foi superficial em todos os seus meandros, embora o mediador tivesse tentado provocar com perguntas até que interessantes, embora meio repetitivas. Essa questão do capitalismo contra o sei-lá-o-quê-mas-que-precisa-de-dinheiro-também talvez tenha ficado mal explicada por falta de tempo ou elaboração, mas também pode ser um trauma do pessoal de humanas, que estava acostumado há quinze anos atrás, mas hoje vejo com estranheza. Male/male, uma experiência diferente. Havia dito, para o Eduardo, se não me engano, que experiências diferentes são positivas. Hoje, passado o &amp;quot;hype&amp;quot;, fico com minhas dúvidas.
</description>
</item>

     
        <item>
  <title>Hype da Cultura Nerd em Sesc Santos</title>
  <link>http://www.caloni.com.br/hype-da-cultura-nerd-sesc-santos/</link>
  <pubDate>2015-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/hype-da-cultura-nerd-sesc-santos/</guid>
  <description>Meu primeiro debate sobre Cinema =). Esse sábado estarei no Sesc Santos para prestigiar a sétima arte em um debate mais que atual: O hype da cultura nerd/geek.
Espero estar à altura do tema e do evento. De qualquer forma, sempre é bom falar sobre Cinema ;)
</description>
</item>

     
        <item>
  <title>Você sabe o que está usando no seu código?</title>
  <link>http://www.caloni.com.br/voce-sabe-o-que-esta-usando-no-seu-codigo/</link>
  <pubDate>2015-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/voce-sabe-o-que-esta-usando-no-seu-codigo/</guid>
  <description>Quando se mexe com C&#43;&#43; em múltiplos fontes logo vem aquela bagunça do versionamento e do compartilhamento de código. LIBs, DLLs, COMs (de Component Object Model, da Microsoft). É difícil a partir de um binário saber quais os fontes envolvidos em sua construção, a não ser que você os amarre através de um sistema automatizado de build onde todos os binários devem ser obrigatoriamente compilados (e suas dependências, claro).
Porém, há maneiras mais descentralizadas de se trabalhar. Alguém poderia simplesmente colocar a versão em cada CPP e atualizá-la, assim como comentários de histórico, toda vez que alguma mudança for feita:
/** Estou começando esse meu CPP.** @desc Esse CPP fará mágicas nunca antes tentadas,* e portanto tende a ser perigoso para os padawans* mais chegados em um coletor de lixo.** @version 0.0.1** @remark Estou usando Version Semantics logo acima.*/OK, esse já é um modelo interessante, embora totalmente descartável se você já usa um sistema de build atrelado a um controle de fonte, já que você automaticamente já terá um número mágico para relacionar seus binários: o revno de seu commit (ou seus commits, no caso de mais de um repositório).
Uma versão um pouco mais... &amp;quot;binária&amp;quot;, seria inserir uma string no próprio fonte com essa versão, e talvez até o nome de seu módulo/lib/etc:
static const char* LIB_VERSION = &amp;quot;minhalib 0.0.1&amp;quot;;
Dessa forma, por pior que seja a situação do controle de seus binários, sempre haverá a possibilidade de procurar a string lá dentro.
![Strings na minha lib]({{ site.baseurl }}public/images/screenshots/strings-minha-lib.png)
Ops, esqueci que nesses compiladores modernos o que você não usa não será incluído no binário final. Isso quer dizer que se quisermos que essas strings de identificação de dependências apareça no binário compilado precisamos pelo menos dar a impressão de que ele esteja sendo usado:
class Using{public:Using(const char* name){static const char* st_UsingCollection = name;}};static const Using st_Using(&amp;#34;using minhalib 0.0.1&amp;#34;);Agora uma variável estática do módulo deverá ser inicializada como um objeto da classe Using e irá jogar em uma variável estática dentro do construtor. Se ela será usada fica a dúvida do compilador, que deixa tudo como está. Ou seja, ganhamos nossa string no binário:
#include &amp;#34;Using.h&amp;#34;static const Using st_Using(&amp;#34;using minhalib 0.0.1&amp;#34;);int main(){}![Strings na minha lib]({{ site.baseurl }}public/images/screenshots/strings-minha-lib-ok.png)
Uma solução mais genérica pode ser aplicada utilizando as famigeradas macros e...
O quê?!?!?!??! VOCÊ DISSE MACROS?!???!? TÁ MALUCO??!??!
Sim. Macros. São inofensivas se você usar direito.
E se reclamar vai ter goto.
// Using.h#pragma once #define USING_FILE(version) static const Using st_Using ## __LINE__(&amp;#34;using file &amp;#34; __FILE__ &amp;#34; &amp;#34; version)#define USING_CLASS(name, version) static const Using st_Using ## __LINE__(&amp;#34;using class &amp;#34; #name &amp;#34; &amp;#34; version)#define USING_LIB(name, version) static const Using st_Using ## __LINE__(&amp;#34;using lib &amp;#34; #name &amp;#34; &amp;#34; version)#define USING_FUNCTION(version) static const Using st_Using ## __LINE__(&amp;#34;using function &amp;#34; __FUNCTION__ &amp;#34; &amp;#34; version)class Using{public:Using(const char* name){static const char* st_UsingCollection = name;}};A ideia é que qualquer pedaço de código, seja um conjunto de CPPs que você chama de LIB, ou um CPP que você compila em diferentes projetos (talvez em cópias diferentes ainda sendo usadas), ou até aquela função-chave, ou classe-chave. Na verdade, quando eu digo pedaço de código, é pedaço mesmo. Está livre para você imaginar e rotular o que quiser. Depois você consegue dar uma geral no resultado:
// File1.cpp#include &amp;#34;Using.h&amp;#34;USING_LIB(extralib, &amp;#34;0.0.1&amp;#34;);void ImportantFunction(){USING_FUNCTION(&amp;#34;0.3.1&amp;#34;);}// File2.cpp#include &amp;#34;Using.h&amp;#34;USING_FILE(&amp;#34;0.0.1&amp;#34;);// File3.cpp#include &amp;#34;Using.h&amp;#34;USING_CLASS(ImportantClass, &amp;#34;1.3.4&amp;#34;);class ImportantClass{public:};#include &amp;#34;Using.h&amp;#34;USING_LIB(lib1, &amp;#34;0.0.1&amp;#34;);![Todas as strings do meu projeto]({{ site.baseurl }}public/images/screenshots/all-strings-using.png)
Com esse simples mecanismo que não gasta mais do que algumas chamadas de assembly no início da lib (antes do main) e o espaço ocupado na memória pelas strings somadas (menos de 1KB, provavelmente) você tem em suas mãos uma poderosa ferramenta de análise de como os binários estão sendo gerados pela sua equipe remota, ou por qual configuração foi usada na máquina de build para gerar aquela DLL com aquele problema antigo, ou porque algo que funcionava parou de funcionar e nada foi mexido (isso nunca acontece, não é mesmo?).
O código dessa brincadeira está no meu repositório de samples do GitHub.
</description>
</item>

     
        <item>
  <title>Existem programadores C/C&#43;&#43; no Rio de Janeiro?</title>
  <link>http://www.caloni.com.br/existem-programadores-ccpp-no-rio-de-janeiro/</link>
  <pubDate>2015-07-27</pubDate>
  
  <guid>http://www.caloni.com.br/existem-programadores-ccpp-no-rio-de-janeiro/</guid>
  <description>Essa pergunta eu só vou conseguir saber quando chegar lá. Eu sei que existem pelo menos dois: Pedro Lamarão e André Tupinambá. Lamarão foi um dos fundadores do grupo e vem continuamente em São Paulo para nossos eventos, e agora está organizando o 12° Encontro de Programadores C &amp;amp; C&#43;&#43; do Brasil na Cidade Maravilhosa. Eu irei e palestrarei, mas espero encontrar mais programadores e palestras por lá e trocar um pouco de conhecimento.
E aí, existem ou não existem programadores C/C&#43;&#43; no Rio de Janeiro?
</description>
</item>

     
        <item>
  <title>Técnicas antidebugging no TDC 2015</title>
  <link>http://www.caloni.com.br/tecnicas-antidebugging-no-tdc-2015/</link>
  <pubDate>2015-07-27</pubDate>
  
  <guid>http://www.caloni.com.br/tecnicas-antidebugging-no-tdc-2015/</guid>
  <description>Esse fim-de-semana, quer dizer, contando com a sexta-feira (dia 24/07/2015), tivemos a trilha de segurança no TDC 2015, e eu palestrei pela segunda vez, dessa vez com um material mais antigo ainda, mas que parece ter agradado alguns: técnicas antidebugging.
O código está em um branch no GitHub e a palestra também, mas você pode acompanhar diretamente aqui:
http://pt.slideshare.net/slideshow/embedcode/key/g5lKLH15KTcenu
O que vocês acham de uma versão em áudio? Tenho algumas anotações que costumo fazer para treinar, mas não sei até quando uma palestra no estilo vídeo com áudio poderá agradar. Os que tiverem interesse, por favor, se manifestem, para eu ter algum ânimo de usar minha voz =)
</description>
</item>

     
        <item>
  <title>TDC 2015 No More</title>
  <link>http://www.caloni.com.br/tdc-2015-no-more/</link>
  <pubDate>2015-07-13</pubDate>
  
  <guid>http://www.caloni.com.br/tdc-2015-no-more/</guid>
  <description>Eu represento o Grupo C/C&#43;&#43; Brasil. Sou um dos fundadores. A bem da verdade, todos que participam ativamente no Google Groups e/ou ajudam a organizar o nosso saite, e/ou ajudam a fortalecer a presença de uma comunidade C/C&#43;&#43; no país representam, em menor ou maior grau, a esse ideal que é: as linguagens C e C&#43;&#43; ainda são muito úteis na programação de uso geral, em cenários tão distintos e tão variados que fica difícil sequer listar onde elas são usadas sem parecer panelinha.
Além de eu representar o grupo, eu seria um dos organizadores da Trilha C/C&#43;&#43; do TDC 2015 São Paulo desse ano. Seria, se as coisas não tivessem saído dos trilhos a partir desta thread, que colocou em xeque a presença da trilha.
Esse ano posso dizer que não há dúvidas: após a saída da organização de Rodrigo Strauss e de mim, a trilha foi oficialmente cancelada esse ano. Quem esperava assistir as palestras que foram disponibilizadas na grade sinto dizer que não acontecerão esse ano nesse evento. Podem acontecer em outro evento, nesse ou em outros anos? É capaz. O pessoal do Rio está fazendo um esforço admirável em montar nosso segundo encontro no ano, o que já é uma conquista e tanto para um grupo que peca às vezes pela parca frequência com que se reúne (talvez possamos resolver isso de forma mais informal através daqueles velhos papos de boteco que aconteceram algumas vezes no passado).
Bom, é isso. Espero encontrar alguns de vocês por lá. E espero que nos encontremos em Sampa com mais frequência ;)
</description>
</item>

     
        <item>
  <title>Escolha de palestras para o TDC 2015 Sampa</title>
  <link>http://www.caloni.com.br/escolha-de-palestras-tdc-2015-sp/</link>
  <pubDate>2015-06-22</pubDate>
  
  <guid>http://www.caloni.com.br/escolha-de-palestras-tdc-2015-sp/</guid>
  <description>Já passou a semana de envio de palestras, e agora chegou a hora de escolher as palestras que farão parte da Trilha C/C&#43;&#43; do TDC 2015, em São Paulo. Se vocês puderem colaborar, é super-simples e rápido. Há uma lista de títulos de palestras e você só precisa escolher qual a mais importante para você. Avalie com cuidado.
</description>
</item>

     
        <item>
  <title>TDC SP 2015 (Call for Papers)</title>
  <link>http://www.caloni.com.br/tdc-sp-2015-cfp/</link>
  <pubDate>2015-06-11</pubDate>
  
  <guid>http://www.caloni.com.br/tdc-sp-2015-cfp/</guid>
  <description>Antes do nosso encontro 12 no Rio, no segundo semestre, teremos o TDC São Paulo, que já está em sua fase de chamada de trabalhos. Se você tem alguma coisa para apresentar, não se acanhe. Todos são bem-vindos! =)
Peço que os palestrantes que não tiveram a oportunidade de apresentar seu trabalho colaborem com o evento, já que nosso próximo encontro será no Rio, cujo público, acredito eu, deverá mudar em sua maioria.
 Submissão de palestras até 15 de junho às 18h Notificação de palestras aprovadas ou não entre 16 e 22 de junho Evento acontecerá de 21 a 25 de Julho  </description>
</item>

     
        <item>
  <title>Os melhores eventos são de programadores CCPP</title>
  <link>http://www.caloni.com.br/os-melhores-eventos-sao-de-programadores-c/</link>
  <pubDate>2015-04-04</pubDate>
  
  <guid>http://www.caloni.com.br/os-melhores-eventos-sao-de-programadores-c/</guid>
  <description>Olá! Se você veio aqui para um flame war, sinto desapontá-lo. Esse título foi criado apenas para chamar atenção =)
Na verdade, eu nem tenho ideia de como são os outros encontros e eventos de comunidades de outras linguagens, tecnologia ou até mesmo áreas de conhecimento. Só sei de uma coisa: quando a turminha de C se encontra em um evento que lida com otimização, padrões da linguagem, problemas insolúveis, bibliotecas ambiciosas, engenharia reversa e sistemas operacionais de micro-controladores fica difícil não se empolgar com pelo menos uma palestra.
O encontro que aconteceu no prédio da Microsoft, auditório 2, no sábado passado, dia 28 de março de 2015, foi o décimo-primeiro encontro do grupo C/C&#43;&#43; Brasil, que se formou há mais ou menos dez anos atrás (sim, estamos todos ficando velhos).
Dessa vez o evento foi muito mais focado em otimização, linguagem C, Fernandos e Rodrigos. Sim, só de Rodrigos tivemos três palestrantes! E o evento foi iniciado pelo keynote de Fernando Figuera e terminado pela palestra-relâmpago não-intencional de Fernando Mercês, um colega da área de engenharia reversa -- que trabalhei por alguns anos -- e análise de PEs, ou Portable Executables (se você não sabe o que é isso, bom, shame on you).
Particularmente minha palestra favorita foi a de Rodrigo Almeida e sua técnica em cima de um SO de micro-controlador para evitar falhas dos dados da troca de contexto dos processos, e que já serve de estudo contra o ataque mais novo do momento, o Row Hammer (cujo Projeto Zero da Google está estudando). Ele basicamente envolve o acesso contínuo a uma região da memória para alterar bit(s) de uma região adjacente, apenas pela interferência física.
Mas as ideias inovadoras não param por aí. Temos mais uma vez Fabio Galuppo usando C&#43;&#43; de maneira funcional e tratando problemas insolúveis de maneira mais rápida, Rodrigo Madera tentando unir a transformação de dados em torno de apenas uma biblioteca (a sua Moneta) e tivemos a ilustre presença de Cleiton Santoia que com Daniel Auresco compilaram um paper sobre reflexão em C&#43;&#43; que foi enviado para o comitê. A parte mais atraente, tanto do Moneta quanto da proposta ao padrão C&#43;&#43;, é a possibilidade de realizar coisas estaticamente, ou em tempo de compilação, e ao mesmo tempo entregar mais poder à ponta que escreve o código (nós, programadores) sem onerar a ponta que usa o código (eles e também nós, usuários).
C&#43;&#43; está apenas começando, como parece sugerir o breve intervalo das palestras e um talk de 10 minutos sobre o Visual Studio 2015 de Eric Battalio, Senior Program Manager da equipe da IDE. No entanto, mesmo apenas o básico já dá pano para a manga, como pudemos conferir através do uso do Perf, GCC e Valgrind para profiling de código de maneira extremamente detalhista. Seja que nível você programe, C e C&#43;&#43; ainda são linguagem extremamente em voga que têm muito a oferecer.
Especialmente quando temos um Happy Hour com pessoas mais que especiais =)
</description>
</item>

     
        <item>
  <title>CCPPBrasil 11 Brasil (Inscrições)</title>
  <link>http://www.caloni.com.br/11-encontro-ccpp-brasil-inscricoes/</link>
  <pubDate>2015-02-19</pubDate>
  
  <guid>http://www.caloni.com.br/11-encontro-ccpp-brasil-inscricoes/</guid>
  <description>O Call for Papers já iniciou há duas semanas e deverá ser encerrado no final de Fevereiro, quando publicaremos o cronograma do nosso evento. Até lá a página oficial do evento deverá ser atualizada com coisas a mais do que os dois coffee breaks. Porém, antes que o preço aumente, você já pode garantir o seu lugar e pagar mais barato. Para uma dica do que poderá ser selecionado de palestras compilamos uma lista de palavras-chave.
Porém, fora as palestras, teremos a chance de conversar sobre os mais diversos assuntos que giram em torno de tecnologia, C/C&#43;&#43; e todas as áreas em que essas linguagens são usadas. O pessoal de embarcados costuma marcar uma presença forte por lá, além de algum pessoal de finanças, segurança da informação, projetos open-source, matemática, acadêmicos e, acredite se quiser, até programadores de device drivers para o kernel do Windows.
</description>
</item>

     
        <item>
  <title>Como é escolher um filme pelo trailer</title>
  <link>http://www.caloni.com.br/filme-trailer-comercial-sabao/</link>
  <pubDate>2015-02-17</pubDate>
  
  <guid>http://www.caloni.com.br/filme-trailer-comercial-sabao/</guid>
  <description>O que está passando esse fim-de-semana? Que tal dar uma olhada nos trailers para escolher?
Uma escolha de atores-mirins arriscada, o uso da câmera subjetiva parece recorrer a artifícios do Cinema Indie norte-americano. A sequência noturna, no entanto, mostra uma bela mensagem de que nunca é tarde para brincar. O uso da trilha sonora casual cria uma atmosfera mais bucólica, mas ainda assim atual.
Vamos para o próximo.
Duas atrizes aclamadas pela crítica fazem uma bela atuação envolvendo mãe e filha em torno do drama familiar da lavagem de roupa suja. Cores brandas, cortes rápidos e um momentos particularmente tocante de Fernanda Torres que pode render algumas premiações. Para finalizar, alguns efeitos com o uso de sabão em pó voador pode arrancar uns bons sustos da plateia.
Conclusão: acho que veria o filme de Ariel Líquido, pois seu potencial dramático não deveria ser ignorado. Para os mais aventureiros nessa onda hipster, recomendo Omo Multiação Partículas Extra-Limpeza.
Boa sessão!
</description>
</item>

     
        <item>
  <title>CCPP Brasil 11: Call For Papers</title>
  <link>http://www.caloni.com.br/11-encontro-ccpp-brasil-cfp/</link>
  <pubDate>2015-02-03</pubDate>
  
  <guid>http://www.caloni.com.br/11-encontro-ccpp-brasil-cfp/</guid>
  <description>Acho que já está na hora de nos reencontrarmos, né?
A comunidade CCPP Brasil está preparando mais um daqueles eventos em que conversaremos sobre nossa maior paixão: B, BCPL, C e C&#43;&#43;!
Então vamos aos detalhes:
   Chave Valor     Data 2015-03-28   Local Micro$oft Brasil   Palestras undefined    Ops, deu um errinho de link acima. Acho que é porque ainda não temos as palestras.
Quer colaborar? Não deixe de preencher o nosso formulário do Call for Papers!
Alguma dúvida antes de preencher? Fale conosco na thread sobre o CFP!
Se conhece alguém que gostaria de participar do evento, palestrante ou não, por favor, espalhe a notícia o mais rápido possível. Quanto mais cedo soubermos quantas pessoas irão melhor fica organizar nosso reencontro.
As próximas notícias continuarei divulgando aqui e no fórum C/C&#43;&#43;. Fique atento.
</description>
</item>

     
        <item>
  <title>RIP, Alberto</title>
  <link>http://www.caloni.com.br/rip-alberto/</link>
  <pubDate>2015-01-21</pubDate>
  
  <guid>http://www.caloni.com.br/rip-alberto/</guid>
  <description>Acho que como muitos aqui de vocês, eu sou (fui?) um fã condicional de Alberto Fabiano, o mestre em várias coisas, não se restringindo apenas à informática. Alberto, é preciso dizer, foi um hacker de verdade.
Ultimamente ando fuçando nas minhas mensagens do GMail procurando por posts que se perderam no tempo. Acabei encontrando um email que o Alberto me mandou em 2006 comparando nossas evoluções na área. Não é preciso dizer que a minha evolução ficou para trás em algumas centenas de anos perto dele, mas mesmo assim ele teve a &amp;quot;humildade&amp;quot; e uma infinita modéstia de comparar-nos em alguns aspectos de nossas vidas profissionais, como termos começado a programar com Quick BASIC e gostar de Segurança da Informação.
Não fiz nenhum post à época da sua morte porque não achei adequado, nem o momento. Porém, de vez em quando, acredito que é necessário se lembrar dos melhores, assim como muitos de nós fizeram com o mestre Dennis Ritchie um tempo atrás.
Portanto, segue o email, e uma pequena lembrança. Que a sabedoria do Alberto esteja de alguma forma infectando o Universo e que seus átomos em milhões ou bilhões de anos reconstruam mais Albertos para espalhar inteligência e bom senso por todo o mundo.
&amp;quot;Olá Caloni,
Por um acaso, antes de adicionar seu site-blog no bookmark do meu blog, fui dar uma olhada no about do seu site e fiquei surpreso como temos pontos em comuns em nossos perfis... com sutis diferenças...
Vc começou a programar com o Quick Basic, eu também programei com o Quick Basic mas comecei com o Gw-Basic em 1990, depois fui pro Basica IBM, depois fui pro Cobol mas como eu trabalhava com DBase III Plus logo fui ficando curioso em como automatizar alguns procedimentos e fiz meus primeiros PRG e com o tempo fui automatizado... migrei coisas para o Cobol, Clipper, Joiner, fiz vários experimentos com C, C&#43;&#43; mas em 1999 eu acabei partindo para área de infra-estrutura onde fiquei por &#43; de 2 anos... Neste meio tempo, mais por curiosidade e por consequencia natural da montagem de um Z80 em clube, cheguei a programar em ASM e C para Z80; que acabaram me levando ao PIC...
Sempre gostei do SCUA, achei muito curioso o fato de vc ter trabalhado lá, pois sempre tive um pé na área de segurança, tanto que meu TCC foi de graduação, pós em Engenharia de Software e o de uma pós-graduação em Security no IBPI (aí já é muito óbvio) foi de segurança...
Quase trabalhei para a OpenCS, você trabalha pra eles; achei isto muito interessante!
Como centenas, acho que como alguns milhares de profissionais eu já estudei no IBTA; fiz Network Academy e quase fiz uma pós lá; não fiz por pouco.
Tenho programas espalhadas por aí, que nem sei se ainda são todos utilizados, em Cobol, Clipper, Joiner, SmallTalk (sim é isto mesmo, olhando para trás nem eu acredito nisto) assim como Java, pois é... VB 6, Web Pages em Perl, PHP, ASP, JSP e ultimamente em Python. Depois de um tempo meio fora, voltei a programar em C e ASM por causa de um súbito retorno ao envolvimento com microcontroladores à uns 4 anos atrás, e aí foi pintando o interesse em desenvolver em C para Linux, então-se voltei ao C&#43;&#43;; porém agora com uma base muito mais solida de programação do que 10 anos antes... E tem sido à C&#43;&#43; no qual tenho me dedicado nos últimos 3 anos; tenho que confessar que o que andei fazendo em VB nos últimos anos foi apenas pq eu não sabia como fazer exatamente em C&#43;&#43; ou (ouve casos) que por pressa e falta de suporte a bibliotecas específicas para C&#43;&#43; (dá para acreditar?) e é isto... não nego que tenho muito o que aprender em matéria de C&#43;&#43;, e pretendo!
Também não nego que já andei dando minhas cacetadas com Visual Objects (argh), Delphi, Clipper com Max e FiveWin, Lisp, RPG (por pura casualidade) além de Korn Script (também por força da ocasição), VBScript, JSCript, JavaScript (conseqüência natural ao se mexer com ASP e PHP; Java a princípio por curiosidade, depois por questão de sobrevivência e ultimamente apenas por comodidade ao mexer com J2ME....
Bem... de qualquer forma, seu blog está no meu bookmark... e é isto aí! Estarei na DevTech...
Att []&#39;s..&amp;quot;
</description>
</item>

     
        <item>
  <title>MVP C&#43;&#43; Summit e/ou Visual C&#43;&#43; ressurgindo das cinzas.</title>
  <link>http://www.caloni.com.br/mvp-summit/</link>
  <pubDate>2014-11-21</pubDate>
  
  <guid>http://www.caloni.com.br/mvp-summit/</guid>
  <description>Esse ano aproveitei meu status de Most Valuable Professional (já renovado para mais um ano... yes!) e visitei o Campus de Seattle da Microsoft no evento global MVP Summit. A ideia desse evento é que os MVPs troquem ideias entre eles e com as equipes dos produtos Microsoft. No meu caso, houve um dia que visitamos o prédio da equipe do Visual C&#43;&#43;, assistindo apresentações sobre a nova e próximas versões de C&#43;&#43; e também dando opiniões e visões acerca do que é relevante e o que não é no momento para a comunidade de desenvolvedores.
E é claro que eles já sabem que o mais relevante no momento é o acompanhamento do padrão.
Apesar de não estar no centro dos meus estudos e dedicação nos últimos anos, a velha queda que nutro pela minha linguagem de criação além do próprio título de expertise me fizeram escolher, por todos os dias que estive no evento mundial de MVPs, pela oportunidade de ouro de assistir o que a equipe de desenvolvimento do Visual C&#43;&#43; tinha a dizer. O saldo foi extremamente positivo.
Como devem saber, há um blogue da equipe onde são compartilhadas informações sobre como anda esse projeto que já tem mais de duas décadas. As últimas novidades incluem ferramentas para desenvolvimento mobile (Android e Windows Phone) em C&#43;&#43; e o Visual Studio 2015 Preview e mais uma porrada de suporte aos padrões C&#43;&#43; 11, 14 e o futuro 17.
E uma última novidade muito curiosa é um saite onde é possível testar código no último compilador compilado pela equipe!
Enfim, sabemos que o GCC é o laboratório para as últimas features de C&#43;&#43;, mas como também sabemos através do Java, nunca é muito saudável confiar em apenas um projeto para o desenvolvimento de uma linguagem. E quanto mais compiladores C&#43;&#43; modernos melhor!
</description>
</item>

     
        <item>
  <title>Walter de Carvalho</title>
  <link>http://www.caloni.com.br/exposicao-walter-de-carvalho/</link>
  <pubDate>2014-10-03</pubDate>
  
  <guid>http://www.caloni.com.br/exposicao-walter-de-carvalho/</guid>
  <description>Está acontecendo até a metade de outubro o festival Luz, homenageando Walter de Carvalho, um diretor de fotografia sensacional no nosso Cinema. Dois dos três filmes que assisti com ele manipulando a luz são em preto e branco e são maravilhosos (também vi Central do Brasil, mas faz tanto tempo...):
 Heleno A Febre do Rato  É possível notar em Heleno todo o encantamento nosso pelo passado romântico na história de um jogador de futebol ídolo da época. Curiosamente A Febre do Rato é um filme totalmente diferente ao nos transportar para a época da ditadura e do naturalismo querendo desabrochar de nossas mentes presas no politicamente correto (curioso que hoje o politicamente correto trocou de lado).
O terceiro filme que vi é um trabalho da ótima Laís Bodanzky. Imagino o que Walter deve ter feito para manter a luz tão aconchegante quanto nostálgica em Chega de Saudade. O Cinema Nacional é um palco de muitas luzes, e Walter sabe usar muito bem todas elas.
</description>
</item>

     
        <item>
  <title>TDC2014: Trilha de C/C&#43;&#43; teve palestras para todos os gostos</title>
  <link>http://www.caloni.com.br/tdc2014-trilha-de-cc-teve-palestras-para-todos-os-gostos/</link>
  <pubDate>2014-08-11</pubDate>
  
  <guid>http://www.caloni.com.br/tdc2014-trilha-de-cc-teve-palestras-para-todos-os-gostos/</guid>
  <description>A trilha da nossa(s) linguagem(ns) querida(s) do coração(ões) desse ano foi bem heterogênea: Rodrigo Madera pegando na mão dos ainda não-iniciados na magia-negra da TMP; Fabio Gallupo audaciosamente rabiscando uma roupagem funcional para C&#43;&#43;11 (e 14, e 17!); Felipe Lavratti abrindo o código do seu projeto para vermos como é possível organizar e modularizar bem um código em C (sem classes); eu me virando nos trinta sem slides explicando os três passos de geração de código C/C&#43;&#43; (dei impersonate na conta do Rodrigo Strauss); Fernando Roberto do DriverEntry mais uma vez nos impressionando com as gamb... adpatações técnicas Microsoftianas no Windows para fazer tudo funcionar sem o usuário perceber (só quando as coisas ficam azuis); Fernando Luiz Rizzato mostrando que a equipe ex-Borland continua mandando muito bem criando uma IDE de C&#43;&#43; que porta código para diversos dispositivos mobile; eu novamente jorrando um dump das minhas memórias de 10 anos depurando código com WinDbg e suas powertools; e, acreditem ou não, nossa primeirA palestrante amante de C contando sua experiência em diversos projetos em um stand-up animado movido a diversos gifs animados.
O negócio é que tivemos um dia bem atípico, com direito a lotação (!) de nossa sala logo pela manhã. Os organizadores Rodrigo Strauss e Vinicius Jarina tiveram que dar um pushback na lista de vectors da sala. E todos, aparentemente, estavam no lugar certo.
Foi bom estar de volta nesse evento tão importante para mantermos os diferentes programadores unidos por um bem comum: mostrar que C/C&#43;&#43; está tão vivo como nunca!
</description>
</item>

     
        <item>
  <title>TDC2014: Trilhas de Segurança: o que é ser hacker?</title>
  <link>http://www.caloni.com.br/tdc2014-trilhas-de-seguranca-o-que-e-ser-hacker/</link>
  <pubDate>2014-08-11</pubDate>
  
  <guid>http://www.caloni.com.br/tdc2014-trilhas-de-seguranca-o-que-e-ser-hacker/</guid>
  <description>Tirando a palestra-propaganda de Welington Strutz, a trilha de segurança no TDC desse ano foi bem heterogênea e focou tanto na proteção quanto nos ataques possíveis da web. Infelizmente, para alguns participantes, a grande questão de hacking se resume a apenas invasão de saites, o que nem era de longe o intuito da rotulação &amp;quot;hacker&amp;quot; no início dos famosos ratos de computador, em um ambiente com pouca RAM, nenhuma Web e onde o poder de processamento mais pesado rodava nas mentes criativas desses pequenos gênios da informática.
Mais para a frente, o conceito/definição de hackativismo foi virando algo cada vez mais genérico, e criou-se a cultura de ser possível ser hacker em qualquer nível de conhecimento humano. Essa é a definição que eu mais gosto e apoio, tanto por agregar o poder do hacking para toda a humanidade (seja você um burocrata, um trabalhador braçal, um designer de foguetes, um acadêmico, ...) quanto por não situar suas ações em um nível moral, algo completamente desnecessário e que só se tornou uma questão relevante por conta da mídia sensacionalista e as mentes mais conservadoras fazer-nos acreditar que estamos correndo um risco em deixar a internet nas mãos de pessoas altamente capacitadas, mas que não compartilham das suas crenças e valores.
Mesmo se focarmos apenas em computadores, engenharia reversa (de hardware e software), gambiarras de hardware e software conseguem fazer muito mais pela evolução tecnológica do que esse jogo de gato e rato de vulnerabilidades e ferramentas mágicas.
Porém, é necessária a existência de pessoas interessadas em atacar para que se crie a necessidade de se proteger. Dessa forma é que foram criados os X-Headers explicados por William Costa, os sistema de geração de números verdadeiramente aleatórios para se proteger de trapaceiros em um jogo de pôquer (minha palestra). Foi com o mesmo raciocínio que hoje existem valiosos insights sobre arquiteturas mais robustas discutidas por Rafael Lachi. É tendo curiosidade que encontramos falhas graves nos aplicativos mobile de hoje, como foi demonstrado tanto por Rafael Tosetto Pimentel quanto por Ivan Jeukens. E, não podemos nos esquecer, é essa nova geração do Antonio Costa que procura por brechas ridículas no login de diversos saites, forçando o mercado a se ajustar às melhores práticas.
Como Não Desenvolver Pôquer Online ou Como Explorar a Pseudo-Aleatoriedade from Wanderley Caloni
De uma forma ou de outra, segurança deve se tornar um pensamento constante na vida dos programadores, ainda mais web e mobile. Essa não é uma tendência, essa deveria ser uma necessidade básica do dia-a-dia.
</description>
</item>

     
        <item>
  <title>O novo &#39;como não dar step into&#39; do Visual Studio 2012/13</title>
  <link>http://www.caloni.com.br/o-novo-como-nao-dar-step-into-do-visual-studio-201213/</link>
  <pubDate>2014-08-01</pubDate>
  
  <guid>http://www.caloni.com.br/o-novo-como-nao-dar-step-into-do-visual-studio-201213/</guid>
  <description>Toda vez que instalo um Visual Studio novo e começo a depurar sempre surge a necessidade de fazê-lo calar a boca nos step intos da STL, Boost, ATL e coisas-que-sei-que-não-vai-dar-pau. (Obviamente, quando dá pau, preciso ir no disassembly e cutucar a STL para ela me entregar qual o problema com o meu contêiner.)
Nas edições antigas da IDE (até o 2010) existia uma configuração no registro para isso. Desde o Visual Studio 2012 isso mudou, e agora existe um arquivo em %programfiles(x86)%\Microsoft Visual Studio 11(ou12).0\Common7\Packages\Debugger\Visualizers chamado default.natstepfilter (gostei do detalhe do &amp;quot;nat&amp;quot;: &amp;quot;nat thou step into, little bestard!&amp;quot;). Ele é um XML que já vem preenchido com algumas opções interessante:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&amp;lt;StepFilter xmlns=&amp;#34;http://schemas.microsoft.com/vstudio/debugger/natstepfilter/2010&amp;#34;&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;__security_check_cookie&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;__abi_winrt_.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;_ObjectStublessClient.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;_Invoke@12&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;_RTC_Check(Esp|StackVars)&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;_chkstk&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;ATL::CComPtrBase.*::operator&amp;amp;amp;&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;ATL::CComPtrBase.*::operator-&amp;amp;gt;&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;ATL::CHeapPtrBase.*::operator&amp;amp;amp;&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;ATL::CHeapPtrBase.*::operator-&amp;amp;gt;&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;ATL::CComBSTR::operator&amp;amp;amp;&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;std::forward&amp;amp;lt;.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;std::move&amp;amp;lt;.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;Platform::EventSource::Invoke.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;std::.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;boost::.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;/StepFilter&amp;gt;Podemos simplesmente adicionar mais duas opções para o parzinho STL/Boost:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&amp;lt;StepFilter xmlns=&amp;#34;http://schemas.microsoft.com/vstudio/debugger/natstepfilter/2010&amp;#34;&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;std::.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;Function&amp;gt;&amp;lt;Name&amp;gt;boost::.*&amp;lt;/Name&amp;gt;&amp;lt;Action&amp;gt;NoStepInto&amp;lt;/Action&amp;gt;&amp;lt;/Function&amp;gt;&amp;lt;/StepFilter&amp;gt;A boa nova, pelo menos para o Visual Studio 2013, é que agora é possível, se quisermos, entrar nas funções que serão ignoradas:

Eu não sei qual vai ser a próxima novidade do step into, mas para mim, já está bem ótimo.
(Fonte da informação: Andy Pennell&#39;s Blog).
</description>
</item>

     
        <item>
  <title>Vestindo a Camisa da Minha Empresa</title>
  <link>http://www.caloni.com.br/vestindo-a-camisa-da-minha-empresa/</link>
  <pubDate>2014-07-30</pubDate>
  
  <guid>http://www.caloni.com.br/vestindo-a-camisa-da-minha-empresa/</guid>
  <description>Pois é, o tempo passou, e desde 2011 eu passei mais de três anos nessa minha nova empreitada no Mercado Financeiro. Bom, tudo que é bom acaba, para começar algo melhor ainda. No caso da minha experiência com a EzMarket (hoje UOL/Diveo Broker) foi algo quase que surreal trabalhar em um ambiente tão formidável com pessoas mais formidáveis ainda, tanto pessoalmente quanto tecnicamente. Aprendi muito sobre análise de risco e um tanto sobre conexões e protocolos de rede, e mais ainda sobre serialização e desempenho. Tive momentos prazerosos em reuniões de definição de arquitetura, (poucas) madrugadas de debugging e testes no cliente, (muitas) idas ao café da esquina para um ótimo papo e vários outros momentos que não me lembro agora, mas que não me arrependarei jamais, e sempre sentirei saudades.
E já que é pra começar algo melhor ainda, me sinto feliz em anunciar minha parceria societária com o meu amigo de longa data Rodrigo Strauss, primeiro blogueiro escovador de bits do país (antes disso nós escovávamos bits em uma empresa de segurança da informação) e co-fundador da comunidade C/C&#43;&#43; Brasil. O Strauss passou também um bom tempo no Mercado Financeiro, trabalhando dentro da BM&amp;amp;F Bovespa fazendo o ajuste fino de servidores transacionando centenas de milhares de zillhões de negócios diários e gerenciando uma equipe. Seus projetos pessoais sempre o levaram a questionar qual a maneira mais rápida, simples e eficiente de realizar tarefas repetitivas, de preferência prontas para alta escalabilidade, o que o fez dedicar uns bons anos a resolver essas questões a fundar enfim a Intelitrader, uma empresa focada em soluções para o Mercado Financeiro e que possui a grande vantagem de ser pequena. Sim, ser pequena pode ser uma vantagem, principalmente para o cliente, que possui um atendimento mais que personalizado com nenhuma burocracia.
E essa busca pela otimização de soluções me fez repensar o que eu estava fazendo com minha própria vida, pulando de emprego em emprego, de escritório em escritório, cada um com sua cultura organizacional disassociada muitas vezes dos objetivos reais de uma vida de desenvolvedor. Para mim, um desenvolvedor é alguém que desenvolve soluções. Por outro lado, um empreendedor ou empresário é alguém que vende essas soluções. Unir ambas as coisas nesse mundo onde um software complexo e complicado tende a morrer e um software simples e rápido de implantar é a chance de sucesso começou a fazer todo sentido. Lógico que esse tipo de conclusão só se tem passando alguns meses ociosos fazendo código just for fun e retomando sua fila de coisas a assistir até começar a fazer guerrinha imaginária de bolinhas de papel, mas eventualmente todos pensam que há coisas melhores para fazer na vida do que trabalhar para alguém.
Por isso que, mais do que a parceria com o Strauss, a Intelimarket agora faz parte do grupo BitForge, fundada pelo igualmente conhecido Gianni (se você frequenta o grupo de discussão do Grupo C/C&#43;&#43; com certeza conhece o Gianni), especializado em soluções de IPTV, mas que conhece absurdos de várias outras coisas, especialmente do mundo Linux.
Enfim, um pequeno if (ou dois) para o código, mas um grande deploy de soluções inovadoras na área de tecnologia da informação. Para essa nova e empolgante empreitada, eu visto, com certeza, a camisa da minha empresa.
</description>
</item>

     
        <item>
  <title>Integrando BitBucket/GitHub com Trello</title>
  <link>http://www.caloni.com.br/integrando-bitbucketgithub-com-trello/</link>
  <pubDate>2014-07-22</pubDate>
  
  <guid>http://www.caloni.com.br/integrando-bitbucketgithub-com-trello/</guid>
  <description>Eu nem acredito que estou escrevendo sobre desenvolvimento web, mas como foi algo que me fez dedicar algumas horas do meu fim-de-semana, e não encontrei facilmente uma solução já feita, acredito que pode ser útil para mais alguém que usa Trello e GitHub (ou BitBucket).
Mas o que é Trello? Basicamente é um TodoList feito da maneira mais inteligente possível: uma lista de listas de listas! Os espaços, ou desktops, onde você organiza suas tarefas são chamados de Boards. Em cada board vivem L listas, e em cada lista vivem C cards. Cada card pode conter comentários, histórico de mudanças, labels, checklists, due dates e todas as tranqueiras que geralmente existe em uma lista de tarefas. É um sistema online, desenvolvido pela empresa do Joel Spolsky (o mesmo do excelente blogue de programador Joel on Software (ou em português, e que contém algo que eu adoro em sistemas web: atalhos!

A ideia que tive foi usar os webhooks dos saites de repositórios de fontes para permitir comentar dentro dos cards o commit que foi feito, sua mensagem e o linque para o commit. OK, mas por que não usar o sistema de issues dos já feitos pra isso GitHub e BitBucket? Ele já faz isso muito melhor. De fato. Porém, fica espalhado pelos repositórios, e não é sempre que uma tarefa envolve código (comprar pão, por exemplo). Além do mais, praticamente qualquer serviço desses oferece hooks para a integração de outros projetos/serviços, então se um dia nascer mais um sistema de controle de fonte ou mais um saite que organiza essas tralhas haverá um hook e consequentemente mais uma adaptação do meu código PHP.
E por que PHP? Bom, PHP é uma linguagem fácil de mexer (se parece com C, mas é um script) e praticamente qualquer servidor web do universo, mesmo o mais baratinho, vem com o pacote Apache &#43; PHP (e geralmente uma base MySql). Dessa forma, é uma solução que pode ser implantada fácil e rapidamente.
Comentando no Trello Vamos começar pelo mais difícil que o resto vai fácil: comentar pela API do Trello. Sua API é beta, assim como sua documentação, então tive arrancar significado inexistente em seu help, mas acabou funcionando. Como qualquer API web, você precisa de uma chave, segredo e a permissão do usuário. Com essa permissão é possível comentar em todas as boards que esse usuário específico tem acesso.
Pelo menos a parte de geração de chave/segredo é simples, tanto que se você clicou nesse linque, já conseguiu gerar uma =).
Depois disso, mesmo nessa página já é possível conseguir uma chave de acesso para o seu usuário.

Por fim, para fazer o código que irá comentar dentro de um card no Trello, basta usar dois ou três métodos que lidam com enviar coisas pela web (não me pergunte mais que isso):
&amp;lt;?php$url = &amp;#39;https://trello.com/1/cards/ID_DO_CARD/actions/comments&amp;#39;;$msg = &amp;#39;Hello, World!&amp;#39;;$data = array(&amp;#39;key&amp;#39; =&amp;gt; &amp;#39;AQUI_VAI_SUA_CHAVE&amp;#39;, &amp;#39;token&amp;#39; =&amp;gt; &amp;#39;AQUI_VAI_SEU_TOKEN_DE_ACESSO&amp;#39;,&amp;#39;text&amp;#39; =&amp;gt; $msg);$options = array(&amp;#39;http&amp;#39; =&amp;gt; array(&amp;#39;header&amp;#39; =&amp;gt; &amp;#34;Content-type: application/x-www-form-urlencoded\r\n&amp;#34;,&amp;#39;method&amp;#39; =&amp;gt; &amp;#39;POST&amp;#39;,&amp;#39;content&amp;#39; =&amp;gt; http_build_query($data),),);$context = stream_context_create($options);$result = file_get_contents($url, false, $context);?&amp;gt;As informações AQUI_VAI_SUA_CHAVE e AQUI_VAI_SEU_TOKEN_DE_ACESSO você já obteve no linque de geração de key/secret. Já o ID_DO_CARD é algo que depende de em qual lista seu card está, mas felizmente também existe um shortlink único e imutável para cada card no sistema:

Basta usar o ID em Base64-ou-o-que-o-valha no lugar de ID_DO_CARD que já estamos OK. Depois que este código conseguir ser executado, basta ter acesso à internet que ele irá escrever &amp;quot;Hello, World&amp;quot; no cartão referenciado:

Muito bem. Primeira parte da missão concluída.
Terminando com GitHub Como o GitHub é um dos serviços de repositório de fontes mais famoso, vamos torná-lo nosso caso de sucesso. Basicamente você deve ir no seu repositório do coração (essa é a parte ruim: se você tem mais de um coração, vai ter que repetir esse mesmo procedimento para todos os outros repositórios dos seus outros corações), Settings, Webhooks &amp;amp; Services.

Lembre-se de colocar seu código PHP em um servidor visível na web. Lembre-se também de usar o método de envio urlencoded do payload para simplificar seu tratamento. Para simplificar ainda mais o processo, coloque qualquer coisa no segredo (não validaremos neste post, mas #ficadica de segurança se você não quer que outros acessem seu PHP inadvertidamente).
Pois bem. No código que irá receber o payload do GitHub precisamos de duas coisas: saber qual a estrutura que vai ser recebida e como localizar o id do card onde iremos enviar a informação. Nesse caso, mais uma vez, para simplificar, vamos procurar pelo próprio linque permanente do cartão na mensagem do commit. Aliás, doS commitS (sendo um push, é provável que o evento seja gerado com diversos commits aninhados).
&amp;lt;?php$pushData = json_decode($_POST[&amp;#39;payload&amp;#39;]);foreach( $pushData-&amp;gt;commits as $c ){$msg = $c-&amp;gt;message;$pattern = &amp;#39;#http[s]*://trello.com/c/([A-Za-z0-9]&#43;)#&amp;#39;;if( preg_match($pattern, $msg, $matches) == 0 )continue;$url = &amp;#39;https://trello.com/1/cards/&amp;#39; . $matches[1] . &amp;#39;/actions/comments&amp;#39;;$msg = $c-&amp;gt;message . &amp;#39; Commit: &amp;#39; . $c-&amp;gt;url;$data = array(&amp;#39;key&amp;#39; =&amp;gt; &amp;#39;AQUI_VAI_SUA_CHAVE&amp;#39;, &amp;#39;token&amp;#39; =&amp;gt; &amp;#39;AQUI_VAI_SEU_TOKEN_DE_ACESSO&amp;#39;,&amp;#39;text&amp;#39; =&amp;gt; $msg);$options = array(&amp;#39;http&amp;#39; =&amp;gt; array(&amp;#39;header&amp;#39; =&amp;gt; &amp;#34;Content-type: application/x-www-form-urlencoded\r\n&amp;#34;,&amp;#39;method&amp;#39; =&amp;gt; &amp;#39;POST&amp;#39;,&amp;#39;content&amp;#39; =&amp;gt; http_build_query($data),),);$context = stream_context_create($options);$result = file_get_contents($url, false, $context);}?&amp;gt;Agora é só testar. Posso pegar esse mesmo artigo e comitá-lo no repositório do blogue usando o linque único do card da tarefa de escrever este artigo. Ou seja, aqui é Inception na veia, mermão!

O que vai deixar você perplexo é entender como esse texto está sendo comitado antes mesmo de eu comitar este texto ;).

E o negócio é rápido, viu?

Adendo: BitBucket A única coisa que muda no caso do BitBucket é a tela onde deve ser inserido seu webhook (método POST, sempre) e a estrutura JSon que é enviada. De lambuja, eis o que deve ser feito com esse payload:
&amp;lt;?php$bitData = json_decode($_POST[&amp;#34;payload&amp;#34;]);foreach( $bitData-&amp;gt;commits as $c ){$msg = $c-&amp;gt;message;$pattern = &amp;#39;#http[s]*://trello.com/c/([A-Za-z0-9]&#43;)#&amp;#39;;if( preg_match($pattern, $msg, $matches) == 0 )continue;$url = &amp;#39;https://trello.com/1/cards/&amp;#39; . $matches[1] . &amp;#39;/actions/comments&amp;#39;;$msg = $c-&amp;gt;message . &amp;#39; Commit: &amp;#39; . $bitData-&amp;gt;canon_url . $bitData-&amp;gt;repository-&amp;gt;absolute_url . &amp;#39;commits/&amp;#39; . $c-&amp;gt;raw_node;$data = array(&amp;#39;key&amp;#39; =&amp;gt; &amp;#39;AQUI_VAI_SUA_CHAVE&amp;#39;, &amp;#39;token&amp;#39; =&amp;gt; &amp;#39;AQUI_VAI_SEU_TOKEN_DE_ACESSO&amp;#39;,&amp;#39;text&amp;#39; =&amp;gt; $msg);$options = array(&amp;#39;http&amp;#39; =&amp;gt; array(&amp;#39;header&amp;#39; =&amp;gt; &amp;#34;Content-type: application/x-www-form-urlencoded\r\n&amp;#34;,&amp;#39;method&amp;#39; =&amp;gt; &amp;#39;POST&amp;#39;,&amp;#39;content&amp;#39; =&amp;gt; http_build_query($data),),);$context = stream_context_create($options);$result = file_get_contents($url, false, $context);}?&amp;gt;</description>
</item>

     
        <item>
  <title>TDC 2014: Segurança</title>
  <link>http://www.caloni.com.br/tdc-2014-seguranca/</link>
  <pubDate>2014-07-16</pubDate>
  
  <guid>http://www.caloni.com.br/tdc-2014-seguranca/</guid>
  <description>Nesse TDC, além da minha palestra usual na trilha C/C&#43;&#43; irei participar da trilha de segurança, voltando às minhas origens, quando programava em empresas da segurança da informação. Foram 10 anos!
Estão marcadas duas palestras nesse dia (quinta-feira, 7 de agosto de 2014): uma já ministradas outras vezes sobre o processo de engenharia reversa do dicionário Houaiss, que gerou tantas discussões nos comentários e versões alternativas (inclusive em Python!) do código. Aqui, além de já explicar o processo que me fez abrir o dicionário Houaiss para uso no Babylon, pularei a parte do uso no Babylon e irei focar mais nas técnicas de segurança que podemos utilizar para tornar essa engenharia reversa não impossível, mas pelo menos um pouco mais difícil.
Já a segunda palestra é bem rápida -- espero! -- e fala sobre um artigo que li de Laura Diane Hamilton sobre algoritmo de embaralhamento de cartas para saites de pôquer. Esse artigo, que irei demonstrar, explica diversas falhas do código de um saite e eu tentarei explicar brevemente maneiras de se aproveitar dessas falhas, além -- é claro -- de como se proteger contra isso!
Então é isso aí, mais um dia, mais uma trilha, mais bits e bytes. Nos vemos por lá!
</description>
</item>

     
        <item>
  <title>TDC 2014</title>
  <link>http://www.caloni.com.br/tdc-2014/</link>
  <pubDate>2014-07-08</pubDate>
  
  <guid>http://www.caloni.com.br/tdc-2014/</guid>
  <description>Segue a descrição oficial completa:
O programador C/C&#43;&#43; de médio e baixo nível em Windows precisa estar familiarizado com as potencialidades de suas ferramentas de trabalho. Entre elas, o WinDbg é de longe o mais completo e complexo, além de ser quase desconhecido pela comunidade.
Essa palestra visa um público que deseja conhecer novas técnicas de depuração para problemas específicos, mas comuns, como leak de memória, travamento durante shutdown da máquina e análise de processos de maneira não-intrusiva.
Apresentando o WinDbg: para os ainda não iniciados, uma visão geral do que é o WinDbg, como ele funciona e em que ele pode ajudar o programador C/C&#43;&#43;.
Leak de Memória: nessa segunda parte já passamos para a prática, adicionando ao cinto de utilidades do programador dicas valiosas para detectar rapidamente onde está ocorrendo vazamento de memória constante.
Depurando até o último segundo: para análises mais hardcore às vezes é necessário depurar onde até o sistema operacional está indo embora; essa terceira parte da palestra visa mesclar técnicas de user-mode e kernel-mode para depurar um serviço que trava durante o reboot da máquina.
Dicas e truques rápidos: nesta última parte aprenderemos um apanhado de truques para o iniciante não se perder muito tempo nos problemas que eventualmente encontrará usando o WinDbg. Também aprenderá a realizar tarefas mais raras, como comparação de strings, busca na memória, etc.
Ainda estou pensando quais truques colocar. Se tiver alguma sugestão de algo que seja muito difícil de fazer na depuração Windows ou tenha alguma dica para compartilhar, ainda dá tempo.
O TDC continua sendo esse evento com muitas trilhas, mas que tem como virtude reunir comunidades que geralmente ficam muito afastadas umas das outras. Na trilha C/C&#43;&#43; a vantagem é ainda maior, pois a área onde um programador da linguagem atua pode variar enormemente. Esse ano teremos palestras sobre metaprogramação (Rodrigo Madera), modularização de código (Felipe Lavratti), c&#43;&#43; para android e ios com o mesmo fonte (Fernando Luiz Rizzato), análise dos passos de uma compilação (Rodrigo Strauss), uma olhada no sistema wow64 do kernel do Windows (Fernando Roberto da Silva) e programação funcional (Fabio Galuppo). Ou seja, uma grade espetacularmente variada!
Então é isso. Garanta seu ingresso, faça networking, assista as palestras do seu interesse e pode me procurar durante o dia para tirar dúvidas sobre qualquer assunto relacionado a C&#43;&#43; e coisas que já mexi.
</description>
</item>

     
        <item>
  <title>Sobre a BitForge</title>
  <link>http://www.caloni.com.br/bitforge/</link>
  <pubDate>2014-07-03</pubDate>
  
  <guid>http://www.caloni.com.br/bitforge/</guid>
  <description>Minha empresa e onde eu trabalho; nos contrate para resolver seu problema aqui.
A BitForge é uma empresa de especialistas em software que já ajudou dezenas de empresas a alcançar seus objetivos. Nós podemos fazer o mesmo por você desde a concepção, estudo de viabilidade e escolha de tecnologia até a solução de problemas de produção, como performance insuficiente ou bugs intermitentes. Se sua empresa precisa de um apoio na área de software para plataformas Windows e Linux (e outros nixes), nós podemos ajudá-lo.
Nosso foco é oferecer consultoria e suporte especializado para ajudar sua empresa com problemas técnicos que parecem insolúveis.
Contamos com know-how completo em sistemas operacionais Linux e MS Windows, e nas linguagens C/C&#43;&#43;/C#, Python, Java, Rust e até Assembly!
Se quiser saber mais sobre a empresa BitForge clique aqui.
Se quiser saber mais sobre o autor deste blogue clique aqui.
</description>
</item>

     
        <item>
  <title>Poker Face</title>
  <link>http://www.caloni.com.br/poker-face/</link>
  <pubDate>2014-05-06</pubDate>
  
  <guid>http://www.caloni.com.br/poker-face/</guid>
  <description>O segundo round da segunda fase do Code Jam passou nesse sábado. Disléxico que sou, consegui fazer apenas 8 pontos ¿ como todo mundo ¿ no teste small do problema B, que envolvia apenas dois loops aninhados (a versão large fica para outro post). Na verdade, estou aqui para expressar minha gratidão ao campeonato por ter aprendido mais uma bela lição vendo o código do primeiro colocado do primeiro round, vulgo Kaizero, um coreano que deu uma solução simples, rápida e prática para um problema de probabilidade tão error-prone que até os juízes do Google deram uma lambuja de alguns testes errados (sem contar que houve apenas a categoria small), e me fez pensar em quantas vezes pensamos em demasiado tentando encontrar a solução perfeita para algo que simplesmente... não precisa.
Basta um hack e commit.
É a incerteza, idiota! 
O problema reza que existem dois algoritmos para embaralhar uma sequência numérica (de 0 a N): o bom e o ruim. Ambos traçam um loop do iníco ao fim pegando aleatoriamente um elemento da lista e trocando de lugar com o elemento que está sendo varrido no momento.

A diferença entre o bom e o ruim é que o bom pega aleatoriamente apenas os elementos DEPOIS do elemento que está sendo varrido, enquanto o algoritmo ruim pega qualquer um dos elementos SEMPRE. Isso aparentemente e intuitivamente não parece interferir na aleatoriedade do embaralhamento, mas se levarmos ao extremo de embaralhar repetidas vezes somando a lista resultante percebemos uma tendência gritante do algoritmo ruim em manter o ordenamento inicial, ou pelo menos na média sempre tender para números menores no início e números maiores no fim, como pode ser visto nesse teste que fiz, gerado pelo Excel:

O que eu tentei fazer durante meu fim-de-semana retrasado e o feriado foi encontrar um detector de aleatoriedade (aliás, encontrei um bem interessante chamado ent), tanto &amp;quot;na mão&amp;quot; quanto pesquisando. O que eu não imaginava foi que o teste que eu tinha feito no início usando uma simples planilha Excel era a solução óbvia (naquelas de é óbvio só depois que você vê). E foi essa a solução adotada por Kaizero.
/** @author Kaizero@desc Versão comentada (em português) e desofuscada do código do Code Jam 2014, 1A, problema 3 (Proper Shuffle)por Wanderley Caloni (wanderley@caloni.com.br).*/#pragma warning(disable:4996) // warning, pra que te quero...#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;time.h&amp;gt;using namespace std;// as variáveis monossilábicas...int w[1001], C[1001][1001], O[1001];// Note que uma delas (C) é uma tabela gigantesca:// 1 2 3 4 ... 1001// 2// 3// ...// 1001// tabela verdade?bool v[1001];struct A{	int ord, R;bool operator &amp;lt;(const A &amp;amp;p)const{return R &amp;lt; p.R;}}p[1000];int main(){freopen(&amp;#34;input.txt&amp;#34;, &amp;#34;r&amp;#34;, stdin);freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);int i, TC, T, n, j;srand((unsigned)time(NULL)); // mexendo o saco de bingo...// a parte mais demorada: construir um contador gigante estilo 	// Excel com 3 milhões de iterações	for (i = 0; i &amp;lt; 3000000; i&#43;&#43;){// 1. Preenchemos o array sequencial.	for (j = 0; j &amp;lt; 1000; j&#43;&#43;){w[j] = j;}// 2. Realizamos o algorimo ruim.	for (j = 0; j &amp;lt; 1000; j&#43;&#43;){swap(w[j], w[rand() % 1000]);}// 3. Pesamos o resultado do algoritmo ruim.	for (j = 0; j &amp;lt; 1000; j&#43;&#43;){C[j][w[j]]&#43;&#43;;}}// agora a parte &amp;#34;fácil&amp;#34;...// ler número de casos de teste (sempre 120)	scanf(&amp;#34;%d&amp;#34;, &amp;amp;TC);for (T = 1; T &amp;lt;= TC; T&#43;&#43;) // iterar por cada linha	{scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);p[T].ord = T; // guardando sua posição// lendo os números de todos os casos	for (i = 0; i &amp;lt; n; i&#43;&#43;){scanf(&amp;#34;%d&amp;#34;, &amp;amp;O[i]);p[T].R &#43;= C[i][O[i]]; // mas gravando o peso de cada posição (cálculo de 3M)	}}// ordenando pelo peso de cada posição	sort(p &#43; 1, p &#43; TC &#43; 1);for (i = 1; i &amp;lt;= 60; i&#43;&#43;)v[p[i].ord] = true; // metade tem que ser bom (a melhor metade)for (i = 1; i &amp;lt;= TC; i&#43;&#43;){printf(&amp;#34;Case #%d: &amp;#34;, i);if (v[i])printf(&amp;#34;GOOD\n&amp;#34;);else printf(&amp;#34;BAD\n&amp;#34;);}}O que ele basicamente faz é acumular os resultados de três milhões de embaralhamentos feitos pelo algoritmo ruim e inferir através dos resultados que metade é bom e metade é ruim. O ruim fica do lado desbalanceado da sequência.

Tão óbvio, tão simples, tão elegante.
</description>
</item>

     
        <item>
  <title>Que geleia de mocotó</title>
  <link>http://www.caloni.com.br/que-geleia-de-mocoto/</link>
  <pubDate>2014-04-29</pubDate>
  
  <guid>http://www.caloni.com.br/que-geleia-de-mocoto/</guid>
  <description>
A primeira bateria de problemas da segunda fase do Code Jam me mostrou o porquê do seu nome: meu cérebro ficou feito geleia (ha ha ha). Não consegui resolver nenhum problema a tempo, mas não culpo o C&#43;&#43;, que passei a usar para essa fase. É burrice aliada a pressão. Duas horas e meia para entender um problema é o tipo de coisa que me deixa pensando mais no tempo do que no problema. Tenho que melhorar isso.
De qualquer forma, esse final de semana que passou foi dedicado a resolver o primeiro problema e quem sabe escrever um post a respeito. Imagino que todos tenham acesso ao enunciado e aos casos de teste, mas, por via das dúvidas, aqui vai uma descrição adaptada:
Você é um fazendeiro hi-tech com uma vaca que tem um tablet. Não especifica se esse cowblet é um iPad, mas é uma possibilidade, já que como nenhum plugue parece encaixar nas tomadas de sua fazenda, é muito provável que você seja um Applemaníaco com um monte de gadgets que precisam de conversor vindos direto do eBay.

Através do eBay também veio um engenheiro chinês cuja missão é resolver esse gato que o Sr. Fazendeiro fez em sua fazenda. Tudo que ele precisa fazer é girar gigantescos switches (ou disjuntores) que invertem a polaridade binária de cada um dos pino dos conectores das tomadas. Quando um plugue de dispositivo e uma tomada possuem a mesma configuração de bits é possível conectá-los. O objetivo final é que todos os N plugues conectem nas N tomadas depois de virados Y switches, sendo que quanto menos switches melhor (afinal, eles são gigantescos, e o chinês supõe-se que seja pequeno).

O primeiro pensamento do programador preguiçoso (go, horse, go!) manda que usemos a velha força bruta e testemos todas as combinações possíveis de disjuntores, peguemos o com menor número de bits setados (inicialmente, todos estão em 0) e zás! Porém, o caso de teste tamanho large pressupõe que o limite de pinos das tomadas pode chegar a 40, o que seria responsável por nada mais nada menos que 2^40 combinações diferentes, ou 1.099.511.627.776 para ser exato. Isso dá mais de 1 trilhão! Mesmo que nosso código seja extremamente rápido e demore apenas um milissegundo para cada combinação, serão mais de 34 anos desperdiçados, que poderiam estar melhor investidos minerando bitcoins.

Dessa forma, temos que traçar uma solução baseada nas combinações entre as tomadas e plugues, que, pelos limites da versão large dos casos de teste, podem ter a quantidade de 150, o que dá 150*150 = 22500 combinações de XOR.

Sim, de XOR. O XOR aqui pode ser usado para detectarmos qual a combinação de switches precisamos para que cada tomada encaixa em cada dispositivo. Esse é o nosso conjunto universo de giros de disjuntores. Com esse conjunto em mãos fica fácil saber quais combinações são possíveis de encaixar todos os dispositivos: basta contar!
#include &amp;#34;CodeJam.h&amp;#34;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;map&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;set&amp;gt;#include &amp;lt;string&amp;gt;using namespace std;static const int MAX_SWITCHES = 40;__int64 StringToInt(const string&amp;amp; s, int L){__int64 ret = 0;for( int l = L; l; --l ){char c = s[L-l];if( c == &amp;#39;1&amp;#39; )ret |= ((__int64)1 &amp;lt;&amp;lt; (l-1));}return ret;}int CountBits(__int64 value){int ret = 0;while( value ){if( value &amp;amp; 1 )&#43;&#43;ret;value &amp;gt;&amp;gt;= 1;}return ret;}void TestCase(std::istream&amp;amp; is, std::ostream&amp;amp; os){int N, L;is &amp;gt;&amp;gt; N &amp;gt;&amp;gt; L;vector&amp;lt;__int64&amp;gt; outlets;vector&amp;lt;__int64&amp;gt; devices;string eletricItem;for( int n = 0; n &amp;lt; N; &#43;&#43;n ){is &amp;gt;&amp;gt; eletricItem;outlets.push_back(StringToInt(eletricItem, L));}for( int n = 0; n &amp;lt; N; &#43;&#43;n ){is &amp;gt;&amp;gt; eletricItem;devices.push_back(StringToInt(eletricItem, L));}typedef map&amp;lt;__int64, set&amp;lt;int&amp;gt;&amp;gt; SwitchOcurrences;SwitchOcurrences switchOcurrences;for( int n = 0; n &amp;lt; N; &#43;&#43;n ){__int64 outlet = outlets[n];for( int n2 = 0; n2 &amp;lt; N; &#43;&#43;n2 ){__int64 device = devices[n2];__int64 connection = outlet ^ device;switchOcurrences[connection].insert(n);}}for(auto it = switchOcurrences.begin(); it != switchOcurrences.end(); ){if( it-&amp;gt;second.size() != N )it = switchOcurrences.erase(it);else&#43;&#43;it;}if( switchOcurrences.size() ){int switches = MAX_SWITCHES &#43; 1;for_each(switchOcurrences.begin(), switchOcurrences.end(), [&amp;amp;](const SwitchOcurrences::value_type&amp;amp; ocurrence){int bits = CountBits(ocurrence.first);switches = min(switches, bits);});os &amp;lt;&amp;lt; switches &amp;lt;&amp;lt; endl;}else os &amp;lt;&amp;lt; &amp;#34;NOT POSSIBLE\n&amp;#34;;}Observação: note que retirei o wrapper costumeiro dos exercícios do Code Jam para não poluir demais o exemplo com código. E, na verdade, essa parte do código está compartilhada com todas as soluções (reuse!).
O que aprendi dessa pequena aventura foi: não importa o quanto um problema pareça fácil, anotar em um pedaço de papel é o caminho mais curto entre a mente e o código.
Que venha a segunda bateria de problemas!
</description>
</item>

     
        <item>
  <title>Geleia de Código</title>
  <link>http://www.caloni.com.br/geleia-de-codigo/</link>
  <pubDate>2014-04-15</pubDate>
  
  <guid>http://www.caloni.com.br/geleia-de-codigo/</guid>
  <description>
Não costumo participar de campeonatos de programação por alguns motivos vagos: é perda de tempo (não ganho nada com isso), sou um péssimo programador (ou pasteleiro), dá preguiça (esse é o mais válido) e por aí vai o mimimi. Dessa forma, sempre passei ileso de eventos como o atual Google Code Jam, que pretende levar a categoria de código ofuscado para um novo patamar.
No entanto, esse ano apareceram dois motivos que me levaram a gastar cinco minutos de paciência com as historinhas bestas da equipe do Google. Primeiro o Python, que desde 2013 tem renovado em mim a sensação que programar ainda é divertido (e que o pessoal da Microsoft e do padrão C&#43;&#43; tinham tirado de mim há muito tempo com seus compiladores cada vez mais complexos/lentos e as IDEs que demoram o tempo do cafezinho para abrir). Segundo o que move o mundo: a concorrência. Minha digníssima esposa, levada por alguns pontos-extra na faculdade (uma iniciativa até que louvável do professor), resolveu participar da primeira fase (a classificação desta fase também dava pontos).
O fato é que depois desses cinco minutos eu simplesmente não consegui parar até o minuto final das 23 horas (horário de Brasília) de domingo, quando o tempo-limite esgotou. O aspecto mais divertido do Code Jam é que há liberdade total para a ferramenta que você pretende usar: linguagens de programação, Excel, uma calculadora ou apenas seu cérebro. Você recebe uma &amp;quot;missão&amp;quot; e um arquivo de entrada e precisa cuspir um arquivo de saída de acordo com a missão. Apenas isso. O resto fica por conta da criatividade dos codadores e gambiarreiros de plantão.
Todos os exercícios levam em consideração um arquivo de entrada que possui em sua primeira linha o número de testes que serão feitos e em seguida um número determinado de linhas e parâmetros, geralmente divididos por espaço. O primeiro problema, por exemplo, apenas considerava a suposição de cartas em pequeno truque de mágica e recebia como entrada a disposição dessas cartas junto com a escolha da fileira que o participante dizia onde estava a carta escolhida.
21 2 3 45 6 7 89 10 11 1213 14 15 1631 2 5 43 11 6 159 10 7 1213 14 8 16 import sysf = open(sys.argv[1])total = int(f.readline())for case in range(0, total):guess1 = int(f.readline())row1 = Nonefor i in range(1, 5):row = f.readline().split()if i == guess1:row1 = rowguess2 = int(f.readline())row2 = Nonefor i in range(1, 5):row = f.readline().split()if i == guess2:row2 = rowcards = list(set(row1) &amp;amp; set(row2))if len(cards) == 1:print &amp;#39;Case #&amp;#39; &#43; str(case&#43;1) &#43; &amp;#39;: &amp;#39; &#43; cards[0]elif len(cards) &amp;gt; 1:print &amp;#39;Case #&amp;#39; &#43; str(case&#43;1) &#43; &amp;#39;: Bad magician!&amp;#39;else:print &amp;#39;Case #&amp;#39; &#43; str(case&#43;1) &#43; &amp;#39;: Volunteer cheated!&amp;#39;O segundo exercício já envolvia um jogo bem divertido em que o jogador ficava clicando em cookies como se não houvese amanhã. Esse deu um pouco mais de trabalho, mas foi mais divertido que o primeiro.
import sysdef CookieClicker(farmCost, farmIncrement, cookieTarget):cookiePerSecond = 2.0bestTime = cookieTarget / cookiePerSecond # melhor tempo soh fazendo cookies cookieFarmTime = cookieTarget / (cookiePerSecond &#43; farmIncrement) # melhor tempo ja com fazenda criada farmTime = farmCost / cookiePerSecond &#43; cookieFarmTime # quanto vai custar fazer a fazenda e depois fazer cookies com a fazenda while farmTime &amp;lt; bestTime: # enquanto fazer a fazenda custar menos tempo que soh fazer cookies... bestTime = farmTime # por enquanto melhor tempo cookiePerSecond = cookiePerSecond &#43; farmIncrement # novo tempo para fazer cookies (mais uma fazenda ja criada) farmTime = farmTime - cookieFarmTime # tiramos o tempo de soh fazer cookies para fazer mais uma fazenda cookieFarmTime = cookieTarget / (cookiePerSecond &#43; farmIncrement) # novo tempo com mais uma fazenda criada farmTime = farmTime &#43; farmCost / cookiePerSecond &#43; cookieFarmTime # agora com o novo tempo de fazer outra fazenda e soh cookies return bestTimef = open(sys.argv[1])total = int(f.readline())for case in range(1, total &#43; 1):args = [float(i) for i in f.readline().split()]ret = CookieClicker(args[0], args[1], args[2])print &amp;#39;Case #&amp;#39; &#43; str(case) &#43; &amp;#39;: &amp;#39; &#43; &amp;#39;{0:.7f}&amp;#39;.format(ret)Já o terceiro... o terceiro passa. Vamos para o quarto, um dos mais instigantes, pois envolve duas regras distintas de um jogo e a otimização das melhores estratégias para ambos. Isso consumiu bem mais tempo que os outros dois iniciais, pois lembro de ter me isolado por uma hora para conseguir colocar tudo na cabeça.
import sysdef BestBlock(block, blocks):bestBlock = 0for i in range(len(blocks) - 1, -1, -1):if blocks[i] &amp;lt; block: breakbestBlock = blocks[i]if not bestBlock:bestBlock = blocks[0]return bestBlockdef War(naomi, ken):naomi = sorted(naomi)ken = sorted(ken)naomiCount = 0while len(naomi):naomiBlock = naomi[-1]kenBlock = BestBlock(naomiBlock, ken)if naomiBlock &amp;gt; kenBlock:naomiCount = naomiCount &#43; 1#print str(naomiBlock) &#43; &amp;#39; vs &amp;#39; &#43; str(kenBlock) &#43; &amp;#39;: &amp;#39; &#43; str(naomiCount) naomi.remove(naomiBlock)ken.remove(kenBlock)return naomiCountdef WarCheat(naomi, ken):naomi = sorted(naomi)ken = sorted(ken)naomiCount = 0while len(naomi):naomiTold = 0naomiBlock = naomi[-1]bestKen = ken[-1]if naomiBlock &amp;gt; bestKen:naomiTold = bestKen &#43; 0.00000001else:naomiTold = bestKen - 0.00000001kenBlock = BestBlock(naomiTold, ken)naomiBlock = BestBlock(kenBlock, naomi)if naomiBlock &amp;gt; kenBlock:naomiCount = naomiCount &#43; 1#print str(naomiTold) &#43; &amp;#39;(&amp;#39; &#43; str(naomiBlock) &#43; &amp;#39;) vs &amp;#39; &#43; str(kenBlock) &#43; &amp;#39;: &amp;#39; &#43; str(naomiCount) naomi.remove(naomiBlock)ken.remove(kenBlock)return naomiCountf = open(sys.argv[1])total = int(f.readline())for case in range(1, total &#43; 1):f.readline()naomi = [float(i) for i in f.readline().split()]ken = [float(i) for i in f.readline().split()]war = War(naomi, ken)warCheat = WarCheat(naomi, ken)print &amp;#39;Case #&amp;#39; &#43; str(case) &#43; &amp;#39;: &amp;#39; &#43; str(warCheat)&#43; &amp;#39; &amp;#39; &#43; str(war)Já o terceiro foi um fracasso total. Tentei de todas as maneiras resolver o impasse de descobrir qual disposição de um jogo de campo minado poderia ser resolvido em apenas um clique (parece o jogo oposto do viciado clicador de cookies), mas falhei miseravelmente. E desconfio o porquê. Primeiro entendo que meu perfeccionismo me impediu de realizar uma checagem padrão para exceções já conhecidas (quando há apenas uma linha ou coluna, quando há apenas um espaço sem minas, etc). Eu pensei: se o Google fez esse problema, ele deve ter bolado alguma solução genérica que independa de ifs. Bom, não que eu saiba. Depois de terminado o tempo dei uma olhada em algumas soluções dos competidores e não achei nenhuma solução que usasse algum algoritmo maluco e genérico (não achei nenhum indiano, contudo).
Eis a solução porca e mal-resolvida (alguns pontos do códido foram feitos depois de ver o código de outrem):
import sysdef FieldToString(field):ret = &amp;#39;\n&amp;#39;for r in field:for c in r:ret = ret &#43; str(c)ret = ret &#43; &amp;#39;\n&amp;#39;return retdef CountMines(field, r, c):ret = 0row = len(field)col = len(field[0])if r &amp;lt; row-1 and field[r&#43;1][c] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if c &amp;lt; col-1 and field[r][c&#43;1] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if r &amp;gt; 0 and field[r-1][c] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if c &amp;gt; 0 and field[r][c-1] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if r &amp;lt; row-1 and c &amp;lt; col-1 and field[r&#43;1][c&#43;1] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if r &amp;gt; 0 and col &amp;gt; 0 and field[r-1][c-1] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if r &amp;lt; row-1 and c &amp;gt; 0 and field[r&#43;1][c-1] == &amp;#39;*&amp;#39;: ret = ret &#43; 1if r &amp;gt; 0 and c &amp;lt; col-1 and field[r-1][c&#43;1] == &amp;#39;*&amp;#39;: ret = ret &#43; 1return retdef ExpandClick(field, r, c):if field[r][c] != &amp;#39;0&amp;#39;: returndef Expand(field, r, c):if field[r][c] == &amp;#39;.&amp;#39;:field[r][c] = str(CountMines(field, r, c))ExpandClick(field, r, c)row = len(field)col = len(field[0])if r &amp;lt; row-1 and field[r&#43;1][c] != &amp;#39;*&amp;#39;:Expand(field, r&#43;1, c)if c &amp;lt; col-1 and field[r][c&#43;1] != &amp;#39;*&amp;#39;:Expand(field, r, c&#43;1)if r &amp;gt; 0 and field[r-1][c] != &amp;#39;*&amp;#39;:Expand(field, r-1, c)if c &amp;gt; 0 and field[r][c-1] != &amp;#39;*&amp;#39;:Expand(field, r, c-1)if r &amp;lt; row-1 and c &amp;lt; col-1 and field[r&#43;1][c&#43;1] != &amp;#39;*&amp;#39;:Expand(field, r&#43;1, c&#43;1)if r &amp;gt; 0 and col &amp;gt; 0 and field[r-1][c-1] != &amp;#39;*&amp;#39;:Expand(field, r-1, c-1)if r &amp;lt; row-1 and c &amp;gt; 0 and field[r&#43;1][c-1] != &amp;#39;*&amp;#39;:Expand(field, r&#43;1, c-1)if r &amp;gt; 0 and c &amp;lt; col-1 and field[r-1][c&#43;1] != &amp;#39;*&amp;#39;:Expand(field, r-1, c&#43;1)def FieldClicker(field):row = len(field)col = len(field[0])for r in range(row):for c in range(col):if field[r][c] == &amp;#39;C&amp;#39;:field[r][c] = str(CountMines(field, r, c))ExpandClick(field, r, c)breakreturn fielddef FieldValidate(field):ret = Truerow = len(field)col = len(field[0])for r in range(row):for c in range(col):if field[r][c] == &amp;#39;.&amp;#39;:ret = Falsebreakreturn retdef FieldRender(row, col, mines):field = []for i in range(row):field.append([&amp;#39;.&amp;#39;] * col)if row == 2:nextRow = 0nextCol = 0while mines:field[nextRow][nextCol] = &amp;#39;*&amp;#39;nextRow = nextRow &#43; 1if nextRow == row:nextRow = 0nextCol = nextCol &#43; 1mines = mines - 1field[0][col-1] = &amp;#39;C&amp;#39;elif col == 2:nextRow = 0nextCol = 0while mines:field[nextRow][nextCol] = &amp;#39;*&amp;#39;nextCol = nextCol &#43; 1if nextCol == col:nextRow = nextRow &#43; 1nextCol = 0mines = mines - 1field[row-1][0] = &amp;#39;C&amp;#39;elif row * col - mines &amp;lt; 3:nextRow = row - 1nextCol = 0while mines:field[nextRow][nextCol] = &amp;#39;*&amp;#39;nextCol = nextCol &#43; 1if nextCol == col:nextRow = nextRow - 1nextCol = 0mines = mines - 1field[0][col-1] = &amp;#39;C&amp;#39;else:for r in range(len(field)):for c in range(len(field[0])):field[r][c] = &amp;#39;*&amp;#39;if row * col - mines &amp;gt;= 9 and row &amp;gt;= 3 and col &amp;gt;= 3:empties = row * col - minesnextRow = 0nextCol = 0while empties:return fielddef Mine(row, col, mines):if row * col - mines == 2 and row &amp;gt; 1 and col &amp;gt; 1:return &amp;#39;Impossible!&amp;#39;if row * col - mines == 3:return &amp;#39;Impossible!&amp;#39;elif row * col - mines == 5:return &amp;#39;Impossible!&amp;#39;elif row * col - mines == 7:return &amp;#39;Impossible!&amp;#39;else:return FieldToString(FieldRender(row, col, mines))f = open(sys.argv[1])total = int(f.readline())for case in range(1, total &#43; 1):field = [int(i) for i in f.readline().split()]print &amp;#39;Case #&amp;#39; &#43; str(case) &#43; &amp;#39;: &amp;#39; &#43; Mine(field[0], field[1], field[2])#############################################################################3 def FieldRenderWrong(row, col, mines):field = []for i in range(row):field.append([&amp;#39;.&amp;#39;] * col)def GetNextRow(field, clickRow, clickCol):row = len(field)col = len(field[0])nextRow = 0nextCol = 0rowDist = 0colDist = 0for r in range(row):for c in range(col):if field[r][c] == &amp;#39;.&amp;#39;:rDist = abs(r - clickRow)cDist = abs(c - clickCol)totDist = rDist &#43; cDistcurrTotDist = rowDist &#43; colDistif totDist &amp;gt; currTotDist:nextRow = rrowDist = rDistnextCol = ccolDist = cDistelse:rowCount = 0for r2 in range(row):if field[r2][c] == &amp;#39;*&amp;#39;:rowCount = rowCount &#43; 1colCount = 0for c2 in range(col):if field[r][c2] == &amp;#39;*&amp;#39;:colCount = colCount &#43; 1lastRow = rowCount == row - 1lastCol = colCount == col - 1if lastRow or lastCol:nextRow = rrowDist = rDistnextCol = ccolDist = cDistreturn nextRow, nextColclickRow = 0clickCol = col-1field[clickRow][clickCol] = &amp;#39;C&amp;#39;nextRow, nextCol = GetNextRow(field, clickRow, clickCol)while mines:field[nextRow][nextCol] = &amp;#39;*&amp;#39;nextRow, nextCol = GetNextRow(field, clickRow, clickCol)mines = mines - 1return fieldNão, eu não usei o Google para descobrir a lógica por trás do problema. Vai que os caras ficam monitorando quem fica fazendo pesquisas. E, não, tampouco usei o Bing. Não sou masoquista a esse ponto.
PS: Bom, estou na próxima fase. Veremos o que o futuro nos espera. Esse programador foi fisgado pelo campeonato de pastéis.
</description>
</item>

     
        <item>
  <title>Madoka Magica</title>
  <link>http://www.caloni.com.br/madoka-magica/</link>
  <pubDate>2014-04-14</pubDate>
  
  <guid>http://www.caloni.com.br/madoka-magica/</guid>
  <description>A revisita a este animê que para mim ainda é meu favorito -- pela originalidade e pela fuga do lugar-comum e dos roteiros fáceis que a maioria das adaptações dos quadrinhos japoneses são submetidos -- foi feita em apenas uma noite. Mais de quatro horas depois posso reafirmar com convicção: é uma obra ousada para seu formato tanto em história quanto na direção/edição/arte. Desafia o espectador a esquecer os detalhes centrais de uma história que vai se abrindo muito lentamente, e sua força é sentida exatamente por esse cuidado em cada detalhe.
Madoka Mágica é um trabalho caricatual que segue à risca a cartilha de heroinas de cosplay (ou, diria, se usa desse artifício como metalinguagem e crítica ao gênero), mas, mais do que isso, segue um tratamento estilizado e inspirado levemente no surrealismo, mas que empurra a animação para além das histórias de luta ao lidar com conceitos complexos como auto-sacrifício, religião, viagens no tempo, destino e física teórica (além de vida extraterrena) sem perder seu ritmo com história secundárias bobinhas para fazer rir/ganhar tempo. É uma fantasia com um pé na ciência, um pé na filosofia e outro pé na arte. Esse tripé mantém a câmera posicionada nos lugares mais inusitados para capturar cada quadro como se esse fosse uma obra de arte única a resumir aquele momento através de sutis e significativos movimentos.
E há vários momentos que merecem ser congelados para nossa apreciação.
A história gira em torno de Madoka Kaname, uma garota comum que encontra um bicho estranho e mágico que revela que existem garotas mágicas que lutam contra bruxas e salvam pessoas de suicídios. Na verdade, revela mais: ela e sua amiga, Sayaka Miki, podem se tornar garotas mágicas também, e a recompensa por este feito heróico é terem um desejo, qualquer desejo, realizado pelo tal bicho mágico.
O curioso da série é que ela não tem pressa em realizar o que 90% das produções semelhantes ocidentais fariam: um grupo de garotas lutando contra o mal a la Meninas Superpoderosas. No fundo, o &amp;quot;mal&amp;quot; aqui não está materializado e nem tem desejo de fúria. Ele é um conceito, e relativo, dependendo do ponto de vista. Sequer há emoções em jogo. Na verdade, é mais profundo que isso: a emoção aqui é usada de uma maneira completamente diferente. Uma Meninas Superpoderosas para gente grande.
Mas além da empolgante história o que cativa mesmo o espectador é a qualidade narrativa criada não apenas a partir dos sensacionais traços dos criadores, mas de uma invejável e coesa trilha sonora (Yuki Kajiura) e uma fotografia de cair o queixo (Shinichiro Eto). Tudo isso, com a edição de Rie Matsuhara, combina em uma experiência sensorial cada vez mais fácil de ser encontrada em séries de TV ambiciosas e menos nos cinemas comerciais.
</description>
</item>

     
        <item>
  <title>Houaiss para Babylon em Python!</title>
  <link>http://www.caloni.com.br/houaiss-para-babylon-em-python/</link>
  <pubDate>2014-02-27</pubDate>
  
  <guid>http://www.caloni.com.br/houaiss-para-babylon-em-python/</guid>
  <description>O Fabio Montefuscolo expandiu mais ainda o acesso do conversor Houaiss para Babylon implementando uma versão em Python, uma linguagem que estou aprendendo a adorar. Tudo é mais simples, rápido e direto em Python, e o código que ele escreveu utiliza todo esse potencial:
#!/usr/bin/python2 # -*- coding: utf-8 -*- # # Coloque esse script na pasta com os arquivos dhx. # O resultado estarÃ¡ em iso-8859-1 # # # Segui o tutorial em http://www.caloni.com.br/conversor-de-houaiss-para-babylon-parte-1 # import osfiles = os.listdir(&amp;#39;.&amp;#39;)for arq in files:if not arq.endswith(&amp;#39;dhx&amp;#39;):continueprint &amp;#39;Abrindo &amp;#34;%s&amp;#34;&amp;#39; % arqorigin = open(arq, &amp;#39;r&amp;#39;)target = open(&amp;#39;%s.txt&amp;#39; % arq, &amp;#39;w&#43;&amp;#39;)char = origin.read(1)while char:byte = ord(char) &#43; 0x0Bnew_char = chr(byte % 256)target.write(new_char)char = origin.read(1)origin.close()target.close()</description>
</item>

     
        <item>
  <title>remove_if até remove, só que diferente</title>
  <link>http://www.caloni.com.br/remove_if-ate-remove-so-que-diferente/</link>
  <pubDate>2014-01-21</pubDate>
  
  <guid>http://www.caloni.com.br/remove_if-ate-remove-so-que-diferente/</guid>
  <description>A surpresa de hoje foi descobrir (vejam só) que o remove_if, como todo algoritmo da STL, deve ser olhado de perto antes de usado. Nesse caso em específico porque, apesar do nome, a função NÃO remove elementos, mas os sobrescreve.
Imagine uma função que usa remove_if para remover todas as idades de potenciais lolitas:
void RemoveIfLolita(vector&amp;lt;int&amp;gt;&amp;amp; ages){remove_if(ages.begin(), ages.end(), [&amp;amp;](int age) { return age &amp;lt; 18; } );}Ou até sua contraparte usando um array C:
void RemoveIfLolita(int* ages, int size){remove_if(ages, ages &#43; size, [&amp;amp;](int age) { return age &amp;lt; 18; } );}Um uso trivial pode não cuspir um resultado trivial, ou seja, os elementos não serão removidos como se espera:
#include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std;void RemoveIfLolita(int* ages, int size){remove_if(ages, ages &#43; size, [&amp;amp;](int age) { return age &amp;lt; 18; } );}void RemoveIfLolita(vector&amp;lt;int&amp;gt;&amp;amp; ages){remove_if(ages.begin(), ages.end(), [&amp;amp;](int age) { return age &amp;lt; 18; } );}int main(){vector&amp;lt;int&amp;gt; ages;ages.push_back(10);ages.push_back(21);ages.push_back(66);ages.push_back(18);ages.push_back(16);ages.push_back(15);ages.push_back(8);ages.push_back(24);ages.push_back(12);ages.push_back(20);ages.push_back(13);RemoveIfLolita(ages);cout &amp;lt;&amp;lt; &amp;#34;Vector (&amp;#34; &amp;lt;&amp;lt; ages.size() &amp;lt;&amp;lt; &amp;#34;):\n&amp;#34;;for_each(ages.begin(), ages.end(), [&amp;amp;](int age) { cout &amp;lt;&amp;lt; age &amp;lt;&amp;lt; endl; });int newAges[] = { 10, 21, 66, 18, 16, 15, 8, 24, 12, 20, 13, 13 };const int newAgesSz = (int) ( sizeof(newAges) / sizeof(int) );RemoveIfLolita(newAges, newAgesSz);cout &amp;lt;&amp;lt; &amp;#34;\n\nArray (&amp;#34; &amp;lt;&amp;lt; newAgesSz &amp;lt;&amp;lt; &amp;#34;):\n&amp;#34;;for_each(newAges, newAges &#43; newAgesSz, [&amp;amp;] (int age) { cout &amp;lt;&amp;lt; age &amp;lt;&amp;lt; endl; } );}
Isso ocorre porque o comportamento do remove_if é copiar todos os elementos que retornem false (não remova) e pular elementos que retornem true (remova). No entanto, o tamanho do contêiner, e consequentemente seu ponteiro end(), permanecem o mesmo.

De acordo com o saite cplusplus.com, o algoritmo STL é previsível, simples, e por isso mesmo sujeito a otimizações do compilador:
template &amp;lt;class ForwardIterator, class UnaryPredicate&amp;gt;ForwardIterator remove_if (ForwardIterator first, ForwardIterator last,UnaryPredicate pred){ForwardIterator result = first;while (first!=last) {if (!pred(*first)) {*result = *first;&#43;&#43;result;}&#43;&#43;first;}return result;}Para obtermos qual seria o &amp;quot;novo end()&amp;quot;, precisamos obter esse valor do retorno de remove_if. Com base nisso, podemos alterar o tamanho do contêiner ajustado:
#include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std;int RemoveIfLolita(int* ages, int size){auto newEnd = remove_if(ages, ages &#43; size, [&amp;amp;](int age) { return age &amp;lt; 18; } );return newEnd - ages;}void RemoveIfLolita(vector&amp;lt;int&amp;gt;&amp;amp; ages){auto newEnd = remove_if(ages.begin(), ages.end(), [&amp;amp;](int age) { return age &amp;lt; 18; } );ages.resize(distance(ages.begin(), newEnd));}int main(){vector&amp;lt;int&amp;gt; ages;ages.push_back(10);ages.push_back(21);ages.push_back(66);ages.push_back(18);ages.push_back(16);ages.push_back(15);ages.push_back(8);ages.push_back(24);ages.push_back(12);ages.push_back(20);ages.push_back(13);RemoveIfLolita(ages);cout &amp;lt;&amp;lt; &amp;#34;Vector (&amp;#34; &amp;lt;&amp;lt; ages.size() &amp;lt;&amp;lt; &amp;#34;):\n&amp;#34;;for_each(ages.begin(), ages.end(), [&amp;amp;](int age) { cout &amp;lt;&amp;lt; age &amp;lt;&amp;lt; endl; });int newAges[] = { 10, 21, 66, 18, 16, 15, 8, 24, 12, 20, 13, 13 };int newAgesSz = (int) ( sizeof(newAges) / sizeof(int) );newAgesSz = RemoveIfLolita(newAges, newAgesSz);cout &amp;lt;&amp;lt; &amp;#34;\n\nArray (&amp;#34; &amp;lt;&amp;lt; newAgesSz &amp;lt;&amp;lt; &amp;#34;):\n&amp;#34;;for_each(newAges, newAges &#43; newAgesSz, [&amp;amp;] (int age) { cout &amp;lt;&amp;lt; age &amp;lt;&amp;lt; endl; } );}
Esse C&#43;&#43;... intuitivo como nunca!
</description>
</item>

     
        <item>
  <title>BovespaBacktesting</title>
  <link>http://www.caloni.com.br/bovespabacktesting/</link>
  <pubDate>2014-01-08</pubDate>
  
  <guid>http://www.caloni.com.br/bovespabacktesting/</guid>
  <description>Eu não sou apenas um programador: sou um especulador. Ou, para quem ficou com medo, um investidor. Ficou bonito, agora? Trocando em miúdos, isso quer dizer que muitas vezes aposto na bolsa de valores, aquela onde as pessoas ganham e perdem dinheiro loucamente. Porém, assim como faço com minha carreira de desenvolvedor, não deixo de estudar e aprimorar minhas habilidades. Tirando alguns anos de estudo com livros de finanças, economia e contabilidade, foi com base nisso que eu fiz uma série de scripts que realiza operações de backtesting nos papéis da Bovespa.

Que mané backtesting? Backtesting é uma maneira dos especuladores terem uma noção de quão bom ou ruim é sua estratégia de compra e venda. É uma maneira profissional de se aproximar do mercado caótico das ações. Basicamente um backtesting simula o que o especulador faria na vida real com um histórico razoável de variação de preços das ações que pretende operar. Se esse monte de palavras novas neste blogue está te deixando com medo, recomendo dar uma passada no Senhor Mercado (lá você irá também aprender mais sobre técnicas de backtesting).
Vamos supor que minha ideia de estratégia seja comprar quando o preço de uma determinada ação estiver na metade do seu topo histórico e vender quando ele estiver no dobro do momento da compra. Uma estratégia bem tosca, mas se fizer dinheiro, quem liga para vaidade? Outra estratégia mais refinada usa médias móveis para estabelecer pontos de compra e venda dependendo da tendência do mercado. Qual das duas dá mais dinheiro? Existem duas maneiras de saber: a dolorosa e a indolor. A dolorosa seria sacar uma grana do banco e começar a operar em sua corretora favorita seguindo ambas as estratégias e ver qual te deixou mais rico e qual te levou à falência. A indolor seria baixar o histórico de preços dos papéis que está interessado em usar essas estratégias e rodar uma simulação que opere seguindo ambas as estratégias e descubra qual é a perdedora. Qual você preferiria?
OK, esse assunto já está ficando bem monótono para quem acompanha um blogue de programação. Vamos ao código!
GitHub na veia 
O projeto que mantenho no GitHub possui algumas ideias que gostaria de compartilhar com todos que estão interessados em realizar um backtesting, independente de sua estratégia. A primeira delas seria de onde baixar o histórico de preços de maneira simples e barata. Eu recomendo e uso o software Grafix, que consegue baixar as informações diretamente do saite da Bovespa e realizar os ajustes necessários para montar e exibir as informações. Com base no banco de dados do Grafix é que o BovespaBacktesting (meu projeto) importa as informações que ele precisa. Ele irá importar apenas os códigos que estiverem em uma lista disponível no arquivo data/filterCodes relativo de onde o script estiver rodando. Esse arquivo é apenas texto com um código por linha.
def import_quote_from_jgrafix(dataPath):A partir dessa importação é possível realizar queries com as variações diárias, semanais e mensais dos preços dos ativos conhecidos (a mesma lista de código). A própria lista de ativos conhecidos está disponível através de uma função, tornando a iteração simples e direta.
def load_quote_data(code):def load_week_quote_data(code):def load_month_quote_data(code):def load_known_codes():Com essas informações de preço é possível aplicar qualquer tipo de indicador. O BovespaBackteting possui apenas os mais usuais, mas basta implementar a lógica de tratamento em Python, o que não deve consumir nem muito tempo nem muitos neurônios, pois com o histórico disponível tudo fica mais fácil.
def sma(quote, days = 10):def ema(quote, days = 10):def macd(quote, shortDays = 12, longDays = 26, signalDays = 9):def stop_safeplace(quote, multiplier = 4):def stop_atr(quote, multiplier = 3):As funções-macro calculam trades (operações) a partir de alguns parâmetros definidos no código ou por parâmetros. As versões do BovespaBacktesting foram variando nesse sentido. Ainda não há uma maneira saudável de comparar diversas estratégias, pois o que eu tenho feito basicamente é alterar alguns parâmetros, rodar o backtesting e exportar para um CSV (função já disponível).
def calc_trades(code, trend, signal):def calc_all_trades():def calc_total_trades(equity, risk, b1, bs):def calc_money(trades, equity, risk, deposit, wage):def backtesting_analysis():Já existem algumas firulas caso você esteja pensando em uma estratégia em que seja viável viver de operar, como cálculo de salário e a inclusão de variáveis que levem em conta que parte do dinheiro ganho será usado. Ainda é um código bem tosco, mas funciona e pode ser o ponto de entrada de quem deseja conhecer mais sobre o mercado de ações e como os profissionais conseguem tirar dinheiro deste grande cassino.
</description>
</item>

     
        <item>
  <title>Mais um CPP MVP</title>
  <link>http://www.caloni.com.br/mais-um-cpp-mvp/</link>
  <pubDate>2013-10-02</pubDate>
  
  <guid>http://www.caloni.com.br/mais-um-cpp-mvp/</guid>
  <description>Tenho o prazer de informar à comunidade C/C&#43;&#43; que vocês possuem mais um representante formal. Quer dizer, pelo menos no que diz respeito à Microsoft: eu.
Graças à indicação de meu amigo Strauss (segundo MVP brasileiro seguido de Fabio Galuppo) e do meu histórico de artigos no blogue (alguns no Code Project), além da minha parca contribuição à comunidade C/C&#43;&#43; Brasil, recebi essa que significa uma nomeação importante não apenas para mim, mas para fortalecer a imagem de que existe uma comunidade da linguagem no país e está tão ativa que vira e mexe premia um ou outro membro mais &amp;quot;tradicional&amp;quot; desse grupo de especialistas, verdadeiros mestres dessa(s) que ainda é (são) minhas linguagens favoritas no que diz respeito a &amp;quot;linguagens de uso geral multiplataforma e de alta performance&amp;quot;.
O que deve ocorrer com essa nomeação, acredito eu (tenho fé), é que eu volte a dedicar parte do meu tempo a &amp;quot;espalhar a palavra&amp;quot;, seja aqui no blog, no nosso mundialmente conhecido grupo ou em outros cantos da internet. É hora de diminuir meu ímpeto cinéfilo e voltar a colaborar com os que buscam aprender algo mais do que pura lógica: a escovar os bits com água e sabão (e WinDbg).
Obrigado a todos os envolvidos! =)
UPDATE: Dando uma vasculhada no saite de MVPs da Microsoft, por região, também encontrei o José Antônio Leal Farias, que de acordo com sua biografia reside em Campina Grande (PB) e trabalha com jogos.
</description>
</item>

     
        <item>
  <title>Depuração na nuvem com o novo Visual Studio</title>
  <link>http://www.caloni.com.br/depuracao-na-nuvem/</link>
  <pubDate>2013-04-02</pubDate>
  
  <guid>http://www.caloni.com.br/depuracao-na-nuvem/</guid>
  <description>Uma das novidades do futuro Visual Studio pouco comentada ainda em fóruns por seu caráter sigiloso e ainda em testes (mas que pode facilmente ser observada pela engenharia reversa dos binários do Visual C&#43;&#43;) é a possibilidade de depurar trechos de código &amp;quot;na nuvem&amp;quot;, ou seja, dentro dos gigantescos servidores de clusters de serviços de escalabilidade da Amazon, do Google e, claro, da Microsoft.

Já é conhecido que será possível inserir comentários no código-fonte com o formato @nickname e incluir na listagem de bugs o estilo das #hashtags para que programadores vinculados à sua rede social possam enxergar referências a outros programadores e verificar o Developer TrendTopics, como um #blame-joel-on-software. Porém, o que poucos sabem, é que será também possível depurar as APIs de redes sociais em tempo real. Ou seja, caso seja usado o método Twitter::Tweet(), logo após o retorno da chamada será possível aguardar por uma resposta dos usuários envolvidos:
Twitter::Tweetpush ebpmov ebp, esp000007f9`bd590000 call __internal_tweet000007f9`bd5900ac call _checkesp000007f9`bd5900af ...000007f9`bd5900ff ...000007f9`bd59015f &amp;lt;span style=&amp;quot;color: #ff0000;&amp;quot;&amp;gt;call __internal_wait_for_replies&amp;lt;/span&amp;gt;000007f9`bd59017f pop esp... Ou seja, logo será possível além de perder horas navegando em saites de rede social perder também horas depurando os comentários e respostas das pessoas nessas redes direto do Visual Studio. É a Microsoft pensando nos programadores que gostam de perder tempose envolver com pessoas (ainda que virtuais) e discussões acaloradas sobre tópicos irrelevantes e absurdos (ainda que virtuais).
</description>
</item>

     
        <item>
  <title>Décimo Encontro de Programadores de C e C&#43;&#43;</title>
  <link>http://www.caloni.com.br/10-encontro-de-programadores-de-c-c-2/</link>
  <pubDate>2013-03-28</pubDate>
  
  <guid>http://www.caloni.com.br/10-encontro-de-programadores-de-c-c-2/</guid>
  <description>Ando tendo alguns problemas de postagem no meu blog, por isso o aviso não foi feito com mais antecedência. Peço desculpas aos organizadores do evento, pois sei que todo tipo de divulgação é útil.
Chegamos em mais um evento do grupo C/C&#43;&#43; Brasil, dessa vez honrando a parte &amp;quot;Brasil&amp;quot; do nome. Sim, nosso próximo evento será fora de Sampa, mas ainda próximo, no Rio de Janeiro! Até onde eu sei, o primeiro que se tem notícia. Finalmente o grupo terá a chance de se reunir na terra de programadores C&#43;&#43; de referência internacional como Pedro Lamarão.
Os detalhes do evento estão, logicamente, no saite oficial do grupo. Ele ocorrerá no dia 25 de maio (ainda dá tempo de comprar passagem) e terá sua programação divulgada já em abril. Infelizmente o tempo para o call for papers quase se esgotou (vai até dia 30 desse mês).
Enfim, essa é a chance de intercâmbio esperada entre nossa comunidade de programadores C/C&#43;&#43; de outras partes do país e que ainda não tiveram a oportunidade de participar dos nossos tradicionais encontros.
Correção: esse encontro foi o décimo, diferente do inicialmente proposto. Ou mudamos a base para 8 =P
Atualização: o encontro rolou, pelos comentários foi bem legal e em breve teremos slides, vídeos, depoimentos, etc.
</description>
</item>

     
        <item>
  <title>GetTickCount não é um gerador de IDs únicos</title>
  <link>http://www.caloni.com.br/gettickcount-nao-e-um-gerador-de-ids-unicos/</link>
  <pubDate>2012-06-25</pubDate>
  
  <guid>http://www.caloni.com.br/gettickcount-nao-e-um-gerador-de-ids-unicos/</guid>
  <description>Muitas vezes uma solução intuitiva não é exatamente o que esperamos que seja quando o código está rodando. Gerar IDs únicos, por exemplo. Se você analisar por 5 minutos pode chegar à conclusão que um simples GetTickCount, que tem resolução de clock boa e que se repete apenas depois de 50 dias pode ser um ótimo facilitador para gerar IDs exclusivos durante o dia.

Porém, nada como código para provar que estamos errados:
#include &amp;lt;windows.h&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;list&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;time.h&amp;gt;using namespace std;list&amp;lt;DWORD&amp;gt; g_ticks;list&amp;lt;LONG&amp;gt; g_increments;DWORD WINAPI Ticks(PVOID){for( int i = 1; i &amp;lt;= 100; &#43;&#43;i ){DWORD tick = GetTickCount();g_ticks.push_back(tick);Sleep(rand() % 20);}return 0;}DWORD WINAPI Increment(PVOID){static LONG st_prevIncrement = 0;for( int i = 1; i &amp;lt;= 100; &#43;&#43;i ){LONG increment = InterlockedIncrement(&amp;amp;st_prevIncrement);g_increments.push_back(increment);Sleep(rand() % 20);}return 0;}int main(){const size_t threadsCount = 20;HANDLE threads[threadsCount];srand((unsigned int) time(0));for( size_t i = 0; i &amp;lt; threadsCount / 2; &#43;&#43;i )threads[i] = CreateThread(NULL, 0, Ticks, NULL, 0, NULL);for( size_t i = threadsCount / 2; i &amp;lt; threadsCount; &#43;&#43;i )threads[i] = CreateThread(NULL, 0, Increment, NULL, 0, NULL);WaitForMultipleObjects(threadsCount, threads, TRUE, INFINITE);for( auto it = g_ticks.begin(); it != g_ticks.end(); &#43;&#43;it ){DWORD tick = *it;size_t tickOccurrence = count(g_ticks.begin(), g_ticks.end(), tick);if( tickOccurrence &amp;gt; 1 ){cout &amp;lt;&amp;lt; &amp;#34;Ocorrencia de tick duplicado!\n&amp;#34;;break;}}for( auto it = g_increments.begin(); it != g_increments.end(); &#43;&#43;it ){DWORD tick = *it;size_t incrementOccurrence = count(g_increments.begin(), g_increments.end(), tick);if( incrementOccurrence &amp;gt; 1 ){cout &amp;lt;&amp;lt; &amp;#34;Ocorrencia de incremento duplicado!\n&amp;#34;;break;}}}O motivo do GetTickCount retornar números iguais remete tanto ao fato que o espaço de tempo entre uma execução e outra pode ser muito pequeno quanto ao fato de várias threads podem ser executadas efetivamente ao mesmo tempo em ambientes de dois ou mais cores.
Já o motivo do InterlockedIncrement funcionar sempre é porque aqui estamos usando uma solução de incremento atômico, ou seja, usamos a mesma base contadora e incrementamos ela em uma operação que não pode ocorrer ao mesmo tempo com outra thread.
O que aprendemos aqui? Que por mais que seja intuitiva uma solução, nunca podemos nos basear nas nossas falhas cabeças. Um computador está aí não apenas para ser mais rápido, mas para ser assertivo em nossas elucubrações. Nesse sentido, é o nosso companheiro vulcaniano.
</description>
</item>

     
        <item>
  <title>Problemas comuns no WinDbg e suas soluções</title>
  <link>http://www.caloni.com.br/problemas-comuns-no-windbg-e-suas-solucoes/</link>
  <pubDate>2012-05-27</pubDate>
  
  <guid>http://www.caloni.com.br/problemas-comuns-no-windbg-e-suas-solucoes/</guid>
  <description>Depois de uma agradável manhã e tarde acompanhando o curso de desenvolvimento de drivers do meu amigo Ferdinando voltei para a casa para brincar um pouco mais com o mundo kernel e voltar a encontrar problemas com o WinDbg &amp;amp; Cia que há mais ou menos 1 ano atrás não tinha.
Pesquisando por um problema específico envolvendo PDBs reencontrei o blogue do Ken Johnson, MVP Microsoft e analista por profissão e diversão, é conhecido por suas excelentes contribuições no mundo da depuração de sistema (notadamente WinDbg). Existe um post específico que ele escreveu para economizar tempo com problemas que ocorrem de vez em quando em uma sessão ou outra de depuração, mas nunca paramos tempo o suficiente para resolver.
Além de outros, ele lista alguns que particularmente já aconteceram comigo ou com colegas de depuração:
O WinDbg demora um tempo absurdo para processar o carregamento dos módulos e está usando tempo máximo de processamento em apenas uma CPU.
Isso ocorre porque existem breakpoints ainda não resolvidos. Resolva deixando apenas esses tipos de breakpoints que são absolutamente necessários, pois cada vez que um módulo é carregado o depurador precisa fazer o parser de cada um deles para verificar se ele já consegue resolve-lo.
Às vezes, porém, existe algum lixo nos workspaces carregados por ele que permanecem mesmo depois de apagarmos todos os breakpoints inúteis ou reiniciar o sistema. Em último caso, sempre podemos apagar o workspace do registro, em HKCU\Software\Microsoft\Windbg\Workspaces.
O WinDbg continua demorando décadas para analisar o carregamento, mas agora nem consome tanta CPU assim.
Isso ocorre porque na cadeia de paths para procurar por símbolos existe algum endereço de rede/internet errado que faz com que ele tenha que caminhar em falso diversas vezes. Esse e outros erros de símbolos sempre poderão ser analisados através do universal !sym noisy, que imprime todo tipo de informação útil do que pode dar errado durante um .reload explícito (eu digitei) ou implícito (lazy reload).
O WinDbg continua recusando carregar um símbolo que eu sei que existe e sei que é válido.
Talvez ele exista, mas por algum motivo foi copiado corrompido para o symbol server. Mais uma vez, !sym noisy nele e deve acontecer algum erro de E_PDB_CORRUPT. Nesse caso, apague o PDB culpado e tente de novo.
E, como brinde, um grande aliado da produtividade: como evitar que o WinDbg bloqueie seu PDB enquanto você precisa constantemente recompilar seu driver:
.reload -u modulo
Fonte: Blog do Nynaeve.
</description>
</item>

     
        <item>
  <title>Engenharia Reversa em Itajubá</title>
  <link>http://www.caloni.com.br/engenharia-reversa-em-itajuba/</link>
  <pubDate>2012-04-17</pubDate>
  
  <guid>http://www.caloni.com.br/engenharia-reversa-em-itajuba/</guid>
  <description>Essa segunda (ontem, 16 de abril de 2012) foi dia da minha palestra na Unifei, parte do II Composium Unifei, que reúne diversos profissionais e suas especialidades para que estudantes vejam o quão útil pode ser o curso de engenharia.
Tive o prazer de conversar com diversos alunos após a palestra, e me animou muito saber que existem pessoas no mundo acadêmico considerando a possibilidade de escovar bits como um meio de vida. Espero que muitos pesquisem e testem seus conhecimentos em torno da arte da Engenharia Reversa e, em casos extremos, entrem em contato comigo, pois estarei feliz em responder dúvidas pontuais ou direcionar melhor o aprendizado.
O que eu aprendi durante o evento foi que a Unifei já é um polo de engenharia dedicada à formação completa dos seus alunos e uma base de pesquisas realmente interessantes. No entanto, eles querem mais, e me parece que o futuro reserva muitos desafios e conquistas naquela região no que diz respeito à P&amp;amp;D de novas tecnologias em um grau de maturidade que o país, infelizmente, ainda não foi capaz de atingir.
Tudo isso, contudo, depende do grupo dos focados professores e organizadores do evento, cuja companhia tive o privilégio de compartilhar. É preciso tirar o chapéu para o que estão fazendo em Itajubá. E preciso agradecer a Rodrigo Almeida pelo convite para a palestra; foi de fato uma experiência única conhecer o campus e a maravilhosa cidade mineira.
</description>
</item>

     
        <item>
  <title>Le mystère du Snæfellsjökull</title>
  <link>http://www.caloni.com.br/the-mysteries-of-snafellsjokull/</link>
  <pubDate>2012-04-02</pubDate>
  
  <guid>http://www.caloni.com.br/the-mysteries-of-snafellsjokull/</guid>
  <description>Esse média-metragem islandês procura mostrar a história de uma região no país em que, de acordo com &amp;quot;relatos&amp;quot; e com a declaração e Júlio Verne de que ali seria o ponto de entrada para o centro da Terra, é um lugar de concentração de energias e poderia muito bem ser o ponto de contato com extraterrestres.
Oscilando relatos com canções da cultura, somos guiados sempre pela visão de pessoas que, de uma forma ou de outra, querem acreditar que o local é mais do que parece, escondendo seus segredos para os céticos e se abrindo para os que verdadeiramente veneram o que a região representa.
Parecendo um pouco canalhesco em suas opiniões unilaterais, no fundo pode ser considerada uma crítica velada sobre crenças exacerbadas da humanidade, ou, por outro lado, uma espécie de homenagem às pessoas que decidiram nutrir suas vidas com os mistérios não resolvidos de sua existência.
</description>
</item>

     
        <item>
  <title>Conteúdo da Palestra</title>
  <link>http://www.caloni.com.br/conteudo-da-palestra/</link>
  <pubDate>2012-03-11</pubDate>
  
  <guid>http://www.caloni.com.br/conteudo-da-palestra/</guid>
  <description>Uma nuvem mágica...
O evento de C&#43;&#43; na Microsoft (e organizada pelo nosso grupo C/C&#43;&#43; Brasil) aconteceu. Quem esteve lá teve o privilégio de passar algumas horas com programadores e entusiastas de ambas as linguagens e acompanhar o raciocínio dos palestrantes sobre Move Semantics, COM (good times), programação na placa gráfica e a solução para todos os problemas do universo (vulgo ZeroMQ). Fora isso, a palestra que me surpreendeu no dia foi a do Sr. Basílio Miranda, cômica e inspirada, mas sempre nos fornecendo um pouquinho mais de conhecimento acerca do Qt framework, que felizmente ainda não morreu (a Nokia recentemente liberou uma série nova que ainda usa a versão evoluída do Symbian), e graças a isso não precisaremos nos preocupar por enquanto com o destino de nosso ilustríssimo Sr. Basílio.
Fora isso tivemos uma telepalestra com um dos membro do time do Visual Studio. Mas, francamente, estou cada vez menos interessado no VS e mais no Vim. Portanto...
</description>
</item>

     
        <item>
  <title>RValue é o novo LValue</title>
  <link>http://www.caloni.com.br/rvalue-e-o-novo-lvalue/</link>
  <pubDate>2012-01-11</pubDate>
  
  <guid>http://www.caloni.com.br/rvalue-e-o-novo-lvalue/</guid>
  <description>As grandes discussões filosóficas que participei durante meu estudo da linguagem C, e mais tarde de C&#43;&#43;, muitas vezes convergiam para o significado místico daquela figura que nós da gramática da linguagem conhecemos como lvalue, ou l-value, ou left-value. Enfim, a definição de uma expressão que representa um lugar na memória e, portanto, pode ocupar o lado esquerdo de uma atribuição/cópia/passagem de argumentos qualquer. Porém, os &amp;quot;grandes&amp;quot; embates daquela época hoje parecem brincadeira de criança, como a diferença sutil entre &#43;&#43;x e x&#43;&#43; ou convergência de tipos em templates.
Agora o buraco é mais embaixo. Agora temos referências r-value.
Agora o mundo mudou.
Foi necessário que mudasse. C&#43;&#43;, conhecido internacionalmente como a vanguarda das linguagens, mesmo mantendo sua fama de alta performance, precisava voltar às suas origens performáticas de qualquer forma. O Criador da linguagem e seus seguidores estavam cientes: cópia de strings é uma coisa muito, muito má. Imperfect forwarding (direcionamento imperfeito?) é algo ainda pior, pois é mais sutil.
Todos concordam, então, que a mudança é necessária. Nem todos concordam, contudo, com o preço a ser pago. As coisas começam a ficar cada vez mais difíceis de entender, e agora, com r-values vindo à superfície, o universo de criaturas bizarras volta a mostrar as caras.
Desde o começo de meus estudos em C&#43;&#43; tenho admirado a linguagem com um certo distanciamento. Enquanto a linguagem C continua sendo o supra-sumo das linguagens de médio-nível, C&#43;&#43; continua sendo uma abominação cujos detalhes muitos preferem esquecer. Mas esquecer tem se tornado cada vez mais difícil frente às adaptações técnicas que a linguagem vem sofrendo.
No caso de Rvalues, se antes existia uma discussão interminável sobre sua inclusão no novo padrão, agora existem discussões acerca do que tudo isso significa. Existe até um ótimo guia (thanks to pepperchico) sobre as principais mudanças de conceitos, feito para simplificar o entendimento. Mas ele mesmo é exageradamente complexo para o programador médio. É de forçar a barra, mesmo. É pedir demais.
No próximo dia 28, sábado, nos reuniremos em mais um evento C&#43;&#43; organizado pelo Grupo C/C&#43;&#43; Brasil e pelos agora dois MVPs do Brasil, o veterano Fabio Galuppo e o novato Rodrigo Strauss (meu amigo, mas acima de tudo muito bem-vindo ao cargo). Estou na lista de palestrantes e conversarei com vocês sobre as otimizações que o famigerado RValue deve trazer à mesa. Espero conseguir entender um pouco mais sobre essa criatura fantástica até lá.
Se o Cebolinha for um programador C&#43;&#43;, deve estar se debatendo nesse momento.
 C&#43;&#43; Rvalue References Explained A Brief Introduction to Rvalue References Want Speed? Pass by Value MSDN Community: C&#43;&#43; Renaissance, São Paulo - SP.  Faça sua incrição!
</description>
</item>

     
        <item>
  <title>Vida e Software</title>
  <link>http://www.caloni.com.br/vida-e-software/</link>
  <pubDate>2011-10-22</pubDate>
  
  <guid>http://www.caloni.com.br/vida-e-software/</guid>
  <description>Desenvolver software está bem longe de ser uma ciência exata e muito próxima de ser uma ciência humana. Eu, pessoalmente, considero um ramo esotérico, onde vale muito mais ter a atitude de reconhecer que não temos muito controle sobre como as coisas funcionam do que querer ter as rédeas de algo desgovernado.
Não sei bem o motivo. Talvez por existirem muitas camadas o software não consegue ser normalizado como as propriedades físicas dos blocos que montam um prédio ou um transatlântico. Ou simplesmente existem variáveis demais na própria camada da aplicação que impedem a compreensão total do problema (como sabemos se estamos dentro da Matrix? Como o software sabe se está em um ambiente virtualizado?).
Para os piores casos, o software sempre vai ter que confiar em seu ambiente e as regras, aparentemente imutáveis, que o regem. Ele precisar confiar não o exime de controlar seus próprio limites, e é aí que recai a atitude do programador, atitude essa que reflete diretamente nossa visão sobre a vida.
Já vi muitos programadores (eu me incluo) deixando o código pronto para o melhor dos mundos e dando a tarefa por concluída. Otimismo demais? Desleixo? Ou arrogância? Qualquer que seja o motivo, ele está incrustado na própria visão de vida do programador e de como ele se vê no mundo. Eu, particularmente, fico horrorizado com código assim. Não com todos, mas com os que são visivelmente importantes e que necessitam de um carinho especial. São os alicerces para outros códigos, de repente.
Outra atitude igualmente deformada é achar que o mundo vai acabar se não existirem todos os sanity checks (até os mais bizarros) em qualquer meia-dúzia de linhas. É o paranóico, que pode se dar bem no tipo de código importante já citado, mas que nunca vai conseguir entregar um projeto trivial se for baseado em libs escritas pelos outros e cujo código nunca deu uma &amp;quot;lida rápida&amp;quot;. Aliás, essa mesma atitude &amp;quot;deu uma lida&amp;quot; demonstra que o pessimista pode ser ainda mais arrogante, pois acredita conseguir capturar toda a complexidade do sistema apenas lendo seu código en passant.
De uma forma ou de outra, como toda atividade humana, escrever código nos define não apenas como bons programadores, mas como bons humanos, com seu conjunto de crenças e valores. O que, de certa forma, é um bom sinal, pois melhorando como seres humanos, melhoramos como programadores. E vice-versa.
 Para quê filosofia?, por Marilena Chauí.  </description>
</item>

     
        <item>
  <title>Oitavo Encontro do Grupo C/C&#43;&#43; Brasil</title>
  <link>http://www.caloni.com.br/oitavo-encontro-do-grupo-cc-brasil/</link>
  <pubDate>2011-09-19</pubDate>
  
  <guid>http://www.caloni.com.br/oitavo-encontro-do-grupo-cc-brasil/</guid>
  <description>Esse final de semana ocorreu mais um dos inesquecíveis encontros dos programadores C&#43;&#43;, dessa vez ao estilo &amp;quot;velhos tempos&amp;quot;, com direito a entrada gratuita e um grupo mais coeso, quase já íntimo, e mais animado.
Não só pela informalidade da ocasião, tivemos palestras interessantes que dessa vez conseguiram abranger temas bem diversificados e fugir um pouco do feijão-com-arroz de desenvolvimento Windows que muitos encontros anteriores haviam se transformado.
Logo no começo do dia tivemos Vinicius Jarina apresentando-nos a possibilidade de usar Lua como um script rápido de embutir em código C&#43;&#43; sem muitos percalços.
Já o mesmo não se pode dizer dos detalhes quase sempre matadores do desenvolvimento mobile, como vimos com Gianni Rossi.
Como não poderia deixar de faltar, Rodrigo Strauss nos apresenta, agora formalizadas, as mudanças do novo padrão C&#43;&#43; que acaba de ser aprovado.
Em seguida, Rodrigo Kumpera mais uma vez apresenta um debate que parece recorrente no grupo, discorrendo sobre modelos de memória e a dificuldade de sicronizar diversos recursos em múltiplas CPUs.
Para finalizar, uma palestra-bônus de Marcelo Zimbres Silva (thanks to @AlbertoFabiano, que postou o linque para sua palestra), que fez uma breve apresentação do ROOT, um framework de análise de dados usados pelos físicos e que poderia ser utilizado facilmente pela comunidade C&#43;&#43;. Fiquei particularmente interessado no exemplo de análise do histórico Bovespa e o pontencial da biblioteca. Também foi muito bem-vinda a presença de um físico em um grupo muitas vezes acusado de xiita.
E por falar em xiita, vejam só: uma série inédita de palestras sem nenhuma estar falando especificadamente sobre Windows. O que acham?
Como bônus, dessa vez tivemos nossas palestras filmadas. Apenas peço paciência para a fase de edição, onde devo utilizar os slides dos palestrantes para tornar o visual mais didátivo do que uma câmera se movendo freneticamente de um lado para o outro. Algumas partes podem ter ficado de fora por alguns problemas técnicos (sou marinheiro de primeira viagem), mas o mais importante, com certeza, está gravado.
</description>
</item>

     
        <item>
  <title>E foi-se o TDC</title>
  <link>http://www.caloni.com.br/e-foi-se-o-tdc/</link>
  <pubDate>2011-07-07</pubDate>
  
  <guid>http://www.caloni.com.br/e-foi-se-o-tdc/</guid>
  <description>Dessa vez, talvez pelo dia de semana, havia poucos participantes. Isso, contudo, não evitou que o conteúdo e a qualidade das palestras fosse, como sempre, de alto nível.
Infelizmente, só cheguei a partir da palestra de Antonio Ribeiro sobre uma Simulação Distribuída focando no trânsito de São Paulo. Há tempos esse é um tema debatido e ainda acredito que a tecnologia ainda vai resolver isso da melhor maneira possível: cada um em sua casa.
Depois do agradável almoço, onde tive a oportunidade de rever DQSoft e conversar sobre leituras de ficção-não-necessariamente-científica, participamos de um pequeno review sobre escrita de código seguro. Ao menos não tivemos que ouvir novamente algum representante da Microsoft falando sobre a famigerada lib que refazia as funções do C para a versão com copyrights.
Então chega a vez da palestra mais bagunçada: a minha. Juro que perdi totalmente o fio da meada no início, e quanto mais me esforçava para lembrar o que devia ser dito, mais esquecia. Então resolvi partir direto para o hands-on, onde consegui, imagino eu, com um ritmo adequado, demonstrar todo o cenário da análise do Dicionário Houaiss que tinha feito anos atrás. E pelo visto, muitas pessoas gostaram, pois fui abordado por três ou quatro participantes muito simpáticos e entusiasmados com o tema. Talvez seja hora de voltar para esse submundo mais um pouquinho, fazer coisas mais hardcore pra variar...
Depois do coffee-açucarado-break, tivemos a palestra mais interessante do dia: desenvolvimento de microkernels, apresentado por Rodrigo Almeida, professor de Eletrônica e Programação de Embarcados da Unifei. Não só o tema me interessou ao máximo, como a didática da apresentação foi impecável, abordando tanto os pontos for-dummies quanto um gostinho do que seria fazer por nós mesmos um controle intermediário entre a placa e os programas.
Ao final, nosso mestre-de-cerimônias habitual Alberto Techberto Fabiano fez a abertura de um painel tentando mesclar problemas &#43; experiência &#43; vontade de aprender. Dos assuntos que me lembro, chamou a atenção o fato dos profissionais da linguagem (C/C&#43;&#43;) estarem escasseando cada vez mais e também o fato de nosso Grupo C/C&#43;&#43; parecer praticamente invisível aos olhos do Google, pois parece que quase ninguém consegue encontrar o dito cujo.
Infelizmente, alguns compromissos inadiáveis me fizeram ter que sair pela esquerda e esquecer o Lado B da questão. Felizmente, esse não é o nosso último encontro, e espero participar de futuras oportunidades de me integrar à nossa agora, como diz meu amigo Pikachu, comunidade maçônica.
</description>
</item>

     
        <item>
  <title>TDC 2011</title>
  <link>http://www.caloni.com.br/tdc-2011/</link>
  <pubDate>2011-06-30</pubDate>
  
  <guid>http://www.caloni.com.br/tdc-2011/</guid>
  <description>Se você gosta do tema e possui dúvidas a respeito, ou gostaria de mais detalhes sobre outros projetos, não deixe de comparecer. Antes e depois da palestra estarei disponível para conversarmos. O mais interessante de termos uma trilha em C&#43;&#43; é reunir pessoas envolvidas em torno da linguagem, não importando muito a área. Somos um grupo pequeno, e é importante que tenhamos um contato mais próximo de vez em quando.
C/C&#43;&#43; Caso de Uso: Engenharia Reversa com Windbg. Esta palestra é sobre desmontar e montar novamente. Iremos descobrir como as entradas do dicionário Houaiss eletrônico estão gravadas em um primeiro momento, para depois remontarmos essa informação de maneira que ela possa ser usada em um outro dicionário.
Ferramentas que serão usadas: Windows, WinDbg, Visual Studio (qualquer versão).
Conhecimentos necessários: C/C&#43;&#43;, Assembly 8086, Win32 API.
Passo-a-passo da palestra:
    Sobre Pirataria. Como identificar brechas na licença para que você possa usufruir do seu trabalho de refatoração binária.    Análise. Desmontando o dicionário Houaiss e desvendando seu funcionamento interno.    Programação. Remontando a estrutura identificada pela Engenharia Reversa em um formato aberto.    Sobre Fair Use. Explicando como abrir portas para o desenvolvimento de soluções baseada em nossa análise.   Assuntos &amp;quot;similares&amp;quot; também nos esperam com Sergio Prado e programação segura e Rodrigo Almeida, abordando o desenvolvimento de microkernel. Além disso, também teremos Bruno Koga e Guilherme Andrade destrinchando o compilador LLVM para Objective-C, enquanto Antonio Ribeiro Alves Júnior explica sobre t100, um Middleware para Simulação Distribuída.
Nos vemos lá.
</description>
</item>

     
        <item>
  <title>Trilha de C&#43;&#43; organizada pelo grupo C/C&#43;&#43; Brasil</title>
  <link>http://www.caloni.com.br/trilha-de-c-organizada-pelo-grupo-cc-brasil/</link>
  <pubDate>2011-06-10</pubDate>
  
  <guid>http://www.caloni.com.br/trilha-de-c-organizada-pelo-grupo-cc-brasil/</guid>
  <description>Sim, nós temos C&#43;&#43;! Apesar de ser uma linguagem dita ultrapassada pelos brazucas, o TDC desse ano terá uma trilha de C&#43;&#43; disponível para todo tipo de público que aprecia ou precisa dos poderes de C&#43;&#43; em seu dia-a-dia.
O evento será organizado (do lado C&#43;&#43;) pelos nossos habituais organizadores dos eventos do grupo Alberto Fabiano e Rodrigo Strauss, o que é um ótimo sinal, pois, geralmente, ter o nome C&#43;&#43; associado a alguém que nunca compilou um código na vida não é algo que atraia um conteúdo de qualidade.
A trilha de C&#43;&#43; será Quarta, dia 6 de Julho.
</description>
</item>

     
        <item>
  <title>Vídeos do boostcon</title>
  <link>http://www.caloni.com.br/videos-do-boostcon/</link>
  <pubDate>2011-06-10</pubDate>
  
  <guid>http://www.caloni.com.br/videos-do-boostcon/</guid>
  <description>Para se aquecer enquanto a trilha de C&#43;&#43; do TDC não acontece, o Grupo C/C&#43;&#43; passou um linque para os vídeos do boostcon, que, pelo que entendi, é um evento onde as pessoas falam como boost é legal e por que você deveria usar boost em seu projeto C&#43;&#43;. Pelos títulos (ainda não os assisti) existem assuntos dos mais diversos, e talvez seja uma forma de catequizar a equipe onde você trabalha e que usa coisas bem piores do que boost para programar.
</description>
</item>

     
        <item>
  <title>Cronogramas baseados em fatos reais</title>
  <link>http://www.caloni.com.br/cronogramas-baseados-em-fatos-reais/</link>
  <pubDate>2011-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/cronogramas-baseados-em-fatos-reais/</guid>
  <description>Já falei sobre cronogramas por aqui e tudo que disse ainda se aplica. Contudo, comentei brevemente sobre entender seu próprio ritmo, que, instintivamente, sabia ser verdade. Depois que li um pouco mais sobre técnicas XP/Scrum (que nada mais são do que formalizações do que os programadores Agile perceberam no decorrer dos seus projetos) achei uma fórmula simples para transformar o tempo estimado em tempo realista.
Vejamos o texto original (auto-plágio):
Seja honesto consigo mesmo e com seu chefe: você realmente trabalha 8 horas por dia? É lógico que não! E não é nenhuma vergonha admitir isso. Todos nós temos emails para ler e responder, reuniões para presenciar e bloques importantes para acompanhar. Portanto, ignore essa conversa fiada de 8 horas e admita: não se deve contar os dias como se eles tivessem 8 horas.
Qual o valor de um dia, então? Cada um sabe o valor que deve ser decrementado desse valor simbólico de 8 horas, mas esse valor sempre será menor. Não se iluda!
Exatamente. Não se iluda! Isso tem seu reflexo na metodologia Agile. Basicamente quer dizer que você precisa aplicar índices que reflitam a realidade do seu próprio ritmo. Além disso:
É muito simples ilustrar e entender esse conceito com código. Voltando ao caso da função, digamos que você consiga terminar a bendita função em exata uma hora. Você é bom, hein?
Porém, essa função ainda 1) não foi comentada, 2) não foi testada e 3) não foi testada em release.
Logo, essa é uma tarefa em que você termina o mais importante em uma hora... mas não termina tudo. Deve-se sempre considerar a tarefa por completo, pois no final de quinze tarefas vai faltar comentar e testar tudo isso, o que aumentará consideravelmente a imprevisiblidade no seu cronograma.O que, novamente traduzindo, é mais um indicador a ser aplicado sobre seus números.
E o que são seus números?
Basicamente, o que a própria metodologia ensina: meça o esforço necessário para fazer código (mas é pra isso mesmo que somos contratados, não?) como se pudéssemos programar por todo esse tempo sem parar por um momento sequer (mesmo que sejam dezenas de horas). Lógico, aprenda a dividir o esforço em pequenos passos, mas estime o tempo considerando APENAS o esforço de fazer o código.
Pronto? Agora é hora de aplicar os indicadores.
1. Foco Mais uma vez, admita: programadores raramente conseguem manter o foco por muito tempo. São pessoas ao redor te desviando a atenção, o tweet que salta de uma janela ou até mesmo as necessidades orgânicas que todo ser humano tem. São elementos, enfim, que, em conjunto, nunca te possibilitarão ter 100% do foco durante todo o trabalho.
Portanto, criemos um indicador: foco. Ele é um valor entre 0 e 1 e estima a porcentagem de foco que você consegue obter, em média, durante o dia. Por exemplo: eu consigo me focar 70% do dia inteiro em apenas codificar e o resto é perdido em reuniões e e-mails. OK. Esse número é, então, 0,7. Aplique sobre seu total de horas e terá o tempo real para codificar a tarefa:
Levarei 35 horas para codificar todo o processo de autenticação por reconhecimento de face, trabalhando sem parar.
35 / 0.7 = 50 No entanto, como consigo apenas 70% de foco em média, sei que essa tarefa irá levar 50 horas na verdade.
2. Finalização Já temos o tempo para o código ficar pronto, mas... é apenas código. Temos que reescalonar o tempo do projeto inserindo testes, retrabalho, comentários e documentação. Tudo ainda nas mãos do programador, que está ainda &amp;quot;aquecido&amp;quot; e que pode resolver retrabalhos em questões de segundos, se ninguém mais passar nada pra ele.
Mesmo assim,é um indicador importante. Sem ele, a qualidade do serviço final fica muito restrita e sensível a testes de caixa preta, gerando a revolta da equipe de testes.
Vamos supor, então, que, historicamente, essa fase tem sido, digamos, 20% do período de codificação (um chute bem otimista). Agora é fácil dizer o tempo final:
Levarei 50 horas para codificar tudo considerando o quesito foco.
50 * 1,2 = 60 Porém, para poder entregar, preciso dedicar cerca de 20% aos testes, retrabalho e uma documentação mínima. Nesse caso, 60 horas é o prazo de entrega.
Conclusão O número de horas ficou muito maior que o esperado? Não me admira que os projetos geralmente atrasem, então. Por pior que pareça o cálculo final, ele foi construído com base na realidade. E não há nada melhor do que nos basearmos na realidade para estimar seriamente o quanto pode custar à empresa um projeto qualquer.
</description>
</item>

     
        <item>
  <title>Novo branch para projetos do Caloni.com.br</title>
  <link>http://www.caloni.com.br/novo-branch-para-projetos-do-caloni-com-br/</link>
  <pubDate>2011-05-29</pubDate>
  
  <guid>http://www.caloni.com.br/novo-branch-para-projetos-do-caloni-com-br/</guid>
  <description>
Reestruturei meus projetos caseiros e coloquei todos em um branch no repositório do Assembla. A partir dele começarei a reestruturas os códigos de exemplo do saite, o deve facilitar o acesso. Para usuários do Bazaar, como eu, basta puxar o branch usando seu endereço:
bzr get http://subversion.assembla.com/svn/caloni/trunk Para os usuários do Subversion, ou qualquer outro controle de fonte que consiga ler um branch feito em SVN, google for it.
</description>
</item>

     
        <item>
  <title>Bazaar com Subversion</title>
  <link>http://www.caloni.com.br/bazaar-com-subversion/</link>
  <pubDate>2011-03-23</pubDate>
  
  <guid>http://www.caloni.com.br/bazaar-com-subversion/</guid>
  <description>Para pessoas que ficaram viciadas em commits curtos e todo o histórico do fonte na própria máquina, foi uma surpresa descobrir que com o uso do plugin bzr-svn (já incluso no pacote de instalação), consigo ainda utilizar o Bazaar, mesmo que agora esteja trabalhando com um branch do Subversion.
Na verdade, melhor ainda: o bzr-svn baixa o SVN trunk com todo o histórico na máquina local, como se fosse um branch do próprio Bazaar, e permite a criação de branches desconectados para pequenos commits e o merge final para o servidor SVN.
E o melhor de tudo: não há segredo. Tudo que precisa fazer é instalar o Bazaar e fazer um get/co com o endereço do branch SVN que o plugin se vira sozinho para detectar que se trata do Subversion. (Se for um branch protegido, o usuário e senha serão pedidos durante o processo).
C:\Projetos&amp;gt;bzr co http://subversion.assembla.com/svn/caloni/ caloniInitialising Subversion metadata cache in C:\Users\Caloni\AppData\Local\svn-cache\sbrubles.C:\Projetos&amp;gt;cd caloniC:\Projetos\caloni&amp;gt;bzr qlogC:\Projetos\caloni&amp;gt;bzr get . ..\caloni.localBranched 2 revision(s).C:\Projetos\caloni&amp;gt;cd ..\caloni.localC:\Projetos\caloni.local&amp;gt;vim readme.txtC:\Projetos\caloni.local&amp;gt;bzr ci -m &amp;quot;Commit local&amp;quot;Committing to: C:/Projetos/caloni.local/modified readme.txtCommitted revision 3.C:\Projetos\caloni.local&amp;gt;vim readme.txtC:\Projetos\caloni.local&amp;gt;bzr ci -m &amp;quot;Commit local&amp;quot;Committing to: C:/Projetos/caloni.local/modified readme.txtCommitted revision 4.C:\Projetos\caloni.local&amp;gt;vim readme.txtC:\Projetos\caloni.local&amp;gt;bzr ci -m &amp;quot;Commit local&amp;quot;Committing to: C:/Projetos/caloni.local/modified readme.txtCommitted revision 5.C:\Projetos\caloni.local&amp;gt;cd ..\caloniC:\Projetos\caloni&amp;gt;bzr merge ..\caloni.localM readme.txtAll changes applied successfully.C:\Projetos\caloni&amp;gt;bzr stmodified: readme.txtpending merge tips: (use -v to see all merge revisions) Wanderley Caloni 2011-03-23 Commit localC:\Projetos\caloni&amp;gt;bzr ci -m &amp;quot;Commit pro servidor&amp;quot;Committing to: http://subversion.assembla.com/svn/calonimodified readme.txtHTTP subversion.assembla.com username: caloni&amp;lt;http://subversion.assembla.com:80&amp;gt; Restricted Area caloni password:Committed revision 3.C:\Projetos\caloni&amp;gt;bzr qlog 
</description>
</item>

     
        <item>
  <title>Reorganizando meus feeds (de novo)</title>
  <link>http://www.caloni.com.br/reorganizando-meus-feeds-de-novo/</link>
  <pubDate>2011-03-10</pubDate>
  
  <guid>http://www.caloni.com.br/reorganizando-meus-feeds-de-novo/</guid>
  <description>Depois da minha opinião dada ao Efetividade na matéria sobre ferramentas para gerenciar as leituras tenho que atualizar que não utilizo mais o esquema das estrelinhas, porque acabei me dando conta que nunca lia o que marcava para ler &amp;quot;depois&amp;quot;.
Porém, ainda utilizo o Google Reader por uma série de motivos:
 Integrado com as ferramentas Google, que eu venero; Tem atalhos no teclado, que eu venero Consigo anotar o que quiser em qualquer página que navegar; Posso organizar os feeds por categorias.  Minha organização de feeds, até semana passada, usava categorias específicas (programação, cinema, economia) e tinha duas categorias no topo que organizava por frequência (diário, semanal), seguindo uma dica de um leitor do Efetividade. Porém, meu maior problema sempre fora os feeds que cospem milhares de entradas por dia, e que sempre ficava para ler no meu fim-de-semana, consumindo às vezes o dia inteiro!
Por isso, para evitar ser abarrotado de notícias, mantenho a seguinte organização de categorias:
 Notícias: todos os feeds que cospem milhares de entradas. Organizo por &amp;quot;mágica&amp;quot; e leio apenas os que ficarem no topo. Ao final, clico no famigerado &amp;quot;Mark all as read&amp;quot; e fim de história. Diário: leituras imediatas, que não requerem mais que cinco minutos, como a tirinha do Dilbert e minhas pesquisas cadastradas no Google. Semanal: leitura um pouco mais demorada, para quando tiver mais que 10 minutos sobrando. Amigos: todos os feeds das pessoas que eu conheço e acompanho. Pessoal: meus próprios feeds, para reler o que eu escrevi e capturar &amp;quot;o outro lado da comunicação&amp;quot; (você, leitor). Fóruns: mensagens do grupo de programação C&#43;&#43;, por exemplo. Está no final da lista porque posso dedicar um pouco do fim-de-semana para ler a evolução dos tópicos, ou até colaborar quando tiver algum conhecimento a acrescentar.  Além disso, os Shared Itens estão configurados como Start page, sendo que tudo que eu anotar durante minha navegação deve ser lida quando eu abro o Reader (incluindo minhas anotações).
Basicamente é isso. Espero não ter que mudar novamente a estrutura. Se tiver, que seja pra melhor.
Idéias?
</description>
</item>

     
        <item>
  <title>Mudança</title>
  <link>http://www.caloni.com.br/mudanca/</link>
  <pubDate>2011-02-07</pubDate>
  
  <guid>http://www.caloni.com.br/mudanca/</guid>
  <description>Fecha uma porta... Desde que comecei a programar profissionalmente, lá por volta de 2001, sempre estive envolvido com uma ou duas empresas de Segurança da Informação, na época uma promissora carreira, com direito a hacking, engenharia reversa e outras diversões. Até programar por programar valia!
O tempo passou, completei uma década na área, e agora está realmente na hora de tentar programar coisa nova. Dessa forma, acompanhando minha própria tendência de investidor pessoa física na bolsa de valores, resolvi dar um novo salto em minhas aspirações nesse campo igualmente fascinante e apostar meu tempo de programação também no setor financeiro, onde C/C&#43;&#43; também corre na veia.
Aprendi muito nesse tempo todo com alguns amigos entusiastas (até demais) e programei muito código que gostaria que não tivesse meu nome nos comentários. Mas a vida (e o código) é assim: melhora com os erros.
... e abre outra! A empresa que estou deixando agora está à caça de uma pessoa para se tornar minha versão 2.0. Dessa vez não é uma busca por talentos inexperientes, de forma que estaremos aceitando apenas pessoas que já se f... com larga experiência em programação Windows.
Segue a descrição da vaga, feita por mim mesmo, sozinho. Interessados: sem timidez, please.
 Analista Programador C&#43;&#43;  Conhecimentos avançados em Windows: serviços, DLLs, (drivers desejável). ** Programação**: libc, Win32 API, (STL/Boost e Assembly 8086 desejáveis). ** Ferramentas: **Visual Studio 2003, Bazaar, VMWare, (WinDbg desejável). ** Funções: **codificação, análise, reunião técnica, refatoração, (UML desejável). ** Perfil: **vontade de aprender, pró-atividade, comunicação.</description>
</item>

     
        <item>
  <title>Atividades extracurriculares</title>
  <link>http://www.caloni.com.br/atividades-extracurriculares/</link>
  <pubDate>2011-01-18</pubDate>
  
  <guid>http://www.caloni.com.br/atividades-extracurriculares/</guid>
  <description>Essa é uma resposta a um simpático e-mail de um leitor, o Fabio, me perguntando sobre a tal da lógica (de programação?) e das atividades que um programador pode ter quando está longe do micro para não ficar com a &amp;quot;mente vadiando&amp;quot;.
Entusiasta ao máximo, ele montou uma lista baseada em estudo constante sob variadas formas, mesmo longe do micro:
  Contar binário e calcular hexa na cabeça;
  Ler livros;
  Programar em papel;
  Algo mais?
  De acordo com ele, o programador não consegue viver sem lógica, e quando tenta, se torna algo &amp;quot;intolerável&amp;quot;.
Já fiz duas dessas coisas divertidíssimas em minha tenra idade: contar binário enquanto varria o laboratório onde trabalhava, programar em papel numa noite que fiquei ao relento por ter perdido o busão. Não faço mais essas coisas. Agora eu sou fresco. &amp;quot;Programo em UML&amp;quot;.
Primeiro, de que lógica estamos falando? Existem diversas lógicas e existe a intuição, lado importante e muitas vezes renegado, mas presente no cinto de utilidades. É só saber usar. Seja um, seja outro.
Segundo, o cérebro pode cair na vadiagem. Aliás, ele deve. Sem vadiagem, nunca conseguimos processar aquelas threads que ficam rodando em idle, no inconsciente, e que podem resolver uma série de questões que ficam ensebando em nossos conturbados egos. É como o copo cheio de água em Karate Kid (ou em &amp;quot;2012&amp;quot;).
O básico mesmo é ler livros. Tão básico que deve ser a atividade principal quando não estamos com nenhum eletrônico bonitinho na mão. Aliás, até quando estamos, com o auto-controle, conseguimos ler um ebook de vez em quando.
Independente do método empregado, nunca visualize seus esforços com ceticismo, e muito menos com o ceticismo dos outros. Se estiver funcionando, continue a fazê-lo. Não vê resultados? Mude o método. Senão cai na velha frase de Eistein sobre o sujeito que espera resultados diferentes fazendo sempre a mesma coisa: loucura.
O que eu adicionaria na lista?
  Assistir CSI. Pra entender o uso prático dos métodos indutivo e dedutivo de raciocínio; mais indutivo.
  Assistir House. Nunca é demais se imaginar como o médico-louco que cura todas as doenças esquisitas; doença aqui é bug.
  Assistir Dexter. Veja como ele faz o seu trabalho seguindo sempre o mesmo método e deixando o ambiente limpinho, sem nenhuma pista.
  Fora isso, curta o que está fazendo. Isso é o primordial. Arrebenta com qualquer dúvida que tiver sobre estar no caminho certo.
</description>
</item>

     
        <item>
  <title>Reunião de programadores C&#43;&#43; (há 5 anos)</title>
  <link>http://www.caloni.com.br/reuniao-de-programadores-c-ha-5-anos/</link>
  <pubDate>2011-01-12</pubDate>
  
  <guid>http://www.caloni.com.br/reuniao-de-programadores-c-ha-5-anos/</guid>
  <description>Começo de ano, hora de fazer backup completo. Durante minha cópia anual do gmail acabei encontrando meu post-chamado para nossa primeira reunião C&#43;&#43;. Como parte da sessão nostalgia, convido-os, novos e velhos colegas, a continuar a brincadeira de organizar uma reunião informal de pessoas que gostam tanto de programar que criam seus próprios ponteiros.
E-mail escrito em 02/12/2005:
Um dia desses conversando com o Rodrigo Strauss, falando sobre como é interessante trocar informações e experiências sobre C&#43;&#43;, ele teve a brilhante e original idéia (ninguém nunca fez isso antes) de propor encontros razoavelmente regulares para fazermos isso. A idéia dele era mais ou menos essa:
  Peridiocidade dos encontros de X em X meses. Ainda não fechamos isso;
  X pautas por reunião, votadas pelos participantes. Já temos algumas sugestões como, recursos arcanos do C&#43;&#43; (essa, de acordo com ele, seria minha função), ferramentas, bibliotecas, organização de código etc;
  Troca de experiências sobre C&#43;&#43; em diversos sistemas operacionais. Por exemplo, nós mostraríamos para o pessoal de UNIX o Visual C&#43;&#43; e aprenderíamos com eles sobre emacs ou KDevelop;
  Começar de forma muito simples, como uma mesa redonda, e se a coisa avançar, arrumar um lugar para palestras e apresentações;
  Reuniões em bares ou restaurantes onde possamos conversar, levar acompanhantes e nos sentirmos seguros levando notebooks ou Pockets. Podemos até subir uma rede wifi e aumentar a diversão :-)
  Como eu e o Strauss somos de São Paulo (na verdade, eu sou de São Bernardo), os primeiros encontros seriam na capital;
  Isso é uma boa desculpa para se encontrar e tomar um chopp || guaraná || cachaça.
  Gostaríamos que as pessoas da comunidade C&#43;&#43; dessem sugestões sobre essa idéia. Estamos pensando em agendar o primeiro encontro para dia 17/12/2005 (sábado) durante a tarde, em um Outback (comida australiana, Shopping Center Norte ou Eldorado, tem infra para crianças e a comida é muito boa). Como pauta do primeiro encontro eu sugiro uma apresentação dos participantes (o que será desnecessário se só eu e o Strauss aparecermos) e uma discussão sobre o presente e o futuro do mercado de trabalho C&#43;&#43;.
Coloquem as sugestões nos comentários e quando a gente fechar alguma coisa eu escrevo um novo post com o que definimos. Até lá.
PS: Qualquer semelhança deste post com o conteúdo de um conhecido blog brasileiro sobre programação não é mera coincidência.
</description>
</item>

     
        <item>
  <title>Trabalhando em múltiplos ambientes</title>
  <link>http://www.caloni.com.br/trabalhando-em-multiplos-ambientes/</link>
  <pubDate>2010-12-27</pubDate>
  
  <guid>http://www.caloni.com.br/trabalhando-em-multiplos-ambientes/</guid>
  <description>Existem diversas maneiras de se trabalhar com o Bazaar. Eu já havia definido como fazer na máquina de desenvolvedor para modificar o mesmo código-fonte em projetos paralelos, onde basicamente tenho um branch principal conectado no servidor (assim todo commit vai pra lá) e crio branches paralelos e desconectados para fazer quantos commits eu tenho vontade durante o desenvolvimento. Após todas as mudanças e testes básicos, atualizo o branch principal (com mudanças dos meus colegas) e faço o merge com o branch paralelo onde fiz todas as mudanças. Antes de subir com o commit final, ainda realizo um build de teste local, se necessário.
Nos casos em que eu trabalho em casa (ou em outro ambiente), posso fazer basicamente a mesma coisa, só que meu branch paralelo é copiado para outra máquina:
C:\&amp;gt;cd \Src\projeto-principalC:\Src\projeto-principal&amp;gt;bzr get . ..\projeto-principal.TravamentoServico.MeuNotePessoalBranched 950 revision(s). Geralmente o que faço depois é compactar a pasta gerada (se desejar, use uma senha forte nesse passo), fazer uma cópia para um PenDrive e descompactar na máquina que irei trabalhar.
C:\Src\projeto-principal.TravamentoServico&amp;gt;hack hack hackC:\Src\projeto-principal.TravamentoServico&amp;gt;bzr ci -m &amp;quot;Uma mudancinha inicial&amp;quot;Committing to: C:/Src/projeto-principal.TravamentoServico/added teste.txtCommitted revision 951.C:\Src\projeto-principal.TravamentoServico&amp;gt;hack hack hackC:\Src\projeto-principal.TravamentoServico&amp;gt;bzr ci -m &amp;quot;Vamos ver se funciona&amp;quot;Committing to: C:/Src/projeto-principal.TravamentoServico/modified teste.txtCommitted revision 952.C:\Src\projeto-principal.TravamentoServico&amp;gt;hack hack hackC:\Src\projeto-principal.TravamentoServico&amp;gt;bzr ci -m &amp;quot;Não funcionou. Mais uma vez.&amp;quot;Committing to: C:/Src/projeto-principal.TravamentoServico/modified teste.txtCommitted revision 953.C:\Src\projeto-principal.TravamentoServico&amp;gt;hack hack hackC:\Src\projeto-principal.TravamentoServico&amp;gt;bzr ci -m &amp;quot;Desconfio de uma coisa...&amp;quot;Committing to: C:/Src/projeto-principal.TravamentoServico/modified teste.txtCommitted revision 954.C:\Src\projeto-principal.TravamentoServico&amp;gt;hack hack hackC:\Src\projeto-principal.TravamentoServico&amp;gt;bzr ci -m &amp;quot;Corrigido travamento.&amp;quot;Committing to: C:/Src/projeto-principal.TravamentoServico/modified teste.txtCommitted revision 955.C:\Src\projeto-principal.TravamentoServico&amp;gt;doc doc docC:\Src\projeto-principal.TravamentoServico&amp;gt;bzr ci -m &amp;quot;Comentando e documentando solucao.&amp;quot;Committing to: C:/Src/projeto-principal.TravamentoServico/modified teste.txtCommitted revision 956. Terminado o trabalho naquela máquina, geralmente gero um branch novo (para limpar o diretório) e recompacto a solução, copio para o Pendrive, e descompacto na máquina da empresa. O resto do caminho é como se eu tivesse feito as modificações na própria máquina:

</description>
</item>

     
        <item>
  <title>Pós-II Seminário Portabilidade e Performance</title>
  <link>http://www.caloni.com.br/pos-ii-seminario-portabilidade-e-performance/</link>
  <pubDate>2010-12-21</pubDate>
  
  <guid>http://www.caloni.com.br/pos-ii-seminario-portabilidade-e-performance/</guid>
  <description>O nosso seminário da semana retrasada sobre portabilidade e performance teve um clima mais familiar, lembrando os antigos eventos. O tamanho menor da sala, aliado ao fato dos palestrantes não precisarem usar microfone, como foi da última vez, fez com que houvesse mais interação com o público, com destaque para minha própria palestra, onde tivemos um hiato significativo para falar sobre o desempenho da classe std::string e outros assuntos mais obscuros.
A ordem das palestras também ajudou muito a tecer os conteúdos individuais para algo maior e em comum, que eram os temas do seminário: se com Galuppo tivemos uma pitada do desenvolvimento concorrente, com Fernando conseguimos entender de uma maneira simples e didática como funcionam os recursos de sincronismo entre threads rodando em múltiplos cores, com uma pequena ajuda de um exemplo em C levado ao nível de assembly, onde foi possível acompanhar o que já havíamos aprendido com a palestra do Caloni.
Pra terminar, um apanhado de boas práticas e a experiência de quem já mexeu muito com análise e desempenho no código: Rodrigo Strauss. Além das dicas e do bom humor costumeiros, tivemos uma pequena prévia do que poderemos ter em breve com o tema &amp;quot;C&#43;&#43; com outra linguagens&amp;quot;.
Deixarei disponibilizado para download minha transparência, onde infelizmente não estão embutidos o áudio nem o vídeo do momento realmente importante,que foi a interação do grupo durante a apresentação. Se você perdeu, so sorry. Até a próxima!
 Saite do evento  </description>
</item>

     
        <item>
  <title>II Seminário Portabilidade e Performance</title>
  <link>http://www.caloni.com.br/ii-seminario-portabilidade-e-performance/</link>
  <pubDate>2010-11-12</pubDate>
  
  <guid>http://www.caloni.com.br/ii-seminario-portabilidade-e-performance/</guid>
  <description>Aqui estamos nós de novo. Mais uma vez a Tempo Real Eventos irá organizar esse evento de final de ano. E mais uma vez, junto dos meus amigos, irei palestrar sobre um item indispensável no nécessaire de todo escovador de bits: assembly gerado pelo compilador. Vamos falar brevemente sobre o funcionamento de um código assembly 32 bits e passar para a análise dos compiladores modernos e o que eles fazem para tornar o código ainda mais rápido do que o próprio fonte em C&#43;&#43;.
  Gerando código assembly;
  Guia ultra-rápido de assembly;
  Recursividade sem problemas na pilha;
  STL aumenta performance? (exemplos práticos);
  Assembly 64 bits.
  Uma outra dúvida pertinente (e discutida nos bares nerds da cidade) é se usar código STL não deixaria mais lento o resultado final, já que ele é cheio das abstrações. Por mais que autoridades competentes no funcionamento da linguagem como Pedro Lamarão e Thiago Adams digam que as otimizações do compiladores modernos na STL/Boost são diversas vezes mais eficientes que o código artesanal de um programador, sempre fica aquela pulga atrás da orelha, pulga esta que podemos matar facilmente analisando o assembly gerado. E essa confiança extra nos dará novas chances de programar coisas legais de verdade, e não ficar ensebando um código que já está na sua velocidade máxima.
Então é isso aí. Espero que tenhamos uma manhã e uma tarde agradáveis nesse mundo da escovação de bits.
</description>
</item>

     
        <item>
  <title>Suporte técnico</title>
  <link>http://www.caloni.com.br/suporte-tecnico/</link>
  <pubDate>2010-11-05</pubDate>
  
  <guid>http://www.caloni.com.br/suporte-tecnico/</guid>
  <description>Máquina com parte do registro corrompida, notadamente alguma sub-chave de HKEY_CLASSES_ROOT. Resultado: ao rodar um script que abre uma segunda janela e tenta usar seu método focus é exibida a seguinte mensagem:
&amp;quot;- A classe não dá suporte para automação&amp;quot; Abaixo um exemplo simples para ter uma ideia em JS:
var win = window.open(&#39;minha_url_do_coracao.htm&#39;);win.focus(); // aqui dá o erro A primeira coisa que se faz nesse caso é pesquisar no Google por pessoas que já tiveram esse problema. A maioria dizia ser necessária registrar novamente as DLLs do navegador/shell, coisa que fizemos à exaustão e não resolveu o problema. Também imaginamos haver relação com a versão da SDocVw.dll que estava alocada na lista de assemblies .NET cacheados, o chamado GAC. Ou seja, já estávamos viajando geral.
No meio dos procedimentos batidos que todos fazem a lista abaixo resume bem:
  Restaurar instalação do Internet Explorer.
  Atualizar Internet Explorer.
  Rodar Windows Update.
  Registrar novamente DLLs do Shell (ShDocVw.dll, etc).
  No meio das análises não-tão-batidas que foram feitas estavam os seguintes itens:
  Log de operações pelo Process Monitor da abertura do browser até o erro.
  Dump gerado no momento da mensagem de erro.
  Comparação de registro exportado com máquina sadia.
  Nada parecia resolver o impasse, a não ser reinstalar o Windows, coisa que o cliente não queria. Dessa forma, A última tentativa não-enlouquecida de tentar descobrir a causa do problema foi usar uma VM e importar o registro exportado da máquina defeituosa.
Que não revelou a anomalia.
Partindo disso, imaginei que o que ocorria era que havia algo faltando no registro danificado, e não algo a mais. Dessa forma, realizei a seguinte operação:
  Exportei o registro da máquina saudável.
  Transformei a exportação em exclusão total das chaves.
  Importei ambos os registros no esquema &amp;quot;apaga tudo cria tudo de novo&amp;quot;.
  Problema reproduzido.
Agora restava saber qual chave exata estava faltando e o que isso impactava no comportamento do browser.
O registro exportado da VM possuía cerca de 30.000 linhas com chaves e sub-chaves. Se fosse feita a importação por partes, dividindo-se sempre pela metade e testando o acesso à página todas as vezes, teríamos no máximo que fazer uns 15 testes.
Foi esse o procedimento seguido:
  Criar snapshot com o estado inalterado do registro.
  Apagar metade do registro original exportado (máquina real).
  Arrastar metade do registro original e importá-lo (apaga chaves).
  Importar registro danificado do cliente (já na VM).
  Se deu erro de novo, repassar os passos 2 a 3.
  Se não deu erro, testar os passos 3 e 4 com a outra metade.
  Essa série de passos foi reproduzida em menos de uma hora até chegarmos a apenas uma linha no registro:
[-HKEY_CLASSES_ROOT\CLSID\{C5598E60-B307-11D1-B27D-006008C3FBFB}] Que se revelou pertencer à DLL dispex.dll:
Pesquisando soluções de restauração achei esse KB que explica que existe um aplicativo chamado McRepair que teoricamente conserta a bagunça.
Não conserta.
Porém, ao usar o Method 1 (registrar novamente a DLL) o problema foi resolvido. Exportei o registro antes e depois da operação e por algum motivo a máquina do cliente estava com o GUID das interfaces IDispatchEx e IObjectIdentity adulteradas:
Antes: C5598E60-B307-11D1-B27D-006008C3FBFB}Depois: 10E2414A-EC59-49D2-BC51-5ADD2C36FEBC} Realizei o mesmo teste com nossa DLL que gerou o problema inicial e descobri que não houve mudanças nessa parte do registro por conta dela.
Fica assim indefinida a origem do &amp;quot;corrompimento&amp;quot; dessa parte do registro, apesar de localizada.
Esse artigo é pra mostrar que não é só de ifs e elses que vive um programador =)
</description>
</item>

     
        <item>
  <title>Então você ainda não usa controle de fonte?</title>
  <link>http://www.caloni.com.br/entao-voce-ainda-nao-usa-controle-de-fonte/</link>
  <pubDate>2010-11-02</pubDate>
  
  <guid>http://www.caloni.com.br/entao-voce-ainda-nao-usa-controle-de-fonte/</guid>
  <description>Graças aos antigos SCMs, muitos programadores hoje em dia evitam ter que configurar um controle de fonte mínimo para seus projetos. E por um bom motivo: temos que programar e resolver problemas reais no dia-a-dia e não ficar configurando servidores de controle de fonte e lidando com conflitos na calada da noite. Isso vale tanto para o pessoal do Windows e o seu Visual Source Safe (eu que o diga) quanto para o pessoal do Unix/Linux e seu CVS ;aliás, hoje o pesadelo de ambos foi substituído pelo SubVersion: um pesadelo light.
Não há nada de errado nisso. Projetos robustos com uma equipe moderada ¿ 5 a 10 programadores ¿ precisam desse tipo de organização, e tornam a resolução dos problemas do dia-a-dia mais problemática sem esse controle. A questão reside para o programador solitário ou a equipe minúscula ¿ 2 a 4 programadores. Esses geralmente questionam o custo-benefício de terem o trabalho de configurar e manter mais um sistema. Além disso, isso implica em uma mudança de grandes proporções em cada membro da equipe: uma mudança cultural.
Portanto, a primeira decisão que deve ser tomada pelo programador que quer mudar as coisas é instalar um controle de fonte moderno para seus projetos caseiros. Quando digo moderno, digo distribuído.Distribuído porque 1) é possível começar desde já com três comandos simples, 2) quando alguém copia a pasta do projeto está levando todo o histórico junto e 3) pastas duplicadas são branches distintos que podem interagir no futuro.
Os três comandos simples não são nada do outro mundo: criar o repositório, adicionar arquivos e fazer commit.
Tanto faz qual controle você pretende usar. No meu exemplo usarei o Bazaar, que é a ferramenta que uso no dia-a-dia com minha pequena equipe e serve bem para programadores solitários também. Basicamente para ter o Bazzar instalado basta baixá-lo, next next e finish.
Marcar para usar o PATH pode ser uma boa pra quem é fã de linha de comando.
Apesar de existirem firulas gráficas, gosto de usar o Bazaar na linha de comando porque faz você pensar direito antes de fazer commits, mas esteja livre para experimentar a maneira que achar melhor.
Botando a mão na massa Isso vale para qualquer projeto que você esteja trabalhando. Pela linha de comando, navegue até o diretório do projeto. Digite os comandos abaixo seguidos de :
  bzr init
  bzr add
  bzr commit -m &amp;quot;Primeiro commit no controle de fonte&amp;quot;
  Pronto! Você está oficialmente com seu projeto dentro de um controle de fonte.
C:\Users\Caloni\Documents\Projetos&amp;gt;cd MeuProjetoC:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt;bzr initCreated a standalone tree (format: 2a)C:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt;bzr addadding MeuProjeto.cppadding MeuProjeto.hC:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt;bzr commit -m &amp;quot;Primeiro commit no controle de fonte&amp;quot;Committing to: C:/Users/Caloni/Documents/Projetos/MeuProjeto/added MeuProjeto.cppadded MeuProjeto.hCommitted revision 1.C:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt; Os passos seguintes seguem o mesmo padrão, exceto o passo 1, que é substituído pelo seu trabalho:
  trabalho
  bzr add
  bzr commit -m &amp;quot;Comentário sobre modificação que fiz&amp;quot;
  C:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt;vim MeuProjeto.cppC:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt;bzr addC:\Users\Caloni\Documents\Projetos\MeuProjeto&amp;gt;bzr commit -m &amp;quot;Corrigido bug de nao exibir cores&amp;quot;Committing to: C:/Users/Caloni/Documents/Projetos/MeuProjeto/modified MeuProjeto.cppCommitted revision 2. É só isso? Basicamente, sim. É claro que um controle de fonte não se baseia apenas em commits. Existem arquivos a serem ignorados (os obj da vida) e eventualmente algum trabalho paralelo ou com mais programadores. No futuro poderá comparar versões diferentes do código. Porém, apenas seguindo essa simples receita acima você já pode se gabar de ter um controle de fontes confiável em seus projetos. Já estará se aproveitando desse controle no futuro, quando aprender mais sobre ele.
</description>
</item>

     
        <item>
  <title>Três em um</title>
  <link>http://www.caloni.com.br/tres-em-um/</link>
  <pubDate>2010-10-09</pubDate>
  
  <guid>http://www.caloni.com.br/tres-em-um/</guid>
  <description>Que vergonha passar tanto tempo sem postar nada. Parece que não fiz nada que valesse a pena comentar por aqui.
Na verdade, não fiz tanto, mesmo. Muitas mensagens do Outlook, gráficos UML e reuniões de alinhamento depois, sobrou um tempinho pra programar. Aprendi algumas coisas que tinha o desejo de saber há tanto tempo... Agora eu sei, quem diria, criar linques suspensos nas janelas Win32! Que novidade, não? Pois é, isso exige, de acordo com o SDK, algumas artimanhas pra fazer funcionar. Para quem está de Visual Studio 2008/2010 na mão basta seguir os passos seguintes.
Definir que estamos programando para XP ou superior:
#define _WIN32_WINNT 0x0600 Inserir suporte a linques na biblioteca de controles comuns:
INITCOMMONCONTROLSEX icc = { sizeof(icc), ICC_LINK_CLASS }; InitCommonControlsEx(&amp;amp;icc); Usar o CreateWindow com a classe certa, fazer markup html dentro do título e cuidar das mensagens de e no controle:
CreateWindowEx(0, WC_LINK, L&amp;#34;&amp;lt;a href=\&amp;#34;http://www.caloni.com.br\&amp;#34;&amp;gt;This site rocks!&amp;lt;/a&amp;gt;&amp;#34;, WS_VISIBLE | WS_CHILD | WS_TABSTOP, ...);//...case WM_NOTIFY:switch( ((LPNMHDR)lParam)-&amp;gt;code ){case NM_CLICK:case NM_RETURN:{PNMLINK pNMLink = (PNMLINK)lParam;LITEM item = pNMLink-&amp;gt;item;if( (((LPNMHDR)lParam)-&amp;gt;hwndFrom == st_linkHwnd[hWndDlg]) ){// codigo util	}Você que não está fazendo subclassing de janelas existe outra técnica que você pode utilizar: arrastar-e-soltar o controle do seu ToolBox. Qual é a graça?
 Outra coisa que aprendi foi como enviar mensagens ao usuário para impedir que este reinicie a máquina em momentos importantes:
A partir do Vista temos uma nova API para fazer isso. E é muito simples:
BOOL WINAPI ShutdownBlockReasonCreate( __in HWND hWnd, __in LPCWSTR pwszReason ); BOOL WINAPI ShutdownBlockReasonDestroy( __in HWND hWnd ); Quando ao receber a famigerada WM_QUERYENDSESSION, basta retornar FALSE. O Windows faz o resto.
_PS: E com uma ajudinha do Windows Internals ainda fiquei sabendo que dá pra se colocar na frente da fila para receber essa mensagem. _
</description>
</item>

     
        <item>
  <title>Gerando dumps automatizados</title>
  <link>http://www.caloni.com.br/gerando-dumps-automatizados/</link>
  <pubDate>2010-08-26</pubDate>
  
  <guid>http://www.caloni.com.br/gerando-dumps-automatizados/</guid>
  <description>Agora que a temporada das telas azuis passou estou às voltas com o nosso sistema de detecção de crashes, além de alguns dumps e logs pra relaxar de vez em quando.
Fiquei impressionado com a simplicidade com que podemos capturar qualquer exceção que ocorra em um programa, independente da thread, e gravar um minidump com o contexto exato em que o problema ocorreu. O uso da função API SetUnhandledExceptionFilter aliado com a já citada na palestra MiniDumpWriteDump pode agilizar muito a correção de crashes triviais como Access Violation.
A mágica é tão bela que resolvi gravar um vídeo do que ocorreu quando compilei e testei o programa abaixo. Note que o tamanho do arquivo de dump ficou em torno dos 10 KB, ridículos nessa era de barateamento de espaço.
/** @file OnCrash@brief Exemplo de como capturar exceções no seu programa.@author Wanderley Caloni &amp;lt;wanderley@caloni.com.br&amp;gt;@date 2010-08*/#include &amp;lt;windows.h&amp;gt;#include &amp;lt;dbghelp.h&amp;gt;#include &amp;lt;time.h&amp;gt;#pragma comment(lib, &amp;#34;dbghelp.lib&amp;#34;)LONG WINAPI CrashHandler(_EXCEPTION_POINTERS* ExceptionInfo){LONG ret = EXCEPTION_CONTINUE_SEARCH;MINIDUMP_EXCEPTION_INFORMATION minidumpInfo;minidumpInfo.ClientPointers = FALSE;minidumpInfo.ThreadId = GetCurrentThreadId();minidumpInfo.ExceptionPointers = ExceptionInfo;HANDLE hFile = CreateFile(&amp;#34;OnCrash.dmp&amp;#34;, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);if( hFile != INVALID_HANDLE_VALUE ){MINIDUMP_TYPE dumpType = MiniDumpNormal;if( MiniDumpWriteDump(GetCurrentProcess(), GetCurrentProcessId(), hFile, MiniDumpNormal, &amp;amp;minidumpInfo, NULL, NULL) ){ret = EXCEPTION_EXECUTE_HANDLER;}CloseHandle(hFile);}return ret;}DWORD WINAPI CrashThread(PVOID){int* x = 0;*x = 13;return 0;}int main(){SetUnhandledExceptionFilter(CrashHandler);HANDLE crashThread = CreateThread(NULL, 0, CrashThread, NULL, 0, NULL);WaitForSingleObject(crashThread, INFINITE);}
Espero com isso aliviar a carga pesada de A.V.s que sempre aparece quando menos se espera. Cuidar de toneladas de código legado exige algumas pitadas de automatização nos lugares certos. Como já dizia meu primeiro chefe: se a mente não pensa...
</description>
</item>

     
        <item>
  <title>Evento C&#43;&#43;</title>
  <link>http://www.caloni.com.br/evento-c/</link>
  <pubDate>2010-08-16</pubDate>
  
  <guid>http://www.caloni.com.br/evento-c/</guid>
  <description>Esse fim-de-semana houve o tão falado evento C&#43;&#43;, com a presença de dezenas de pessoas, algo que eu sinceramente não esperava. O bom desse evento foi saber que existem tantas pessoas interessadas em manter contato com quem gosta e pratica essa linguagem e também em saber que o nível técnico das palestras estão de alto para avançado.
Infelizmente em nenhuma das duas palestras práticas (minha e do Fernando) houve participação interativa, e ninguém que eu saiba abriu meu pacote-surpresa com os dumps a serem analisados. De qualquer forma, minha palestra ficou bagunçada pelo excesso de conteúdo e falta de tempo, o que me fez dar boas risadas ao ouvir no twitter que minha palestra foi mais um brainstorm. A intenção não era essa, claro, mas meu claro despreparo para muito conteúdo gerou essa impressão. Espero que do pouco que consegui explicar alguém tenha achado utilidade.
E, pelo jeito, futuramente irei aplicar essa mesma metodologia brainstorm em um videocast, que ainda não decidi como irei preparar. A ideia é analisarmos alguns dumps em conjunto e, para os que acompanharem online, a interatividade de perguntas &amp;amp; respostas.
Mas enquanto isso não acontece vamos dar uma olhada no que tínhamos no pacote-surpresa.
1. NotMyFaultEither.exe.mdmp - Stack Trash 0:000&amp;gt; kvChildEBP RetAddr Args to Child0012b200 7c90df3c 7c8025db 000000e8 00000000 ntdll!KiFastSystemCallRet0012b204 7c8025db 000000e8 00000000 0012b238 ntdll!NtWaitForSingleObject&#43;0xc0012b268 7c802542 000000e8 000493e0 00000000 kernel32!WaitForSingleObjectEx&#43;0xa80012b27c 6998ada6 000000e8 000493e0 003a0043 kernel32!WaitForSingleObject&#43;0x120012bd70 6998aff1 000000c4 00000568 000000d0 faultrep!InternalGenerateMinidumpEx&#43;0x3350012bd9c 6998b50a 000000c4 00000568 0012c698 faultrep!InternalGenerateMinidump&#43;0x750012c678 69986652 000000c4 00000568 0012c698 faultrep!InternalGenFullAndTriageMinidumps&#43;0x8a0012dea0 69987d3d 0012df18 0015c300 00000000 faultrep!ReportFaultDWM&#43;0x4e50012e398 699882d8 0040a1dc 0012f1e0 ffffffff faultrep!StartManifestReportImmediate&#43;0x2680012f404 7c8643c6 0040a1dc ffffffff 0012fc24 faultrep!ReportFault&#43;0x55aUnable to load image C:\Documents and Settings\Administrador\Desktop\NotMyFaultEither.exe*** WARNING: Unable to verify timestamp for NotMyFaultEither.exe*** ERROR: Module load completed but symbols could not be loaded for NotMyFaultEither.exe0012f678 004018aa 0040a1dc e280eec4 1d7f113b kernel32!UnhandledExceptionFilter&#43;0x55bWARNING: Stack unwind information not available. Following frames may be wrong.0012f9ac 00401357 &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;dededede dededede dededede&amp;lt;/font&amp;gt; NotMyFaultEither&#43;0x18aa0012fbe8 &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;dededede dededede dededede dededede&amp;lt;/font&amp;gt; NotMyFaultEither&#43;0x13570012fbec &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;dededede dededede dededede dededede&amp;lt;/font&amp;gt; 0xdededede0012fbf4 &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;dededede dededede dededede dededede&amp;lt;/font&amp;gt; 0xdededede... Como foi visto na palestra, uma pilha nesse estado demonstra claramente alguma variável que estourou e corrompeu o resto da pilha de chamadas. Na hora de voltar para a função chamadora, o endereço usado foi o endereço reescrito por lixo, e daí temos o &amp;quot;crash-pattern&amp;quot; Stack Trash.
2. NotMyFaultEither.mdmp - Dead Lock 0:000&amp;gt; kvChildEBP RetAddr Args to Child0012f900 7c90df3c 7c8025db 0000007c 00000000 ntdll!KiFastSystemCallRet0012f904 7c8025db &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;0000007c &amp;lt;/font&amp;gt;00000000 00000000 ntdll!NtWaitForSingleObject&#43;0xc0012f968 7c802542 0000007c ffffffff 00000000 kernel32!WaitForSingleObjectEx&#43;0xa80012f97c 00401176 0000007c ffffffff 00000111 kernel32!WaitForSingleObject&#43;0x12WARNING: Stack unwind information not available. Following frames may be wrong.0012f9c0 7c910202 00000002 001506e8 00150000 NotMyFaultEither&#43;0x11760012f9f8 7e3746d3 01010050 00000000 00000000 ntdll!RtlpAllocateFromHeapLookaside&#43;0x420012fa5c 7e382672 01010050 01100068 7e3a4716 user32!DrawStateW&#43;0x5cd0012fae8 7e382c75 001563ac 01010050 00000003 user32!xxxBNDrawText&#43;0x3130012fb20 002d0036 00000000 00000020 0012fb3c user32!xxxDrawButton&#43;0xbb0012fb30 7e3799d8 0000800a 0012fbc8 7e375ba2 0x2d00360012fb3c 7e375ba2 0000800a 002d0036 fffffffc user32!NotifyWinEvent&#43;0xd0012fbc8 00000000 002d0036 004011b0 dcbaabcd user32!ButtonWndProcWorker&#43;0x79b0:000&amp;gt; !handle 0000007cHandle &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;0000007c&amp;lt;/font&amp;gt;Type &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;Thread&amp;lt;/font&amp;gt;0:000&amp;gt; ~* kv. 0 Id: 5e4.&amp;lt;font color=&amp;quot;#008000&amp;quot;&amp;gt;39c &amp;lt;/font&amp;gt;Suspend: 0 Teb: 7ffdd000 UnfrozenChildEBP RetAddr Args to Child0012f900 7c90df3c 7c8025db 0000007c 00000000 ntdll!KiFastSystemCallRet0012f904 7c8025db 0000007c 00000000 00000000 ntdll!NtWaitForSingleObject&#43;0xc0012f968 7c802542 0000007c ffffffff 00000000 kernel32!WaitForSingleObjectEx&#43;0xa80012f97c 00401176 0000007c ffffffff 00000111 kernel32!WaitForSingleObject&#43;0x12WARNING: Stack unwind information not available. Following frames may be wrong.0012f9c0 7c910202 00000002 001506e8 00150000 NotMyFaultEither&#43;0x11760012f9f8 7e3746d3 01010050 00000000 00000000 ntdll!RtlpAllocateFromHeapLookaside&#43;0x420012fa5c 7e382672 01010050 01100068 7e3a4716 user32!DrawStateW&#43;0x5cd0012fae8 7e382c75 001563ac 01010050 00000003 user32!xxxBNDrawText&#43;0x3130012fb20 002d0036 00000000 00000020 0012fb3c user32!xxxDrawButton&#43;0xbb0012fb30 7e3799d8 0000800a 0012fbc8 7e375ba2 0x2d00360012fb3c 7e375ba2 0000800a 002d0036 fffffffc user32!NotifyWinEvent&#43;0xd0012fbc8 00000000 002d0036 004011b0 dcbaabcd user32!ButtonWndProcWorker&#43;0x79b1 Id: 5e4.6a4 Suspend: 0 Teb: 7ffdc000 UnfrozenChildEBP RetAddr Args to Child00b8ff10 7c90df3c 7c91b22b 00000080 00000000 ntdll!KiFastSystemCallRet00b8ff14 7c91b22b 00000080 00000000 00000000 ntdll!NtWaitForSingleObject&#43;0xc00b8ff9c 7c901046 0040e940 004010e0 0040e940 ntdll!RtlpWaitForCriticalSection&#43;0x13200b8ffa4 004010e0 &amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt;0040e940 &amp;lt;/font&amp;gt;00000000 00000000 ntdll!RtlEnterCriticalSection&#43;0x46WARNING: Stack unwind information not available. Following frames may be wrong.00b8ffec 00000000 004010c0 0012f99c 00000000 NotMyFaultEither&#43;0x10e00:000&amp;gt; !cs &amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt;0040e940&amp;lt;/font&amp;gt;-----------------------------------------Critical section = 0x0040e940 (NotMyFaultEither&#43;0xE940)DebugInfo = 0x00154498&amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt;LOCKED&amp;lt;/font&amp;gt;LockCount = 0x1OwningThread = &amp;lt;font color=&amp;quot;#008000&amp;quot;&amp;gt;0x0000039c&amp;lt;/font&amp;gt;RecursionCount = 0x1LockSemaphore = 0x80SpinCount = 0x00000000 A thread ativa no momento do dump aguardava por outra thread. Listando todas as threads do processo temos a primeira e a segunda, que tenta entrar em um critical section. Quando vemos que aquele CS estava sendo bloqueado pela primeira thread vemos claramente se tratar de um dead lock.
3. NotMyFaultEither_100808_172407.dmp - Access Violation 0:000&amp;gt; kvChildEBP RetAddr Args to ChildWARNING: Stack unwind information not available. Following frames may be wrong.0012f9cc 7e37f916 01010052 005a0049 0012f9f4 NotMyFaultEither&#43;0x10a30012fa58 7e37f991 01010052 00000043 01100076 user32!ClientFrame&#43;0xe00012fa7c 7e382909 01010052 0012fa98 00000000 user32!DrawFocusRect&#43;0x400012fae8 7e382c75 00156304 01010052 00000003 user32!xxxBNDrawText&#43;0x3e90012fb20 001100a0 00000000 00000020 0012fb3c user32!xxxDrawButton&#43;0xbb0012fb30 7e3799d8 0000800a 0012fbc8 7e375ba2 0x1100a00012fb3c 7e375ba2 0000800a 001100a0 fffffffc user32!NotifyWinEvent&#43;0xd0012fbc8 00000000 001100a0 004010f0 dcbaabcd user32!ButtonWndProcWorker&#43;0x79b0:000&amp;gt; &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;? eax&#43;edx&amp;lt;/font&amp;gt;Evaluate expression: 0 = &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;00000000&amp;lt;/font&amp;gt;0:000&amp;gt; uNotMyFaultEither&#43;0x10a3:004010a3 66890c02 mov word ptr [&amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;edx&#43;eax&amp;lt;/font&amp;gt;],cx004010a7 83c002 add eax,2004010aa 6685c9 test cx,cx O disassemble da instrução inválida tenta escrever claramente em cima do endereço zerado (edx &#43; eax). Dessa forma fica fácil saber que esse tipo de escrita não é permitido, constituindo nosso famosíssimo AV.
4. NotMyFaultEither_100808_175404.dmp - Exception not Handled eax=00000000 ebx=00000111 ecx=7c91003d edx=00010000 esi=00330120 edi=7e374dfaeip=7c90120e esp=0012f9a0 ebp=00000001 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246ntdll!DbgBreakPoint:&amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;7c90120e cc int 3&amp;lt;/font&amp;gt;0:000&amp;gt; kvChildEBP RetAddr Args to Child0012f99c 004011ec 0012fc24 004010d0 0012fbe8 &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;ntdll!DbgBreakPoint&amp;lt;/font&amp;gt; (FPO: [0,0,0])WARNING: Stack unwind information not available. Following frames may be wrong.0012f9cc 7e37f916 01010054 005a0049 0012f9f4 NotMyFaultEither&#43;0x11ec0012fa58 7e37f991 01010054 00000043 01100076 user32!ClientFrame&#43;0xe0 Esse foi meio de brinde. Uma exceção de breakpoint (int 3, ntdll!DbgBreakPoint) lançada sem um depurador atachado implica em derrubamento do processo, pois é uma exceção como outra qualquer. O programador deve ter esquecido um DebugBreak ou algo que o valha no código de produção, que acabou sendo executado.
5. ntdll_cliente.dll - Importação de símbolos  Essa foi a DLL encontrada no cliente quando ocorreu o problema relatado na imagem, também em anexo. Isso foi demonstrado na palestra com a ajuda do meu script que carrega DLLs, além de um pouco de sorte. Podemos analisar esse caso com mais calma em outro artigo. Acho que já falei demais por aqui.
Slides  Download dos slides usados na palestra.  </description>
</item>

     
        <item>
  <title>Twitter, eu?</title>
  <link>http://www.caloni.com.br/twitter-eu/</link>
  <pubDate>2010-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/twitter-eu/</guid>
  <description>Fico meio receoso de comentar aqui que, sim, eu tenho twitter, e, sim, sou praticante de mais uma das artes da vadiagem. Até porque se 5% dos meus tweets tiver alguma relação com o conteúdo desse blogue, é muito. O resto são comentários sobre economia&amp;amp;finanças, notícias aleatórias sobre alguma descoberta científica (ou não), dicas rápidas sobre cinema e sabe-lá-deus-o-que-mais.
E isso não vai mudar. É meu twitter pessoal. Aliás, meu próprio blogue também é pessoal, e é provável que no futuro ele que mude, e não o contrário.
Isso não quer dizer que vou deixar de ser programador. Acho que depois de dez anos programando sem parar essa opção não existe mais, pois as habilidades adquiridas já foram registradas no meu código genético. Só que, no meu caso, ser programador não evita que eu tenha uma porção de outros interesses e que me dedique a eles tanto quanto programação.
Dito isso, segue mais um ponteiro perdido pela rede.
</description>
</item>

     
        <item>
  <title>Breakpoints promíscuos</title>
  <link>http://www.caloni.com.br/breakpoints-promiscuos/</link>
  <pubDate>2010-07-26</pubDate>
  
  <guid>http://www.caloni.com.br/breakpoints-promiscuos/</guid>
  <description>Ontem falei sobre como &amp;quot;brincar&amp;quot; com os breakpoints promíscuos, ou seja, aqueles que topam qualquer processo. Isso
é muito simples de se fazer:
 Configure uma VM para bootar em kernel debug. Encontre um processo qualquer (vamos usar o notepad pra variar?). Reabra os símbolos de user mode nele. Defina um breakpoint em alguma DLL de user mode.  Como meus leitores são muito espertos foi partir para o momento após rodarmos um notepad.exe:
kd&amp;gt; !process 0 0 notepad.exePROCESS 81681be0 SessionId: 0 Cid: 0598 Peb: 7ffd7000 ParentCid: 0200DirBase: 08740260 ObjectTable: e18ee8d8 HandleCount: 29.Image: notepad.exekd&amp;gt; .process /i 81681be0You need to continue execution (press &#39;g&#39; &amp;lt;enter&amp;gt;) for the contextto be switched. When the debugger breaks in again, you will be inthe new process context.kd&amp;gt; gBreak instruction exception - code 80000003 (first chance)nt!RtlpBreakWithStatusInstruction:80527bdc cc int 3kd&amp;gt; .reload /userLoading User Symbols.......................kd&amp;gt; bp user32!MessageBoxExWkd&amp;gt; gBreakpoint 0 hitUSER32!MessageBoxExW:001b:7e3a0838 8bff mov edi,edikd&amp;gt; du poi(esp&#43;8)0007cfb8 &amp;quot;naoexistetralala.txt.Arquivo não&amp;quot;0007cff8 &amp;quot; encontrado..Verifique se o nome&amp;quot;0007d038 &amp;quot; do arquivo correto foi especifi&amp;quot;0007d078 &amp;quot;cado.&amp;quot;kd&amp;gt; ezu poi(esp&#43;8) &amp;quot;Esse arquivo não existe! Mas é muito mané, não é mesmo?&amp;quot;kd&amp;gt; g O screenshot diz tudo:

Agora a parte mais divertida: experimente com outro notepad, ou com o explorer =)
</description>
</item>

     
        <item>
  <title>Sétimo Encontro de Programadores C&#43;&#43;</title>
  <link>http://www.caloni.com.br/setimo-encontro-de-programadores-c/</link>
  <pubDate>2010-07-26</pubDate>
  
  <guid>http://www.caloni.com.br/setimo-encontro-de-programadores-c/</guid>
  <description>Mais um fim-de-semana no ócio e na vadiagem. Tenho que manter minhas qualidades de bom programador que sou: preguiçoso, impaciente e pretensioso.
Mas nem por isso deixei de terminar uma primeira versão do aplicativo que irei usar como base na minha palestra do nosso próximo encontro C&#43;&#43;: Crash Dump Analysis. Se alguém tiver dicas de quais os problemas mais difíceis do Universo para analisar em um dump de memória, comente a respeito e veremos o que dá pra fazer.
Enquanto isso, continuo descobrindo maravilhas do WinDbg. Essa semana fiquei brincando de colocar breakpoint em user-mode, mas depurando o kernel, como fizeram os rapazes do Ntdebugging. A conclusão é que ele vale para todos os aplicativos abertos. Tente com o MessageBox!
!process 0 0 notepad.exe.reload /userbp user32!MessageBoxW Mas devaneio. Talvez outra boa qualidade de um bom programador.
</description>
</item>

     
        <item>
  <title>Antigo bem-vindo do Cine Tênis Verde</title>
  <link>http://www.caloni.com.br/sobre-cine-tenis-verde/</link>
  <pubDate>2010-04-01</pubDate>
  
  <guid>http://www.caloni.com.br/sobre-cine-tenis-verde/</guid>
  <description>Olá, caro cinéfilo! Aqui você irá encontrar a coletânea de textos escritos pelo aspirante a crítico de cinema Wanderley Caloni, criado e mantido desde 2010. São mais de 1500 textos sobre filmes e séries, de todos os gêneros, épocas e estilos.
Críticos que costumo ler:
 Roger Ebert. O falecido crítico ainda possui seus textos publicados e textos de novos filmes compartilhados entre seus colaboradores. Cinema Em Cena. Textos do melhor crítico técnico do Brasil da atualidade, Pablo Villaça, ativo há mais de 20 anos.  Se quiser mais conteúdo sobre cinema segue uma lista de links úteis:
 Cine Tênis Verde: O Livro. Está à venda na Amazon os textos reunidos do blog desde seu início. IMDB. Base de dados de (quase) todos os filmes da galáxia já lançados ou para lançar. Rotten Tomatoes. Coletânea de reviews na gringa de críticos e usuários. AdoroCinema. O queridinho atual no Brasil de quem curte filmes, possui programação dos cinemas, textos e links de críticas da imprensa e dos usuários do saite.  Assistir filmes pode ser usado como entretenimento e fuga da realidade. E, de fato, a maioria das pessoas usa o cinema para isso (eu incluso). No entanto, como tudo na vida, esta forma automática de reagir ao conteúdo que nos é jogado para consumir não é a melhor maneira de interagir com o mundo, nem de aproveitar duas horas de lazer de sua vida.
O Cinema se construiu como parte integrante da era industrial, consequência quase que lógica do avanço do capitalismo e do fornecimento de bens e serviços para uma imensa massa que era antes excluída dos bens mais essenciais à vida humana. Isso torna tudo mais complicado, pois como pode, caro leitor, uma obra ser produzida como um produto, um empreendimento de risco, visando o lucro, e ao mesmo tempo conquistar corações e mentes, e, algumas raras vezes, elevar a comunicação audiovisual em um novo patamar estético e ser celebrado como uma nova forma de arte, talvez a mais completa e complexa que um ser humano poderá experimentar neste mundo?
Para que tudo isso faça sentido é vital que as pessoas assistam cada vez mais e mais filmes, pois apenas pela prática poderemos atingir a excelência em algo na vida. Porém, diferente de consumidores passivos, que deixam seu cérebro em uma tigela enquanto mastigam pipocas como zumbis observando a historinha que é colocada na sala escura cada vez mais cheia de pequenas telas dos celulares dos outros tipos de zumbis, é imperativo que usemos o cérebro e nossa mente como ferramentas de análise crítica do que nos é imposto pela mágica da projeção em 24 (ou 48) fps. Não aguentaremos mais os velhos formatos de uma mídia enlatada se conseguirmos projetar como consumidores ativos para quais tipos de obras dedicaremos nosso tempo e suado dinheirinho.
E é essa a humilde proposta do Cine Tênis Verde, um canal de textos pretensiosamente simples que buscam fazer rápidas análises de filmes de todos os gêneros, línguas, povos, públicos e orçamentos. Nesta primeira edição do livro você irá encontrar a compilação de cerca de 1300 destes textos, escritos desde a fundação do blog em 2010, indexados por título, ano da obra, diretor, roteirista, elenco e ordem de entrada no blog (a leitura natural do livro). Haverá vários erros de gramática e ortografia que não foram pegos a tempo, além de textos iniciais que apenas listavam anotações feitas durante o filme (algumas, quase nenhuma, com alguns spoilers... esteja avisado!).
Também há uma seção onde a ficha técnica de todos os trabalhos estão listadas, ao lado de uma clássica cotação de cinco estrelas. Os links entre textos e fichas existe para você poder caminhar com mais ou menos detalhes sobre o filme. Se preferir ler apenas os textos, apenas o diretor e o ano estarão especificados (além do ano em que o texto foi escrito).
Por fim, espero que goste. O conteúdo continuará sendo atualizado (e corrigido) no próprio blog (http://www.cinetenisverde.com.br), e futuras edições irão surgir para a comodidade de uma leitura fluida. E nosso objetivo continuará sendo entender que todo filme, assim como tudo na vida, é melhor apreciado com o cérebro.
UPDATE: o domínio do blogue Cine Tênis Verde foi extinto; agora todos os posts de lá estão no meu domínio principal (http://www.caloni.com.br).
</description>
</item>

     
        <item>
  <title>Novidades no Windbg 7</title>
  <link>http://www.caloni.com.br/novidades-no-windbg-7/</link>
  <pubDate>2010-04-01</pubDate>
  
  <guid>http://www.caloni.com.br/novidades-no-windbg-7/</guid>
  <description>Semestre que vem deve sair uma nova versão do nosso depurador favorito. Alguns atrasos e novas definições do projeto fizeram com que tivéssemos mais um ou dois releases da finada versão 6 antes da revolução que será o Depurador 2010.
Entre as mudanças mais esperadas, e entre as mais inesperadas, encontramos essa pequena lista de novidades que, com certeza, deixarão o desenvolvedor de sistemas da Microsoft muito mais feliz:
Localizador automático de módulos Hoje em dia é um trabalho um pouco tedioso encontrar qual dos drivers possuía a memória de endereço 0xB8915423, mas agora, juntando o interpretador de símbolos internos e o sistema de tooltips do Windbg, será possível passar o mouse sobre um endereço qualquer e ele mostrará imediatamente quem possui a memória, como ela foi alocada e qual seu conteúdo.
Isso só é possível, é claro, com os símbolos corretamente carregados. Algo não muito difícil se você seguir as recomendações de John Robbins. E é uma mão na roda na hora de dar um feedback instantâneo para o suporte técnico quando der uma tela azul.
Edit and Continue Sim! Agora se o ddkbuild estiver no path do WinDbg e você editar o código-fonte do seu driver durante a depuração (na próxima versão a visualização não será apenas read-only) e der um step-into, automaticamente o depurador irá perguntar se deseja recompilar o projeto. Depois de ativar o processo de build, através das conexões serial/firewire/usb-debug, a nova imagem irá parar diretamente na memória kernel da máquina target.
Algumas ressalvas são colocadas pela equipe da Microsoft, no entanto. Se existirem mudanças que dizem respeito a alocação dinâmica de memória em nonpaged-pool, o Edit and Continue não será possível naquele momento, apenas depois do reboot.
O último item, mais esotérico de todos, promete ser lançado a partir da versão 7.1:
The BugCheck Fix Tip Resumidamente, é um !analyze mais esperto com o algoritmo heurístico do Visual Basic .NET. Assim que for aberto um dump de tela azul e carregados os símbolos e o caminho dos fontes, a nova versão do !analyze irá verificar os valores do BugCheck gerado e, caso seja detectado que o problema está em seu driver, irá sugerir uma correção na sua função que estiver na pilha.
Microsoft (R) Windows Debugger Version 6.9.0003.113 X86Copyright (c) Microsoft Corporation. All rights reserved.Loading Dump File [C:\Tests\BSOD\BugCheck7F\2010-03-24ClientMemory.dmp]Kernel Complete Dump File: Full address space is available************************************************************WARNING: Dump file has been truncated. Data may be missing.************************************************************Symbol search path is: SRV*c:\tools\symbols*http://msdl.microsoft.com/download/symbolsExecutable search path is:Windows XP Kernel Version 2600 (Service Pack 3) MP (2 procs) Free x86 compatibleProduct: WinNt, suite: TerminalServer SingleUserTSBuilt by: 2600.xpsp_sp3_gdr.090804-1435Kernel base = 0x804d7000 PsLoadedModuleList = 0x8055d720Debug session time: Wed Mar 24 17:51:39.216 2010 (GMT-3)System Uptime: 0 days 0:05:23.843Loading Kernel Symbols.........................................................................................Loading User Symbols............Loading unloaded module list..........................******************************************************************************** ** Bugcheck Analysis ** ********************************************************************************Use !analyze -v to get detailed debugging information.BugCheck 7F, {d, 0, 0, 0}*** ERROR: Symbol file could not be found. Defaulted to export symbols for MyDriver.sys -*** ERROR: Symbol file could not be found. Defaulted to export symbols for mfehidk.sys -Probably caused by : MyDriver.sys ( MyDriver!KeBugCheckTest&#43;2b )Followup: MachineOwner---------0: kd&amp;gt; !analyze -v******************************************************************************** ** Bugcheck Analysis ** ********************************************************************************UNEXPECTED_KERNEL_MODE_TRAP (7f)This means a trap occurred in kernel mode, and it&#39;s a trap of a kindthat the kernel isn&#39;t allowed to have/catch (bound trap) or thatis always instant death (double fault). The first number in thebugcheck params is the number of the trap (8 = double fault, etc)Consult an Intel x86 family manual to learn more about what thesetraps are. Here is a *portion* of those codes:If kv shows a taskGateuse .tss on the part before the colon, then kv.Else if kv shows a trapframeuse .trap on that valueElse.trap on the appropriate frame will show where the trap was taken(on x86, this will be the ebp that goes with the procedure KiTrap)Endifkb will then show the corrected stack.Arguments:Arg1: 0000000d, EXCEPTION_GP_FAULTArg2: 00000000Arg3: 00000000Arg4: 00000000Debugging Details:------------------BUGCHECK_STR: 0x7f_dDEFAULT_BUCKET_ID: DRIVER_FAULTPROCESS_NAME: cmd.ezeLAST_CONTROL_TRANSFER: from 80564dd2 to 80544e7bSTACK_TEXT:a7f4b6a4 80564dd2 badb0d00 89679eb0 a7f40000 nt!KiSystemFatalException&#43;0xfa7f4b774 ba182d80 e23bb528 00000002 a7f4b86c nt!NonPagedPoolDescriptor&#43;0xb2WARNING: Stack unwind information not available. Following frames may be wrong.a7f4b870 804ef19f 8a03a2e0 89665008 8972c838 MyDriver!KeBugCheckTest&#43;0x2ba7f4b880 b9da1876 89665008 8a0f3a80 00000000 nt!IopfCallDriver&#43;0x31...a7f4b940 b9c55e4d 00000002 896651e0 8972c838 mfehidk&#43;0x9128a7f4b9d8 b9c70ef5 cccccccc 8a03b9f8 8a033ab0 mfehidk&#43;0x9e4d0012f918 4ad02d98 0014efc0 00150b00 00000000 cmd!ExecPgm&#43;0x22b...0012fff0 00000000 4ad05046 00000000 78746341 kernel32!BaseProcessStart&#43;0x23STACK_COMMAND: kbFOLLOWUP_IP:MyDriver!KeBugCheckTest&#43;0x2bba182d80 668945a4 mov word ptr [ebp-5Ch],axSYMBOL_STACK_INDEX: 2SYMBOL_NAME: MyDriver!KeBugCheckTest&#43;0x2bFOLLOWUP_NAME: MachineOwnerMODULE_NAME: MyDriverIMAGE_NAME: MyDriver.sysDEBUG_FLR_IMAGE_TIMESTAMP: 4baa49d3&amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt;BugCheck Fix Tip:-----------------Try to remove the spin lock aquisition in MyDriver!KeBugCheckTest&#43;2a. By doing this,the kernel IRQL priority system will not be in starvation mode.Tip Code: C:\Tests\MyDriver\dispatch-funcs.cpp&#43;345&amp;lt;/font&amp;gt;Followup: MachineOwner--------- Existem um pouco de polêmica em torno dessa funcionalidade. Alguns dizem que ela vai mais atrapalhar do que ajudar os programadores de kernel com a vinda de analistas de sistemas Júnior programando filtros de file system sem a menor discrepância entre o que é um IRP assíncrono e uma ISR. Outros dizem que existirá uma versão paga do WinDbg com essa funcionalidade, nos mesmos moldes do Visual Studio 2010, que virá com a depuração reversa no Enterprise. Essas especulações só o tempo dirá se são verdade ou não. Se eu tiver que pagar mais caro por essas features, o lobby na empresa onde eu trabalho está garantido.
</description>
</item>

     
        <item>
  <title>Bazaar gráfico</title>
  <link>http://www.caloni.com.br/bazaar-grafico/</link>
  <pubDate>2010-02-25</pubDate>
  
  <guid>http://www.caloni.com.br/bazaar-grafico/</guid>
  <description>Bom, já que por enquanto os assuntos de macho estão em falta (acabei de voltar de férias), apresento-lhes o maravilhoso mundo do Bazaar para boiolasuser-friendly!
Ele é leve, vem enrustidoembutido na última versão e pode economizar alguns page ups/downs no prompt do DOS. Ah, sim, antes que comentem, eu não uso o Tortoise for Bazaar porque instalar shell extensions, só os muito bem feitos. (Do contrário, bem-feito para quem instalou.)
Para exibir a lista de comandos &amp;quot;amigáveis&amp;quot;, digite no prompt os comandos do Bazaar filtrando-os para os que começam com &amp;quot;q&amp;quot;:
bzr help commands | grep ^q.*qadd GUI for adding files or directories. [qbzr]qannotate Show the origin of each line in a file. [qbzr]qbranch Create a new copy of a branch. [qbzr]qbrowse Show inventory. [qbzr]qcat View the contents of a file as of a given revision. [qbzr]qcommit GUI for committing revisions. [qbzr]qconfig Configure Bazaar. [qbzr]qdiff Show differences in working tree in a GUI window. [qbzr]qgetnew Creates a new working tree (either a checkout or full branch) [qbzr]qgetupdates Fetches external changes into the working tree [qbzr]qinfo [qbzr]qinit Initializes a new (possibly shared) repository. [qbzr]qlog Show log of a repository, branch, file, or directory in a Qt window. [qbzr]qmerge Perform a three-way merge. [qbzr]qpull Turn this branch into a mirror of another branch. [qbzr]qpush Update a mirror of this branch. [qbzr]qrevert Revert changes files. [qbzr]qtag Edit tags. [qbzr] Os que eu mais uso no dia-a-dia são:
qlog e qbrowse Diversão garantida. Por meio destes simples comandos podemos ver o histórico de commits e navegar pela árvore de pastas e arquivos com a anotação do último commit para cada elemento. Só para ter uma ideia de quanto uso isso, transformei-os em opções do Explorer.
Além da utilidade básica, de quebra, o qbrowse pode te levar para um qlog filtrado, e o qlog pode te levar a um diff gráfico, que é o próximo comando que eu iria mostrar.
qdiff Coisa linda de Deus. Existem dois modos de exibição, mas o padrão já é show de bola, mostrando as mudanças em todos os arquivos de um commit de uma só vez ou do arquivo/pasta especificado pelo comando. É lógico que é possível especificar qualquer faixa de commits que você quiser ver.
Uma desvantagem desse comando é que ele oculta o resto das linhas do fonte e não mostra de jeito nenhum (pelo menos não descobri ainda como fazer isso). Sendo assim, para uma análise mais detalhada das diferenças no código-fonte sempre use um editor externo que consiga comparar arquivos inteiros (eu uso o WinMerge). Você pode colocar esse comando na forma de um diff personalizado, com o uso do qconfig.
Bônus Para quem não sabe fazer comandos de contexto no Explorer sem instalar Shell Extensions, deem uma olhada no REG exportado. Bom proveito.
</description>
</item>

     
        <item>
  <title>Restaurando o registro</title>
  <link>http://www.caloni.com.br/restauranto-o-registro/</link>
  <pubDate>2010-02-08</pubDate>
  
  <guid>http://www.caloni.com.br/restauranto-o-registro/</guid>
  <description>Algumas ferramentas viram essenciais quando o importante é tempo. As minhas favoritas são: Visual Studio e batch. Com esses dois eu faço virtualmente qualquer coisa que preciso em pouquíssimo tempo. É lógico que, na ausência dessas, alternativas são bem-vindas, como Notepad&#43;&#43;, viM, grep, cygwin.
Ontem tive que resolver uma &amp;quot;situação&amp;quot; no cliente, e graças ao bom Deus (ele também é programador) existia um Notepad&#43;&#43; na bagagem que levávamos. Além, é claro, do Excel e do sistema batch do Windows.
O problema consistia basicamente em usar a saída do RegMon para identificar e restaurar algumas modificações que danificavam a instalação do Internet Explorer. O sistema de reparo do IE não existia no cliente, pois ele estava sem Service Pack (bem-vindo ao mundo real), mas podíamos nos guiar através dele na nossa máquina virtual para saber o que faríamos. O estrago era feito durante o registro e/ou desregistro de um componente COM.
Para iniciar, filtramos os resultados do RegMon para apenas capturar escritas no registro, não importando se falharam ou deram resultado.
A partir disso executamos o registro e desregistro do componente, além da restauração do IE6, responsável por limpar a bagunça. O processo responsável por registrar componentes é o regsvr32 e o responsável por limpar a bagunça, rundll32.
Tendo a saída do RegMon exportada para formato texto, abrimos no Excel e filtramos o conteúdo pelo nome do processo. Note que existem duas instâncias de regsvr32 para usar, pois não sabemos em qual delas é danificado o registro.
Para cada um dos filtros copiamos apenas o endereço da chave alterada para dois arquivos texto: regsvr32.txt e ierestore.txt. Usaremos esse primeiro para encontrar ocorrências no segundo, provando que um modifica o que o outro consertou.
Existe um comando muito simplório em batch Windows que é o aplicativo find. Através dele podemos encontrar a ocorrência de uma string em um arquivo. Para transformar todas aquelas linhas do registro do arquivo regsvr32 em comandos find poderíamos elaborar algumas colunas no Excel ou usar o Notepad&#43;&#43; e suas macros, mais rápidas.
Para quem não conhece macros, saiba que elas são muito úteis. Às vezes até mais úteis que &amp;quot;regexes&amp;quot;, pois não é necessário pensar muito na expressão a ser usada. Macros apenas repetem os movimentos do teclado que fazemos enquanto as estamos gravando. Por exemplo, eu tenho o meu monte de linhas de registro assim:
HKLM\SOFTWARE\Microsoft\Cryptography\RNGHKLM\SOFTWARE\Microsoft\Cryptography\RNG\SeedHKCR\AppID\{EE62DE09-3A23-46DB-8FA2-266088F329CD}HKCR\AppID\{EE62DE09-3A23-46DB-8FA2-266088F329CD}\(Default)HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects\{C322BA70-E3E7-4737-821C-D25378A3F830}HKCR\CLSID\{684E2452-19E1-42CC-9C93-A83044BA1AF2}HKCR\CLSID\{684E2452-19E1-42CC-9C93-A83044BA1AF2}\Programmable... Quero transformar cada linha em um comando find. Iniciou a gravação da macro no início da primeira linha e digito o seguinte (em pseudo-alguma-coisa):
find, espaço, abre aspas, end, fecha aspas, espaço, ierestore.txt, linha abaixo, home
find &amp;quot;HKLM\SOFTWARE\Microsoft\Cryptography\RNG&amp;quot; ierestore.txtHKLM\SOFTWARE\Microsoft\Cryptography\RNG\SeedHKCR\AppID\{EE62DE09-3A23-46DB-8FA2-266088F329CD} Pronto. Parar macro. Terei que repetir isso dois milhões de vezes até o final do arquivo. Ora, então mando o Notepad&#43;&#43; repetir a minha macro até o final do arquivo e adio minha tendinite para os próximos anos.
Só preciso agora renomear meu arquivo para .bat e executar. Posso redirecionar a saída da tela para um terceiro arquivo, de onde irei formatar minha lista de entradas no registro que foram adulteradas por ambos os programas (o registro do componente COM e a restauração do Internet Explorer).
Nesse momento podemos ir tomar café. Bem melhor do que ficar horas e horas dando localizar, copiar, colar em todas as entradas do regsvr.

Terminada a operação, abrimos o terceiro arquivo, retiramos as entradas insignificantes (por exemplo, o gerador de sementes de números randômicos) e os cabeçalhos do comando, algo bem fácil já que se trata do mesmo arquivo.
---------- IERESTORE.TXT... A próxima tarefa seria analisar cada entrada e ver se ela é relevante. Essa parte foi manual, mas, encontrado um padrão, listamos rapidamente o que poderia estar dando errado e criamos uma lista de entradas para exportar do registro &amp;quot;sadio&amp;quot; a fim de gerar um .REG que corrigiria sistemas danificados.
Algumas passadas no Notepad&#43;&#43; para eliminar linhas duplicadas e algumas passadas pelo cérebro para eliminar chaves redundantes (chave dentro de chave) e tcharam!
...HKCR\Interface\{3050F2E3-98B5-11CF-BB82-00AA00BDCE0B}HKCR\Interface\{3050F2E5-98B5-11CF-BB82-00AA00BDCE0B}HKCR\Interface\{3050F32D-98B5-11CF-BB82-00AA00BDCE0B}HKCR\Interface\{3050F357-98B5-11CF-BB82-00AA00BDCE0B}HKCR\Interface\{3050F35C-98B5-11CF-BB82-00AA00BDCE0B}HKCR\Interface\{3050F37E-98B5-11CF-BB82-00AA00BDCE0B}HKCR\Interface\{3050F38C-98B5-11CF-BB82-00AA00BDCE0B}... O próximo passo para nossa obra-prima é outra macro que irá reproduzir o comando reg, que pode realizar operações no registro do Windows.
...reg export HKCR\Interface\{3050F240-98B5-11CF-BB82-00AA00BDCE0B} 3050F240-98B5-11CF-BB82-00AA00BDCE0B.regreg export HKCR\Interface\{3050F25A-98B5-11CF-BB82-00AA00BDCE0B} 3050F25A-98B5-11CF-BB82-00AA00BDCE0B.regreg export HKCR\Interface\{3050F25E-98B5-11CF-BB82-00AA00BDCE0B} 3050F25E-98B5-11CF-BB82-00AA00BDCE0B.regreg export HKCR\Interface\{3050F2E3-98B5-11CF-BB82-00AA00BDCE0B} 3050F2E3-98B5-11CF-BB82-00AA00BDCE0B.regreg export HKCR\Interface\{3050F2E5-98B5-11CF-BB82-00AA00BDCE0B} 3050F2E5-98B5-11CF-BB82-00AA00BDCE0B.regreg export HKCR\Interface\{3050F32D-98B5-11CF-BB82-00AA00BDCE0B} 3050F32D-98B5-11CF-BB82-00AA00BDCE0B.reg... E o último passo é juntar toda essa galera em um arquivo só.
copy *.reg ierestore.reg Claro, não se esqueça de retirar os cabeçalhos duplicados (Windows Registry Editor Version X.XX). E Voilà! Fácil, não? Não?! Bom, então é por isso que eu sou bem pago =)
</description>
</item>

     
        <item>
  <title>House</title>
  <link>http://www.caloni.com.br/house/</link>
  <pubDate>2010-01-25</pubDate>
  
  <guid>http://www.caloni.com.br/house/</guid>
  <description>Depois da analogia entre depuração e CSI, nada como fazer o mesmo com o seriado estilo House.
Quais as semelhanças com a profissão de programador-depurador?
Em primeiro lugar, a busca por pistas. Se algo está errado com o programa, vivemos criando teorias mirabolantes a respeito do porquê tal função estar retornando zero. No entanto, como não temos tanta capacidade adivinhatória assim, geralmente nossos palpites estão errados, e o fundo do poço irá nos mostrar uma outra função que nem estava ainda na história.
Mas existem alguns pontos-comuns de conhecimento que sempre desenvolvemos no decorrer da carreira:
  Se a última instrução do código é zero (ou algo próximo disso), provavelmente a pilha foi corrompida por alguém que tentou zerar uma variável, e junto dela o ponto de retorno de alguma função chamadora.
  Se um programa trava em um determinado momento, voltando após um período previsível de tempo (30 segundos), automaticamente sabemos que existe algum evento/mutex usado de forma errada que, dadas as circunstâncias, apresentou uma espera longa demais.
  Se uma versão nova capota em um procedimento em que a versão antiga nunca capotou, podemos divagar rapidamente quais as características da nova versão que fizeram com que isso acontecesse, ainda sem olhar para o código.
  Dessa forma é possível criar teorias a partir da análise mental do que o programa normal deveria estar fazendo, mas não está. É esse tipo de análise que é feita no seriado.
Porém, o lado bom: podemos testar todas nossas hipóteses. Na vida real! Se, por enquanto, matar pacientes para depois ressuscitá-los é coisa de ficção, matar sistemas e reiniciá-los não é. E, dependendo do problema, podemos sempre replicá-lo em &amp;quot;outro paciente&amp;quot;.
Talvez isso faça a profissão tão realizadora e viciante: para resolver um problema, geralmente temos todas as cartas na mão, e se não temos, fazemos ter. Afinal de contas, somos nós que iremos ressuscitar o sistema perdido.
 A Ciência Médica de House  </description>
</item>

     
        <item>
  <title>Devaneio nerd rápido sobre profecias</title>
  <link>http://www.caloni.com.br/devaneio-nerd-rapido-sobre-profecias/</link>
  <pubDate>2009-12-30</pubDate>
  
  <guid>http://www.caloni.com.br/devaneio-nerd-rapido-sobre-profecias/</guid>
  <description>Para quem já analisou os dados de uma tela azul sabe que, quando o Windows acha um culpado (vulgo driver) a data de sua compilação é exibida em um formato conhecido como DateStamp ou TimeStamp. Nesse formato o que temos é um número hexadecimal que segue o formato de tempo do Unix, que no caso é o número de segundos desde o dia primeiro de Janeiro de 1970. Isso, por curiosidade, nos dá uma margem de 140 anos antes dos número se repetirem se usarmos 32 bits nessa contagem.
O comando .formats do WinDbg nos consegue trazer desse número a hora exata em que determinado componente foi compilado. Se, por exemplo, um driver faltoso apresentou um DateStamp igual a 49EE9758, podemos concluir que ele foi compilado no dia 22 de abril de 2009, uma linda quarta-feira.
0:000&amp;gt; &amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt;.formats 49EE9758&amp;lt;/font&amp;gt;Evaluate expression:Hex: 00000000`49ee9758Decimal: 1240373080Octal: 0000000000011173513530Binary: 00000000 00000000 00000000 00000000 01001001 11101110 10010111 01011000Chars: ....I..X&amp;lt;strong&amp;gt;&amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt; Time: Wed Apr 22 01:04:40 2009&amp;lt;/font&amp;gt;&amp;lt;/strong&amp;gt;Float: low 1.95454e&#43;006 high 0Double: 6.12826e-315 Quando fazemos algo muitas vezes seguidas temos o hábito inconsciente de observar certas idiossincrasias dos dados que sempre vem e vão. No caso dos Date Stamps, sempre me veio o fato deles iniciarem com 4 e estarem prestes a &amp;quot;virar o contador&amp;quot; para 5.
Isso aos poucos - entre uma tela azul e outra - me deixou curioso a respeito de quando seria o dia fatídico em que teríamos o DateStamp 50000000, um número cabalístico em nosso sistema decimal. E, imaginem só:
0:000&amp;gt; &amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt;.formats 50000000&amp;lt;/font&amp;gt;Evaluate expression:Hex: 00000000`50000000Decimal: 1342177280Octal: 0000000000012000000000Binary: 00000000 00000000 00000000 00000000 01010000 00000000 00000000 00000000Chars: ....P...&amp;lt;font color=&amp;quot;#0000ff&amp;quot;&amp;gt; Time: Fri Jul 13 08:01:20 2012&amp;lt;/font&amp;gt;Float: low 8.58993e&#43;009 high 0Double: 6.63124e-315 Pois é, meus amigos. O DateStamp para a virada do contador Unix se fará numa manhã de sexta. Para ser preciso, uma sexta-feira 13.
Curioso, não? Mais curioso que isso, só sabendo que o ano que isso vai ocorrer é o igualmente fatídico 2012. Felizmente antes de dezembro.
</description>
</item>

     
        <item>
  <title>Devaneio nerd rápido sobre aniversários</title>
  <link>http://www.caloni.com.br/devaneio-nerd-rapido-sobre-aniversarios/</link>
  <pubDate>2009-12-14</pubDate>
  
  <guid>http://www.caloni.com.br/devaneio-nerd-rapido-sobre-aniversarios/</guid>
  <description>Hoje não é aniversário do blogue. É meu. Há exatos (sic) trinta anos nascia eu, essa pessoa que vos fala. Legal, não?
Beeeem legal. Tão legal quanto saber que o núcleo de um átomo representa 99,9% de sua masssa ou que uma borboleta bate duzentas mil vezes a asa por hora (só chutando, eu não sei realmente).
Ou saber, talvez, que o homem deciciu contar sua idade terrena através do número de vezes que esse planetinha gira em órbita de sua estrela. É o tipo de curiosidade mais que suficiente para comentar em sua quinquagésima festa de aniversário durante a rodinha do tédio (aquela em que você não tem nada pra comentar porque já é a quinquagésima festinha do ano e as pessoas já estão cansadas de se verem).
Dr. House: Ah, my birthday. Normally I&#39;d put on a festive hat and celebrate the fact that the Earth has circled the Sun one more time; I really didn&#39;t think it was going to make it this year, but darn it if it wasn&#39;t the little planet that could all over again. (1.06 The Socratic Method)
Do ponto de vista estatístico (sempre ela!), então, nem se fala. Na região onde eu moro vivem dez milhões de pessoas. Em uma conta de padaria, trinta mil fazem aniversário junto comigo. Na mesma hora, talvez umas mil. Bom, mas existem sessentas minutos em uma hora! Dessa forma, eu tenho a chance de ter nascido no mesmo minuto junto de cerca de vinte rebentos. Ah, e os segundos!?!? É verdade. Sou obrigado a torcer o nariz para o &amp;quot;fato&amp;quot; que tenho mais de 50% de chance de ser a única pessoa na região de São Paulo a ter nascido no mesmo segundo. Que especial! Bom, no mundo inteiro, é óbvio que não tenho nem um milissegundo pra mim, o que torna a data tão insignificativa quanto um alerta do orkut sobre a mesma.
  Se aplicarmos a mesma lógica matemática à morte e aos nascimentos chegaremos à inevitável (e óbvia) equação que a vida de um indivíduo para a nossa espécie hoje em dia vale menos que sua aposentadoria. Até porque, dessa imensa maioria de pessoas que nascem e morrem, a maioria é pobre e não tem condições de contribuir com uma boa parcela de gastos para o bem de nossa economia. A maioria é burra também, e pode contribuir menos ainda pelo valor agregado de nossa riqueza.
  Me foi contado que aniversários são eventos para celebrar a vida, principalmente do aniversariante. Ótimo! Isso quer dizer que a vida de cada um vale menos de 0,3% do ano inteiro, já que reservamos apenas um dia em 360 para confirmar que ainda estamos respirando.
  Bom, esse artigo já devanou demais. E como meu objetivo nem foi chegar a uma conclusão, termino por aqui. Ah, para dar mais corda pra pensar: feliz natal!
PS: Mensagens de feliz aniversário serão devidamente descartadas. Ah, e feliz ano-novo pra você, também.
</description>
</item>

     
        <item>
  <title>Aprendendo um terceiro idioma</title>
  <link>http://www.caloni.com.br/aprendendo-um-terceiro-idioma/</link>
  <pubDate>2009-12-11</pubDate>
  
  <guid>http://www.caloni.com.br/aprendendo-um-terceiro-idioma/</guid>
  <description>Inspirado pelo texto de Chad Fowler que explica como o aprendizado de um segundo idioma mudou sua vida (sua língua-mãe é o inglês americano), resolvi descrever brevemente o que foi o momento da minha vida que decidi que iria tentar aprender Russo. Lógico, sem todo o folclore e a experiência de vida do autor do original.
Primeiro, meus motivos primários:
 Estava escutando Tatu; Costumava conversar pelo ICQ com uma amiga de Moscou (em inglês, apesar dela falar mais três ou quatro idiomas; e ela só tinha 19 anos!); Estava querendo aproveitar parte do meu cérebro que fica inerte a maior parte do tempo porque meu emprego basicamente só mexe com coisas (quase) lógicas, como programação; Achava uma língua bem bonita e exótica; Gosto de jogar xadrez (o que isso tem a ver?).  Bom, no início comecei aprendendo o alfabeto. Alguns podem dizer que não há nenhum segredo no cirílico, e de fato não há. Porém, uma coisa é saber interpretar mais ou menos aquelas letrinhas derivadas do grego; outra completamente diferente é saber escrever em letra de base e em letra de mão todos os 33 caracteres, e ainda saber de cor o leiaute do teclado russo. Isso leva um pouco de tempo, e é bem divertido!
A partir daí passei cerca de seis meses apenas treinando a escrita e leitura do cirílico, aprendendo a diferença de som dependendo do contexto, um caderno a tiracolo no meio do ônibus, do trem e do metrô escrevendo infinitas linhas incompreensível provavelmente por 99% das pessoas que cruzavam meu caminho e olhavam curiosas.
Depois, o idioma em si. Nessa fase resolvi apelar para um curso disponível no mosteiro S. Bento ministrado por uma russa autência, de S. Petersburgo. Ela não falava muito bem português, o que para mim era um &amp;quot;plus&amp;quot;.
Passei mais seis meses de curso com ela e com alguns textos que ia baixando da internet. Depois do curso comprei um curso em áudio e texto que fui acompanhando morosamente pelo resto dos dois anos que passei me aventurando pelo idioma.
No meio do caminho um amigo meu achou o podcast Spoonful of Russian, o que foi uma diversão só, especialmente pelo conhecimento cultural e musical do povo russo. Minha amiga também me enviou alguns CDs de bandas russas famosas, e fiquei especialmente encantando com Ivan Kupala, que até hoje escuto. Se trata de uma banda que pegou músicas do folclore russo e adaptou para os tempos atuais, mas cantado ainda por velhinhas e velhinhos que aparentemente parecem ter saído de uma aldeia dos Montes Urais.
O cinema e a BBC russa também representaram um instrumento de aprimoramento do listening do dia-a-dia. Uma coisa é escutar um russo falando devagar durante uma aula de declinação do futuro por aspecto. Outra coisa é ver alguém usando isso enquanto atravessa a rua conversando com um amigo no meio do barulho da cidade grande, ou uma mulher que mais parece uma metralhadora disparando 500 notícias de uma vez no podcast de um jornal da internet.
Infelizmente, essa fase esmaeceu. Agora estou muito interessado em finanças e isso fez com que o russo ficasse cada vez mais para trás. Se me pedir hoje para falar algo em russo vou conseguir apenas balbuciar as mais &amp;quot;comunzinhas&amp;quot;, pois esqueci todo o resto. Foi perda de tempo? Claro que não! Foi uma experiência que mostra que podemos aprender qualquer coisa a qualquer hora, independente do quão estranho ou bizarro isso seja.
¿¿ ¿¿¿¿¿¿¿¿!
</description>
</item>

     
        <item>
  <title>À procura de vida extraterrestre</title>
  <link>http://www.caloni.com.br/a-procura-de-vida-extraterrestre/</link>
  <pubDate>2009-07-20</pubDate>
  
  <guid>http://www.caloni.com.br/a-procura-de-vida-extraterrestre/</guid>
  <description>Faz uns bons dez anos que eu instalei pela primeira vez em meu Pentium 133 MHz o seti@home, um programinha que se propunha a localizar vida extraterrena através de emissões de rádio capturadas pelas nossas potentes antenas de Arecibo. Ele dizia fazer isso durante o tempo ocioso do meu processador. Como eu sou uma pessoa que costuma costumava confiar bastante nas pessoas, além de ser fã incondicional do filme Contato, instalei sem medo.
Algum tempo se passou e hoje volto a instalar o mesmo programa, agora envolto em um invólucro de programas de mesmo teor chamado Boinc, que junta todas essas redes de trabalho em equipe. O computador é usado hoje em dia para diversos trabalhos que exigem um certo esforço no processamento que torna proibitivo alocar máquinas somente para isso (se não impossível do ponto de vista geográfico).
Eis uma lista dos principais projetos disponíveis através do Boinc que me chamaram a atenção:
 Climateprediction.net busca prever as possíveis consequências para o mundo das futuras transformações no clima. CPUGrid.net é uma simulação molecular de proteínas otimizada para as GPUs da NVidia e o Playstation 3. Superlink@Technion e ajude os cientistas a encontrar os prováveis genes causadores de fatalidades como câncer, a diabetes, hipertensão e esquizofrenia. Chess960@home para análise de uma variante do xadrez tradicional que sempre coloca as peças iniciais em posições aleatórias. PrimeGrid é um gerador de uma base de dados pública de números primos sequenciais, além de procurar por números primos gêmeos gigantes (vai saber). Quantum Monte Carlo at Home não é o que parece: Estudo da estrutura e da reatividade de moléculas usando a Química Quântica (?).  Dentre eles, acabei ficando mesmo com o bom e velho seti@home. Pode me chamar de egoísta, mas mesmo que encontrem a cura do câncer, não será muito produtivo para mim, que possuo questões existenciais que, acredito eu, facilitariam a compreensão das pessoas acerca da nossa extrema pequenez nesse universo, nos colocando cada vez mais no cantinho de nossa existência.
Escolha o seu!
</description>
</item>

     
        <item>
  <title>Como compilar em somente um passo</title>
  <link>http://www.caloni.com.br/como-compilar-em-somente-um-passo/</link>
  <pubDate>2009-05-25</pubDate>
  
  <guid>http://www.caloni.com.br/como-compilar-em-somente-um-passo/</guid>
  <description>Uma das primeiras perguntas do teste do Joel é saber se você pode compilar todo o projeto em apenas um passo. Essa é uma questão essencial e um desafio para muitas equipes. Perdem-se horas sagradas para gerar um novo Release.
Compilação automática geralmente está disponível nas ferramentas de desenvolvimento. Se você estiver usando o Visual Studio, por exemplo, é possível fazer isso com uma linha:
devenv minha-solução.sln /Rebuild Release Se não for exatamente o que você precisa, basta fazer uma pesquisa de quinze minutos e encontrar os parâmetros corretos. O objetivo é: eu rodo esse comando em cima do projeto inteiro em uma máquina zerada e ele simplesmente compila.
Múltiplas soluções É lógico que ter apenas um solution/workspace para guardar projetos médios e grandes é inviável. Demora para carregar no ambiente e possuem dezenas de dependências. Isso já foi tentado duas vezes nas duas empresas em que trabalhei e não funcionou. Talvez por isso seja necessário criar um script que rode o comando acima para todas as soluções do projeto, o que não muda muito o modus operandi da coisa:
call :Build ..\Libraries\Libraries.slncall :Build ..\Services\Services.slncall :Build ..\Drivers\Drivers.slncall :Build ..\Tools\Tools.slngoto :eof:Buildecho %1...devenv &amp;quot;%1&amp;quot; /Rebuild Releaseexit /b %errorlevel% Note que meu script usa a estrutura padronizada dos diretórios de um projeto, onde cada tipo de componente tem sua pasta e solução.
Aos poucos você pode ir colocando &amp;quot;frescurinhas&amp;quot; em seu build (executa Debug e Release, roda automatizado no servidor, faz testes unitários, incrementa o número da versão, ...), mas algumas premissas sempre se mantêm:
  Deve ser possível compilar o projeto inteiro em um passo
  Deve ser possível usar qualquer máquina de desenvolvimento para isso
  Regras simples de ser seguidas se você usar sempre a máxima do KISS.
</description>
</item>

     
        <item>
  <title>Meu roteiro C&#43;&#43;</title>
  <link>http://www.caloni.com.br/meu-roteiro-c/</link>
  <pubDate>2009-05-20</pubDate>
  
  <guid>http://www.caloni.com.br/meu-roteiro-c/</guid>
  <description>Como não consigo mais ter ideias para artigos, resolvi catalogar todas as coisas que já falei nesse blogue e, o mais importante, todas as coisas que ainda não falei nesse blogue (e espero um dia falar ou talvez nunca fale), começando por C&#43;&#43;, que era o intuito original (só que não é mais, porque eu uso mais a Win32 API que a STL):
C&#43;&#43;   História
 A linguagem BCPL O código-objeto A linguagem B A &amp;quot;função&amp;quot; char O primeiro printf da história A linguagem C A linguagem C&#43;&#43; As influências    Conceitos
 O conceito programa O código-objeto Processo de compilação Declaração x definição Tipos Lvalue x Rvalue A passagem por valor Ponteiros Estruturas e classes Espaços de nomes Polimorfismo estático Herança Polimorfismo dinâmico Iteradores Função-objeto Templates Algoritmos genéricos Qualificadores (traits) O conceito RAII    Linguagem
 O operador de subscrito A proteção protected Sizeof e strings literais Uso de reflexão com typeid Typeid e o polimorfismo Ponteiros de método Ponteiros de método e o this Try-catch fora do corpo da função Sobrecarga de operadores    Biblioteca
 Biblioteca C no Windows Mobilidade da pilha com prinff Erros comuns de iteradores STL Boost    Dicas
 Erros comuns de iniciantes Ponteiro nulo em entrevistas Nem todo ponteiro nulo é inválido Decifrando código obscuro Usando do-while para evitar erros de macro Sobrecarga por tipo de retorno    Espero que isso me ajude a continuar completando as lacunas do saite. Se não der certo, pelo menos já sei o que fiz.
Sugestões?
</description>
</item>

     
        <item>
  <title>Últimas pesquisas na blogosfera nacional</title>
  <link>http://www.caloni.com.br/ultimas-pesquisas-na-blogosfera-nacional/</link>
  <pubDate>2009-05-08</pubDate>
  
  <guid>http://www.caloni.com.br/ultimas-pesquisas-na-blogosfera-nacional/</guid>
  <description>É um imenso prazer constatar que hoje, mais de dez anos depois de eu ter iniciado minha caminhada pelo mundo da programação C/C&#43;&#43;, temos uma reação de blogues e saites prontos para elucidar questões simples e avançadas dessas duas linguagens que ainda não morreram e, se depender de como as coisas andam, ainda vão durar pelo menos mais uns dez anos (sim, não sou tão otimista assim).
Esse artigo é só para constar em minha lista de referência para o aprendizado de C, C&#43;&#43; e todas as outras coisas que vem depois. Se eu tivesse que escrever isso lá no início, provavelmente recomendaria mais linques de livros e saites em inglês. Hoje, felizmente, temos um conteúdo em pleno desenvolvimento em nossa blogosfera tupiniquim. E espero que continue assim!
  Strings
  Strings e Números
  Os diversos tipos de casting
  Pointeiros e Referências
  Templates
  Smart Pointer - Introdução
  Auto Pointer (auto_ptr)
  Boost Shared Pointer, Weak Pointer e Scoped Pointer
  Boost Shared Array e Scoped Array
  Quando usar cada um dos smart pointers
  As infinitas e riquíssimas discussões na lista C/C&#43;&#43;
  Como usar o Visual Studio
  Compilando o Boost no Windows (usando Visual Studio)
  A internet brasileira cresceu como um todo. Mesmo que você deseje saber mais sobre microprocessadores ou drivers para Windows, em português, hoje isso é possível. É claro que o que não é possível é você se dedicar profissionalmente a essas áreas sem saber inglês. Mas é uma muito bem-vinda manifestação das pessoas que fazem acontecer todas essas coisas em nosso país.
</description>
</item>

     
        <item>
  <title>Deixe o programador programar</title>
  <link>http://www.caloni.com.br/deixe-o-programador-programar/</link>
  <pubDate>2009-04-09</pubDate>
  
  <guid>http://www.caloni.com.br/deixe-o-programador-programar/</guid>
  <description>Seis meses se passaram desde que defini o cronograma para um projeto importante (mas não urgente) que deveria ser entregue cinco meses atrás. O tempo em dias que estimei na época não havia mudado nada, mas uma série de desventuras (tarefas brotando do chão e umas férias bem merecidas) fizeram com que quase nenhuma linha de código tivesse sido produzida para aquele projeto. No entanto, tenho a consciência tranquila, já que estou em uma de minhas fases mais produtivas e inovadoras.
Então eis que surge na porta do templo sagrado (a sala de desenvolvimento) um dos mortais que costuma acreditar que &amp;quot;dirige&amp;quot; seus funcionários. Vira-se para mim e &amp;quot;define&amp;quot; que esse projeto não poderá passar desse mês. E todas aquelas tarefas urgentes que estavam furando a fila de prioridades, como a última da semana passada, devem ser postergadas. É lógico que nada disso foi surpresa, visto que outros discursos desse tipo e outras tarefas urgentes já haviam aparecido no decorrer desses seis meses; mas, enfim, esse foi o primeiro deadline oficialmente definido.
Por isso mesmo, com uma preocupação constante em minha cabeça, decido desestressar um pouco e ter um almoço bem alargado (quatro horas) em um outro bairro, em outro ambiente, com uns velhos amigos para jogar alguma conversa fora. Nada como a vida fluindo devagar para fazer esquecer detalhes menos essenciais, como trabalho e estresse no trabalho. Sou obrigado nessa hora a parafrasear o sócio mais espirituoso de nossa empresa, que coincidentemente estava presente no almoço: &amp;quot;mas, afinal de contas, quem foi que definiu que a vida tem que ter trabalho e estresse?&amp;quot;.
Eu assino embaixo.
Porém, terminado o almoço, volto a pensar em como resolverei o impasse do cronograma do tal projeto superimportante, quando, ao passar pela entrada do metrô, colocam na minha mão justamente um desses panfletos de rua com mensagens subliminares. E nele estava, acreditem, leitores, a solução para todos os meus problemas!
Se você está com algum PROBLEMA DE DIFÍCIL SOLUÇÃO e precisa de AJUDA URGENTE, peça esta ajuda a Santo Expedito que é o Santo dos Negócios que precisam de Pronta Solução e cuja invocação nunca é tardia. (Abaixo segue a oração ao Santo).
É lógico que toda essa história fantasiosa pode ser pura ficção com um pingo sequer de realidade, e no fundo almocei foi mesmo é com meus amigos imaginários. No entanto, é capaz que esse não seja um cenário incomum em muitas empresas de tecnologia por aí afora, que insistem em fazer duas coisas que, aliadas, podem gerar qualquer coisa, menos um projeto bem feito e testado:
 Pedir que seus funcionários elaborem um cronograma de um projeto complexo (um mês ou mais de trabalho). Pedir que seus funcionários espremam o tempo definido para o projeto de alguma forma mágica.  O problema é que, na área de informática, apesar de ciência esotérica e cheia de mistérios, não existem santos, não existem milagres e não existe mágica que gere um código de qualidade se não for despendido para ele uma soma considerável de tempo e trabalho. E não estou falando de nenhum luxo. É o tempo justo, mesmo.
Por isso que há eras meu amigo Strauss e o conhecido Joel falam sobre as necessidades básicas de um programador e criticam o resto. As necessidades básicas, na minha opinião, se resumem em três regras de ouro:
 Dê condições para o programador pensar Dê condições para o programador trabalhar Dê condições para o programador programar  Fora isso, o resto é perfumaria, perda de tempo e enchimento de saco. Os bons programadores não querem ser gerenciados: querem programar. Só isso. Deixe-os com seus problemas e vá tomar conta de algo que não atrapalhe suas vidas. Já estará fazendo um imenso avanço na produtividade de sua empresa.
</description>
</item>

     
        <item>
  <title>Provas de conceito... yes!</title>
  <link>http://www.caloni.com.br/provas-de-conceito-yes/</link>
  <pubDate>2009-03-19</pubDate>
  
  <guid>http://www.caloni.com.br/provas-de-conceito-yes/</guid>
  <description>Uma prova de conceito bem feita segue todos os passos em uma forma micro para entender e provar como as coisas irão funcionar no código de produção: a forma macro.
A consequência interessante disso é que, uma vez que a prova de conceito deva ser um miniprojeto das principais partes de um software, desenvolvê-la significa programar todas as partes que realmente importam, ou seja, centrais para o funcionamento.
Portanto, conclui-se que desenvolver provas de conceito é a coisa mais divertida do Universo.
Além de serem extremamente divertidas e disputadas entre os programadores, desenvolver provas de conceito gera uma gama de vantagens para o desenvolvimento &amp;quot;sério&amp;quot; do software como um todo, &amp;quot;rodável&amp;quot; e &amp;quot;vendável&amp;quot;:
 Permite testar as ideias por trás do software antes de gastar todo o tempo desenvolvendo-o. Gera conhecimento para os programadores e para que outros produtos sejam desenvolvidos. Torna o desenvolvimento algo ainda mais divertido, pois tira a parte chata a respeito de comentar código, testar código, mensurar código, rever código, etc. Consegue tornar o milagre do cronograma realista mais perto do provável.  Apenas essas vantagens já praticamente obrigam o profissional do software a pensar em produtos novos em termos de como pode-se testar tudo o que se está dizendo antes de realmente começar a trabalhar pra valer.
Mas antes que se pense que fazer provas de conceito não requer nenhuma responsabilidade e que o que você quer ser quando crescer é desenvolvedor de prova de conceito, é necessário colocar alguns pingos nos is antes de continuar. Para criar provas de conceito realmente agregadoras para o projeto, deve-se sempre:
 Dividir o software em seus componentes tecnológicos mais críticos e vitais para o sucesso da solução. Proteger as provas de conceito contra qualquer tipo de preconceito a respeito da tecnologia em questão: pese somente os fatos! Conhecer as limitações do software antes mesmo de provar seu funcionamento (por exemplo, não vai funcionar no Windows NT nem a pau). Garantir que esse conhecimento seja sempre compartilhado entre todos do desenvolvimento, pois trata-se de um projeto vazio que formará talvez as bases de um novo produto; se todos conhecerem as bases primeiro, ficará muito mais fácil todos tomarem conta.  Por último, deve-se pensar sempre em todos os programadores da equipe desenvolvendo provas de conceito. Um doce tão gostoso não pode ser privilégio apenas dos veteranos ou dos acadêmicos chatos, pois torna a vida dos &amp;quot;corregedores&amp;quot; de bugs chata e enfadonha. E error prone.
Por isso, desde a estagiária até o mocinho bicentenário merecem mexer em código fresco pelo menos uma vez a cada ciclo de desenvolvimento, que terminará com uma versão nova cheia de melhorias que foram testadas em suas respectivas provas de conceito. Provas de conceito que todos tiveram a honra de brincar um pouquinho.
</description>
</item>

     
        <item>
  <title>Como usar WTL com o ATL do DDK</title>
  <link>http://www.caloni.com.br/como-usar-wtl-com-o-atl-do-ddk/</link>
  <pubDate>2008-10-15</pubDate>
  
  <guid>http://www.caloni.com.br/como-usar-wtl-com-o-atl-do-ddk/</guid>
  <description>Eu simplemente não entendo a organização dos cabeçalhos e fontes dos SDKs da Microsoft. Houve uma vez em que o ATL era distribuído junto com o SDK, e dessa forma conseguíamos usar o WTL sem ônus. Porém, um belo dia, isso é retirado do pacote, para tristeza dos que já haviam convertido a biblioteca de janelas para fonte aberto.
No entanto, num belo dia, qual não foi minha surpresa ao notar umas pastinhas chamadas atl21, atl30 e atl71 dentro da distribuição do WDK (o finado DDK, renomeado sabe-se-lá-por-quê)? Pelo visto, tem alguém arrastando coisa errada pra onde não devia nos instaladores de Seattle. Esses estagiários!
O fato é que eles fizeram isso, e agora é possível ter o WTL mais novo compilado com o WDK. E nem é tão difícil assim.
A primeira coisa a fazer é obter o tal doWDK. Para variar um pouco, agora existe um processo de registro antes de obter acesso ao download, mais ou menos nos termos da Borland para baixar o Builder / Turbo / Developer Studio.
Após instalado, em qualquer lugar da sua escolha, configure no seu Visual Studio Express o caminho de onde se encontra a pasta atl71 (ou a 30, ou a 21). Aproveite também para colocar a pasta do WTL e o diretório de LIBs:
Isso vai fazer com que pelo menos os exemplos que vêem com o WTL compilem.
No entanto, você verá o seguinte erro durante a compilação dos recursos:
------ Build started: Project: MTPad, Configuration: Debug Win32 ------Compiling resources...Microsoft (R) Windows (R) Resource Compiler Version 6.0.5724.0Copyright (C) Microsoft Corporation. All rights reserved.Linking...CVTRES : fatal error CVT1100: &amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;duplicate resource&amp;lt;/font&amp;gt;. type:MANIFEST, name:1, language:0x0409LINK : fatal error LNK1123: failure during conversion to COFF: file invalid or corruptBuild log was saved at &amp;quot;file://c:\Lng\WTL\Samples\MTPad\Debug\BuildLog.htm&amp;quot;MTPad - 2 error(s), 0 warning(s)========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ========== Para resolver esse problema, remova a inclusão do arquivo de manifesto no arquivo RC:
2 TEXTINCLUDE DISCARDABLEBEGIN&amp;quot;#include &amp;quot;&amp;quot;atlres.h&amp;quot;&amp;quot;\r\n&amp;quot;&amp;quot;\0&amp;quot;END&amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;3 TEXTINCLUDE DISCARDABLEBEGIN&amp;quot;CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST &amp;quot;&amp;quot;res\\\\MTPad.exe.manifest&amp;quot;&amp;quot;\r\n&amp;quot;&amp;quot;\0&amp;quot;END&amp;lt;/font&amp;gt;#endif // APSTUDIO_INVOKED...#ifndef APSTUDIO_INVOKED///////////////////////////////////////////////////////////////////////////////// Generated from the TEXTINCLUDE 3 resource.//&amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST &amp;quot;res\\MTPad.exe.manifest&amp;quot;&amp;lt;/font&amp;gt;/////////////////////////////////////////////////////////////////////////////#endif // not APSTUDIO_INVOKED Depois dessa alteração, deve ainda existir o seguinte erro de linquedição:
------ Build started: Project: MTPad, Configuration: Debug Win32 ------Compiling resources...Microsoft (R) Windows (R) Resource Compiler Version 6.0.5724.0Copyright (C) Microsoft Corporation. All rights reserved.Linking...&amp;lt;font color=&amp;quot;#ff0000&amp;quot;&amp;gt;mtpad.obj : error LNK2019: unresolved external symbol&amp;quot;void * __stdcall ATL::__AllocStdCallThunk(void)&amp;quot; (bla bla bla)mtpad.obj : error LNK2019: unresolved external symbol&amp;quot;void __stdcall ATL::__FreeStdCallThunk(void *)&amp;quot; (bla bla bla)&amp;lt;/font&amp;gt;.\Debug/MTPad.exe : fatal error LNK1120: 2 unresolved externalsBuild log was saved at &amp;quot;file://c:\Lng\WTL\Samples\MTPad\Debug\BuildLog.htm&amp;quot;MTPad - 3 error(s), 0 warning(s)========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ========== Esse problema ocorre porque as funções de alocação e desalocação de memória da ATL estão em outra LIB que os exemplos da WTL desconhecem. Para resolver, basta incluir essa nova dependência:
#pragma comment(lib, &amp;quot;&amp;lt;strong&amp;gt;atlthunk.lib&amp;lt;/strong&amp;gt;&amp;quot;) E pronto! Agora temos todo o poder das 500 milhões de classes da ATL aliadas à ilimitada flexibilidade das classes de janelas da WTL.
Para aprender a usar WTL   Explicando a sopa de letrinhas da programação C/C&#43;&#43; para Windows: WTL
  WTL for MFC Programmers
  </description>
</item>

     
        <item>
  <title>Impressões do quinto encontro de CCPP</title>
  <link>http://www.caloni.com.br/impressoes-do-quinto-encontro-de-ccpp/</link>
  <pubDate>2008-10-07</pubDate>
  
  <guid>http://www.caloni.com.br/impressoes-do-quinto-encontro-de-ccpp/</guid>
  <description>Pois é, passou, acabou... e foi muito bom!
E dessa vez me abstenho de fazer os comentários de sempre, visto que já está rolando uma discussão muito produtiva sobre o resultado desse último encontro, opiniões que, sinceramente, já refletem os pensamentos de todos que participaram desse magnânimo encontro de usuários.
</description>
</item>

     
        <item>
  <title>O que acontece com um programador com pressa</title>
  <link>http://www.caloni.com.br/o-que-acontece-com-um-programador-com-pressa/</link>
  <pubDate>2008-10-05</pubDate>
  
  <guid>http://www.caloni.com.br/o-que-acontece-com-um-programador-com-pressa/</guid>
  <description>Eu já sabia, mas é lógico que não ia falar.
Há um tempo atrás um rapaz me pediu para responder uma série de questões sobre a carreira de programador C&#43;&#43;. Era um rapaz empolgado com a idéia de aprender a linguagem em seis meses, com um roteiro, cronograma e um blogue recém-criados.
Como quase toda uma geração do imediatismo, aconteceu o inevitável: o blogue já não é atualizado há quase dois meses e toda aquela empolgação do começo deve ter virado fumaça assim que a pessoa vira a esquina e aparece uma coisa nova para fazer. E daí surgem as desculpas, o blá-blá-blá de todos aqueles que nunca têm tempo.
Eu sou um deles, mas de vez em quando atualizo esse meu espacinho =)
Na experiência de vida que tenho com todas aquelas idéias mirabolantes que as pessoas possuem de fazer alguma coisa, seja um software, aprender algo novo, ou até criar uma rotina qualquer, eu diria que quase todas, se não todas, falharam.
É natural que no começo, quando a idéia brota, e mais idéias formentam a idéia original, o empolgamento nos dá a falsa impressão que podemos fazer isso facilmente, e que é só planejar, ter vontade e ir em frente que conseguimos. É claro que toda essa impressão muda com o passar do tempo, principalmente para aquelas pessoas que possuem muitas idéias em muito pouco tempo, algo que acontece bastante com programadores, mas que em geral afeta todo mundo.
Em se tratando de software, a primeira coisa que deve ser feita, sempre, é planejar as tarefas visíveis a serem feitas para esboçar um panorama possível para o futuro do projeto. Eu disse possível no sentido de realizável.
O segundo passo é esquecer esse negócio de realizável, cair na real e encarar os fatos: o mundo não é perfeito. Comece a colocar defeitos no cronograma, tentar imaginar o que vai sair errado e, principalmente, conhecer você mesmo e as pessoas envolvidas para ter a real expectativa do que pode ser feito em quanto tempo.
Após jogar água fria o suficiente (às vezes são necessários muitos baldes) sobre suas idéias novas e excitantes, temos um panorama um pouco mais preciso, mais realista e, agora sim, passível de ser feito e acontecer de verdade.
Só que ainda não acabou.
É claro que isso tudo é o começo do projeto. Após a primeira semana, o primeiro mês, o segundo mês e o segundo semestre as atividades devem ser revistas e reprojetadas. Mais uma vez entra a regrinha da água fria. Não é porque deu errado no começo que não pode dar mais errado ainda no final.
Esse pequeno chamado foi apenas um reforço do apelo que Rodrigo Strauss fez em nosso último encontro de C&#43;&#43;. Nosso grupo precisa de mais pessoas que escrevam algo. Portanto, façam blogues, mas não os deixem desgarrados!
</description>
</item>

     
        <item>
  <title>Cnasi, geração Y e seus gastos em TI</title>
  <link>http://www.caloni.com.br/cnasi-geracao-y-e-seus-gastos-em-ti/</link>
  <pubDate>2008-09-25</pubDate>
  
  <guid>http://www.caloni.com.br/cnasi-geracao-y-e-seus-gastos-em-ti/</guid>
  <description>Nosso crachá de visitantes dava direito a uma palestra. E haviam muitas. Porém, logo após a hora do almoço, das disponíveis uma era particularmente interessante, pois citava uma expressão que eu e minha colega nunca havíamos escutado: um senhor iria nos falar sobre como lidar com essas novas pessoas que estão cada vez mais invadindo nossas casas e nossos escritórios, pertencentes a esse grupinho, a tão famosa chamada geração Y.
Agora não sei se a culpa foi dessa tal geração Y, mas o fato é que o folhetim estava errado e caímos em uma outra palestra, essa falando sobre um tema que aí sim nós nunca tínhamos ouvido falar: como gerenciar as finanças na parte de TI da empresa.
O homem discursou por uma hora falando de como todos os principais frameworks de gerenciamento de custos, projetos e todas aquelas coisas, poderiam ser integrados para facilitar a vida do gestor de projetos que tem como tarefa saber o que irá continuar fazendo e o que irá cortar devido à lucratividade/risco perigosos.
A grande questão dessa discussão, pelo que eu pude entender, foi que os custos de um projeto e manutenção são difíceis de mensurar se não existir alguém no meio daquele bando de nerds que consiga dizer quais são os recursos usados (quem), para que (tarefa) e por quê (vantagem). Sem contar que é necessário transformar isso em dado contábil. Além de que, como bem disse nosso palestrante, a maioria das empresas ainda considera o departamento de nerds uma despesa sem vantagens. E uma despesa bem cara, se estivermos falando dos salários atualmente pagos para esse pessoal.
Mas vou parar por aqui antes que alguém levante a bandeira e queira discursar a respeito da justeza com que são pagas nossas mentes, um assunto muito precoce nos dias atuais. (Bom, talvez seja precoce para sempre, do jeito que a economia é ciência aberta.)
O fato é que acabamos subindo a rua novamente sem saber que tal de geração Y é essa que nos fez entrar na palestra errada. Como sempre, nada que uma boa &amp;quot;googada&amp;quot; não resolva.
Parênteses. Descobri recentemente que os seguidores do outro lado agora inventaram um novo &amp;quot;termo&amp;quot;: Windows-Live-procurada. Um de seus representantes, anteriormente um homem de respeito e opiniões fortes e imparciais, acredita este ser um termo de uso corrente no dia-a-dia.
Pelo que pudemos encontrar, a tal da geração Y somos nós mesmo. Que espanto! E eu pensei que estávamos falando de uma raça alienígena ou algo assim. Talvez até seja, mas temos todos os genes da espécie humana.
Aparentemente existem estudos &amp;quot;sérios&amp;quot; nos EUA que dividem as gerações usando letras e encontrando as principais diferenças entre nós mesmos e nossos pais e avós. Como essa última geração recebeu elogios de diversas partes do estudo, a nominação de geração Y foi se estendendo ao resto do mundo, principalmente nos novos mercados de tecnologia.
A conclusão a que chego é que existem rótulos demais para as pessoas hoje em dia. As pessoas não podem mais ser simplesmente pessoas. Precisam ser nerds, geeks, ráquers ou geração Y. Se você não é, está de fora. Se está dentro, é antenado. Que é outro rótulo.
Fim de passeio. Voltamos à empresa e falamos com um outro colega sobre o que havíamos aprendido sobre o uso dos recursos no gerenciamento dos projetos no departamento de TI de uma empresa. Ele disse: &amp;quot;TI pra quê? Só traz despesa esse negócio.&amp;quot;
E viva a geração Y!
Adendum. A palestra que participamos foi a &amp;quot;Por que implementar a gestão financeira de TI? Uma abordagem baseada no ITIL, COBIT/VAL IT, e PMBOK&amp;quot;, e queríamos ter visto a palestra &amp;quot;Desafio: Como Gerenciar a Geração Y&amp;quot;, que como pudemos ver não é tarefa fácil, já que essa geração não consegue nem entrar na palestra certa. Veja a grade do evento para mais informações.
Ah, sim, meu crachá de gerente. Pois então, achei superinteressante o fato de eu ter entrado em um evento de segurança portando um crachá que diz &amp;quot;gerente&amp;quot; no nome quando na verdade eu continuo sendo de fato um programador. Fui eu que disse que era gerente na entrada da feira, como um pequeno teste de acessibilidade.
Não que isso seja uma falha de segurança muito grave, mas imagine uma empresa suficientemente grande com pessoas mal intencionadas que foram convidadas a visitar a feira e escolheram ser gerentes ou diretores na hora de escolher o cargo. O que poderiam ter feito, em nome da empresa, dentro dessa feira? É algo a se pensar...
</description>
</item>

     
        <item>
  <title>V</title>
  <link>http://www.caloni.com.br/v/</link>
  <pubDate>2008-09-23</pubDate>
  
  <guid>http://www.caloni.com.br/v/</guid>
  <description>Parabéns a todos que participaram e ajudaram para que todos nós chegássemos ao quinto encontro de programadores/aficionados C/C&#43;&#43;. Parece mentira, mas hoje temos capacidade para lotar um auditório razoável, e temos a ousadia de sempre poder contar com uma grade de palestras pra lá de avançadas. Vejamos o que foi visto até hoje nesses últimos três encontros (III, IV e o seminário):
 C&#43;&#43; com WxWidgets O novo padrão C&#43;&#43;0x Threads no C&#43;&#43; ISO C e microcontroladores Drivers para Windows TCP/IP via Boost.Asio C&#43;&#43; com Qt Dicas de portabilidade Programação concorrente C&#43;&#43; com STL/Boost Otimização de código  E esse é só o começo.
04 de outubro de 2008, São Paulo, Brasil
 Ferramentas para programação C&#43;&#43; para Windows por Rodrigo Strauss Programando com Conceitos no novo C&#43;&#43; por Leandro Melo Arquivos de memória mapeada no Windows com C&#43;&#43; por Basílio Miranda Explorando o Windows (Vista &amp;amp; Server 2008) com C&#43;&#43; por Fábio Galuppo Criando Linguagens Embutidas para Otimização por Felipe Almeida  08 de novembro de 2008, São Paulo, Brasil
 Técnicas de Programação em C para Sistemas Embarcados por Daniel Quadros Utilização de C&#43;&#43; em Microcontroladores por Luiz Barros Explorando os 16 bits da Microchip e as ferramentas de trabalho por Daniel Rodrigues Otimização de código C para sistemas embarcados por Fábio Pereira Desenvolvimento Embedded no Mundo da eLua por Dado Sutter  Se repararam, o número de palestras foi acrescido de um (palestras&#43;&#43;) e o tempo para cada uma delas foi ligeiramente encolhido. Espero que esse não seja um empecilho para o desenvolver dos assuntos, pois existem alguns bem delicados acima (como a linguagem embutida e memória mapeada) para serem explicados em cerca de uma hora.
É isso aí. Vida longa ao C&#43;&#43;! (e ao C! e ao COBOL! e ao FORTRAN!)
</description>
</item>

     
        <item>
  <title>Todo programador é um filósofo em potencial</title>
  <link>http://www.caloni.com.br/todo-programador-e-um-filosofo-em-potencial/</link>
  <pubDate>2008-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/todo-programador-e-um-filosofo-em-potencial/</guid>
  <description>Tivemos uma conversa muito frutífera hoje durante o almoço ao conhecer uma professora que sentava ao nosso lado, exímia conhecedora da mente humana e amante das artes nobres como a filosofia e a lógica. O importante dessa colóquio foi ter encontrado um motivo muito mais forte para gostar de programação do que qualquer outro que já me surgira na cabeça desde que mexo com essas coisas: O computador não deve dar ordens ao homem e este repeti-las como uma máquina. O homem, como ser pensante, deve dizer ao computador o que fazer, e este responder-lhe diligentemente.
Para resumir desde o começo essa conclusão, um exemplo paupável: quando fazemos um curso de treinamento, uma especialização, uma faculdadeZINHA ou qualquer outro evento de &amp;quot;aprendizado&amp;quot; que nos propõe a digitar comandos sem fim, repetidamente para um computador, para no final ganharmos um comprovante de que sabemos digitar aqueles comandos decorados e repetitivos como ninguém, isso quer dizer que as coisas vão mal, se e quando tudo se resume a isso.
Por outro lado, ao aprendermos, por nós mesmos ou pelos outros, a usar o computador como a ferramenta que vai fazer de nossas idéias realidade, e nossas criações se materializam de uma forma inimitável, então, somos criadores e comandantes da máquina, e não uma cópia de uma máquina que repete comandos. Então, nesse caso, temos um motivo para viver: criar sempre coisas novas e interessantes que surgem em nossas cabeças.
E ser feliz é isso: achar significado para o que fazemos. É criar. Pura e simplesmente. Quem está sempre criando está sempre satisfeito com sua vida. Pois dá sentido a ela todo santo dia. Isso vale para qualquer profissão interessante o suficiente. Não precisa fazer código. Pode construir móveis, ensinar pessoas ou desenhar uma nova peça de roupa.
Criar é pensar. Programadores pensam em coisas novas todos os dias e as executam. Quando encontram algo repetitivo, organizam o código para não terem que repetir mais a mesma baboseira e voltam a fazer coisas interessantes e originais. Se existe um processo enfadonho e chato, o programador inventa um jeito para o computador fazê-lo, e não ele. E a vida do programador sempre gira em torno desse ciclo: dispensa as coisas chatas mandando o computador fazer e se dedica a fazer coisas novas.
A discussão não parou por aí, pois me levou a entender o vazio que eu sinto ao estudar coisas que não uso nunca. Porque aprender por aprender não vai me levar a lugar algum. Pode até ser perigoso ler coisas que não servem para nada. Me faz parecer inútil.
E não livros longos, ricos em detalhes e que fazem perder o fio da meada ao terminá-lo.
Também me mostra que mais vale a pena aprender a pensar, ou pensar melhor, do que aprender uma nova tecnologia em um livro recém-lançado de 1500 páginas. Quando aprendemos a pensar resolvemos os problemas por nós mesmos, e não por uma formulazinha mágica tirada do saite favorito de bricabraques.
Ser programador é criar. Criar é bom. Criar nos faz felizes.
E é por isso, realmente, que amo o que eu faço.
</description>
</item>

     
        <item>
  <title>Retorno do PathIsDirectory</title>
  <link>http://www.caloni.com.br/retorno-do-pathisdirectory/</link>
  <pubDate>2008-09-10</pubDate>
  
  <guid>http://www.caloni.com.br/retorno-do-pathisdirectory/</guid>
  <description>Estava eu outro dia programando aquele código esperto &amp;quot;para ontem&amp;quot; quando me deparei com uma situação no mínimo inusitada. Ao testar se um caminho recebido era de fato um diretório me foi retornado pela API um valor diferente de TRUE. E diferente de FALSE!
De acordo com a documentação, o retorno deveria ser TRUE caso o caminho enviado à função fosse de fato um diretório. Caso contrário, o retorno deveria ser FALSE.
Note que existem apenas dois valores possíveis para essa função. Porém, o valor retornado não é 1, o equivalente ao define TRUE, mas sim 0x10 (16 em hexadecimal). O simples exemplo abaixo deve conseguir reproduzir a situação (Windows XP Service Pack 3):
Setting environment for using Microsoft Visual Studio 2008 x86 tools.C:\Tests&amp;gt;copy con IsPathDir.cpp#include &amp;lt;shlwapi.h&amp;gt;#include &amp;lt;windows.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#pragma comment(lib, &amp;quot;shlwapi.lib&amp;quot;)int main(){BOOL isDir = PathIsDirectory(&amp;quot;C:\\Tests&amp;quot;); // obs.: diretorio TEM que existirprintf(&amp;quot;Resultado: %d.\n&amp;quot;, isDir);}^Z1 arquivo(s) copiado(s).C:\Tests&amp;gt;cl IsPathDir.cppMicrosoft (R) 32-bit C/C&#43;&#43; Optimizing Compiler Version 15.00.21022.08 for 80x86Copyright (C) Microsoft Corporation. All rights reserved.IsPathDir.cppMicrosoft (R) Incremental Linker Version 9.00.21022.08Copyright (C) Microsoft Corporation. All rights reserved./out:IsPathDir.exeIsPathDir.objC:\Tests&amp;gt;IsPathDir.exeResultado: 16. Isso quer dizer apenas que o código abaixo vai funcionar,
if( PathIsDirectory(path) ) // legal: qualquer coisa diferente de zero o código abaixo vai funcionar
if( ! PathIsDirectory(path) ) // legal: se der zero (FALSE), OK e o código abaixo não vai funcionar:
if( PathIsDirectory(path) == TRUE ) // vixi: TRUE nem sempre é o resultado E, pior, o código abaixo também não vai funcionar!
if( PathIsDirectory(path) != TRUE ) // aff... é bom rever os seus conceitos Pesquisando um pouco descobri uma boa discussão sobre o tema, e inclusive que outras pessoas descobriram o interessante detalhe que para pastas normais o retorno é 0x10, mas para compartilhamentos o retorno é 0x1.
O bug atrás dos documentos O problema ocorre por causa da maneira que a função determina se o caminho é um diretório ou não. Uma simples vistoria sobre a função nos revela o detalhe crucial:
C:\Tests&amp;gt;cl /Zi IsPathDir.cppMicrosoft (R) 32-bit C/C&#43;&#43; Optimizing Compiler Version 15.00.21022.08 for 80x86Copyright (C) Microsoft Corporation. All rights reserved.IsPathDir.cppMicrosoft (R) Incremental Linker Version 9.00.21022.08Copyright (C) Microsoft Corporation. All rights reserved./out:IsPathDir.exe/debugIsPathDir.objC:\Tests&amp;gt;cdb IsPathDir.exeMicrosoft (R) Windows Debugger Version 6.8.0004.0 X86Copyright (c) Microsoft Corporation. All rights reserved.CommandLine: IsPathDir.exeSymbol search path is: SRV*c:\symbols*http://msdl.microsoft.com/download/symbolsExecutable search path is:ModLoad: 00400000 00426000 IsPathDir.exeModLoad: 7c900000 7c9b4000 ntdll.dllModLoad: 7c800000 7c8ff000 C:\WINDOWS\system32\kernel32.dllModLoad: 77ea0000 77f16000 C:\WINDOWS\system32\SHLWAPI.dllModLoad: 77f50000 77ffb000 C:\WINDOWS\system32\ADVAPI32.dllModLoad: 77db0000 77e41000 C:\WINDOWS\system32\RPCRT4.dllModLoad: 77e50000 77e97000 C:\WINDOWS\system32\GDI32.dllModLoad: 7e360000 7e3f0000 C:\WINDOWS\system32\USER32.dllModLoad: 77bf0000 77c48000 C:\WINDOWS\system32\msvcrt.dll(ea0.de0): Break instruction exception - code 80000003 (first chance)eax=00241eb4 ebx=7ffde000 ecx=00000004 edx=00000010 esi=00241f48 edi=00241eb4eip=7c901230 esp=0012fb20 ebp=0012fc94 iopl=0 nv up ei pl nz na po nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202ntdll!DbgBreakPoint:7c901230 cc int 30:000&amp;gt; g shlwapi!PathIsDirectoryAModLoad: 76360000 7637d000 C:\WINDOWS\system32\IMM32.DLLModLoad: 62e80000 62e89000 C:\WINDOWS\system32\LPK.DLLModLoad: 74d50000 74dbb000 C:\WINDOWS\system32\USP10.dlleax=009836e0 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee7538 esp=0012ff6c ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA:77ee7538 8bff mov edi,edi0:000&amp;gt; peax=009836e0 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee753a esp=0012ff6c ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x2:77ee753a 55 push ebp0:000&amp;gt;eax=009836e0 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee753b esp=0012ff68 ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x3:77ee753b 8bec mov ebp,esp0:000&amp;gt;eax=009836e0 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee753d esp=0012ff68 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x5:77ee753d 81ec0c020000 sub esp,20Ch0:000&amp;gt;eax=009836e0 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee7543 esp=0012fd5c ebp=0012ff68 iopl=0 nv up ei pl nz ac pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000216SHLWAPI!PathIsDirectoryA&#43;0xb:77ee7543 a180d2f077 mov eax,dword ptr [SHLWAPI!__security_cookie0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee7548 esp=0012fd5c ebp=0012ff68 iopl=0 nv up ei pl nz ac pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000216SHLWAPI!PathIsDirectoryA&#43;0x10:77ee7548 56 push esi0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0006f4cc edi=7c911970eip=77ee7549 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz ac pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000216SHLWAPI!PathIsDirectoryA&#43;0x11:*** WARNING: Unable to verify checksum for IsPathDir.exe77ee7549 8b7508 mov esi,dword ptr [ebp&#43;8] ss:0023:0012ff70=0041dc5c0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee754c esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz ac pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000216SHLWAPI!PathIsDirectoryA&#43;0x14:77ee754c 85f6 test esi,esi0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee754e esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000206SHLWAPI!PathIsDirectoryA&#43;0x16:77ee754e 8945fc mov dword ptr [ebp-4],eax ss:0023:0012ff64=fffffffe0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee7551 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000206SHLWAPI!PathIsDirectoryA&#43;0x19:77ee7551 0f8493000000 je SHLWAPI!PathIsDirectoryA&#43;0xb2 (77ee75ea) [br=0]0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee7557 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000206SHLWAPI!PathIsDirectoryA&#43;0x1f:77ee7557 56 push esi0:000&amp;gt;eax=00007a43 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee7558 esp=0012fd54 ebp=0012ff68 iopl=0 nv up ei pl nz na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000206SHLWAPI!PathIsDirectoryA&#43;0x20:77ee7558 e85cc0fdff call SHLWAPI!PathIsUNCServerA (77ec35b9)0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee755d esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x25:77ee755d 85c0 test eax,eax0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee755f esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x27:77ee755f 0f8585000000 jne SHLWAPI!PathIsDirectoryA&#43;0xb2 (77ee75ea) [br=0]0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee7565 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x2d:77ee7565 56 push esi0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee7566 esp=0012fd54 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x2e:77ee7566 e812feffff call SHLWAPI!PathIsUNCServerShareA (77ee737d)0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee756b esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x33:77ee756b 85c0 test eax,eax0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee756d esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0x35:77ee756d 0f8486000000 je SHLWAPI!PathIsDirectoryA&#43;0xc1 (77ee75f9) [br=1]0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee75f9 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0xc1:77ee75f9 56 push esi0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee75f9 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0xc1:77ee75f9 56 push esi0:000&amp;gt;eax=00000000 ebx=7ffde000 ecx=00000001 edx=00422828 esi=0041dc5c edi=7c911970eip=77ee75fa esp=0012fd54 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0xc2:77ee75fa ff15d411ea77 call dword ptr [SHLWAPI!_imp__GetFileAttributesA (77ea11d4)]0:000&amp;gt;eax=00000011 ebx=7ffde000 ecx=7c91056d edx=00140608 esi=0041dc5c edi=7c911970eip=77ee7600 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0xc8:77ee7600 83f8ff cmp eax,0FFFFFFFFh0:000&amp;gt;eax=00000011 ebx=7ffde000 ecx=7c91056d edx=00140608 esi=0041dc5c edi=7c911970eip=77ee7603 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz ac pe cycs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000217SHLWAPI!PathIsDirectoryA&#43;0xcb:77ee7603 74e5 je SHLWAPI!PathIsDirectoryA&#43;0xb2 (77ee75ea) [br=0]0:000&amp;gt;eax=00000011 ebx=7ffde000 ecx=7c91056d edx=00140608 esi=0041dc5c edi=7c911970eip=77ee7605 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz ac pe cycs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000217SHLWAPI!PathIsDirectoryA&#43;0xcd:77ee7605 83e010 and eax,10h0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=7c91056d edx=00140608 esi=0041dc5c edi=7c911970eip=77ee7608 esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz na po nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202SHLWAPI!PathIsDirectoryA&#43;0xd0:77ee7608 ebe2 jmp SHLWAPI!PathIsDirectoryA&#43;0xb4 (77ee75ec)0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=7c91056d edx=00140608 esi=0041dc5c edi=7c911970eip=77ee75ec esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz na po nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202SHLWAPI!PathIsDirectoryA&#43;0xb4:77ee75ec 8b4dfc mov ecx,dword ptr [ebp-4] ss:0023:0012ff64=00007a430:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0041dc5c edi=7c911970eip=77ee75ef esp=0012fd58 ebp=0012ff68 iopl=0 nv up ei pl nz na po nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202SHLWAPI!PathIsDirectoryA&#43;0xb7:77ee75ef 5e pop esi0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=77ee75f0 esp=0012fd5c ebp=0012ff68 iopl=0 nv up ei pl nz na po nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202SHLWAPI!PathIsDirectoryA&#43;0xb8:77ee75f0 e82bcafbff call SHLWAPI!__security_check_cookie (77ea4020)0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=77ee75f5 esp=0012fd5c ebp=0012ff68 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0xbd:77ee75f5 c9 leave0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=77ee75f6 esp=0012ff6c ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246SHLWAPI!PathIsDirectoryA&#43;0xbe:77ee75f6 c20400 ret 40:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=0040101f esp=0012ff74 ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246IsPathDir!main&#43;0xf:0040101f 8945fc mov dword ptr [ebp-4],eax ss:0023:0012ff74=000000010:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=00401022 esp=0012ff74 ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246IsPathDir!main&#43;0x12:00401022 8b45fc mov eax,dword ptr [ebp-4] ss:0023:0012ff74=000000100:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=00401025 esp=0012ff74 ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246IsPathDir!main&#43;0x15:00401025 50 push eax0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=00401026 esp=0012ff70 ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246IsPathDir!main&#43;0x16:00401026 6868dc4100 push offset IsPathDir!__xt_z&#43;0x12c (0041dc68)0:000&amp;gt;eax=00000010 ebx=7ffde000 ecx=00007a43 edx=00140608 esi=0006f4cc edi=7c911970eip=0040102b esp=0012ff6c ebp=0012ff78 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246IsPathDir!main&#43;0x1b:0040102b e81a000000 call IsPathDir!printf (0040104a)0:000&amp;gt;Resultado: 16.eax=0000000f ebx=7ffde000 ecx=004010e5 edx=004228b8 esi=0006f4cc edi=7c911970eip=00401030 esp=0012ff6c ebp=0012ff78 iopl=0 nv up ei ng nz ac pe nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000296IsPathDir!main&#43;0x20:00401030 83c408 add esp,80:000&amp;gt; Ou seja, para pastas locais a função simplesmente usa a conhecidíssima GetFileAttributes, que retorna o flag 0x10 setado caso se trate de uma pasta, de acordo com a documentação: &amp;quot;The attributes can be one or more of the following values:&amp;quot;
Return code/value DescriptionFILE_ATTRIBUTE_ARCHIVE A file or directory that is an archive file or directory.320x20FILE_ATTRIBUTE_COMPRESSED A file or directory that is compressed.20480x800...FILE_ATTRIBUTE_DIRECTORY The handle that identifies a directory.160x10 Aqui termina nossa dúvida sobre o pequenino bug na documentação. E isso nos lembra também que é sempre bom comparar as coisas da melhor maneira possível. E essa melhor maneira em se tratando de ifs é supor apenas dois valores binário: ou é zero ou é não-zero.
</description>
</item>

     
        <item>
  <title>De volta à tona</title>
  <link>http://www.caloni.com.br/de-volta-a-tona/</link>
  <pubDate>2008-09-07</pubDate>
  
  <guid>http://www.caloni.com.br/de-volta-a-tona/</guid>
  <description>Depois dessas duas semanas de férias forçadas volto a escrever-vos neste humilde blogue. Houve um pequeno problema com o script que insere um arquivo de código-fonte dentro da página e ele comeu todos os meus bits disponíveis por mês na hospedagem do saite.
Entre os próximos artigos estão um bug na função PathIsDirectory, algumas traduções não-ortodoxas para handle, thread e dead lock, a estrutura dos códigos de erro do Windows e algumas ruminações sobre como fazer um script de build.
Até lá.
</description>
</item>

     
        <item>
  <title>Duas pequenas dicas para programar no caos</title>
  <link>http://www.caloni.com.br/duas-pequenas-dicas-para-programar-no-caos/</link>
  <pubDate>2008-08-15</pubDate>
  
  <guid>http://www.caloni.com.br/duas-pequenas-dicas-para-programar-no-caos/</guid>
  <description>Ultimamente não tenho acertado muito bem meus cronogramas, com erros que variam de um dia a uma semana. A causa desse problema, pelo que eu tenho conseguido detectar, está em dois problemas que acredito acontecer de maneira muito freqüente em um ambiente de desenvolvimento que ainda está no caos:
 Mudança constante de prioridade Falta de testes básicos no software antes de mexer  Portanto, aí vão algumas dicas empíricas para lidar com esses detalhezinhos que são &amp;quot;faceizinhos de serem esquecidinhos&amp;quot; (by Rafael).
Simples de dizer, não? No entanto, se o que você está fazendo é tão pequeno quanto duas horas passa a ficar um pouco mais fácil. E isso é possível se você souber fazer direito um cronograma, dividindo suas tarefas em tarefas menores, mais paupáveis e &amp;quot;pausáveis&amp;quot;.
Um exemplo real serial o de uma mudança em um projeto que envolva três componentes: uma LIB estática, um componente COM e um driver. No caso de ser necessário parar no meio do projeto, é importante que essas três partes estejam bem separadas em tarefas que alteram o código-fonte um a um, sendo a última tarefa a integração entre todos. É interessante notar que, se for bem estruturado o projeto, é possível fazer testes individuais por componente antes da integração de fato, o que torna as coisa bem menos dolorosas. A divisão seria algo incremental e possivelmente paralelizável:
Você tem certeza que o programa está rodando como deveria, que não existem problemas paralelos e relacionados que podem prejudicar seu desempenho cronogrametal? A última versão funciona realmente como deveria funcionar? Não? Nesse caso, esqueça sua estimativa inicial: ela foi pro espaço. Quer dizer, do ponto de vista otimista, adiada para depois de serem resolvidos os problemas atuais.
Mais uma vez, os testes individuais (chamados de unit tests) são importantes para a consistência do projeto no decorrer de sua vida. Isso aliado a um processo de build automatizado que detecte erros de funcionamento e compilação pode economizar um tempo enorme na hora de fazer uma &amp;quot;pequena modificaçãozinha&amp;quot; naquele fonte escroto.
Em empresas onde a qualidade de software é piada, essas duas atitudes podem salvar algumas vidas e projetos no meio do caminho, apesar de parar no meio das tarefas não ser uma das melhores práticas de um desenvolvimento sério.
</description>
</item>

     
        <item>
  <title>Quando o navegador não quer largar um arquivo</title>
  <link>http://www.caloni.com.br/quando-o-navegador-nao-quer-largar-um-arquivo/</link>
  <pubDate>2008-08-13</pubDate>
  
  <guid>http://www.caloni.com.br/quando-o-navegador-nao-quer-largar-um-arquivo/</guid>
  <description>De vez em quando gosto muito de um vídeo que estou assistindo. Gosto tanto que faço questão de guardar para assistir mais vezes depois. O problema é que o meu Firefox ou, para ser mais técnico, o plugin de vídeo que roda em cima do meu navegador, não permite isso. Ele simplesmente cria um arquivo temporário para exibir o vídeo e logo depois o apaga, utilizando uma técnica muito útil da função CreateFile, que bloqueia o acesso do arquivo temporário e apaga-o logo após o uso:
HANDLE WINAPI CreateFile(__in LPCTSTR lpFileName,__in DWORD dwDesiredAccess,__in DWORD dwShareMode,__in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,__in DWORD dwCreationDisposition,__in DWORD dwFlagsAndAttributes,__in_opt HANDLE hTemplateFile); dwShareMode Value Meaning0 Disables subsequent open operations on a file or device0x00000000 to request any type of access to that file or device. dwFlagsAndAttributes Value MeaningFILE_FLAG_DELETE_ON_CLOSE The file is to be deleted immediately after all of itshandles are closed, which includes the specified handleand any other open or duplicated handles. Muito bem. Isso quer dizer que é possível abrir um arquivo que mais ninguém pode abrir (nem para copiar para outro arquivo), e ao mesmo tempo garante que quando ele for fechado será apagado. Isso parece uma ótima proteção de cópia não-autorizada para a maioria das pessoas.
Infelizmente, tudo isso roda sob limites muito restritos: um navegador, rodando em user mode, usando APIs bem definidas e facilmente depuráveis.
De volta ao WinDbg Antes de iniciar a reprodução do vídeo, e conseqüentemente a criação do arquivo temporário, podemos atachar uma instância do nosso depurador do coração e colocar um breakpoint onde interessa:
windbg -pn firefox.exeMicrosoft (R) Windows Debugger Version 6.8.0004.0 X86Copyright (c) Microsoft Corporation. All rights reserved.*** wait with pending attachSymbol search path is: SRV*C:\Symbols*http://msdl.microsoft.com/download/symbols;K:\Docs\ProjectsExecutable search path is:ModLoad: 00400000 00b64000 L:\FirefoxPortable\App\firefox\firefox.exeModLoad: 7c900000 7c9b4000 C:\WINDOWS\system32\ntdll.dllModLoad: 7c800000 7c8ff000 C:\WINDOWS\system32\kernel32.dll...ModLoad: 77a00000 77a55000 C:\WINDOWS\System32\cscui.dllModLoad: 765d0000 765ed000 C:\WINDOWS\System32\CSCDLL.dll(b58.ba8): Break instruction exception - code 80000003 (first chance)eax=7ffdb000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005eip=7c901230 esp=021bffcc ebp=021bfff4 iopl=0 nv up ei pl zr na pe nccs=001b ss=0023 ds=0023 es=0023 fs=0038 gs=0000 efl=00000246ntdll!DbgBreakPoint:7c901230 cc int 30:017&amp;gt; bp kernel32!CreateFileA0:017&amp;gt; bp kernel32!CreateFileW0:017&amp;gt; gBreakpoint 2 hiteax=00000001 ebx=00000000 ecx=05432c10 edx=0000003e esi=0532ea00 edi=00000000eip=7c831f31 esp=0317fdc4 ebp=0317fde8 iopl=0 nv up ei pl nz na po nccs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202kernel32!CreateFileW:7c810760 8bff mov edi,edi Nesse momento podemos dar uma boa olhada nos parâmetros 4 e 6 da função para ver se trata-se realmente da proteção prevista (na verdade, prevista, nada; esse é um artigo baseado em uma experiência passada; vamos imaginar, contudo, que estamos descobrindo essas coisas como na primeira vez).
0:000&amp;gt; dd esp0012f30c 300afc06 03f91920 c0000000 000000000012f31c 00000000 00000002 14000000 00000000 Como podemos ver, o modo de compartilhamento do arquivo é nenhum. Entre os flags definidos no sexto parâmetro, está o de apagar o arquivo ao fechar o handle, como pude constatar no header do SDK.
Nesse caso, a solução mais óbvia e simples foi deixar esse bit desabilitado, não importando se o modo de compartilhamento está desativado. Tudo que temos que fazer é assistir o vídeo mais uma vez e fechar a aba do navegador. O arquivo será fechado, o compartilhamento aberto, e o arquivo, não apagado.
0:012&amp;gt; bp kernel32!CreateFileW &amp;quot;ed @esp&#43;4*6 poi(@esp&#43;4*6) &amp;amp; 0xfbffffff&amp;quot;breakpoint 1 redefined0:012&amp;gt; bp kernel32!CreateFileA &amp;quot;ed @esp&#43;4*6 poi(@esp&#43;4*6) &amp;amp; 0xfbffffff&amp;quot;breakpoint 0 redefined0:012&amp;gt; g E agora posso voltar a armazenar meus vídeos favoritos.
</description>
</item>

     
        <item>
  <title>Aprendizado em kernel mode</title>
  <link>http://www.caloni.com.br/aprendizado-em-kernel-mode/</link>
  <pubDate>2008-08-07</pubDate>
  
  <guid>http://www.caloni.com.br/aprendizado-em-kernel-mode/</guid>
  <description>Hoje terminei minha primeira leitura de Memory Dump Analysis Vol. 1, e qual não foi a minha surpresa ao encontrar entre os últimos posts justamente o que eu estava precisando: um guia de livros que se deve ler para começar a programar em kernel mode.
O melhor de tudo nem é a lista de livros, cujos títulos já estão batidos na minha cabeça de tanto meu amigo Ferdinando comentar a respeito. A grande sacada foi ele ter feito um roteiro no estilo &amp;quot;leia esse livro primeiro, depois comece com esse e ao mesmo tempo acompanhe aquele, sempre atento ao Windows Internals&amp;quot;. As coisas não ficam mais fáceis (ler 8 livros, todos com média de 700 páginas), mas pelo menos ficam mais organizadas, tem começo, meio e fim (será?).
Claro, esse é o método Dmitry Vostokov, o que não quer dizer que funciona com qualquer um. No entanto, gosto de suas buscas de padrão, analogias de dumps com o mundo real, abstrações filosóficas e, principalmente, as explicações das telas azuis em UML. Se entendo facilmente essa forma de explicar, é possível que esse método facilite um poucos as coisas não-tão-fáceis de fazer para mim.
Agora só falta começar =).
</description>
</item>

     
        <item>
  <title>Entrevista com o Caloni no &#39;Do ZERO ao MESTRE&#39;</title>
  <link>http://www.caloni.com.br/entrevista-com-o-caloni-no-do-zero-ao-mestre/</link>
  <pubDate>2008-07-24</pubDate>
  
  <guid>http://www.caloni.com.br/entrevista-com-o-caloni-no-do-zero-ao-mestre/</guid>
  <description>Há muito pouco tempo atrás surgiu um blogue de um programador com o desejo de aprender C&#43;&#43; em seis meses. Ele entrou em contato comigo para divulgar seu trabalho, e lhe disse que na internet seu trabalho se divulga por si só. E é verdade. No entanto, não contente, ele me pediu para responder um questionário no estilo entrevista. Não sei se o resultado foi satisfatório, mas pelo menos foi curioso. Foram perguntas simples e respostas mais simples ainda.
Para os que quiserem ler a entrevista e/ou acompanhar as desventuras de um programador com pressa, dê uma olhada no artigo em &amp;quot;Do ZERO ao MESTRE em 6 meses&amp;quot;, um blogue recém-nascido.
Update de 2020-03-14: estava corrigindo posts antigos e ao chegar neste fui verificar o blog do Rafael Becker. Ele havia parado por uns anos e voltou a postar em 2014. Fico feliz em saber que ele seguiu carreira e hoje trabalha com o que gosta. =)
</description>
</item>

     
        <item>
  <title>Aprenda a usar sua API</title>
  <link>http://www.caloni.com.br/aprenda-a-usar-sua-api/</link>
  <pubDate>2008-07-22</pubDate>
  
  <guid>http://www.caloni.com.br/aprenda-a-usar-sua-api/</guid>
  <description>É conhecido que uma das desvantagens de se programar diretamente em Win32 API é a dificuldade de se entender os parâmetros e o retorno das funções. Concordo em parte. Constituída de boa documentação, parte da culpa dos programas mal-feitos reside na preguiça do programador em olhar a documentação por completo. A Win32 API está longe de ser perfeita, mas pelo menos está razoavelmente documentada, e é na leitura atenta da documentação que iremos encontrar as respostas que precisamos para que o programa funcione.
Vejamos alguns exemplos. O código abaixo parece bem razoável:
#include &amp;lt;windows.h&amp;gt;int main(){HANDLE hFile = CreateFile(&amp;#34;c:\\tests\\myfile.txt&amp;#34;, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);if( hFile ){DWORD read = 0;CHAR buffer[100];if( ReadFile(hFile, buffer, sizeof(buffer), &amp;amp;read, NULL) ){WriteBuffer(buffer);}CloseHandle(hFile);}}No entanto, está errado.
É fato que a maioria das funções que retornam handles retornam NULL para indicar o erro na tentativa de obter o recurso. Ao comparar o retorno com NULL, o programador geralmente faz uma chamada a GetLastError para saber o que aconteceu. No entanto, uma das funções mais usadas, a CreateFile, não retorna NULL, mas INVALID_HANDLE_VALUE.
Sendo assim, o código acima deveria ser:
if( hFile != INVALID_HANDLE_VALUE ) GetVersion também é uma função que muitos erraram. Erraram tanto que eles fizeram uma nova versão menos complicada. Como está escrito no MSDN: &amp;quot;The GetVersionEx function was developed because many existing applications err when examining the packed DWORD value returned by GetVersion, transposing the major and minor version numbers.&amp;quot;
O motivo de tantos erro pode ter sido o fato que o valor retornado é uma estrutura de bits dentro de um DWORD, coisa que nem todos programadores C sabem lidar muito bem, e o fato de ser uma função muito utilizada por todos (pegar a versão do sistema operacional).
Eis a tabela de campos do retorno de GetVersion:
Platform High-order bit Next 7 bits Low-order byte------------------------------------- -------------- ------------ --------------Windows NT 3.51 0 Build number 3Windows NT 4.0 0 Build number 4Windows 2000 or Windows XP 0 Build number 5Windows 95, Windows 98, or Windows Me 1 Reserved 4Win32s with Windows 3.1 1 Build number 3 Mesmo que não seja tão difícil, pode ser ambíguo. Por exemplo, como saber se o Windows é 95, 98 ou ME?
O código abaixo, muito usado por todos que suportam ainda o Windows mais velhinhos, verifica se estamos rodando em plataforma NT ou 9x.
#include &amp;lt;windows.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;int main(){DWORD winVer = GetVersion();BOOL isPlatformNT = winVer &amp;gt;= 0x80000000 ? FALSE : TRUE;if( isPlatformNT )printf(&amp;#34;Plataforma NT\n&amp;#34;);elseprintf(&amp;#34;Bem-vindo ao parque dos dinossauros!\n&amp;#34;);return isPlatformNT ? 1 : 0;}Nem sempre o handle que obtemos é fechado com CloseHandle. As funções abaixo retornam handles que devem ser desalocados com as funções à direita:
Função que obtém recurso Função que libera recurso------------------------ -------------------------LoadLibrary FreeLibraryRegOpenKey RegCloseKeyGetDC ReleaseDCBeginPaint EndPaint Sempre tem mais exemplos. Algumas dicas úteis para o dia-a-dia de um programador Win32 API são:
 Leia a documentação Se atente aos valores de retorno em caso de sucesso e erro Leia sempre a seção remarks pelo menos uma vez; ela explica como desalocar recursos Releia a documentação  Às vezes uma singela chamada de uma função de autenticação pode nos fazer preencher uma estrutura de 20 membros, sendo que seis deles são obtidos com mais sete chamadas de funções, todas com direito a desalocar recursos no final. O importante é sempre manter a calma, o espírito de aprendizado e aventura. Afinal, quem mandou não fazer software de telinha?
</description>
</item>

     
        <item>
  <title>Segunda versão do Houaiss2Babylon</title>
  <link>http://www.caloni.com.br/segunda-versao-do-houaiss2babylon/</link>
  <pubDate>2008-07-14</pubDate>
  
  <guid>http://www.caloni.com.br/segunda-versao-do-houaiss2babylon/</guid>
  <description>Depois de vários comentários de pessoas tendo problemas em converter seus dicionários Houaiss para o formato Babylon, resolvi criar vergonha na cara e dar uma pequena melhora na versão beta do conversor.
Agora a maioria dos erros que houver será descrita por uma mensagem no seguinte formato:
O primeiro erro acima ocorre principalmente se não houver algum Houaiss instalado que o programa possa detectar. Resolva este problema comprando um.
Abaixo segue a função criada para exibir essas mensagens:
void MessageError(DWORD err, PCSTR msg, ...){CHAR errBuffer[100];CHAR msgBuffer[ERR_STR_BUF_SIZE];va_list vaList;va_start(vaList, msg);vsprintf(msgBuffer, msg, vaList);va_end(vaList);sprintf(errBuffer, &amp;#34; Erro de sistema número %d.&amp;#34;, (int) err);strcat(msgBuffer, errBuffer);MessageBox(NULL, msgBuffer, STR_PROJECT_NAME, MB_OK | MB_ICONERROR);}Se você notou, a função acima pode receber um número de argumentos variáveis para formatar a string da mensagem principal do erro, além de exibir seu código. Essa mágica pode ser feita usando-se o cabeçalho padrão &amp;quot;stdarg.h&amp;quot;. Através dele temos acesso ao tipo va_list, que representa uma lista de argumentos variáveis.
Pela convenção de chamada da linguagem C (e C&#43;&#43;), quem desmonta a pilha é o chamador. Sendo assim, a função chamada não precisa conhecer o número de argumentos com que foi chamado.
A função de formatação de string é uma variante do conhecidíssimo printf, na versão que recebe um tipo va_list. Muito útil para formatação de logs.
A versão beta do Houaiss2Babylon está para sair. Não estarei mais atualizando o saite do projeto no LaunchPad. Aguardem por mais novidades no próprio blogue.
</description>
</item>

     
        <item>
  <title>Projeto-modelo</title>
  <link>http://www.caloni.com.br/projeto-modelo/</link>
  <pubDate>2008-07-08</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-modelo/</guid>
  <description>É muito difícil construir um modelo de pastas que sirva para a maioria dos projetos que tivermos que colocar na fôrma. Ainda mais se esses projetos tiverem que futuramente fazer parte da mesma ramificação. Foi pensando em várias coisas que chegamos a uma versão beta que pode ajudar aqueles que ficam pensando durantes dias antes mesmo de colocar as mãos no código.
Antes de começar a pensar em como as pastas estarão alinhadas, é importante saber como funcionará o controle de código do seu projeto. Como eu disse sobre o Bazaar, a estrutura inicial permitirá a junção de dois projetos distintos se estes compartilharem do mesmo commit no começo de suas vidas.
Portanto, trate de iniciar a estruturação em um projeto-modelo que já contenha pelo menos um commit: o das pastas vazias já estruturadas.
bzr init _Templatecd _Templatebzr mkdir Docsbzr mkdir Interfacebzr ...bzr ci -m &amp;quot;Projeto-modelo. Herde desse projeto sua estrutura inicial&amp;quot; Estruturação proposta:
  Build. Essa pasta contém tudo que é necessário para compilar e testar o projeto como um todo. Idealmente a execução da batch build.bat deve executar todo o processo. Após a compilação, é de competência dos componentes na subpasta Tests fazer os testes básicos do projeto para se certificar de que tudo está funcionando como deveria.
  Common. Aqui devem ser colocados aqueles includes que servem para vários pontos do projeto. Está exemplificado pelo arquivo de versão (Version.h), pois todos os arquivos devem referenciar uma única versão do produto. Podem existir Outras definições básicas, como nome do produto, dos arquivos, etc. É aqui que são gravadas as interfaces que permitem dependência circular entre os componentes (e.g. Interface de componentes COM).
  Docs. Aqui deve ser colocada toda a documentação que diz respeito ao projeto. A organização interna ainda não foi definida, pois imagina-se ser possível usar diversas fontes, como doxygen, casos de uso, bugs, arquivos de projeto e UML. Foi exemplificado com o arquivo todo.txt e changes.txt, que deve ter sempre a lista de coisas a fazer e a lista de coisas já feitas, respectivamente, tendo, portanto, que ser sempre atualizados.
  Drivers. Essa é a parte onde ficam todos os componentes que rodam em kernel mode. Por se tratar de um domínio específico e muitas vezes compartilhar código-fonte de maneira não-heterodoxa (e.g. sem uso de LIBs), faz sentido existir uma pasta que agrupe esses elementos. Dentro da pasta existem subpastas para cada driver, exemplificados em Driver1 e Driver2.
  Install. Todas as coisas relacionadas com instalação, desinstalação e atualização do software deve vir nessa pasta. Foi reservada uma subpasta para cada item, não sendo obrigatória sua divisão. Também existe uma pasta de DLLs, onde possivelmente existam telas personalizadas e biblioteca de uso comum pelos instaladores (o desinstalador conversa com o instalador e assim por diante).
  Interface. Todas as telas de um programa devem ser colocadas nessa pasta. Essa é uma divisão que deve ser seguida conceitualmente. Por exemplo, se existir um gerenciador de alguma coisa no produto, as telas do gerenciador e o comportamento da interface ficam nessa pasta, mas o comportamento intrínseco do sistema (regras de negócio) devem ficar em Libraries. Para exemplificar o uso, foram criadas as Interface1 e Interface2.
  Libraries. O ponto central do projeto, deve conter o código mais importante. Imagine a pasta Libraries como a inteligência de um projeto, de onde todos os outros componentes se utilizam para que a lógica do software seja sempre a mesma. As outras partes do projeto lidam com aspectos técnicos, enquanto o Libraries contém as regras abstratas de funcionamento. Opcionalmente ela pode ser estática ou dinâmica, caso onde foi criada a subpasta DLLs. Porém, elas devem ser divididas por função em bibliotecas estáticas, como foi exemplificado em Library1 e Library2.
  Resources. A origem de todas as imagens, sons, cursores, etc de um projeto devem residir primeiramente na pasta Resources. A divisão interna desse item fica a critério do designer responsável, pois ele pode dividir tanto por função (Install, Interface) quanto por elementos (Images, Sounds).
  Services. Além dos drivers e das interfaces alguns projetos necessitam de processos &amp;quot;invisíveis&amp;quot; que devem fazer algo no sistema. Isso inclui serviços do Windows, GINAs, componentes COM e coisas do gênero. Devem ser colocados nessa pasta e distribuídos como no exemplo, em Service1 e Service2.
  Tools. Além dos componentes essenciais para o funcionamento do software também existem aqueles componentes que fornecem mais poder ao usuário, ao pessoal do suporte ou ao próprio time de desenvolvimento. Essas são as ferramentas de suporte que permitem a fácil identificação de erros no programa ou a configuração mais avançada de um item que a Interface não cobre. Adicionalmente foi colocada a subpasta Develop, que deve conter ferramentas usadas estritamente durante a fase de desenvolvimento.
  Todos os componentes que disponibilizarem unidades de testes devem conter uma pasta Tests dentro de si. Essa padronização permite facilmente a localização de testes internos aos componentes. Além disso, os arquivos executáveis de testes devem sempre terminar seu nome com Test, o que permite a automatização do processo de teste durante o build.
Acredito que este esboço esteja muito bom. É o modelo inicial que estou utilizando nos projetos da empresa e de casa.
</description>
</item>

     
        <item>
  <title>VirtualBox</title>
  <link>http://www.caloni.com.br/virtualbox/</link>
  <pubDate>2008-07-04</pubDate>
  
  <guid>http://www.caloni.com.br/virtualbox/</guid>
  <description>O VirtualBox parece ser o concorrente mais próximo atualmente da VMWare. Descobrimos ele essa semana e resolvemos fazer alguns testes. O resultado foi bem animador.
Desenvolvido pela Sun Microsystems, as características do VirtualBox impressionam pelo cuidado que houve em torná-lo muito parecido com sua concorrente paga. Apenas para começar, ela suporta dispositivos USB, possui múltiplos snapshots e já suporta o modo do VMWare Fusion - chamado de &amp;quot;seamless mode&amp;quot; - que estará integrado na versão 7 da VMWare.
No entanto, entre as coisas que testamos (instalado em um Windows Vista SP1 como host), o que não funcionou já não agradou tanto. A lista de prós e contras ainda confirma a liderança da VMWare, pelo menos em qualidade:
Funcionalidade VMWare VirtualBoxSnapshots Sim Sim. Mesma velocidade.USB Sim Sim. Não funcionou.Seamless Mode Não Sim.Clipboard Sim Sim. Não funcionou.Shared Folders Sim Sim. Erros de acesso.Ferramentas Guest Sim Sim.Pause Momentâneo Não Sim. Além da tabela de testes acima, é necessário notar que por mas três vezes a VM simplesmente parou de responder, sendo necessário reiniciar o programa Host.
Em suma, o VirtualBox tem tudo para arrasar em futuras versões. Se, é claro, conseguir competir em qualidade com a VMWare que, no momento, é a líder em soluções de virtualização. Talvez por isso sua solução não seja tão barata.
</description>
</item>

     
        <item>
  <title>Primeiros passos na documentação de código-fonte usando Doxygen</title>
  <link>http://www.caloni.com.br/primeiros-passos-na-documentacao-de-codigo-fonte-usando-doxygen/</link>
  <pubDate>2008-06-26</pubDate>
  
  <guid>http://www.caloni.com.br/primeiros-passos-na-documentacao-de-codigo-fonte-usando-doxygen/</guid>
  <description>Comentários são essenciais em um código-fonte bem feito. O código pode até fazer milagres, salvar vidas e multiplicar pães, mas se não tiver um apóstolo eficiente que escreva um evangelho para ele, as pessoas não vão conseguir usar!
OK, a analogia foi horrível.
Bom, já que é pra fazer comentários, porque não fazê-los de uma forma que seja possível extrair todo esse texto diretamente do fonte e transformá-lo em documentação? Dessa forma você evita ter que abrir o Word (arght!) e evita que a documentação fique desatualizada quando o documentador do seu projeto for embora da empresa.
Vocês não têm documentador no projeto? Ah, tá. Bem-vindo ao grupo.
O Doxygen é uma ferramenta que consegue extrair comentários do seu código-fonte, formatados ou não, e transformar em arquivos html, doc, chm, etc. O resultado é muito impressionante, pois ele é capaz de interpretar algumas linguagens (como C&#43;&#43;) e mostrar a hierarquia de classes e funções.
Ele não obriga que o desenvolvedor formate corretamente os comentários, mas ao fazer isso podemos descrever o funcionamento exato de funções de interface, como o que cada parâmetro significa, o valor de retorno, algumas observações quanto ao uso, etc.
Aprender a usar Doxygen é muito fácil. Ele possui uma ajuda com vários exemplos com os quais podemos começar a programar um código auto-documentado.
Por ser uma ferramenta bem flexível, são permitidos inúmeros formatos para se auto-documentar o código. Vou descrever como eu faço, mas pode ser que outro formato lhe agrade mais. Para conhecê-los, dê uma olhada no seu manual.
A primeira coisa a saber sobre comentários de documentação é que eles devem vir sempre ANTES do elemento que estamos comentando. Por exemplo, uma classe:
/** Nova classe de exemplo** Essa classe é um exemplo de como utilizar o Doxygen*/class ClasseDeExemplo{// ...}; Note que o comentário inicia com um duplo asterisco &amp;quot;/**&amp;quot;. Isso indica ao Doxygen que vem documentação por aí.
Observe que seria mais simples que o Doxygen pegasse todo e qualquer comentário e transformasse em documentação. No entanto, existem comentários que não devem ser publicados, pois são muito específicos do funcionamento interno da função. Dessa forma o programa-documentador lhe dá a liberdade de fazer comentários documentáveis e não-documentáveis.
Também existe um outro formato bem popular, usado pelo pessoal do Java, que são os comentários que se iniciam com três barras:
////// Nova classe de exemplo////// Essa classe é um exemplo de como utilizar o Doxygen/// E esse comentário é equivalente ao anterior///class ClasseDeExemplo{// ...}; Além desse estilo de comentário, existem campos-chave que podemos colocar. Para definir um campo-chave, uma forma válida é usar o arroba seguido do seu nome, e a descrição. Eis um exemplo cheio deles:
/** @brief Função de exemplo** Essa função tem por objetivo exemplificar o uso do Doxygen** @param firstParam Serve como primeiro parâmetro da função* @param[out] anotherParam Esse é outro parâmetro que recebemos** @return Se der erro, retorna -1. Se der tudo certo, 0.** @remarks Essa função não pode ser chamada antes de ChamaEuPrimeiro.*/int FuncaoDeExemplo(int firstParam, int anotherParam){// ...} Vejamos:
 brief. Serve como descrição inicial e sucinta do que a função faz. Mais explicações podem existir depois dessa primeira linha introdutória. param. Descreve o objetivo de um parâmetro, assim como se ele é de entrada ou saída. return. Explica os diversos retornos que a função pode ter. remark. Observações especiais que podem ajudar quem chama a função.  Existem diversos outros tipos de marcadores e com certeza você encontrará muita utilidade em outros. No entanto, esse é o basico que todo desenvolvedor do seu time deve saber para já começar a documentar suas funções.
</description>
</item>

     
        <item>
  <title>Como estou trabalhando com o Bazaar</title>
  <link>http://www.caloni.com.br/como-estou-trabalhando-com-o-bazaar/</link>
  <pubDate>2008-06-24</pubDate>
  
  <guid>http://www.caloni.com.br/como-estou-trabalhando-com-o-bazaar/</guid>
  <description>Depois de alguns ajustes e muitas perguntas do meu amigo-colega desenvolvedor Rafael conseguimos definir alguns usos e costumes em nosso código controlado pelo Bazaar. Este é um guia para Dummies de como é possível organizar um ou mais projetos de forma a favorecer o refactoring e a liberdade de uso.
Primeiro passo: padrão de árvore Nosso padrão de diretórios utiliza um repositório compartilhado e dentro, na mesma ramificação, os branches. O branch principal tem o mesmo nome do projeto. Isso na máquina de um desenvolvedor ficaria:
c:\src\project1|-- project1 (branch principal)|-- bug-da-tela-azul (branch secundário e temporário)|-- nova-tela-de-login (branch secundário e temporário) No servidor de fontes geralmente teremos apenas o branch principal, apesar de que o desenvolvimento em paralelo seja permitido:
c:\src\project1|-- project1 (branch principal)|-- 2.4.1 (branch secundário em desenvolvimento paralelo) Segundo passo: projeto-modelo Foi criado um projeto modelo para que todos os projetos herdassem seu histórico. Para que isso? Bom, na eventualidade de partes de um projeto irem parar em outro (isso quase nunca acontece), isso pode ser feito sem perder todo o histórico do início do projeto.
Resumindo: todos os projetos novos são branches do projeto-modelo.
bzr init-repo _templatecd _templatebzr init _templatehack hack hackbzr commit -m &amp;quot;Primeira versao de nosso projeto-modelo&amp;quot; Como podemos ver acima, o projeto modelo segue o mesmo padrão de repositório compartilhado. Os projetos que criarmos serão baseados nesse projeto modelo, mas em outro repositório compartilhado.
bzr init-repo novo-projetobzr branch _template\_template novo-projeto\novo-projetocd novo-projeto\novo-projetohack hack hackbzr commit -m &amp;quot;Primeira versao de nosso novo projeto&amp;quot; A ramificação dos projetos estará sempre no mesmo lugar, independente da pasta raiz.
c:\src\--_template| || -- _template|-- novo-projeto| || -- novo-projeto|-- mais-um-projeto|-- mais-um-projeto Terceiro passo: elegendo um servidor O controle distribuído de fontes não significa que não existe um servidor. Existe. O detalhe é que todos os desenvolvedores guardam todo o histórico do projeto com eles, igualzinho o servidor, que é apenas mais uma máquina com mais um branch.
O repositório do servidor pode ser criado com a opção que não cria o diretório de trabalho, que é onde os programadores mexem no código-fonte. Sendo um servidor, o código-fonte não é necessário, só a base de dados:
bzr init-repo --no-trees novo-projetobar branch \\desenvolvedor\src\novo-projeto\novo-projeto novo-projeto\novo-projeto Quarto passo: tornando disponível o servidor O Bazzar possui um esquema de servidor embutido nele, que fica escutando em uma porta e se comunica em um protocolo otimizado. Nós gostamos desse esquema, pois protege os projetos de acidentes de usuários que podem apagar uma pasta sem querer.
Para manter o Bazaar eternamente rodando, usamos o programa do DriverEntry que transforma qualquer coisa no formato de um serviço de gelo.
prog2svc -add Bazaar &amp;quot;c:\program files\Bazaar\bzr.exe serve --allow-writes --diretory=c:\src&amp;quot; Ou não sei usar direito esse programa ou ele não permite uso de aspas no nome do aplicativo junto de argumentos. Por isso tive que editar o registro onde ele fica para colocar aspas duplas em torno do bzr.exe.
Após isso, ainda temos que configurar o serviço para iniciar automaticamente e usar um usuário conhecido. Enquanto o computador estiver ligado, mesmo que sem sessões abertas, nenhuma tela irá aparecer, mas o Bazaar estará rodando e ativo, escutando em sua porta padrão:
Se estiver tudo certo, ao iniciar o serviço o Bazaar passará a ficar escutando e pronto para fazer commits e branches.
Agora qualquer usuário da rede consegue fazer updates e commits. Um desenvolvedor novo faria o seguinte comando:
bzr init-repo projetobzr branch bzr://servidor/projeto projeto\projeto Note que o usuário do Bazaar não é obrigado a criar um repositório compartilhado. Esse foi um padrão definido aqui e não necessariamente é o melhor.
Quinto passo: ensinando as pessoas a usar O Bazaar por ser muito flexível entra naquela categoria de &amp;quot;difícil de acertar a maneira certa de utilizar&amp;quot;. Bom, mais ou menos. Eu sinceramente não acho que exista uma maneira errada de usar o Bazaar, mas vamos ver as maneiras mais comuns, que não são exclusivas entre si.
Desenvolvedor standalone É aquele que prefere fazer tudo localmente e só depois, bem depois, mandar seus commits para o servidor. Nesse caso o comando para começar a programar é branch.
bzr branch bzr://servidor/projeto projeto\projeto Nesse esquema o servidor e a máquina do desenvolvedor não trocam idéia se ele não quiser. Quando quiser, pode usar os comandos push, pull e merge. O push coloca coisas novas no servidor; o pull puxa coisas novas do servidor, e o merge é necessário quando existem conflitos entre as mudanças no fonte. Mais sobre conflitos em um futuro artigo.
Desenvolvedor conectado É o cara que quer sempre atualizar todas as modificações que ele faz imediatamente colocadas no servidor. Tudo bem. É só trabalhar no modo Source Safe (ou Subversion) com o comando checkout:
bzr checkout bzr://servidor/projeto projeto\projeto Um checkout funciona como o branch, só que faz um bind (ligação) com o servidor. O que quer dizer que qualquer commit feito localmente irá parar imediatamente também no servidor, a não ser que seja usado o parâmetro --local.
bzr commit -m &amp;quot;Eu sei que isso vai ser feito aqui e no servidor&amp;quot;bzr commit --local -m &amp;quot;Apenas umas mudancinhas; depois jogo no servidor&amp;quot; O modo checkout permite usar o comando update para ver se existem mudanças entre a máquina local e o servidor, diferente do modo standalone, onde o update apenas compara com o branch local e o diretório de trabalho.
bzr update Desenvolvedor polivalente Como eu havia dito, uma coisa não exclui outra. Se você está trabalhando em um branch e deseja se conectar ao servidor para atualizar mudanças, basta usar o comando bind.
bzr bind bzr://servidor/projeto projeto\projeto O branch começará a trabalhar como um checkout.
O contrário, que é fazer um checkout ficar desconectado é conseguido pelo comando unbind.
bzr unbind Todos os novos commits serão feitos apenas localmente.
Trabalhando na sua máquina Esses esquemas de conectado e desconectado podem ser usados no modo cliente x servidor ou tudo em uma máquina só. Por exemplo, uma série de mudanças em um projeto pode ser feito em um outro branch desconectado:
bzr branch projeto novo-branch Os commits de &amp;quot;novo-branch&amp;quot; não serão replicados para o branch &amp;quot;projeto&amp;quot;.
No entanto, se é uma série de mudanças que devem ser colocadas imediatamente no branch principal, pode-se usar checkout.
bzr checkout projeto novo-branch Existem diversas outras formas de usar o Bazaar, e isso está sob o controle do desenvolvedor. O importante para quem está migrando é saber definir alguns padrões (onde é o servidor principal, ramificação dos projetos) e o resto é só programar, exatamente como antes.
Para os &amp;quot;SourceSafers&amp;quot; de plantão: o Bazaar funciona como o Subversion sem locks, ou seja, todo mundo pode alterar qualquer fonte a qualquer hora. Isso significa que para começar a trabalhar basta começar a programar. Os commits podem ser feitos a qualquer hora, resolvidos os poucos conflitos que podem ocorrer se existirem pessoas mexendo nos mesmos fontes que você.
</description>
</item>

     
        <item>
  <title>Como fazer merge de projetos distintos no Bazaar</title>
  <link>http://www.caloni.com.br/como-fazer-merge-de-projetos-distintos-no-bazaar/</link>
  <pubDate>2008-06-16</pubDate>
  
  <guid>http://www.caloni.com.br/como-fazer-merge-de-projetos-distintos-no-bazaar/</guid>
  <description>O problema foi o seguinte: Nós iniciamos o controle de fonte pelo Bazaar na parte Linux do projeto, já que ela não iria funcionar pelo Source Safe, mesmo. Dessa forma apenas um braço do projeto estava no controle de fonte e o resto não.
No segundo momento da evolução decidimos começar a migrar os projetos para o Bazaar, inclusive a parte daquele projeto que compila no Windows. Maravilha. Ambos sendo controlados é uma beleza, não é mesmo?
Até que veio o dia de juntar.
O processo de merge de um controle de fonte supõe que os branches começaram em algum ponto em comum; do contrário não há como o controlador saber as coisas que mudaram em paralelo. Pois é achando a modificação ancestral, pai de ambos os branches, que ele irá medir a dificuldade de juntar as versões novamente. Se não existe ancestral, não existe análise. Como exemplificado na figura:
Acontece que existe um plugin esperto que consegue migrar revisões (commits) entre branches sem qualquer parentesco. Não me pergunte como ele faz isso. Mas ele faz. E foi assim que resolvemos o problema dos branches órfãos.
Para instalar o plugin do rebase, basta baixá-lo e copiar sua pasta extraída com um nome válido no Python (rebase, por exemplo). A partir daí os comandos do plugin estão disponíveis no prompt do Bazaar, assim como a instalação de qualquer plugin que cria novos comandos.
&amp;gt;bzr help commandsadd Add specified files or directories.annotate Show the origin of each line in a file.bind Convert the current branch into a checkout of the supplied branch.branch Create a new copy of a branch....push Update a mirror of this branch.rebase Re-base a branch. [rebase]rebase-abort Abort an interrupted rebase [rebase]rebase-continue Continue an interrupted rebase after resolving conflicts [rebase]rebase-todo Print list of revisions that still need to be replayed as part of the [rebase]reconcile Reconcile bzr metadata in a branch.reconfigure Reconfigure the type of a bzr directory.register-branch Register a branch with launchpad.net. [launchpad]remerge Redo a merge.remove Remove files or directories.remove-tree Remove the working tree from a given branch/checkout.renames Show list of renamed files.replay Replay commits from another branch on top of this one. [rebase]resolve Mark a conflict as resolved.revert Revert files to a previous revision....whoami Show or set bzr user id. O comando que usamos foi o replay, que não é comando principal do plugin, mas que resolve esse problema de maneira quase satisfatória. Como era tudo o que tínhamos, valeu a pena.
O processo que usei foi de usar esse comando n vezes para buscar revisões de um branch e colocar no outro. Um grande problema com ele é que ao encontrar merges no branch origem ele se perde e o usuário tem que fazer as modificações &amp;quot;na mão&amp;quot;. Deu um pouco de trabalho, mas conseguimos migrar nossos commits mais importantes e deixar o projeto inteiro, Linux&#43;Windows, em um branch só.
C:\Tests&amp;gt;bzr init linuxC:\Tests&amp;gt;cd linuxC:\Tests\linux&amp;gt;copy con lnxlinux^Z1 arquivo(s) copiado(s).C:\Tests\linux&amp;gt;bzr addadded lnxC:\Tests\linux&amp;gt;bzr commit -m &amp;quot;Linux 1&amp;quot;Committing to: C:/Tests/linux/added lnxCommitted revision 1.C:\Tests\linux&amp;gt;copy con lnx2linux2^Z1 arquivo(s) copiado(s).C:\Tests\linux&amp;gt;bzr addadded lnx2C:\Tests\linux&amp;gt;bzr commit -m &amp;quot;Linux 2&amp;quot;Committing to: C:/Tests/linux/added lnx2Committed revision 2.C:\Tests\linux&amp;gt;cd ..C:\Tests&amp;gt;bzr init windowsC:\Tests&amp;gt;cd windowsC:\Tests\windows&amp;gt;copy con win1windows^Z1 arquivo(s) copiado(s).C:\Tests\windows&amp;gt;bzr addadded win1C:\Tests\windows&amp;gt;bzr commit -m &amp;quot;Windows 1&amp;quot;Committing to: C:/Tests/windows/added win1Committed revision 1.C:\Tests\windows&amp;gt;copy con win2windows2^Z1 arquivo(s) copiado(s).C:\Tests\windows&amp;gt;bzr addadded win2C:\Tests\windows&amp;gt;bzr commit -m &amp;quot;Windows 2&amp;quot;Committing to: C:/Tests/windows/added win2Committed revision 2.C:\Tests\linux&amp;gt;cd ..C:\Tests&amp;gt;cd linuxC:\Tests\linux&amp;gt;bzr replay ..\windows -r1..2All changes applied successfully.Committing to: C:/Tests/linux/added win1Committed revision 3.All changes applied successfully.Committing to: C:/Tests/linux/added win2Committed revision 4.C:\Tests\linux&amp;gt;bzr log------------------------------------------------------------revno: 4committer: Wanderley Caloni &amp;lt;wanderley@caloni.com.br&amp;gt;branch nick: windowstimestamp: Mon 2008-06-16 07:17:10 -0300message:Windows 2------------------------------------------------------------revno: 3committer: Wanderley Caloni &amp;lt;wanderley@caloni.com.br&amp;gt;branch nick: windowstimestamp: Mon 2008-06-16 07:16:52 -0300message:Windows 1------------------------------------------------------------revno: 2committer: Wanderley Caloni &amp;lt;wanderley@caloni.com.br&amp;gt;branch nick: linuxtimestamp: Mon 2008-06-16 07:16:24 -0300message:Linux 2------------------------------------------------------------revno: 1committer: Wanderley Caloni &amp;lt;wanderley@caloni.com.br&amp;gt;branch nick: linuxtimestamp: Mon 2008-06-16 07:16:01 -0300message:Linux 1C:\Tests\linux&amp;gt;lslnx lnx2 win1 win2C:\Tests\linux&amp;gt; O resultado:
</description>
</item>

     
        <item>
  <title>Primeiro ano do novo Caloni.com.br</title>
  <link>http://www.caloni.com.br/primeiro-ano-do-novo-calonicombr/</link>
  <pubDate>2008-06-13</pubDate>
  
  <guid>http://www.caloni.com.br/primeiro-ano-do-novo-calonicombr/</guid>
  <description>Melhor que ter feito aniversário de dois anos no antigo blogue foi ter feito o primeiro aninho nesse novo formato, mais atualizado, mais diversificado e mais antenado com o meu dia-a-dia real.
No dia 14 de junho de 2007 foram publicadas as boas vindas, e desde então o número de artigos tem se mantido sempre no formato três por semana, dois por semana, consecutivamente, distribuídos na segunda, quarta e sexta, terça e quinta. Esse jogo de xadrez tem me mantido bem ocupado, admito, mas no final até que vale a pena. Chegamos à marca de 130 artigos e 182 comentários dentro de 29 categorias.
E por falar em variedade, falamos de vários assuntos desde o início. Entre um devaneio e outro, conseguimos explorar algumas particularidades das linguagens C/C&#43;&#43;, o funcionamento obscuro do Windows, algumas dicas sobre programação e ferramentas, e até tivemos tempo de explorar coisas mais específicas, como depuração, engenharia reversa, controle de fonte e C&#43;&#43; Builder.
No placar, as coisas ficaram mais ou menos distribuídas:
Assunto Artigos=========== =======Programação 10C&#43;&#43; 31Windows 11Depuração 10WinDbg 18Dicas 27Código 15 Sobre os visitantes, eles ainda são uma incógnita. Relacho meu, admito. Não faço nem uma simples pesquisa para saber se a maioria está no nível iniciante Juquinha ou avançado &amp;quot;The Guy&amp;quot;. Prometo melhorar isso no segundo ano. Em números houve um crescimento de 711 visitantes únicos em janeiro de 2007 para 5223 em maio de 2008.
Pela quantidade crescente de visitantes, dá até pra imaginar que estou &amp;quot;no caminho certo&amp;quot;. Mas, quer saber? Que caminho é esse? Não quero fundar um fã-clube, não quero me tornar rico e famoso (talvez só a parte do rico) e, muito menos, influenciar ninguém. Além do que, quanto mais velho um saite se torna, e sendo freqüentemente atualizado, é natural ser mais visitado. Por isso que eu acredito piamente que na maioria dos casos estatística é uma merda, pois mostra uma realidade cheia de conteúdo mas sem nenhum significado.
Por outro lado, alguns dados são muito interessantes, pois podem moldar o futuro de um blogueiro profissional (não é o meu caso), como os resultados mais-mais do google:
Palavras Buscas=========== =======softice 86windbg 27caloni 26 No entanto, saber que o topo da lista é formado por buscas por &amp;quot;softice&amp;quot; não irá me fazer escrever mais artigos sobre esse depurador mais do que eu já escrevi, até porque já é um depurador morto usado hoje em dia em raríssimos casos (no meu caso). Se você quer craquear um programa, mesmo que isso seja contra a lei, aprenda WinDbg que você ganha mais!
Das novidades que aconteceram durante esse ano, a maior e mais interessante foi o renascimento do nosso grupo de C&#43;&#43;, que talvez continue dessa vez a sua vida normal. Ou não. Esperemos que sim =)
Eu fico sinceramente muito feliz em saber que existem muito mais pessoas interessadas em C&#43;&#43; do que eu mesmo, até porque isso me dá muito mais tempo para escrever sobre outras coisas que não seja C&#43;&#43; que, admiro humildemente, não chego a usar 20% no meu dia-a-dia.
</description>
</item>

     
        <item>
  <title>Resultado do Seminário CCPP</title>
  <link>http://www.caloni.com.br/resultado-do-seminario-ccpp/</link>
  <pubDate>2008-06-03</pubDate>
  
  <guid>http://www.caloni.com.br/resultado-do-seminario-ccpp/</guid>
  <description>Aconteceu nesse fim-de-semana, como era previsto, o nosso primeiro Seminário CCPP Brasil, com direito a pessoas de todas as idades e origens, mas todas com algo em comum: a paixão e o interesse pelas linguagens-mestre do mundo da programação.
Começo esse artigo agradecendo a todos os que direta e indiretamente participaram para o sucesso do evento, entre eles os organizadores, o carro-chefe responsável por acordar o espírito C&#43;&#43; da galera no início do ano, os palestrantes e, claro, óbvio, toda a comunidade C&#43;&#43; que participou em corpo (vulgo hardware) e alma (vulgo software).
Termino a introdução fazendo uma minicrítica ao preço pago pelos participantes. Não que eu ache que seja muito, pelo contrário: dado o alto nível técnico das palestras, parece até mentira termos acesso a um evento com essa estrutura por tão pouco. Porém, o muito e o pouco são relativos, e ainda acredito que existam pessoas que não vão aos encontros por falta de recursos. Por isso mesmo vai um apelo para que nos futuros encontros tenhamos alguma forma de permitir às pessoas menos favorecidas de participar democraticamente dessa que é a expressão viva das linguagens C e C&#43;&#43; em nosso país.
Vamos às palestras!
Dicas e Truques de Portabilidade, por Wanderley Caloni É muito difícil analisar uma palestra feita por você mesmo. É mais difícil ainda quando essa palestra é a primeira de uma batelada de argumentações de alto nível técnico que seguiram o dia. Posso dizer, no entanto, que consegui o que queria quando fui para o evento: demonstrar as dificuldades e as facilidades de tornar um código portável, independente se entre sistemas operacionais, ambientes ou compiladores.
Foi visto primeiramente o que faz da portabilidade uma coisa difícil. Detalhes como sintaxe e gramática fazem toda a diferença quando o que se almeja é um código limpo de imperfeições trazidas pelo ambiente de desenvolvimento. Também foi dada especial atenção às famigeradas extensões de compiladores, que fazem a linguagem parecer uma coisa que não é.
Por fim, foram apresentadas algumas sugestões movidas pela experiência e estudo dessas mesmas dificuldades. Para ilustrar, dois exemplos bem vivos de como um código portável deve se comportar, tanto no código-fonte quanto em sua documentação.
Programação Concorrente com C&#43;&#43;, por Fábio Galuppo Para quem está acostumado com os temas geralmente &amp;quot;gerenciados&amp;quot; de Fábio Galuppo com certeza deve ter se surpreendido com a descrição teórica dos inúmeros problemas que cercam a vida do programador multithreading. O palestrante partiu do mais simples, o conceito de threads, conceito que, segundo ele mesmo, pode ser explicado em 15 minutos, para algo mais sutil e que gera muitos erros escondidos: o conceito de locks (semáforos, mutexes, etc).
Os programadores em nível de sistema devem ter adorado o contexto histórico dos problemas (você sabia que o primeiro lock inventado foi o semáforo?) tanto quanto o contexto teórico (explicação sobre modelo de memória).
Um destaque especial foram os experimentos com código rodando de verdade no Visual Studio, como o exemplo que tenta criar o maior número de threads possível na arquitetura 64. Simplesmente assustador!
Se por um lado faltou tempo para explicar os usos e princípios das bibliotecas de programação paralela disponíveis e mais usadas do mercado, por outro a palestra preencheu uma lacuna importante na minha primeira palestra sobre threads em C&#43;&#43;, demonstrando os erros mais comuns e o que não se deve fazer em programas que rodam mais de uma thread.
Mais uma vez voltando à teoria, a palestra foca mais uma vez em bons princípios de design, como o padrão de projeto monitor e a descrição dos modelos onde é justificado o uso de mais de uma thread no programa.
Programação Multiplataforma Usando STL e Boost, por Rodrigo Strauss Como sempre, Strauss está apaixonado pelo Boost (e a STL). Descrevendo as partes mais importantes que todo programador C&#43;&#43; moderno deve saber sobre essas bibliotecas, ambas modernas, a palestra focou principalmente no uso do dia-a-dia, e as vantagens produtivas que o C&#43;&#43; atual pode ter sobre o velho e tradicional programa em C com listas encadeadas artesanais.
Entre as coisas mais importantes citadas, que todo programador do novo século deveria saber, estão:
  A total falta da necessidade de desalocarmos objetos manualmente em nossos programas, visto que o auto_ptr (STL) e shared_ptr (Boost) dão conta do recado de maneira impecável.
  A total falta da necessidade de usarmos aqueles velhos arrays em C que quase nunca sabemos o tamanho exato para guardar nossos valores (e que continuamente colocávamos com o tamanho 100, MAX_PATH, ou UM_OUTRO_DEFINE_COMUM_EM_LINUX). A classe boost::array provê todas as funcionalidades básicas, além das avançadas, do uso de arrays tradicionais, sem qualquer overhead adicional de um array em C.
  A total falta de necessidade de ficar convertendo strings e inteiros. Com a ajuda da classe std::string e de construções geniais como lexical_cast (Boost), felizmente podemos deixar nossas velhas funções que precisavam de um buffer, como _itoa (embora não-padrão).
  Enfim, para quem pôde ver, a palestra focou nos princípios que farão hoje em dia um programador C&#43;&#43; completo, profissional e que, como seus colegas de outras linguagens, se preocupa igualmente com a produtividade de seu código. Ah, sim, e não gosta nem um pouco de reinventar a roda.
Técnicas de Otimização de Código, por Rodrigo Kumpera &amp;amp; André Tupinambá Aparentemente o que pensei que seria, em minha sincera opinião, um desastre (dois palestrantes falando sobre a mesma coisa) se transformou em uma combinação estupenda de teoria e prática aplicadas à arte de otimização de código. Rodrigo e André conseguiram destrinchar o tema harmoniosamente, sempre dividido entre técnicas avançadas (algumas demonstradas pela experiência dos palestrantes) e teoria disciplinar, que visa alertar o wannabe que otimizar pode ser uma coisa boa; porém, preste atenção aos que já fizeram isso têm a dizer.
Com uma didática impecável, o novato nesse tema (como eu) pôde ver as dificuldades de conseguir determinar o objetivo de todo otimizador de código que, segundo eles, deve estar sempre atento na máxima de que &amp;quot;toda otimização é na verdade uma troca&amp;quot;. Ou seja, se o programador quer melhor processamento, pagará com memória, se quiser otimizar espaço na RAM, irá gastar mais com processamento e/ou disco, e assim por diante.
Foram apresentados exemplos reais de otimização, além de dicas muito importantes sobre o comportamento das compilações de cada dia. Você sabia, por exemplo, que ao declarar em escopos mais locais suas variáveis usadas apenas em pequenos trechos de código estará dando uma poderosa dica ao compilador para que ele consiga usar os registradores no máximo de sua capacidade?
Ao final, como é de praxe, tivemos um sorteio de ótimos livros sobre programação e C&#43;&#43; em geral, com destaque aos livros do Herb Sutter. Rodrigo Strauss, conhecido fundador dos encontros, recebeu sua mais que merecida homenagem ao receber um de seus livros autografados. É o mais novo MVP da comunidade!
E por falar em comunidade, e agora podemos ver claramente, estamos com uma força bem maior do que no início do ano. A seqüência de ótimos eventos, além de nossos mestres do conselho Jedi de programadores C&#43;&#43;, prova finalmente que, se depender da qualidade dos desenvolvedores, o Brasil pode sim ser uma poderosa fonte de programas de qualidade que façam coisas bem mais interessantes do que acessar um banco SQL. Nós já temos a matéria-prima.
Imagens do evento cedidas por Fernando Roberto (valeu, Ferdinando!).
</description>
</item>

     
        <item>
  <title>Busca do Google com atalhos</title>
  <link>http://www.caloni.com.br/busca-do-google-com-atalhos/</link>
  <pubDate>2008-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/busca-do-google-com-atalhos/</guid>
  <description>Eu adoro atalhos de teclado. Desde meus primeiros anos usando computadores, atalhos têm se tornado minha obsessão. Sempre faço minha pesquisa pessoal de tempos em tempos, colecionando e usando novos atalhos descobertos. Por um bom tempo eu evitei ter que usar o mouse, treinando-me para lembrar de todas as seqüências de teclas que conhecia.
Eu não tenho nada contra o uso do mouse nem as pessoas que o usam. Eu apenas não sou tão entusiástico em usar o mouse. Por algum tempo, eu até acreditei que o ponteiro do cursor estava me atrapalhando, então eu desenvolvi um programa para tirá-lo da tela (usando um atalho de teclado, claro). Porém, mais uma vez, não sou contra seu uso. Eu mesmo uso-o de vez em quando (quando eu preciso).
Até algum tempo atrás a web não era muito convidativa para usuários de atalhos. Então surgiu o Google e as suas aplicações que suportavam essa característica, o que me deu uma razão a mais para passar a usar seu cliente de e-mail e leitor de notícias sem pressionar constantemente a tecla Tab. No entanto, ainda faltava a mesma funcionalidade para seu buscador. Felizmente, isso não é mais verdade.
Ainda em teste, eu comecei a usar os novos atalhos de teclado na busca do Google disponíveis no saite Google Experimental Search. Até agora existem atalhos para próximo resultado (J), resultado anterior (K), abertura da busca (O ou Enter) e colocação do cursor na caixa de busca (/). Eles funcionam exatamente como o Gmail e o Google Reader. Eu fiquei tão empolgado com a idéia que mudei o complemento de busca do Google de dentro do meu Firefox. E agora vou contar como isso pode ser feito facilmente (nota: minhas dicas servem para usuário de Windows apenas).
Provavelmente seu complemento de busca estará em uma das duas pastas abaixo:
%programfiles%\Mozilla Firefox\searchplugins%appdata%\Mozilla\Firefox\Profiles\*.default\searchplugins O arquivo do complemento tem o nome google.xml e você pode editá-lo usando o Bloco de Notas ou qualquer outro editor de texto simples (sem formatação). Abaixo está o ponto onde você deve inserir a nova linha que irá ativar os atalhos dentro da página de buscas do Google.
&amp;lt;Url type=&amp;quot;text/html&amp;quot; method=&amp;quot;GET&amp;quot; template=&amp;quot;http://www.google.com/search&amp;quot;&amp;gt;&amp;lt;Param name=&amp;quot;q&amp;quot; value=&amp;quot;{searchTerms}&amp;quot;/&amp;gt;&amp;lt;...&amp;gt;&amp;lt;Param name=&amp;quot;esrch&amp;quot; value=&amp;quot;BetaShortcuts&amp;quot;/&amp;gt; &amp;lt;!-- Google Shortcuts Here --&amp;gt;&amp;lt;!-- Dynamic parameters --&amp;gt;&amp;lt;...&amp;gt;&amp;lt;/Url&amp;gt; É isso aí. Agora você pode ter o melhor dos dois mundos: o melhor buscador da internete com atalhos. Existirá maneira de se tornar ainda mais produtivo?
</description>
</item>

     
        <item>
  <title>Read The Functional Manual</title>
  <link>http://www.caloni.com.br/read-the-functional-manual/</link>
  <pubDate>2008-05-07</pubDate>
  
  <guid>http://www.caloni.com.br/read-the-functional-manual/</guid>
  <description>Percebi essa semana que talvez boa parte da população informática que não progride em suas habilidades, mas gostaria muito, pode ser impedida pela falta de hábito em ler a ajuda do programa | da linguagem | do sistema com calma para encontrar o que procura. Independente do que você é, e para onde quer chegar, saiba que nem tudo na vida pode ser perguntado ao seu colega de baia. Senão você não evolui!
Se você quer dominar um assunto, ou aprender sobre ele, saiba que existem estágio nesse processo. O primeiro estágio é formado principalmente por livros. Se você quer aprender algo, e tem livros sobre o assunto, você é um cara sortudo e feliz.
Eu concordo com o cara do 1bit quando ele diz que livros são MUITO importantes. Provavelmente eu não seria metade do programador que me considero hoje se só tivesse a experiência, mas não a base fundamental necessária para realmente progredir no que se gosta.
Para algumas coisas pode não existir um livro bem estruturado e organizado nos moldes de &amp;quot;pra iniciante&amp;quot;. Nesse caso, na maioria das vezes existe pelo menos o chamado tutorial, ou guia do usuário, que dá o pontapé inicial na cabeça do cara que quer começar a mexer com algum negócio novo.
Outra coisa que acredito que seja fundamental, o segundo nível depois que você começou a ler um bom livro, é saber usar o que você precisa. E para saber usar nada melhor do que ler o manual. Óbvio, não? Pois é, eu também achava... até quando vi um amigo meu tentando descobrir por que as coisas não estavam funcionando, baseado na boa e velha tentativa e erro. É um outro caminho válido, concordo. Mas, se você ainda não deu uma olhada na parte da documentação que fala sobre o problema que você está tendo, então está andando em círculos. E vai aprender bem menos do que poderia.
Outra coisa que ouço com bastante freqüência é a pessoa desanimar por ter muita coisa pra estudar. Bem, se não houvesse tanta coisa assim para estudar não valeria a pena. E nem existiria documentação a respeito. Pra quê, se dá pra decorar tudo de uma vez?
O fato é que os sistemas tendem a ficar cada vez mais complexos e volumosos. Quem duvida, veja o monstro que essas linguagens de alto nível estão se tornando, com mil e uma possibilidades de fazer a mesma coisa.
E como sobreviveríamos nós, meros programadores de fundo de quintal, se não fosse a bênção de uma documentação completa e bem estruturada? Difícil dizer... eu praticamente não vivo sem ler a ajuda de qualquer coisa que eu precise fazer funcionar. Mesmo sendo um programa qualquer que abre um arquivo, coisa que já fiz três milhões de vezes e meia, continuo olhando na ajuda do CreateFile.aspx). E não sou um chimpanzé autista. Eu simplesmente prefiro guardar coisas mais importantes na cabeça do que quantos parâmetros eu preciso passar em uma determinada função. (no caso do CreateFile, são sete!)
Porém, existem aqueles problemas que realmente desafiam o bom senso, a ponto de nem livros, nem tutoriais e muito menos a documentação ter alguma coisa a respeito. O que fazer numa hora dessas? Se você já é um programador tarimbado já sabe do que eu vou falar antes de terminar a primeira linha desse parágrafo: google!
Atualmente existem diversas formas do google te ajudar a encontrar o que você precisa: blogues que falam a respeito (pessoas ajudando pessoas indiretamente), fóruns de discussão sobre o assunto (mais uma vez), páginas do &amp;quot;fabricante&amp;quot; que explicam em melhores detalhes algum problema que está se tornando comum, etc.
É assim que você irá começar a pedir ajuda das pessoas: indiretamente. Não se pergunta nada que já tenha sido respondido. Porque é uma perda de tempo dos dois lados. Do lado que pergunta porque sua resposta já pode estar prontinha em algum canto da web. Do lado que responde porque a pessoa terá que achar o lugar onde respondeu a mesma pergunta, copiar e colar (ou simplesmente ignorar, o que te fará perder mais tempo).
Você já devia saber disso. Faz parte da netiqueta, o guia mundial de bom uso da internet. O quê? Você nunca leu a netiqueta? Se nunca, então comece por lá. Depois venha fazer perguntas interessantes.
Tudo bem, você não conseguiu achar nenhum livro a respeito, não existe tutorial no mundo que resolva o seu problema, e todas as pessoas que possuem a resposta falam e escrevem em mandarim, ou algum outro idioma baseado em pegadas de passarinhos (o google ainda não traduz isso ainda muito bem). Nesse último caso, você ainda tem duas escolhas, sendo a mais fácil delas perguntar para quem entende.
Eu já fiz isso muitas vezes, antes de aprender a me virar (quase) sozinho. Todas que fiz foi por um de dois motivos: intercomunicação ou desespero.
Intercomunicação é quando você fica empolgado com o assunto, conversa com todo mundo que usa o treco que você está aprendendo e anseia por aprender cada vez mais todo dia. Nesse caso a conversa pode ser muito frutífera e animar mais ainda o aprendizado. Porém, é necessário tomar algumas precauções para se certificar que você não está afogando as pessoas de perguntas.
Desespero é quando tudo que você tentou não funciona e você sabe que para adquirir o conhecimento que precisa irá levar muito mais tempo do que fazer a pergunta certa para a pessoa certa. Nesse caso, estou falando realmente de MUITO tempo, coisa de meses a anos.
Também existe um outro caso de desespero, que é quando você sabe que vai perder o emprego se não resolver o problema.
Eu disse que existem duas escolhas nesse estágio. A primeira é perguntar para quem entende do assunto. Porém, o que acontece se você é uma das pessoas que mais entende do assunto que você conhece?
Aí o jeito é resolver sozinho. E, se possível, publicar em algum lugar a solução. A rede agradece.
</description>
</item>

     
        <item>
  <title>Seminário CCPP Portabilidade e Performance</title>
  <link>http://www.caloni.com.br/seminario-ccpp-portabilidade-e-performance/</link>
  <pubDate>2008-04-25</pubDate>
  
  <guid>http://www.caloni.com.br/seminario-ccpp-portabilidade-e-performance/</guid>
  <description>Reserve sua cadeira. Está marcado para o último dia do mês de maio o primeiro seminário de nosso grupo nacional de programadores e aficionados por C e C&#43;&#43;. É bom ou não é?
O assunto gira em torno de duas preocupações constantes na vida de todo programador de linguagens de nível médio:
 Quanta velocidade eu preciso nesse código? Em quais plataformas eu conseguiria compilar e rodar meu projeto?  Para responder estas questões teremos uma bateria de palestras com temas que, dessa vez, focam o simples, puro e independente uso das linguagens C/C&#43;&#43;:
Dicas e Truques de Portabilidade por Wanderley Caloni O objetivo dessa palestra é focar nos problemas da vida real que enfrentamos no dia-a-dia para tornar um código portável ou mais maleável para um dia ser. Nesse caso existem vários assuntos a tratar, como: construções ambígüas não-padrão, isolamento de particularidades de cada sistema, identificação de problemas de portabilidade, organização do código-fonte portável, entre outros.
O nível dessa palestra será o intermediário, porque eu preciso que o público tenha o conhecimento prévio de programação C e C&#43;&#43;. Quando você está aprendendo, uma dica ou outra sobre portabilidade pode ser interessante para não ser desvirtuado desde o início. Porém, para realmente começar a programar multiplataforma, existem desafios que devem ser transpostos por aqueles que já conseguem um nível de organização e desenvolvimento em C e C&#43;&#43; que não deixa dúvidas sobre a qualidade do código.
Programação Concorrente com C&#43;&#43; por Fábio Galuppo Fábio Galuppo estréia na nossa rede de palestrantes, depois de seu inspirador e excitante relato das peripécias do SD West desse ano. Ele irá falar de um tema extremamente atual, que é o uso de programação paralela, em especial usando C&#43;&#43;. Existe uma série de coisas para entender, como os modelos a ser seguidos, o uso consciente de threads, a programação com bom desempenho nos novos chips com mútiplos núcleos de processamento e por aí vai.
Apenas para ter uma idéia da importância em se ir em uma palestra como essa, imagine que 99,9% dos produtos da Google se baseiam nesse tipo de programação, envolvendo uma plantação de algumas centenas (milhares?) de máquinas trabalhando um banco de dados gigantesco no modo cooperativo para entregar a resposta mais rápida possível do outro lado. Sentiu o drama?
Programação Multiplataforma Usando STL e Boost por Rodrigo Strauss Voltando para o tema portabilidade, Rodrigo Strauss volta a repetir sua performance sobre Boost, dessa vez abrangendo o conjunto completo de bibliotecas que compõem essa extensão mais-que-necessária da STL para programadores produtivos e multiplataforma. Todos sabem que um código que apenas usa STL e C&#43;&#43; puro não consegue ir muito longe na vida real, apesar de ser 100% multiplataforma. O que muitos não sabem (inclusive eu) é como é possível turbinar o desenvolvimento portável com o uso do Boost, que é uma solução portável bem interessante.
Por exemplo, a manipulação de arquivos e diretórios não é lá o forte da STL, concentrada no conceito de streams. Com o uso do Boost, podemos ter o melhor da STL, só que turbinada. Além disso, o novo padrão de threads ainda está longe de chegar ao mercado, e o Boost.Threads é uma solução viável atualmente.
Técnicas de Otimização de Código por Rodrigo Kumpera &amp;amp; André Tupinambá Essa é a estréia de dois palestrantes de uma só vez! Como um bom complemento, voltamos ao tema de otimização, dessa vez em aspectos mais genéricos. Entre questões mais ou menos banais como otimização de laços e benchmarkers, mas que faze toda a diferença saber, teremos ainda tópicos bem avançados, como a relação de nosso código com o cachê do processador, e a tão-falada técnica de branch prediction, presente na maioria dos processadores atuais.
Além do aspecto genérico teremos uma pitada de matemática, como o uso de lookup tables e a otimização de algoritmos baseada em operações vetoriais. Ainda como um aspecto básico, mas importante, temos o uso eficiente da memória, muitas vezes entregue ao controle do sistema operacional, que nem sempre sabe bem o que o programa está fazendo.
</description>
</item>

     
        <item>
  <title>CSI: Crashed Server Investigation?</title>
  <link>http://www.caloni.com.br/csi-crashed-server-investigation/</link>
  <pubDate>2008-04-23</pubDate>
  
  <guid>http://www.caloni.com.br/csi-crashed-server-investigation/</guid>
  <description>O artigo de Jeff Dailey, The Digital DNA of Bugs Dump Analysis as Forensic Science, em que ele compara a nossa atividade de &amp;quot;cientistas do debugging&amp;quot; com a atividade dos profissionais da análise forense, é exatamente o que eu penso sobre nossa profissão. Freqüentemente assisto à série CSI: Las Vegas e mais freqüentemente ainda uso os métodos científicos empregados pela equipe de Gil Grissom para resolver os problemas mais escabrosos que podem ocorrer em um sistema.
Jeff fez uma divertida comparação entre todas as etapas de uma análise forense com todas as etapas de nossa análise do bug. Aqui vai a tradução livre dessas etapas (em linguagem cinematográfica):
 São duas horas da manhã. A câmera focaliza um pager explodindo sobre um criado-mudo... só pode querer dizer uma coisa: algo de ruim aconteceu e pessoas estão à procura de ajuda. O detetive acorda e diz para sua mulher: &amp;quot;Desculpe, eles precisam de mim... Eu tenho que ir&amp;quot;.
 Engraçado, eu fiz a mesma coisa, só porque alguém encontrou um servidor morto.
 O detetive aparece na cena do crime. Todos os policiais estão confusos, então eles apenas mantém a área isolada até que os experts cheguem. Seus anos de experiência e iluminação única irão permiti-lo ver coisas que os outros não vêem.
 Umm... Isso só me parece apenas familiar. Eu tipicamente uso Live Meeting ou Easy Assist...
 Usando uma combinação de ferramentas especializadas e métodos aprendidos tanto na escola quanto os aprendidos com o tempo, a evidência é coletada na cena para que seja feita uma pesquisa adicional no escritório. Testemunhas são questionadas: &amp;quot;Por volta de que horas isso ocorreu?&amp;quot;, &amp;quot;Você ouviu algum barulho estranho&amp;quot;, e &amp;quot;você viu alguém ou alguma coisa não usual&amp;quot;. Fotos são tiradas, objetos são arquivados, fibras e amostras de DNA são coletadas.
 Ok, então o escopo do problema está determinado e todas as informações disponíveis foram obtidas. Ummm... eu faço isso todo dia.
 O prefeito chama o oficial para que diga ao chefe dos detetives que nós devemos resolver este caso. Isso não pode acontecer de novo. Nós devemos capturar o vilão!
 Sinta-se livre para substituir &amp;quot;prefeito&amp;quot; com qualquer figura de alto nível gerencial. Uau, isso ou é um cara mau e asqueiroso ou o driver de alguém está causando pool corruption causando um servidor crítico falhar!
 Nós agora cortamos onde o detetive está no laboratório, usando luminárias, procurando por evidências de DNA, refletindo sobre os fatos principais do caso, pesquisando crimes passados.
 Eu não sei sobre você, mas eu simplesmente me refiro a isso como o processo de depuração.
 Finalmente um progresso: o DNA coletado na cena do crime identifica um suspeito que não deveria estar lá. Ao fazer uma pesquisa adicional, o suspeito tem um histórico desse tipo de atividade. O cara mau é capturado, os custos são arquivados e o caso está resolvido!
 Isso deve ser o mesmo que encontrar a causa principal, preencher um bug, e lançar uma correção.
Para finalizar, uma frase do artigo original que resume tudo:
 &amp;quot;Ultimately that&#39;s what we do. We are all detectives looking for the digital DNA of bugs in the wild affecting our customers. We hunt them down using tools, expertise, and experience.&amp;quot;
 Dmitry Vostokov imaginou siglas mais imaginativas e fiéis a todos os que depuram problemas em software, independente deste rodar em servidores ou máquinas de café. Além, é claro, de uma ótima dica de livro sobre análise forense. O significado da sigla neste post foi uma de suas sugestões. Thanks, Dmitry!
</description>
</item>

     
        <item>
  <title>EPA-CCPP 4: nossa comunidade ganhando forma</title>
  <link>http://www.caloni.com.br/epa-ccpp-4-nossa-comunidade-ganhando-forma/</link>
  <pubDate>2008-03-29</pubDate>
  
  <guid>http://www.caloni.com.br/epa-ccpp-4-nossa-comunidade-ganhando-forma/</guid>
  <description>Nesse último sábado ocorreu mais uma vez, como todos sabem, o Encontro de Programadores e Aficionados por C&#43;&#43;, (in)formalmente apelidado de EPA-CCPP, de acordo com algumas conversas da nossa lista de discussão.
Mais uma vez, temos que dar uma salva de palmas e agradecer de coração a todos que colaboraram direta ou indiretamente para a realização do evento, que teve uma qualidade ainda maior que o último encontro.
E por falar em qualidade, as palestras dessa vez foram ricas em informação e diversidade, pois demonstraram diferentes visões que as pessoas possuem sobre a mesma coisa, que é o uso das linguagens C e C&#43;&#43; na vida real sobre alguma aplicação específica.
Infelizmente cheguei um pouco atrasado por problemas de localização (me perdi geral), mas consegui pegar a parte mais divertida da palestra do Strauss: o código.
TCP/IP via Boost.Asio (Rodrigo Strauss) De uma maneira bem clara e direta, o palestrante nos mostrou como usar uma biblioteca de comunicação em redes feita de modo portável e extremamente antenada com o pensamento C&#43;&#43;/STL de fazer as coisas. Partindo de um ponto de vista prático, deu dicas importantes para os iniciantes que desejarem começar a utilizá-la e passar mais facilmente pelo caminho das pedras que é aprender novas maneiras de fazer as mesmas coisas.
Na verdade, foi além, pois ao exemplificar seu uso no código do dia-a-dia chegou a usar um projeto próprio com dezenas de CPPs e centenas (milhares?) de linhas de código utilizando 100% boost para a comunicação em rede, sendo compilável e rodável nos ambientes Windows e Linux.
Programação em C para microcontroladores (Daniel Quadros) Estava particularmente interessado nessa palestra para entender alguns truques e jogos-de-cintura necessários para utilizar a linguagem C em ambientes tradicionamente limitados em memória e poder de processamento. E, posso dizer, saí satisfeito.
O panorama traçado por DQ dos inúmeros tipos de microprocessadores, suas &amp;quot;linhagens&amp;quot; e diferentes arquiteturas nos permitiram entender as dificuldades em implementar e usar um compilador C para programar em sistemas embarcados. Mais ainda, fez ver a importância de, antes de programar, entender de fato como o hardware funciona para daí pensar em fazer algo útil com ele.
Ao final, um destaque especial para os conselhos finais sobre o desenvolvimento nessa área. Um conselho em específico ficou na minha mente, pois acredito que seja de extrema importância não só para sistemas embarcados, como para todo tipo de desenvolvimento: sempre pense em como será a depuração do sistema no projeto e em campo. Nunca se sabe onde e como o bug poderá ocorrer. Que ele existe, todos sabemos.
Desenvolvimento cross-platform em C&#43;&#43; com Qt (Basílio Miranda) Algumas coisas que me impressionaram na palestra anterior sobre wxWidgets me impressionaram mais ainda pelas explicações do funcionamento do Qt em suas diversas plataformas suportadas. Aos poucos entendemos que desenvolver frameworks de ambiente gráfico multiplataforma nem sempre é aquela coisa bonita e abstrata que imaginamos possível de fazer com as maravilhas da linguagem C&#43;&#43;. No fundo, muitas das coisas relacionadas com o funcionamento do núcleo desses sistemas é feito com alguns &amp;quot;remendos&amp;quot; sintáticos e semânticos que só os projetistas devem realmente saber explicar o porquê.
Por outro lado, o cuidado com a documentação e com os exemplos do ambiente Qt confortaram bastante o entusiasta que deseja explorar esse outro mundo de janelas além-Microsoft. Para os que reclamam do preço abusivo da licença da versão comercial, pode ser um alívio saber que projetos desenvolvidos com a licença GPL estão isentos de taxas, mesmo que comercializados. É uma questão de testar, medir e escolher alguma das alternativas.
Arquitetura e desenvolvimento de _drivers _com C para Windows (Fernando Silva) Voltando para o mundo microsoftiano, o foco da palestra do Fernando foi explicar os princípios básicos por trás do funcionamento do sistema operacional Windows desde a época que ele era um prompt do DOS. Como pudemos ver, essa é uma condição sine qua non para o desenvolvimento de drivers para essa plataforma, visto que são componentes que interagem diretamente com o sistema operacional, de código fechado, e muitas vezes com o hardware, uma caixinha de surpresas.
Entre outras coisas, vimos como funciona a divisão entre os modos usuário e kernel, qual a organização da memória virtual, a importância dos níveis de prioridade de thread no desenvolvimento de drivers e, é claro, como podemos começar a desenvolver drivers desde já e gerar aquelas bonitas telas azuis.
Ao final pudemos ver que foi um tema que gerou interesse especial do grupo, pois houve várias perguntas, como por exemplo se existe uma maneira de proteger o sistema operacional dos drivers (isso poderia gerar um artigo). Imagino que a palestra foi direto ao encontro do espírito do evento, que falou principalmente sobre o que cada um de nós faz com C/C&#43;&#43;. Muito provavelmente temos uma montanha de assuntos diferentes e complementares que poderão ser cobertos nos próximos encontros.
Sorteios, mais eventos e agradecimentos No final, tivemos uma série de sorteios de livros-referência em C&#43;&#43;, convites para o seminário C&#43;&#43; e algumas licenças de software. Por isso é importante lembrar aos que saíram antes que poderiam ter ganhado mais conhecimento, para que da próxima vez tentem apertar apenas mais um pouco seus compromissos.
Além das palestras, tivemos o relato de Fábio Galupo sobre o que foi o SD West 2008, o evento que reuniu alguns gurus do C&#43;&#43; para discutirem, entre outras coisas, o futuro da linguagem. Entre outras tantas coisas interessantes que ele nos trouxe, achei duas particularmente interessantes.
A primeira diz respeito à importância do bom uso de interfaces entre os programadores C&#43;&#43;. Esse foi um tema levantado por Bjarne Stroustrup em uma de suas palestras, e é de fato algo preocupante em nossa linguagem, que não possui ainda uma organização tão produtiva quanto outros grupos de desenvolvedores.
A segunda diz respeito à necessidade de aprendermos outras linguagens. Na posição de desenvolvedores de sistemas que vão interagir com o mundo afora, é de suma importância que conheçamos nossos vizinhos mais próximos: desenvolvedores da camada acima que irão aproveitar o nosso código rápido e leve.
Após isso, ainda tive uma das mais felizes surpresas da minha vida: ganhei um exemplar do The C&#43;&#43; Programming Language, Special Edition, assinado por Bjarne Stroustrup!!! Foi um momento tão estupefato que nem sei direito o que eu fiz naquela hora, além de me levantar, agradecer mal e porcamente meus amigos da bancada (eu sei que para um presente desses não existe maneira de agradecer o suficiente), pegar meu livro e sentar novamente, ainda um pouco atordoado. Essas supresas podem matar!
Aproveito o final deste artigo para mais uma vez agradecer toda a organização do evento e, por que não, a todos da comunidade que puderam participar. Como alguém bem disse mais uma vez, a comunidade somos nós, e não um ou outro que costumam ser o porta-voz de nossos movimentos. Portanto, a todos que usam C e C&#43;&#43; de alguma maneira em algum momento de suas vidas, sintam-se honrados de participar do seleto grupo do EPA. Nós merecemos.
</description>
</item>

     
        <item>
  <title>Quarto encontro C&#43;&#43;</title>
  <link>http://www.caloni.com.br/quarto-encontro-c/</link>
  <pubDate>2008-03-29</pubDate>
  
  <guid>http://www.caloni.com.br/quarto-encontro-c/</guid>
  <description>Para os desavisados de plantão, irá acontecer no dia 29 de março de 2008 o quarto encontro de programadores e aficionados C&#43;&#43;. Mais detalhes no link anterior. Em suma, as palestras são estas:
Programação em C para microcontroladores (Daniel Quadros) Você já pensou em programar componentes de hardware? Ou melhor: com uma linguagem de alto nível?? Sim, é possível, e de acordo com o Daniel, muito comum (ele usa mais que o próprio assembly). Nessa palestras teremos as dicas de como entrar nesse mundo não-tão-selvagem, e que merece toda a atenção dos que se importam com um dos trunfos da linguagem C: portabilidade.
Arquitetura e desenvolvimento de drivers com C para Windows (Fernando Silva) Pode ser mais específico? Fernando mantém o maior e melhor blogue sobre drivers, aquelas coisinhas que fazem sua placa de vídeo 3D funcionar, para Windows no Brasil: o DriverEntry. Se você já acompanha seus artigos, essa é a chance de fazer aquelas perguntas que não saem da cabeça, mesmo que o assunto pareça fácil. Além, é claro, de poder entrar em outro mundo completamente fora da realidade da programação nacional.
TCP/IP via Boost.Asio (Rodrigo Strauss) Voltemos ao C&#43;&#43; padrão ISO com ajuda da biblioteca mais poderosa de todos os tempos. Nessa conversa sobre C&#43;&#43;, Strauss irá explicar as entranhas e o uso de uma biblioteca que, se não-padrão, pelo menos suportada em várias plataformas, o que por si só já é motivo para usá-la em seus projetos que usam rede (existe hoje em dia um projeto que não use?).
Desenvolvimento cross-platform em C&#43;&#43; com Qt (Basílio Miranda) Mais um mundinho que, eu pelo menos, nunca me arrisquei a entrar. Dando continuidade ao tema &amp;quot;frameworks de interface com o usuário multiplataforma&amp;quot;, Basílio Miranda agora explica como usar uma linguagem poderosa com um framework flexível, macetes e dicas.
Como assim &amp;quot;quanto custa&amp;quot;? Sim, senhores, foi inevitável. Esse encontro será cobrado um pequeno valor, quase simbólico, mas que será usado para custear alguns gastos com a estrutura do evento que, pelo que promete, vai ser maior ainda que o anterior. Eu sei que encontros de entusiastas nunca deveriam ser cobrados. Porém, essa é uma experiência que temos que vivenciar com nosso grupinho C&#43;&#43; para termos argumentos contra e a favor dos dois moldes que serão escolhidos.
</description>
</item>

     
        <item>
  <title>Estranho</title>
  <link>http://www.caloni.com.br/estranho/</link>
  <pubDate>2008-03-06</pubDate>
  
  <guid>http://www.caloni.com.br/estranho/</guid>
  <description>Bom, é hora de dizer tchau. Essa é minha última semana escovando bits na empresa onde estava por três anos. É estranho e esquisito dizer isso, mas me sinto um tanto aliviado. Nessa empreitada, porém, aprendi algumas coisas que valem a pena colocar na bagagem. Sempre é melhor entender do que criticar.
Por exemplo, vejamos a palavra estranho: quantas vezes você já pronunciou essa palavra quando estava diante de um problema daqueles esotéricos? Muitas vezes, não foi? E os problemas não-esotéricos?
Quando nos acostumamos a usar uma palavra para aliviar a dor de não entendermos o que está acontecendo diante de nós, visto pelos nossos próprios olhos, estamos nos condicionando a parar de cutucar nosso cérebro para encontrar uma resposta rápida e racional para o que está acontecendo. Em suma: nos fechamos ao mundo falando &amp;quot;estranho&amp;quot;.
Não por esse motivo, mas por estarmos cansados de tanto ouvir falar essa palavra, eu e meu amigo Thiago começamos a instituir uma &amp;quot;taxa simbólica&amp;quot; de 1 (um) real para os que proferirem a dita cuja, e passamos a usar o dinheiro arrecadado para o bem da comunidade, comprando o que nós, programadores, mais veneramos nos momentos de debugging: bolachas!
Essa &amp;quot;medida provisória&amp;quot; aos poucos foi se alastrando pelas mesas do departamento, ao ponto máximo de todos da área técnica, além do diretor comercial, colaborar para a nossa &amp;quot;caixinha de um real&amp;quot;.
Criamos um ambiente livre de estranhos. E criamos um trauma em nossas cabeças. A partir das primeiras semanas, toda vez que estávamos em algum lugar em que uma pessoa desconhecida (um estranho) dizia a palavra, soava um sino em nossas cabeças, quase fazendo com que nossa mão acusadoramente se erguesse e fizesse o gesto com o dedo indicando que a pessoa, a partir daquele momento, estava devendo um real para nossa caixinha comunitária.
E assim fomos indo, meses a fio, sem falar essa palavra na presença dos fiscais do um real, que éramos todos nós. A proibição foi linear e englobou todas as situações de vida social em que poderíamos nos expressar: no trabalho, no almoço, por mensagem instantânea, por e-mail, pelo celular, fora do trabalho, nos artigos do blogue...
Pois é, caro leitor, nos artigos do blogue. Se você procurar nestes últimos três anos qualquer menção à palavra &amp;quot;estranho&amp;quot; por aqui com certeza não irá encontrar.
Até agora, quando finalmente foi quebrado o encanto. Quer dizer, oficialmente a cobrança está extinta, mas nossas mentes sempre irão conter esse sino acusador tocando no ônibus, nas ruas, no cinema, no shopping, em casa. Enfim, nos códigos estranhos de nossa vida.
</description>
</item>

     
        <item>
  <title>Os diferentes erros na linguagem C</title>
  <link>http://www.caloni.com.br/os-diferentes-erros-na-linguagem-c/</link>
  <pubDate>2008-02-15</pubDate>
  
  <guid>http://www.caloni.com.br/os-diferentes-erros-na-linguagem-c/</guid>
  <description>Uma coisa que me espanta de vez em quando é o total desconhecimento por programadores mais ou menos experientes dos níveis de erros que podem ocorrer em um fonte escrito em C ou C&#43;&#43;. Desconheço o motivo, mas desconfio que o fato de outras linguagens não terem essa divisão de processos pode causar alguma nivelação entre as linguagens e fazer pensar que o processo de compilação em C é como em qualquer outra linguagem.
Porém, para começar, só de falarmos em compilação já estamos pegando apenas um pedaço do todo, que é a geração de um programa executável em C. Tradicionalmente, dividimos esse processo em três passos:
 Preprocessamento Compilação Linkedição  Vamos dar uma olhada mais de perto em cada um deles e descobrir erros típicos de cada processo.
O preprocessamento é especificado pelos padrões C e C&#43;&#43;, mas, tecnicamente, não faz parte da linguagem. Ou seja, antes que qualquer regra de sintaxe seja verificada no código-fonte, o preprocessamento já terá terminado.
Essa parte do processo lida com substituição de texto e diretivas baseadas em arquivos e símbolos. Por exemplo, a diretiva de preprocessamento mais conhecida
#include &amp;lt;stdio.h&amp;gt; faz com que todo o conteúdo do arquivo especificado seja incluído exatamente no ponto onde for colocada essa diretiva. Isso quer dizer que, antes sequer do código-fonte ser compilado, todo o conteúdo desse header padrão estará no corpo do arquivo C.
Para evitar que o mesmo header seja incluído inúmeras vezes dentro da mesma unidade em C, causando assim erros de redefinição, existe outra diretiva muito usada para cercar esses arquivos públicos:
#ifndef __MEUHEADER__ // se já estiver definido, caio fora até endif#define __MEUHEADER__// conteúdo do header#endif // __MEUHEADER__ Esse conjunto de duas diretivas, por si só, é capaz de gerar os mais criativos e bizarros erros de compilação em C. E estamos falando de erros que ocorrem antes que sequer seja iniciado o processo de compilação propriamente dito. Obviamente que os erros serão capturados durante a compilação, mas o motivo deles terem ocorrido foi um erro decorrente do processo de preprocessamento. Por exemplo, vamos supor que um determinado fonte necessita de uma declaração de função contida em meuheader.h:
#include &amp;quot;header-do-mal.h&amp;quot;#include &amp;quot;meuheader.h&amp;quot;int func(){meuheaderFunc();} Porém, num daqueles acasos da natureza, o header-do-mal.h define justamente o que não poderia definir jamais (obs.: e isso pode muito bem acontecer na vida real, se usamos definições muito comuns):
#ifndef __HEADERDOMAL__#define __HEADERDOMAL__// tirei header da jogada, huahuahua (risos maléficos)#define __MEUHEADER__#endif // __HEADERDOMAL__ Na hora do preprocessamento, o preprocessador não irá mais incluir o conteúdo dentro de header.h:
#ifndef __MEUHEADER__ // se já estiver definido, caio fora até endif#define __MEUHEADER__int meuheaderFunc(); // talvez alguém precise disso#endif // __MEUHEADER__ Conseqüentemente, durante a compilação do código-fonte já preprocessado, sem a declaração da função meuheaderFunc, irá ocorrer o seguinte erro:
error C3861: &#39;meuheaderFunc&#39;: identifier not found Isso em fontes pequenos é facilmente identificável. Em fontes maiores, é preciso ter um pouco mais de cuidado.
Após o processo de preprocessamento, de todos os arquivos indicados terem sido incluídos, de todas as macros terem sido substituídas, todas as constantes colocadas literalmente no código-fonte, temos o que é chamado unidade de compilação, que será entregue ao compilador, que, por sua vez, irá começar a análise sintática de fato, descobrindo novos erros que podem ou não (como vimos) ter a ver com a fase anterior. A figura abaixo ilustra esse processo, com algumas trocas conhecidas:
Dica: quando o bicho estiver pegando, e tudo o que você sabe sobre linguagem C não estiver te ajudando a resolver um problema, tente gerar uma unidade de compilação em C e analisar sua saída. Às vezes o que é claro no código pode se tornar obscuro após o preprocessamento. Para fazer isso no VC&#43;&#43; em linha de comando, use o parâmetro /E.
Se você conseguir passar ileso para a fase de compilação, pode se considerar um mestre do preprocessamento. Por experiência própria, posso afirmar que a maior parte do tempo gasto corrigindo erros de compilação, por ironia do destino, não terá origem na compilação em si, mas no preprocessamento e linkedição. Isso porque o preprocessamento confunde muito o que vimos no nosso editor preferido, e a linkedição ocorre em uma fase onde não importa mais o que está dentro das funções, mas sim o escopo de nomes, um assunto um pouco mais vago do que a linguagem C.
Na compilação você irá encontrar geralmente erros bem comportados, como conversão entre tipos, else sem if e esquecimento de pontuação ou parênteses.
int cannotConvertError(const char* message){int ret = message[0];return ret;}int ret = cannotConvertError(3);error C2664: &#39;cannotConvertError&#39; : cannot convert parameter 1 from &#39;int&#39; to &#39;const char *&#39;if( test() )something;something-else;elseelse-something;error C2181: illegal else without matching ifwhile( (x &amp;lt; z) &amp;amp;&amp;amp; func(x, func2(y) != 2 ){something;}error C2143: syntax error : missing &#39;)&#39; before &#39;{&#39; Claro, não estamos falando de erros relacionados a templates, que são um pesadelo à parte.
Dica: nunca subestime o poder de informação do compilador e da sua documentação. Se o erro tem um código (geralmente tem), procure a documentação sobre o código de erro específico, para ter uma idéia de por que esse erro costuma ocorrer, exemplos de código com esse erro e possíveis soluções. Ficar batendo a cabeça não vai ajudar em nada, e com o tempo, você irá ficar sabendo rapidamente o que aconteceu.
Chegando na linkedição, onde a esperança reside, tudo pode vir por água abaixo. Isso porque você já espera confiante que tudo dê certo, quando, na verdade, um erro bem colocado pode fazer você desistir pra sempre desse negócio de programar em C.
As características mais desejadas para corrigir erros nessa fase são:
 Total conhecimento da fase do preprocessamento Total conhecimento da fase da compilação Total conhecimento de níveis de escopo e assinatura de funções  Os dois primeiros itens são uma maldição previsível que deve-se carregar para todo o sempre. Se você não consegue entender o que aconteceu nas duas primeiras fases, dificilmente irá conseguir seguir adiante com essa empreitada. O terceiro item significa que deve-se levar em conta as bibliotecas que estamos usando, headers externos (com dependências externas), conflitos entre nomes, etc.
Alguns erros mais encontrados aqui são as funções não encontradas por falta da LIB certa ou por LIBs desatualizadas que não se encaixam mais com o projeto, fruto de muitas dores de cabeça de manutenção de código. Essa é a parte em que mais vale a pena saber organizar e definir uma interface clara entre os componentes de um projeto.
Do ponto de vista técnico, é a fase onde o linker junta todos os arquivos-objeto especificados, encontra as funções, métodos e classes necessárias e monta uma unidade executável, como ilustrado pela figura abaixo.
Dica: uma LIB, ou biblioteca, nada mais é que uma coleção de arquivos-objeto que já foram compilados, ou seja, já passaram pelas duas primeiras fases, mas ainda não foram linkeditados. Muitas vezes é importante manter compatibilidade entre LIBs e os projetos que as usam, de forma que o processo de linkedição ocorra da maneira menos dolorosa possível.
É óbvio que, por ter passado pelas três fases de transformação de um código-fonte em um programa executável, não quer dizer que este programa está livre de erros. Os famigerados erros de lógica podem se disfarçar até o último momento da compilação e só se mostrarem quando o código estiver rodando (de preferência, no cliente).
Entre esses erros, os mais comuns costumam se aproveitar de macros, como max, que usa mais de uma vez o parâmetro, que pode ser uma chamada com uma função. A função será chamada duas vezes, mesmo que aparentemente no código a chamada seja feita uma única vez:
#define max(a, b) ( a &amp;gt; b ? a : b )int z = max( func(10), 30 ); Um outro erro que já encontrei algumas vezes é quando a definição de uma classe tem um sizeof diferente do compilado em sua LIB, pela exclusão ou adição de novos membros. Isso pode (vai) fazer com que, durante a execução, a pilha seja corrompida, membros diferentes sejam acessados, entre outras traquinagens. Esses erros costumam acusar a falta de sincronismo entre os headers usados e suas reais implementações.
Enfim, na vida real, é impossível catalogar todos os erros que podem ocorrer em um fonte em C. Se isso fosse possível, ou não existiriam bugs, ou pelo menos existiria uma ferramenta para automaticamente procurar por esses erros e corrigi-los. Bom, existe o Lint.
Criei um projeto com alguns erros básicos, alguns demonstrados aqui, outros não, mas enfim, completamente configuráveis e divididos nessas três fases. É possível habilitar e desabilitar erros através do header cpperrors.h. Espero que gostem.
</description>
</item>

     
        <item>
  <title>Terceiro encontro C&#43;&#43;</title>
  <link>http://www.caloni.com.br/terceiro-encontro-c/</link>
  <pubDate>2008-01-22</pubDate>
  
  <guid>http://www.caloni.com.br/terceiro-encontro-c/</guid>
  <description>Nesse último sábado aconteceu, como previsto, o terceiro encontro de usuários/programadores C&#43;&#43;. Foi um sucesso bem maior que o esperado, pelo menos por mim e pelas pessoas com quem conversei. A organização foi fantástica, e o patrocínio muito importante, o que deu abertura para pensamentos mais ousados sobre o futuro de C&#43;&#43; no Brasil. Foi gerada uma lista de resoluções para o futuro (que começa hoje), onde pretendemos, inclusive, fazer reuniões no mesmo estilo trimestralmente.
Aqui segue um breve relato sobre as palestras que ocorreram no evento.
C&#43;&#43; com wxWidgets, de Ivo Nascimento. Inicialmente o palestrante focou o ponto muito pertinente da visão comercial do uso de um framework multiplataforma que possa rodar nos três sistemas operacionais mais usados no Brasil: Windows, Linux e MacOS. É um fato que programadores precisam se alimentar e alimentar seus filhos, então essa questão pode ser interessante para aqueles que precisam expandir seus mercados.
Como sempre deve rolar, houve demonstração por código de como um programa wxWidgets é estruturado. Basicamente temos inúmeras macros e um ambiente controlado por eventos, da mesma maneira que MFC e outros frameworks famosos.
Para mim foi uma imensa vantagem e economia de tempo ter assistido à palestra, já que faz um tempo que eu tento dar uma olhada nessa biblioteca. Para quem também gostou da idéia, dê uma olhada nos tutoriais disponíveis no sítio do projeto.
C&#43;&#43;0x - novas características, de Pedro Lamarão. Para quem achava que as palestras iriam ser superficiais no quesito linguagem deve ter ficado espantado com o nível de abstração, formalidade e profundidade com que foi tratado o assunto das novas características da linguagem C&#43;&#43; que serão aprovadas pelo novo padrão e que irão tornar a programação genérica muito mais produtiva e eficiente.
O foco do palestrante foi no mais importante: quais os problemas que as novas mudanças irão resolver, e de que modo a linguagem irá se tornar mais poderosa para suportar programação genérica, paradigma que, de acordo com o debate que houve após a apresentação, ainda é muito novo, mas que poderá se tornar futuramente uma base sólida de programas mais simples de serem mantidos e especializados.
Para quem se interessou pelo tema e pretende estudar um pouco mais sobre as novidades na linguagem, aqui vão algumas expressões-chave para pesquisa:
 Proposed Wording for Variadic Templates Proposed Wording for RValue Reference Specifying C&#43;&#43; Concepts  Threads em C&#43;&#43;, por Wanderley Caloni. O foco principal desse tema foi dividido entre a interface, óbvia, para suportar programas multithreading em C&#43;&#43;, incluindo abstrações de sincronismo e variáveis de condição, e a mudança significativa no padrão para definir um modelo de memória consistente com programas multithreading, a grande vantagem dessa biblioteca ter sido votada, pois tendo as bases para o que eles estão chamando de &amp;quot;execução consistente&amp;quot;, a interface é mera conseqüência.
Durante a apresentação foi mostrado um exemplo de uso das classes thread e mutex. O código foi melhorado (mas não completado). Ao final da palestra, fiquei devendo os links. Bem, aqui estão algumas expressões-chave também:
 ISO C&#43;&#43; Strategic Plan for Multithreading Thoughts on a Thread Library for C&#43;&#43; A Memory Model for C&#43;&#43;: Strawman Proposal Multi-threading Library for Standard C&#43;&#43;  Para finalizar, segue o álbum de fotos disponibilizado pelo Alberto Fabiano, organizador-mor do evento.
</description>
</item>

     
        <item>
  <title>Como ter um melhor blogue em 2008</title>
  <link>http://www.caloni.com.br/como-ter-um-melhor-blogue-em-2008/</link>
  <pubDate>2008-01-08</pubDate>
  
  <guid>http://www.caloni.com.br/como-ter-um-melhor-blogue-em-2008/</guid>
  <description>Não é exatamente uma receita de bolo, tampouco uma lista de regras imutáveis. Na verdade, apenas algumas dicas que o criador do termo (we)blog deu sobre como ele imagina que os blogueiros deveriam se comportar em relação aos seus blogues. Entre os toques, ele inicialmente comenta que o princípio de um weblog é ser um histórico dos sítios que navegamos, e que eventualmente podemos publicar conteúdo original. Bem, esse humilde blogue faz exatamente o oposto, acreditando que o conteúdo publicado aqui em português dificilmente será encontrado na web, além de que me sinto um inútil se não colaborar com o mundo usando o conhecimento que aprendi e aprendo no dia-a-dia.
Por isso mesmo, aqui vão as dicas traduzidas, que encontrei no blogue de Lino Resende, verbatim (com meus comentários ao final de cada item):
 Um blog verdadeiro é um log de todos os sítios que você gostaria de salvar ou dividir.   Então, hoje, o del.icio.us é melhor para os bloggers do que o próprio Blogger. Isso seria como se os blogues fossem sítios de pesquisadores do google, o que não deixa de ser meia-verdade.  Você pode, é claro, colocar links sobre você fora do seu blog, mas se o blog tem mais posts originais do que links, recomendo aprender um pouco de humildade.   É um golpe bem dado ao Caloni.com.br. Bom, espero ser mais humilde em 2008 =).  Se fizer uma pequena procura antes de postar, vai descobrir que alguém já falou do seu assunto e melhor do que você.   Isso eu faço, mas, como já disse, conteúdo em português é mais escasso, o que compensa a publicação de artigos sobre assuntos já tratados em outras línguas.  Seja você mesmo, sem suprimir links que não o tratem favoravelmente. Seus leitores querem saber quem efetivamente você é.   Essa dica é particularmente difícil para blogues técnicos, como o meu e de muita gente. No entanto, nós tentamos não parecer bots, acredite!  Você pode melhorar o título das páginas que sugere quando as descrever e dar o link. Assegure-se de sua descrição fará os leitores se lembrarem dela, reconhecendo páginas que já visitaram ou quando a visitarem novamente.   Essa é mais fácil de fazer.  Use sempre algum adjetivo para descrever sua própria reação à página que recomenda (ótima, imaginativa, clara, útil).   Essa dica foi clara e útil. Além de imaginativa e ótima, claro.  Dê os créditos à fonte que você usou. Assim, seus leitores podem conferi-la e &amp;quot;moverem-se para cima&amp;quot;.   Essencial, especialmente, mais uma vez, se tratando de blogues técnicos.  Cuidado com os problemas de formatação estranha, múltiplas páginas com histórias, textos muito longos, etc. Não esconda o link principal entre outros auxiliares, mal identificados ou pobres.   Essa dica é mais para weblogs de fato. Eu passo.  Escolha alguns autores favoritos ou celebridades e crie um feed no Google News, acompanhando novas menções a eles. Assim, outros fãs podem segui-los através do seu blog.   Você pode seguir os que sigo através da minha Home Page (update 2021-04-18: hoje em dia não sigo mais nada, mas links específicos existem nos posts; quem diria, acabei ficando mais blogger com o passar do tempo). Eventualmente compartilho posts através do Google Reader. Update 2021-04-18: não mais =(  Reindique seus links favoritos de tempos em tempos para quem os perdeu, esquece ou o está lendo pela primeira vez.   Essa é uma coisa que está faltando aqui no Caloni.com.br, que é a manutenção dos artigos antigos. Prometo me esforçar mais em 2008. Promessa de ano-novo =).  É isso. Concorda, discorda, sem corda? Imagino que a dica que mais me afetou foi aquela sobre humildade, lá no começo. Digo isso porque ainda está martelando na minha cabeça, pronta para transformar este blogue em algo mais democrático e transparente.
</description>
</item>

     
        <item>
  <title>CppCon III</title>
  <link>http://www.caloni.com.br/cppcon-iii/</link>
  <pubDate>2008-01-04</pubDate>
  
  <guid>http://www.caloni.com.br/cppcon-iii/</guid>
  <description>O ano de 2008 promete. Pelo menos no começo.
Está marcado para dia 19 desse mês em São Paulo o terceiro encontro de programadores C&#43;&#43;, cujas informações mais atualizadas você poderá acompanhar em nossa wiki. A grade de eventos, pelo menos por enquanto, é essa:
 09:30 a 10:00 - Introdução e Apresentação dos Membros do Encontro 10:00 a 11:00 - C&#43;&#43; com WxWidgets por Ivo Nascimento 11:00 a 11:30 - Debate 11:30 a 11:45 - Coffee break 11:45 a 12:45 - C&#43;&#43;0x - Novas características de suporte a projetos de bibliotecas genéricas por Pedro Lamarão 12:45 a 13:15 - Debate 13:15 a 14:30 - Almoço 14:30 a 15:30 - Threads no CPP ISO - Wanderley Caloni 15:30 a 16:00 - Debate 16:00 a 16:15 - Coffee break 16:1 a 17:00 - Fórum sobre a Organização do Grupo de Usuários e da C/C&#43;&#43; Conference Brasil 17:30 a 00:00 - C/C&#43;&#43; Beer Meeting!  Conto com a participação de todos que se interessam, usam ou aprendem sobre essas fabulosas linguagens de programação. Vamos levantar a moral de C&#43;&#43; no cenário brasileiro!
Errata: na verdade o que ocorreu dia 19 foi um encontro de C&#43;&#43; com direito a palestras e coffee break, o que de certa forma invalida o nome CppCon. Futuramente teremos o que poderemos chamar de conferência C&#43;&#43;, no sentido amplo do termo. Te espero lá.
</description>
</item>

     
        <item>
  <title>Como ser um melhor desenvolvedor em 2008</title>
  <link>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-em-2008/</link>
  <pubDate>2008-01-02</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-em-2008/</guid>
  <description>Aproveitando que está se aproximando meu prazo final para minhas resoluções de seis meses atrás, e o DQ já fez o checklist dele, vou dar uma espiada na minha lista de desejos atual e fazer uma nova lista para 2008.
1. Fazer um curso de memorização Comecei, fiz vários exercícios, mas ainda não acabei todas as aulas. Descobri que a memória pode ser muito mais bem treinada do que realmente é, e existem técnicas bem pensadas que fazem isso sem muito mais esforço do que apenas tempo despendido. De fato todos nós já temos uma memória incrível, só precisamos treiná-la adequadamente.
Como comecei e ainda não parei considero esta tarefa realizada (começar e ganhar ritmo é o mais difícil) e estendido para 2008 inteiro.
2. Fazer um curso de leitura dinâmica Comecei, fiz quase todos os exercícios e terminei. De fato melhorou em muito minha capacidade de concentração na hora de ler um texto rápido, embora eu ainda fique com muito sono quando faço isso. O importante agora é nunca deixar de treinar, e melhorar cada vez mais o poder dos movimentos oculares.
3. Aprender o meu ritmo Não existe milagre, mas existem coisas que podemos fazer para ajudá-lo a acontecer. Foi isso que aprendi durante minhas inúmeras tentativas de dominar o tempo e o espaço no desenvolvimento de software. Aprendi muita coisa, inclusive que escritórios não foram criados para serem lugares produtivos, e quase sempre é necessário se defender dos riscos que a internet faz para a saúde.
Enfim, essa tarefa também terminou. Agora é só manutenção constante e disciplinada.
Por fim, considero se achar melhor depois de ter melhorado um ou dois itens da vida profissional uma &amp;quot;escrutinisse&amp;quot;, tão inútil quanto achar-se já um desenvolvedor muito bom. Porque a qualquer hora podemos cometer novamente aquelas besteiras que fazíamos há cinco anos, e a qualquer hora podemos ter idéias brilhantes. O importante, na minha opinião, é aprender exatamente por que erramos e por que acertamos. Aprender exatamente, e lembrar-se disso, pode ser um enorme catalisador de anos de depuração aleatória.
 &amp;quot;Cada problema que eu resolvo se torna uma regra que serve mais tarde para resolver outros problemas.&amp;quot; - Rene Descartes
 4. Lista inusitada de tarefas Sem estar na lista previamente concebida comecei a fazer outras coisas de maneira mais eficiente, relacionado ao trabalho ou não:
  Aprender o leiaute do teclado Dvorak. Treino todo dia cinco minutos há três meses a digitação usando esse leiaute, porque é mais simples, mais rápido e dói menos os dedos.
  Anotar todas as coisas importantes. Seja uma idéia nova, uma idéia sobre uma idéia, ou até mesmo melhoramentos em algum software que dou manutenção, é importante manter tudo anotado, porque sabe-se lá quando isso vai ser usado. Mas, quando for, quem vai se lembrar?
  Bloguear constantemente. Apesar dos sacrifícios que isso às vezes causa, é edificante nunca &amp;quot;deixar a bola cair&amp;quot;. Minha regra é sempre publicar um artigo dia sim, dia não durante a semana. Em uma semana começo na segunda, em outra na terça, e assim sucessivamente. Tem funcionado desde que reiniciei o blogue há seis meses, e espero que continue assim.
  Usar novo controle de versão em casa. Há um mês mais ou menos conheci o Mercurial, que é um sistema de controle de versão muito leve e não-centralizado, duas coisas que fazem uns sininhos soarem em minha cabeça. Ele é baseado conjunto de modificações e merge, duas coisas a que não estou acostumado e me forcei a aprender.
  Não é muito difícil definir essa lista, pois ela na verdade são as mesmas duas listas que citei anteriormente. Comecei a fazer essas coisas seis meses atrás. Para um fumante de fato parar, uns cinco anos de abstinência é um bom indicador. Acredito que, para um hábito se enraizar, um ano e meio pode ser de bom tamanho.
</description>
</item>

     
        <item>
  <title>MouseTool</title>
  <link>http://www.caloni.com.br/mousetool/</link>
  <pubDate>2007-11-13</pubDate>
  
  <guid>http://www.caloni.com.br/mousetool/</guid>
  <description>Well, as most of you already know, I really don&#39;t like mice. Nevertheless I respect the users who use it and like it. That is the reason why I am writing a little more about it. This time, I going to show a program I use every day: MouseTool, for the users who does not use the mouse and like it.
The program main purpose is to avoid clicking the mouse, simulating a click every time the user stops to move the cursor. Just this: simple, efficient and mouseless =).
There are some options like drag-and-drop and double-click, both available through the program. You can choose to use a keyboard shortcut or the mode state, where you can switch the program default among simple-click, double-click and drag-and-drop.
MouseTool was originally a open source tool. That means the lastest open source code is available, right? Wrong. Actually, I was unable to find it in every place I looked for.
Fortunately, my friend Marcio Andrey has got the source, and just like me, he wanted to make it available to everyone who would like to use it and change it. That&#39;s why I&#39;m publishing it in GitHub. It&#39;s free, and it&#39;s 4all =).
Let&#39;s make use of this source and show how to explore a code not written by us. Normally the first things to do are: download the compacted file and extract the files into a new folder. So we find the project file (in this case, MouseTool.dsw) and try to open it. The result is a total failure, because I believe no one use the Visual Studio version that opens this kind of file (it will convert it to another one).
Normally open source projects programmers are used to get the source code files, modify them, use them, publish them and all. But this is not always true about strict Windows commercial programmers.
Given the source files, we can explore some interesting parts we&#39;d like to do someday in our own programs. And the main part is: we have the source, but not the copyright.
Click in the link in the end of the post and make good use of it.
Update: MouseTool now has a home page and a Source Forge project! Its new name is GMouseTool.
</description>
</item>

     
        <item>
  <title>Desenvolvendo em linha de comando</title>
  <link>http://www.caloni.com.br/desenvolvendo-em-linha-de-comando/</link>
  <pubDate>2007-11-01</pubDate>
  
  <guid>http://www.caloni.com.br/desenvolvendo-em-linha-de-comando/</guid>
  <description>Desde uns tempos para cá o Visual Studio tem se tornado uma das ferramentas mais pesadas de desenvolvimento já criadas. Como se não bastasse, a compilação de pequenos trechos de código é algo desnecessariamente complicado no ambiente. Por esse motivo estou ganhando o costume de usar a linha de comando para esse tipo de tarefa. Afinal de contas, na maioria das vezes a única coisa que eu preciso fazer é abrir o atalho &amp;quot;Visual Studio Command Prompt&amp;quot; e digitar uma linha: cl meu-codigo-fonte-do-coracao.cpp.
O problema é ter que &amp;quot;andar&amp;quot; do diretório padrão de início até a pasta onde está o código-fonte que desejo compilar. Porém, isso é facilmente resolvido com uma linha (no registro), dentro de HKCR, Folder, shell, Console, command crie a chamada ao cmd.exe passando a bat que constrói o ambiente para o Visual Studio C&#43;&#43;. A partir daí, o comando &amp;quot;Console&amp;quot; existe no menu de contexto de qualquer pasta que clicarmos no Windows Explorer.
Note que é possível criar outros comandos, como é o meu caso, onde preciso de vez em quando compilar utilizando o Visual Studio 2005 (o comando Console) e o Visual Studio 2003 (o comando VS2003). Ao escolher a opção, um prompt de comando é aberto com o ambiente de compilação montado e (adivinhe) com a pasta padrão sendo a que foi clicada no explorer.
Nossos projetos aqui na empresa costumam ser divididos em inúmeras soluções do Visual Studio para evitar a bagunça que seria (foi) ter que abrir uma solução de 10^24324 projetos. O problema é que, se abrir um Visual Studio já pesa, imagine abrir cinco de uma vez.
Por isso mesmo que, aproveitando que agora tenho uma linha de comando personalizada com o ambiente de compilação, faço uso da compilação de soluções em modo console que o devenv (a IDE do Visual Studio) oferece: devenv meu-solution-do-coracao.sln /build Debug ou devenv meu-project-do-coracao.vcproj /build Release. Além de ser rápido, pode ser usado em builds automatizados, coisa que já fazemos. O que quer dizer que podemos matar os itens 2 e 3 do teste do Joel, nos deixando um passo mais próximo do purgatório.
Tudo bem, mas eu preciso depurar o código! Você não quer que eu use o ntsd.exe, ou quer?
Sabe que não é uma má idéia?
Porém, se você prefere algo mais amigável, mais ainda que o WinDbg, você pode iniciar o depurador do Visual Studio por linha de comando: vsjitdebugger notepad.exe ou vsjitdebugger -p meu-pid-do-coracao. Daí não tem jeito: você economiza no start, mas o Visual Studio vai acabar subindo. Ou um ou outro. Por isso eu recomendo aprender a usar o WinDbg ou até o NTSD. Quer dizer, é muito melhor do que esperar por uma versão mais light do Visual Studio no próximo ano.
</description>
</item>

     
        <item>
  <title>A Linguagem de Programação C: O Livro</title>
  <link>http://www.caloni.com.br/the-c-programming-language/</link>
  <pubDate>2007-10-12</pubDate>
  
  <guid>http://www.caloni.com.br/the-c-programming-language/</guid>
  <description>O clássico de Ritchie e Kernighan, criadores da linguagem C, não foi meu primeiro livro de programação. E nem deveria ser. Não o recomendo para iniciantes, pois é necessário possuir algum conhecimento e prática para realmente aproveitar os conceitos desse livro.
Então, o que ler antes disso? Existem tantos livros bons para iniciantes (e tantos livros péssimos). Eu comecei com C Completo e Total, de Herbert Schildt. Não me arrependi. O autor vai descrevendo C para quem já tentou fazer algumas coisas, já programou outras e está afim de tirar as principais dúvidas sobre essa linguagem que tantos abominam por ser difícil, e tantos idolatram por ser poderosa. As práticas do livro já são um bom início para quem quer pensar, entender e programar.
Depois de Schildt passei a ler os livros da Viviane, os famosíssimos módulos do Treinamento em Linguagem C. São ótimos para a prática e para reafirmar os conceitos lidos no primeiro livro. Para uma linguagem tão importante uma segunda opinião é sempre bem-vinda.
Então chegou a hora. Passei algumas das minhas melhores horas na biblioteca lendo como os próprios criadores da linguagem a ensinam, e como o padrão ANSI é definido (em termos bem simplificados, condição perfeita para entender a lógica do compilador). Com o livro é possível perceber claramente que a linguagem é tão simples quanto poderosa, lembrando (quem diria!) o mais abominado ainda assembly. Vamos aos capítulos.
Chapter 1: A Tutorial Introduction O começo é quase sempre o mesmo. Os autores explicam um programa simples na linguagem, fazem alguns testes e explicam linha a linha o que cada coisa significa. O importante aqui é esquecer que existe um sistema operacional rodando por baixo de nosso programa e entender que a linguagem foi desenhada para independer disso. É tão genérica a ponto de independer dela mesma. Explico: enquanto a maioria das linguagens considera sua biblioteca parte integrante da mesma, a linguagem C faz questão de separar as coisas, reafirmando sempre que uma coisa é o preprocessamento, outra é a compilação, outra é a linkedição e nenhuma delas precisa de uma biblioteca, apesar de uma ter sido definida no padrão (baseada no uso comum da linguagem em diversos ambientes).
Se você nunca teve contato com C ou deseja ter uma aproximação mais simplificada e quer entender como as coisas mais simples funcionam na linguagem, este capítulo é imperdível.
Chapter 2: Types, Operators and Expressions Essa é a hora ideal para separar dois conceitos que muitas vezes ficam grudados na mente dos precoces programadores para o resto de suas vidas: uma coisa é um tipo e outra coisa é uma expressão. Uma expressão possui um tipo, que define seu comportamento de acordo com o operador usado. Tudo é explicado muito bem com exemplos bem escritos e que são realmente úteis, como strlen, atoi, strcat (presentes na biblioteca padrão) e até um contador de bits.
Se quiser entender o que cada fragmento de lógica na linguagem significa por completo (e não apenas uma expressão jogada na correria da programação do dia-a-dia) esse capítulo irá explicar. Depois de entendê-lo, nunca mais vai achar bizarro aqueles problemas de precedência que permeiam código pouco sensato.
Chapter 3: Control Flow Apenas após ter explicado os conceitos que regem qualquer linha de código operacional em C os autores se dedicam a explanar as diversas formas de controlar o fluxo do seu programa. Nessa hora a linguagem se desdobra, se torna mágica, simples, flexível e poderosa.
Não basta apenas possuir lógica de programação. Para escrever bons programas é necessário saber como construir os blocos funcionais que irão traduzir seus comandos para o computador. É nesse ponto que é fundamental o domínio de qualquer construção em C, seja um simples if ou uma combinação maluca de switches, whiles e breaks.
Chapter 4: Functions and Program Structure Entendidos os princípios básicos de criação e execução de qualquer programa em C, chegou a hora de explicar como a linguagem suporta a organização de seu código através de funções, módulos e diretivas de preprocessamento. Note que os autores partem do princípio minimalista da linguagem e imagina o que acontece conforme seus programas vão se tornando cada vez maiores. Para isso explicam o mesmo princípio que foi utilizado ao desenhar a linguagem, que até hoje é usada para escrever dezenas de milhares de código em um único projeto, ou até milhões (como em sistemas operacionais).
No desenvolvimento de software a organização é um dos pilares que irá transformar o programador em um mestre da arquitetura de seu próprio código. Não negligencie a lógica das partes maiores do seu código, só se importando com os pequenos pedaços de blocos dentro de uma função. Antes de ser cientista, seja um desenvolvedor nato.
Chapter 5: Pointers and Arrays A dificuldade com que muitos programadores C têm com essas duas características da linguagem fizeram com que fosse dedicado um capítulo inteiro para explicar e reexplicar como os arrays (vetores) e ponteiros funcionam e qual a relação intrínseca entre eles. É também explicada a relação strings x arrays, já que em C uma string é uma cadeia de caracteres.
Se você programa em C e até hoje tem dificuldades para entender completamente esse assunto, sugiro que largue o que você está fazendo agora e leia esse capítulo até o final. Será bem mais proveitoso que ficar zanzando no meio de um monte de blogues (como este aqui).
Chapter 6: Structures A estrutura é uma composição complexa em C, mas permite um organização melhor dos dados, da mesma maneira com que as funções organizam melhor o código.
Aparentemente o tema estrutura é mais simples que ponteiros, e deveria ser tratado antes. Porém, fazer isso impediria abordar o tema de listas ligadas e outras estruturas que dependem do uso de ponteiros para que estruturas referenciem elas mesmas, algo extremamente recorrente no mundo da programação.
É sempre bom lembrar que o uso de estruturas foi o nascimento do C&#43;&#43;, que prima pela elegância na organização e harmonia entre seu código e dados. A linguagem C também não fica para trás, mas é importante saber usar.
Chapters 7 and 8: Input and Output / The UNIX System Interface Para finalizar é abordado o tema da interface com o mundo exterior da linguagem. Desde sempre suportando a maneira mais básica, genérica e portátil de qualquer sistema operacional, o console, talvez hoje essa característica seja um tanto menosprezada pelos usuários de ambientes gráficos. Contudo, não deixa de ter seu valor ainda hoje, nem que seja para escrever programas de teste.
Apêndices Os adendos são incrivelmente úteis e os utilizo ainda hoje como referência. Cá entre nós, o padrão formal da linguagem é algo chato de se ler, e muitos detalhes são perfeitamente ignoráveis para quem não está desenvolvendo um compilador. Contudo, acredito que a maioria dos bons programadores deveria se preocupar em entender como os compiladores entendem seu código, pois muitos dos erros podem ser facilmente resolvidos através do desenvolvimento de uma certa empatia com a linguagem. É por isso que considero o Apêndice A o mais útil de todos.
Por outro lado, sempre fui contra a reinvenção da roda. O que quer dizer que sempre fui a favor do pleno conhecimento da biblioteca padrão, pois ela fornece funções das mais usadas no dia-a-dia, e algumas outras que poderão ter sua serventia um dia desses. Mas para isso elas devem ser conhecidas. Isso quer dizer que uma passada de olhos no Apêndice B não faz mal a ninguém.
O Apêndice C hoje é um pequeno guia dos curiosos para as mudanças que foram infligidas na linguagem quando esta foi padronizada. Como fã incondicional de C, não pude deixar de ler e reler essa parte, já que me dedico também a conhecer os primórdios dessa linguagem. Contudo, é parte opcional para as pessoas práticas (a não ser que você esteja com problemas com código legado do século passado).
Conclusão Livros vêm, livros vão, mas apenas os clássicos permanecerão. A Linguagem de Programação C é um clássico, sem sombra de dúvida, e nunca irá perder seu valor para a linguagem. A maioria dos livros usa-o como referência, assim como os livros tão amados da comunidade C&#43;&#43; sempre usam Stroustrup como referência. Portanto, se puder, reserve um tempo para o passado.
</description>
</item>

     
        <item>
  <title>Cronogramas</title>
  <link>http://www.caloni.com.br/cronograma/</link>
  <pubDate>2007-10-04</pubDate>
  
  <guid>http://www.caloni.com.br/cronograma/</guid>
  <description>Nunca fui muito bom em definir cronogramas e nunca conheci alguém que fosse. Porém, ultimamente, no conforto do lar (férias), estou me saindo razoavelmente bem ao aplicar no meu dia-a-dia algumas regras que estabeleci como sendo boas pra mim. Não são regras que baixei do sítio do Joel nem é um design pattern, mas já me ajudam um bocado. Gostaria de compartilhá-las com meus pontuais leitores, que sempre entregam seus projetos em dia e nunca se esquecem de comentar uma linha de código sequer. Vocês são meu objetivo de vida e motivo de orgulho deste humilde blogue, que se esmera a cada dia que passa para ser fiel à inegável qualidade do meu público. Quando crescer quero ser igual a vocês.
Mas enquanto não sou, vamos às regras.
O primeiro grande passo é admitir que acertar cronogramas é como acertar na loteria: milhões de pessoas tentam toda semana e uns poucos gatos pingados conseguem de vez em quando. E ainda assim por acaso. O importante nessa analogia é perceber que, independente de ser difícil de acertar, isso não impede as pessoas de tentar. Veja você, elas (normalmente) não jogam 1, 2, 3, 4, 5, 6. Por quê? Porque elas tentam jogar no que acreditam ser uma combinação mais provável. E antes que um sábio chinês diga que a chance de sair a seqüência 1, 2, 3, 4, 5, 6 é tão provável quanto qualquer outra, explico que a analogia aqui é psicológica, não matemática. As pessoas tentam acertar, por mais irracional que isso pareça. A mesma filosofia deve ser seguida para cronogramas. Não chute valores que estão dentro da sua zona de conforto, mas tente de fato chegar o mais próximo possível da realidade. E, quem sabe um dia, você não é sorteado.
A segunda regra reza que o tempo estimado vira tempo mínimo. Você fará uma tarefa em uma hora. Mas, diabos, você não sabe disso antes de fazer e coloca no cronograma três horas. Quanto tempo você vai levar agora? Três horas. Não que você não consiga em menos tempo, mas, ao &amp;quot;alargar&amp;quot; a janela de tempo para três horas, seu ritmo irá seguir essa premissa e será mais lento. Há uma explicação psicológica para isso chamada Lei de Parkinson 1. Obviamente que o inverso não é verdadeiro. Quer dizer, você não vai terminar uma tarefa de uma hora em dez minutos se colocar dez minutos na sua tabela mágica. Isso, mais uma vez, não é matemática: é psicologia.
 A mesma analogia absurda serve para valores muito altos. Se estimar três meses para uma tarefa de uma hora, terá três meses para procurar um emprego novo, e não para terminar a tarefa.
 A terceira regra diz sobre o tamanho das tarefas: as menores são mais exatas. Este é o velho ditado de dividir para conquistar. Afinal, é muito melhor estimar o tempo para fazer uma nova função do que estimar o tempo total para a nova versão do produto. Portanto, trate de dividir o seu elefante. O limite é a partir do momento em que se sentir confortável para prever o tempo necessário a ser gasto em uma subtarefa. É muito simples ilustrar e entender esse conceito com código. Voltando ao caso da função, digamos que você consiga terminar a bendita função em exata uma hora. Você é bom, hein?
Porém, essa função ainda:
 não foi comentada, não foi testada, não foi testada em release.  Logo, essa é uma tarefa em que você termina o mais importante em uma hora... mas não termina tudo. Deve-se sempre considerar a tarefa por completo, pois no final de quinze tarefas vai faltar comentar e testar tudo isso, o que aumentará consideravelmente a imprevisiblidade no seu cronograma.
Seja honesto consigo mesmo e com seu chefe: você realmente trabalha 8 horas por dia? É lógico que não! E não é nenhuma vergonha admitir isso. Todos nós temos emails para ler e responder, reuniões para presenciar e blogues importantes para acompanhar. Portanto, ignore essa conversa fiada de 8 horas e admita: não se deve contar os dias como se eles tivessem 8 horas. Ninguém é produtivo programando 8 horas seguidas. Essa pessoa está te enganando ou usando cocaína (que não pode ser usada todos os dias).
Qual o valor de um dia, então? Cada um sabe o valor que deve ser decrementado desse valor simbólico de 8 horas, mas esse valor sempre será menor. Não se iluda! Se precisar harmonizar seu cronograma com um relatório para entregar para o chefe você pode usar de maneira privada o seu contador pessoal, por exemplo, trabalho 4 horas no máximo programando por dia, e converter para torná-lo público, multiplicando por dois para dar as 8 horas diárias.
A maneira com que eu administro meu tempo tenta (eu disse tenta) seguir as regras até aqui dispostas. Além dessas eu adicionei algumas regras minhas, baseadas em valores razoáveis e premissas consideravelmente lógicas. Aliás, isso me lembra uma última regra geral: entenda o seu ritmo.
O cronograma costuma (deveria) ser considerado uma coisa pessoal. Por quê? Porque cada um tem seu tempo. O que vale mais ao executar uma tarefa geralmente é (deveria ser) qualidade, e não quantidade. Seu vizinho de baia costuma terminar as coisas na metade do tempo que você? Bom para ele. Porém, se você tenta empregar o mesmo ritmo ao seu dia-a-dia vai ter que gastar depois mais do dobro do tempo que você economizou corrigindo os erros de uma tarefa feita nas coxas. Nada é &amp;quot;de grátis&amp;quot;.
Encare o trabalho assim como dormir: cada um tem o seu número de horas noturnas para descansar. Se dormir mais ou menos que o normal isso irá influenciar mais tarde, quando acordar. Alguns dormem 4, outros 12 horas. A média é 8. Mas e daí?
Primeiro eu tento usar um princípio que a maioria das pessoas conhece e a minoria acredita: se chama princípio de Pareto. Ele diz que 20% de uma tarefa resolve 80% dos problemas. Aos poucos eu fui acreditando nele até que cheguei à conclusão que deve funcionar, porém existe um problema: definir quais são esses 20%.
Voltando novamente no caso da função, é óbvio que a parte mais importante é fazer a função. Mais uma vez, cada caso é um caso, e o importante é desenvolver esse feeling do que é mais importante. Fazendo o que é mais importante o resto virá complementar a solução.
Essa ordem do que é mais importante deve servir para dividir qualquer tarefa e as tarefas de cada dia, ordenadas por importância. Dessa forma, é fácil começar o dia ou uma tarefa maior pelo que é mais importante. Isso nos leva a um segundo problema: definir o que é importante.
A maior dificuldade em definir o que é importante é que muitas vezes ele se confunde com o que é urgente, mesmo sendo dois conceitos bem diferentes.
Por exemplo, para mim foi urgente escrever este artigo, já que estou compromissado com a freqüência do meu blogue. O importante fica por conta do conteúdo. Por exemplo, considero ter tocado em todos os pontos que julgo importantes para esse tema, o que por si só caracterizaria o fim desse artigo. E é isso aí.
Bons cronogramas!
  &amp;quot;O trabalho se expande work de forma a preencher o tempo disponível para sua conclusão.&amp;quot; - Parkinson&#39;s Law na Wikipedia &amp;#x21a9;&amp;#xfe0e;
   </description>
</item>

     
        <item>
  <title>Developer: you need to know English!</title>
  <link>http://www.caloni.com.br/developer-you-need-to-know-english/</link>
  <pubDate>2007-09-28</pubDate>
  
  <guid>http://www.caloni.com.br/developer-you-need-to-know-english/</guid>
  <description>Eu realmente gostei desse negócio de tagging. =)
Aproveitando o comentário do Ferdinando sobre o novo sistema de tradução eletrônica do MSDN, lanço aqui algumas dicas para aprender a tão falada língua de Shakespeare. Acredite, se você deseja ser um melhor programador, inglês é fundamental.
O aprendizado de qualquer idioma deve estar focado em um objetivo. Se o objetivo é se comunicar, conversação é importante. Se você deseja ser um business man, um vocabulário mais específico deve ser aprendido. No nosso caso, em que a santa leitura técnica de cada dia é a necessidade básica, alguns passos básicos em inglês instrumental é um ótimo começo para começar a desvendar 80% da internet.
 Note, contudo, que inglês instrumental não é muito bem visto por escolas conceituadas de idiomas, tanto por ensinar um inglês limitado quanto por criar vícios de linguagem. O importante a lembrar nesse caso é: estamos usando o inglês como uma ferramenta de compreensão de textos que são úteis para nosso trabalho. Se o interesse/necessidade do inglês for maior, deve-se passar para as próximas dicas.
 Seguem alguns primeiros passos para começar a se aventurar:
 Procure estudar as palavras mais faladas no idioma. Aprenda as regrinhas para saber 400 palavras de lambuja. Use e abuse dos prefixos e sufixos de ambos os idiomas, pois geralmente seguem as mesmas regras. Mantenha um dicionário de expressões mais comuns nos textos que você lê. Aprenda-as.  Como todo bom aprendizado, a parte mais importante é a prática. E nada melhor para praticar do que ler pra caramba, certo? Isso quer dizer que você terá algumas tarefas diárias a partir de agora:
 Compre um dicionário inglês-português dos mais simples, seja o tradicional ou o eletrônico. Se não tiver dinheiro nem para isso, então use os disponíveis na internet. Escolha um artigo ou notícia e leia-o em um só dia. Para não desanimar, recomendo que seja relativamente curto e seja de um tema que muito te interesse. Pode até ser uma notícia curta do Slashdot. No começo tente traduzir um ou dois parágrafos desse mesmo artigo. Com o tempo, aumente o número de parágrafos até conseguir traduzir o texto inteiro.  Se sua necessidade do inglês era apenas ler textos técnicos pode parar por aqui. Mas nem sempre o conteúdo está escrito. Pode ser que existam palestras interessantíssimas do Channel9 ou podcasts de informática que você simplesmente não pode perder. Nesse caso, não há uma dica melhor do que imitar as crianças quando aprendem suas línguas nativas: ouça pessoas falando em inglês.
Isso, aliada à sua prática diária de leitura de artigos, pode ser complementada se prestar atenção sempre na pronúncia correta das palavras que vai aprendendo. Muitas pessoas se tornam exímias leitoras de textos em inglês, mas não conseguem entender uma frase comum do dia-a-dia. Isso ocorre porque o inglês escrito difere em muito das regras de pronúncia do português escrito, o que gera muita confusão na hora de falar o fonem lido. Felizmente, na maioria dos dicionários existe sempre a transcrição fonética no início de cada vocábulo. É importante usá-la, e pelo menos uma vez você mesmo tentar pronunciar a palavra de sua boca.
Nesse momento, o importante é fazer a transição escrito-falado. Por isso, tente ouvir podcasts em que o texto falado está disponível para leitura. Dessa forma é possível acompanhar os dois. Eu costumava ouvir o Word for the Wise da Merriam-Webster, por ser curto e interessante. Mas o ideal é unir o útil ao agradável, e nisso com certeza um podcast de tecnologia seria muito melhor.
 Trapaceando: no começo, é comum haver divergências de pronúncia ou falta da capacidade de ouvir (listening). Você pode sempre apelar para as pronúncias disponíveis nos dicionários online, como o Merriam-Webster. Ouça um milhão de vezes para pegar o jeito.
 Depois de obter um feeling básico sobre o que é escrito e o que é falado pode-se partir para estudos mais ousados e voltados para o aprendizado da língua de fato. Sabendo da facilidade que já obtivemos em traduzir textos e ouvir, considero as tarefas abaixo ideais para chegarmos ao tão sonhado language aquisition:
 Ouvir música em inglês e ler a letra (original e traduzida). Uma boa banda para começar são os Beatles, cujo inglês britânico é fácil de entender. Assistir filmes em inglês com legenda (traduzida e original). Você pode começar com as comédias românticas que são lançadas quinzenalmente; como esse tipo de filme não prima pelo roteiro, eles se tornam um prato cheio para iniciantes. Assistir filmes em inglês sem legenda. Tente assistir filmes falados em diferentes lugares para ir pegando o ponto em comum, ou seja, no meio de todos os sotaques do mundo inteiro o idioma é sempre o mesmo. Descubra-o.  Nesse ponto há uma ressalva: é natural não entender patavina do que as pessoas estão falando no começo do aprendizado. Mas o importante é nunca deixar de ouvir. Com o tempo, nossos ouvidos aos poucos vão sendo treinados para perceber as sutilezas da língua falada, e começamos a abrir nosso leque de conhecimento linguístico. Experimente!
Existem inúmeros recursos hoje em dia para que duas pessoas em qualquer lugar do mundo consigam se comunicar pela grande rede. Afinal, depois de tanto aprender a ler e escutar, é hora de soltar o verbo:
 Participe de fóruns de discussão, de preferência sobre temas que te interessam muito. Comece a participar em salas de bate-papo de maneira passiva, apenas &amp;quot;ouvindo&amp;quot; o que os outros digitam. Comece a interagir em salas de bate-papo, de preferência com pessoas que também estão aprendendo inglês. Tome uma dose de coragem e instale o Skype ou outro programa de conversação e comece a freqüentar salas de conversação. Quando perder a vergonha, passe a se corresponder com pessoas que falem inglês em uma conversa mano a mano (&amp;quot;e aê manu, certu?&amp;quot;).  Como eu disse no começo desse artigo, cada pessoa tem seu objetivo em aprender uma língua. Cumprido esse objetivo, acredito que já podemos nos dar por satisfeitos. Contudo, quando se começa a aprender de fato uma língua é comum as pessoas acharem que chegarão na linha de chegada ao final do curso, ou ao conseguirem o tão sonhado certificado de proficiência. São marcos, não tenha dúvida. Mas não são o ponto onde se pode parar e descansar pelo resto da vida. Assim como usamos o português no dia-a-dia, o inglês também deve ser usado diariamente. Se não for usado, ele irá aos poucos perdendo lugar em nossas memórias, até o momento em que será necessário recomeçar de um ponto muito distante da linha de chegada que haviamos acreditado ter alcançado para sempre.
A última dica que deixo para vocês é: usem sempre o que aprenderam. A falta de uso é desperdício do tempo passado adquirindo o conhecimento.
Good luck! =)
</description>
</item>

     
        <item>
  <title>O passado torto de um programador por acaso</title>
  <link>http://www.caloni.com.br/o-passado-torto-de-um-programador-por-acaso/</link>
  <pubDate>2007-09-06</pubDate>
  
  <guid>http://www.caloni.com.br/o-passado-torto-de-um-programador-por-acaso/</guid>
  <description>Observação: este é um artigo não-técnico, o que quer dizer que você pode se deparar com termos desconhecidos. Procure ter à mão um dicionário de pessoas comuns.
Sabe aquele senso comum de que adolescente não sabe o que quer da vida? Pois é, naquela época eu não sabia mesmo. Quando iniciei minha vida queria ser desenhista. Então descobri que não conseguia desenhar sem uma régua, o que me levava a crer que seria engenheiro. Mas engenheiro de quê? Bom, como esse tipo de pergunta tem um nível de complexidade além dos limites de uma criança de 12 anos, decidi que decidiria isso na minha oitava série.
Então a oitava série chegou. Fascinado com o conceito de átomos e camadas de elétrons decidi que iria ser químico. Procurei e logo achei um curso técnico de química industrial para o segundo grau. Comecei a estudar para o chamado &amp;quot;vestibulinho&amp;quot;, empolgado com a idéia de vir a trabalhar em uma fábrica usando jaleco.
Até aquele breve momento, tudo ia bem na mente daquele promissor químico de sucesso.
Até que num belo dia minha mãe aparece com um folheto onde, escrito em letras garrafais, conseguia-se ler com um pouco de esforço: &amp;quot;curso de computação&amp;quot;. Computação é mexer com computadores. Até então só tinha visto computadores em filmes de ficção científica e nas bibliotecas da cidade (os velhos sistemas Unisys, ainda de pé na minha velha e boa São Bernardo).
Mexer com computadores (naquele folheto) até que parecia ser uma coisa legal.
E lá fui eu ficar algumas horas por semana sentado à frente daquela tela verde digitando comandos em inglês. Wordstar, Lotus 1-2-3 e o tal do MS-DOS. Havia um segundo laboratório na escola, este mais novo, onde repousava intocado um outro sistema operacional. Diziam ser revolucionário, e que vinha com um novo dispositivo futurístico conhecido como mouse (em Portugal chamavam de rato). Era uma pequena caixa com dois botões conectados à CPU por um fio (tecnicamente seu rabo). Mexemos uma única vez no final de nosso curso com o tal de Windows 3.1, o sistema operacional que vinha nesses micros novos. Foi apenas um rápido e impagável momento de test drive.
Mas, por um motivo que até hoje desconheço, gostei do tal do MS-DOS. Eu dava comandos para o computador e ele obedecia! Achei fascinante! Me diverti muito durante os três meses do curso.
E voltei a estudar para o vestibulinho de químico.
Porém, eis que chega o final de ano e pergunto para o meu amigo o que ele vai fazer.
-- &amp;quot;Processamento de Dados!&amp;quot;-- &amp;quot;Hummm... computadores.&amp;quot;-- &amp;quot;Isso!&amp;quot; Mas que coisa, hein. Balancei, balancei, e acabei mudando minha decisão do início do ano: iria tentar o curso de PD.
E foi assim. Fizemos o vestibulinho. Meu amigo não passou, mas a família dele tinha recursos, colocou ele em uma escola técnica particular. Eu também não passei. A nota de corte era 38. Tirei 37. Por um ponto fiquei sem opções de estudo. Então procurei por vagas em escolas técnicas. Minha mãe encontrou uma, onde existiam dois cursos: magistério e contabilidade.
-- &amp;quot;Magistério é legal. E se não for legal, pelo menos tem um monte de mulher.&amp;quot; Mas dessa vez meu lado numérico falou mais alto, e acabei ficando na sala mais chata. Prestei para contabilidade. Passei fácil.
E agora, após esse breve relapso, tudo estava em paz na mente daquele contador contabilista de futuro.
Dois anos se passaram. Balanços, balancetes, ativos e passivos. Mas nem tudo eram números. Tive uma professora de literatura que era ótima (no sentido bondoso da palavra). Ela me ensinou a ler estes livros não-técnicos que tanto encantam o pessoal de humanas. Também me ensinou a escrever de maneira não-vexatória, já prevendo naquela época que teria que me esforçar para ser um blogueiro de sucesso.
Naquela época comecei a escrever bastante. Gastei uns dez livros de 100 páginas rabiscando palavras. Desejava ser escritor, ficar rico e famoso e reponder às cartas dos fãs. Então lia e escrevia literatura. Quer dizer, eu acreditava que escrevia literatura. Um contador brincando de escritor.
O tempo passou, o ano final chegou e começava a despontar a grande dúvida: o que prestar no vestibular?
Naquele momento, meu lado letrado foi mais forte.
-- &amp;quot;Quero ser escritor, logo, vou fazer letras. Deve ser bem legal! Mas se não for bem legal, pelo menos tem um monte de mulher.&amp;quot; E comecei a estudar para o vestibular. Apenas um vestibular. Fuvest. Se não passasse ficaria a Deus dará. O que me importunava bastante àquela época da vida: depois de 13 anos de escola eu havia ficado um tanto condicionado a comparecer em sala de aula todos os dias de semana da minha vida.
Foi um período interessante. Matemática, Português, História, Geografia, Inglês, Química, Física, Biologia. Livros e mais livros viviam em minha mochila. Para minha sorte, meu emprego era de office-boy, o que me garantia por lei poder ler o dia inteiro, todos os dias, na fila do banco. Algumas noites também. E algumas madrugadas também. Foi um sufoco. Quase não termino meu curso.
Mas terminei. E passei. E de repente lá estava eu no antro da perdição, o início de tudo: FFLCH (lê-se &amp;quot;fefeléche&amp;quot;). E o subsolo era de fato um antro: xadrez, MPB, sebos, discussões filosóficas e muita fumaça. No meio das revoluções estratégicas do pessoal do CAELL eu me sentia extremamente &amp;quot;humanizado&amp;quot;, seja lá o que isso for. E, sim, pela primeira vez na vida, milhares de mulheres interessantes passarelavam pelos corredores dos pensadores da palavra.
-- &amp;quot;Viva a linguística!&amp;quot; Tudo estaria bem na cabeça daquele promissor &amp;quot;professor de português das escolas da rede pública de ensino&amp;quot; se não fosse o meu lado numérico.
Comprei um computador. E isso mudou minha vida. Cada vez mais a quantidade de livros de informática que eu carregava comigo ultrapassava o número de sonetos de Camões ou as prosas modernísticas de Guimarães Rosa que estudava no momento.
Desde aquele dia, o vício tem me acompanhado cronicamente, religiosamente, todo dia.
Larguei a faculdade. Comecei a me dedicar inteiramente aos livros sobre computadores, programação e &amp;quot;como as coisas funcionam&amp;quot;. Quebrei algumas vezes meu computador. Metade delas eu mesmo consegui consertar.
Aprendi como o sistema funciona por dentro enquanto tentava encontrar mais e mais conteúdo com a chegada da internet. Era mágico. Conhecimento infinito! Como não amar uma coisa dessas?
Então descobri que ser hacker era algo muito bacana. E a linguagem que os hackers usam é a linguagem C. Então eu aprendi C, de cabo a rabo. Li o padrão. Sabia de cor algumas passagens. Virei um evangélico: &amp;quot;não atribuirás uma expressão não-const para um lvalue&amp;quot;. No meio dos meus estudos tentava quebrar alguns programas. Metade eles eu consegui.
Entre internet, programação, pornografia online e os primeiros memes (em modo texto) encontro a usenet, grupos de news, e no meio deste um grupo de programadores C e C&#43;&#43;. Começo a ler freneticamente as dúvidas das pessoas. Eu mesmo começo a responder várias destas dúvidas. Entre IRC e news vou criando uma identidade virtual.
No meio das inúmeras mensagens encontro uma proposta de emprego. Aquilo era algo meio alienígena para mim. &amp;quot;Eles vão me pagar pra eu ficar me divertindo o dia inteiro?&amp;quot;. Sim, era isso mesmo. Havia empresas que pagavam um (bom) dinheiro para que resolvessem os problemas que eles precisavam serem resolvidos. Bastava ter uma curiosidade infinita e força de vontade de transformar o desconhecido em conhecimento. E aplicar.
Tremi nas bases nesse meu primeiro emprego. Foi a entrevista mais importante da minha vida. Felizmente conheci um old timer igualmente fascinado por tecnologia como eu. Naquele breve momento em que eu confessei meu amor pela linguagem C e por programação houve comunicação real. E eu fui contratado mesmo sem sequer ter pisado em uma faculdade nem trabalhado na área.
Na minha primeira semana o desafio era desenvolver uma DLL em C que servisse de callback para uma chamada específica do shell do Windows. E todo o conhecimento sobre o padrão da linguagem C não serviu de nada. Eu tive que aprender um monte de coisas novas na raça. E aquilo era empolgante. Continua sendo até hoje.
Depois de uns anos começo a escrever um blogue. E desde então o ser em que me transformei vos fala através daqui. E assim foi. Como é que o pessoal de humanas fala mesmo? Ah, sim: o resto é história.
</description>
</item>

     
        <item>
  <title>Barata Elétrica e o hacker de antigamente</title>
  <link>http://www.caloni.com.br/barata-eletrica-e-o-hacker-de-antigamente/</link>
  <pubDate>2007-08-31</pubDate>
  
  <guid>http://www.caloni.com.br/barata-eletrica-e-o-hacker-de-antigamente/</guid>
  <description>Os artigos escritos por ele estavam em português, mas sempre em suas edições ele disponibilizava artigos de outras partes do mundo em inglês. Praticamente li todos eles, e muitos fiz questão de ler mais de uma vez. A maioria falava de um mundo que existia antes de eu ter um computador, onde existiam vírus e pirataria de programas em disquetes, BBSs e a tal reserva de mercado. Além, é claro, de dicas de como ser um nerd e não perder a sociabilidade (se é que isso é possível quando se é um nerd adolescente). Existe uma página no zine onde estão listados os melhores artigos de todos os tempos da revista.
Além do Barata Elétrica existiam outras revistas internacionais &amp;quot;bem conceituadas&amp;quot; na época, como a CCC (Chaos Computer Club), uma comunidade de hackers e crackers (o início do Astalavista!) fundada na Alemanha, e a 2600 Quarterly, constantemente perseguida pela polícia dos Estados Unidos depois das aprontadas de Kevin Mitnick, um praticante de engenharia social famoso da época. Como ainda eu ainda engatinhava no inglês, tive que me virar com o que tinha, um dicionário na mão e muita vontade de aprender. Não entendia muito, é verdade, mas minha atitude fez com que o inglês aprendido me valesse até hoje.
Naquela época, além de computadores, programação, muito café e coca-cola, meus interesses estavam bem mais voltados em entender como a sociedade progrediria diante dessa revolução tecnológica que estava acontecendo naquele momento. Como ficariam nossos direitos civis dentro da rede? Quem seria julgado por um crime digital e, talvez mais importante, quem seria o executor desse julgamento? O que seria direito digital? Como fica nossa privacidade? Todas essas questões me levaram a ler livros que recomendo fortemente, como 1984, Revolução dos Bichos e Admirável Mundo Novo. Todos falam de sociedades fictícias, mas cujas características estão muito mais presentes entre nós do que os estereótipos das novelas televisivas. Eles não falam muito sobre computadores nem programação, mas são muito bons para a formação crítica de um indivíduo sobre a sociedade em que ele vive.
Enfim, acho que já deu pra perceber que esse artigo não é sobre C&#43;&#43;, Windows, Engenharia Reversa ou computadores. É muito mais um lapso nostálgico que me ocorreu sobre o que era ser um hacker naquela época: ansiar avidamente por conhecimento, mas não um conhecimento qualquer, que termina nele mesmo, regurgitado junto das milhares de notícias diárias. É um conhecimento sadio, apreciado e mastigado lentamente, com consciência, com perseverança. Não havia aquele desânimo por falta de tempo em aprender todas as coisas, mas o contrário: o ânimo por existir mais e mais conhecimento a ser apreciado, discutido e refletido. A troca de informações entre as pessoas era muito importante. O adjetivo hacker da época não estava na capacidade em invadir sistemas, mas em sua atitude em aprender coisas novas, ampliar sua visão do mundo e ter humildade o suficiente para concluir que nessa vida só se aprende um grão de areia de uma praia gigantesca. Bons tempos em que não saber não era vergonha de nada, mas uma oportunidade a mais.
O tempo passa, o mundo gira, e aqui estamos nós: orkut, msn, youtube, blogues, flogues e outros gues inventados a cada dia. As pessoas estão conectadas, e cada vez mais estarão. E para quê? Para trocar mensagens, emoticons, fotos, vídeos, informação. Sobre elas mesmas, sobre onde vivem, sobre onde moram. A tal da privacidade foi por água abaixo. Poucos possuem o discernimento do que podem e não podem fazer sem sofrer as conseqüências de ter sua vida inteira exposta através dos bits e bytes que nunca param de trafegar. A popularidade da rede transformou-a em um second life, literalmente. Para alguns, é até o first life mesmo. Isso é a escolha de cada um.
</description>
</item>

     
        <item>
  <title>ToDoList</title>
  <link>http://www.caloni.com.br/todolist/</link>
  <pubDate>2007-08-27</pubDate>
  
  <guid>http://www.caloni.com.br/todolist/</guid>
  <description>Vou aproveitar que o recente blogue do meu amigo resolveu falar um pouco sobre administração de tempo e citar a ferramenta que venho utilizando há quase um ano para tentar organizar minhas idéias, minhas tarefas e minha vida. Assim como o Kabloc, eu estava em sérias dificuldades para tentar fazer e organizar todas as coisas que eu tinha em mente. Ainda continuo com dificuldades para fazer, mas o mais importante é que agora eu tenho um roadmap de para onde eu quero ir.
Eu sempre ouvi falar nesse programa desde que freqüento o The Code Project, um sítio onde programadores publicam seus minicódigos para serem aproveitados (e avaliados) por toda a comunidade. Possuo algumas pequenas contribuições por lá.
O fato é que por preguiça de testar e pelo seu screenshot inicial, me pareceu um programa demasiado complexo e pesado. Por isso passei vários anos sem sequer baixá-lo.
No entanto, houve um momento em minha vida em que eu precisava definitivamente reunir e organizar todas as minhas idéias e atividades para conseguir concluí-las, tanto no trabalho quanto na vida pessoal. Houve então uma pequena pesquisa de minha parte de programas que fizessem o que eu precisava. Foi aí que eu baixei e testei o ToDoList, um programa pequeno, portátil (posso levar em meu PenDrive) e muito flexível. Eis abaixo o screenshot original do artigo do Code Project:
Bem, me parecia mais do que eu precisava. No entanto ele é flexível, e suas colunas podem ser configuradas da maneira que lhe aprouver. Abaixo um screenshot de como utilizo o ToDoList:
Entre algumas coisas legais que gosto nesse programa que me fizeram ficar com ele, consigo me lembrar da seguinte lista:
 Posso levar onde quiser e salvar minhas configurações em um arquivo ini. Ele fica na área de notificação e posso ativá-lo com um atalho global. Ele conta o tempo de uma tarefa se você quiser. Ele exporta as listas em formatos como Excel, HTML e texto puro. Ele é pequeno e não precisa de instalação. O código-fonte é disponível e está sempre sendo atualizado. Posso salvar minhas listas em XML (padrão) ou encriptado. Pode ser estendido por meio de plugins.  Bem, ele sozinho não resolveu meus problemas. Assim como o Kabloc disse, é você, e unicamente você, o responsável por organizar a sua agenda. E eu tive que passar muito tempo junto da minha para conseguir encontrar a maneira ideal para eu trabalhar. Cada um tem a sua.
Há um tempo atrás não acreditava muito em idéias, mas a partir de um dado momento um outro amigo meu conseguiu me convencer que idéias são os verdadeiros motores do mundo, e um mundo sem idéias seria um mundo de fazedores de coisas sem cabeça. Não adianta ser muito bom no que se faz se não se pensa no que se faz. Essa é um boa razão para explicar por que boas idéias permanecem para sempre, mesmo que seus criadores já tenham morrido há muito tempo.
Por esse motivo que uso o ToDoList para catalogar e listar todas as idéias que tenho sobre o que pretendo fazer. Como você deve adivinhar, a lista nunca acaba e só tende a crescer. Mas tudo bem, o objetivo não é acabar, mas sim não perder a idéia que se teve, pois ela aos poucos pode ser extendida e aprimorada no próprio ToDoList, até chegar a hora de implementar. Quando for a hora de botar a mão na massa muito dos problemas já foi pensado e analisado naqueles momentos de divagação no banheiro, no ônibus, ou na sala de aula. Os momentos mais frutíferos, aliás.
Porém, é claro que catalogar tudo também não é tudo. É preciso agir. Por esse motivo costumo dividir minhas tarefas em duas listas (fora a da empresa onde trabalho): Curto Prazo e Longo Prazo. As tarefas no curto prazo são as mais imediatas, e representam as coisas que devo fazer antes da semana, do mês ou do ano acabar. Geralmente dou uma olhada diária nessa lista. As de longo prazo não são menos importantes, mas possuem um tempo de finalização mais longo, ou porque não são interessantes atualmente, ou porque fazem parte do meu projeto de vida, algo que se deve pensar mais e agir aos poucos. Costumo dar uma olhada semanal nessa lista.
Enfim, cada pessoa tem sua maneira de encarar problemas, catalogar idéias e fazer acontecer. Essa ferramenta, na minha opinião, pode ajudar.
</description>
</item>

     
        <item>
  <title>Como ser um melhor desenvolvedor nos próximos seis meses</title>
  <link>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-nos-proximos-seis-meses/</link>
  <pubDate>2007-07-18</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-nos-proximos-seis-meses/</guid>
  <description>Graças ao meu amigo Thiago estive acompanhando uma série de posts de gente renomada sobre o tema deste artigo. Eles fazem parte de uma nova modalidade entre os blogueiros (pelo menos para mim) chamada de tagging. Funciona assim: você escreve sobre algo (por exemplo, &amp;quot;como ser um melhor cozinheiro em 6 meses&amp;quot;) e manda uma tag para que outras pessoas também escrevam sobre o mesmo assunto, o que pode ser feito referenciando o sítio dessas pessoas.
Ainda não tive tempo de ler todos os artigos (nem vou ter, pela velocidade com que isso se espalha), mas acho que dá tempo de escrever um pouco sobre isso.
Acredito que nós, programadores, tentamos aprimorar nossos conhecimentos e nossas técnicas com o objetivo de enxergar os problemas do dia-a-dia de todos os ângulos e de encará-los e resolvê-los da melhor maneira possível. Quer dizer, nós achamos que é a melhor maneira possível. E exatamente por acharmos que tentamos melhorar sempre, em busca da inalcançável perfeição.
O problema existe quando nós, embriagados pela falsa crença de sabermos tudo (ou o suficiente), acreditamos realmente que estamos fazendo o melhor possível e que não há nem haverá maneira de melhorar. É lógico que sempre há. Melhor maneira de ver isso é pegar um código-fonte antigo e observar as mudanças de estilo. E nem precisa ser tão antigo assim. E nem precisa ser código. Pode ser uma idéia antiga de como implementar alguma coisa. A não ser que você seja um teimoso que quer fazer tudo em assembly verá que o que aprendemos ontem influencia nas decisões de amanhã.
Minha lista não é muito diferente da dos outros. Basicamente se resume em: ler livros e blogs, programar mais e pensar mais ainda. O importante é que já estou ciente das coisas que devo melhorar, e é nelas que devo me focar nos próximos 180 dias:
  Fazer um curso de memorização. Confesso que não ligava muito para isso e agora isso faz um diferença e tanto. Eu sei que hoje temos post-its e agendas, mas nada substitui a confiança que temos em nossa própria mente. E é frustrante ler um livro três meses atrás e não se lembrar de capítulos inteiros.
  Fazer um curso de leitura dinâmica. Minha velocidade na leitura é deplorável e eu sei disso. Minha vontade de ler sempre ultrapassa o ato (isso deve ter acontecido com alguns de vocês). Mas o objetivo não é apenas ler mais rápido. É ter foco. Ler e absorver. Não estou dizendo isso de livros de ficção, que para mim são um entretenimento prazeroso. São os livros técnicos que pertubam, e urgem pela minha atenção quando os estou lendo.
  Aprender o meu ritmo. Às vezes me impressiono com o meu descaso para comigo mesmo. Por exemplo, eu já sabia que &amp;quot;rendia&amp;quot; bem mais quando lia livros simultaneamente, e não em fila. Mas mesmo assim insistia em querer terminar um livro antes de começar o outro. O resultado? Aproveitamento 60%. Nada mau. Mas poderia ser bem melhor. Bastava seguir o método que melhor se adapte às minhas necessidades. E isso é o que eu chamo de aprender a si mesmo.
  Agora que já passei pelo sofrimento de taguear nada como escolher minhas vítimas. Não conheço pessoalmente muitos blogueiros, mas pelo menos essa minha lista é fiel e sincera. Rodrigo Strauss, Fernando Roberto e Thiago Oliveira: o que vocês farão nos próximos seis meses para se tornarem melhores desenvolvedores (ainda)?
</description>
</item>

     
        <item>
  <title>Desejo insano de programar no kernel</title>
  <link>http://www.caloni.com.br/desejo-insano-de-programar-no-kernel/</link>
  <pubDate>2007-07-12</pubDate>
  
  <guid>http://www.caloni.com.br/desejo-insano-de-programar-no-kernel/</guid>
  <description>Muitas vezes meus amigos (um em particular) me perguntam por que não me interesso em programar em kernel mode, como se isso fosse um objetivo a ser alcançado por qualquer programador em user mode. Bom, não é.
Claro que sempre me empenho em entender como o sistema funciona, nos menores detalhes e sempre que posso, o que nem sempre me leva para o kernel mode (entender como a CLR funciona, por exemplo). Posso até me considerar um ser privilegiado, já que trabalho com dois experts em kernel mode e .NET, respectivamente. Isso já faz algum tempo, e ambos possuem conhecimento e experiência necessários para sanar minhas dúvidas mais cruéis. Porém, uma coisa é o conhecimento da coisa. Outra coisa é a prática. E a teoria, como já dizia o Sr. Heldai, na prática é outra.
Existem também aqueles programadores que, entorpecidos pela idéia de que seu software deve ser o mais baixo nível possível porque... bem, porque ele faz coisas muito profundas (?), ou é muito avançado (??), ou talvez até porque ele precisa ser otimizado ao máximo. Baseados nessas premissas (???), antes mesmo de conhecer o sistema operacional e pesquisar o que ele tem a oferecer que já está disponível em user mode partem direto para a programação nua e crua, pelo simples motivo de ser legal ou na ilusão de ser a melhor maneira de se fazer as coisas sob qualquer circunstância.
Munidos de bons motivos para fazer drivers, o próximo passo seria então pedir ajuda desesperadamente (e urgentemente) em listas de discussões. Talvez esse seja o lugar menos apropriado para procurar por uma palavra amiga. Acompanhei por um tempo uma lista de kernel do Windows. Apenas para efeitos de descrição, o clima e a impressão com que fiquei de lá foi que os programadores em kernel não se dão muito ao trabalho de ajudar aqueles que estão perdidos no ring0. Então para que existe a lista? Aparentemente para aqueles que já sabem fazer o carro andar, já conhecem o motor e um pouco de mecânica dos fluidos.
Digamos que é uma cultura bem diferente do que estamos acostumados a vivenciar em user mode. Eles estão muito mais ocupados com problemas relacionados especificamente com o desenvolvimento de drivers, e não dúvidas bestas do tipo &amp;quot;como eu faria isso&amp;quot;. Lá não se briga entre linguagens gerenciadas e não-gerenciadas (nem entre linguagens gerenciadas), mas entre linguagens C e C&#43;&#43;. Lá não se ajuda a fazer aquelas &amp;quot;gambis&amp;quot; que tanto ajudam o programador na hora do sufoco, mas sim redirecionam os hereges para o desenvolvimento &amp;quot;politicamente correto&amp;quot; (siga a documentação e seja feliz).
Isso não é uma crítica destrutiva, apenas uma descrição narrativa. Nada que falo aqui é exagero ou blasfêmia. Podem perguntar para o meu amigo de kernel mode. Aliás, use o blog dele para aprender um pouco sobre o kernel.
O fato é que bons programadores são bons onde quer que eles estejam (e os ruins serão ruins em qualquer lugar). E ser um desenvolvedor de qualidade exige tempo, dedicação, paciência e estudo. Pode ser um designer usando Action Script ou um engenheiro da NASA projetando foguetes. Tanto faz. Fazer as coisas com qualidade sempre exigirá mais tempo do que gostaríamos de despender. Não é uma questão de ser mais difícil em kernel mode ou mais fácil em Javascript. É saber qual dos dois será necessário usar para atingir o nível de funcionalidade e qualidade que o projeto exige. O resto é preconceito.
</description>
</item>

     
        <item>
  <title>Google shortcuts</title>
  <link>http://www.caloni.com.br/google-shortcuts/</link>
  <pubDate>2007-07-06</pubDate>
  
  <guid>http://www.caloni.com.br/google-shortcuts/</guid>
  <description>I love shortcuts. Since my very first years using computers, shortcuts had become my obsession. I research them through the time, collecting them, using them. For a long time I avoid myself from touching the mouse, trainning to remember all keystroke sequences I know.
 I have nothing against using the mouse neither the people that do it. I&#39;m just not very much enthusiastic in using mice. For sometime, I even believed that the cursor pointer was getting me annoyed, so I developed a program to get rid of it from the screen (using a shortcut, of course). But, one more time, I&#39;m not againt its use, and I use it myself sometimes (when I need to).
 Until some time ago the web was not so good for shortcut users. So came out Google, plenty of web applications supporting shortcuts and giving me a true reason to use webmail and web RSS reader without pressing constantly the tab key. But there was a lack for its web search engine. Fortunately, there WAS.
Even being in test, I began to use the new keyboard shortcuts in Google search, available in the Google Experimental Search website. Until now there is shortcuts for next result (J), previous result (K), opening the search (O or ) and putting the cursor in the search box (/). It is just like Gmail and Google Reader. I was so excited with the idea that I changed the Google search plugin inside Firefox by myself. And now I&#39;m going to tell how to do it (note: Windows only).
To put Google search shortcuts inside Firefox probably your search plugin will be in one of these two folder bellow. Try one of them: %programfiles%, Mozilla Firefox, searchplugins or %appdata%, MozillaFirefoxProfiles, *.defaultsearchplugins. The search plugin file has the name google.xml and you can edit it using notepad or another simple text editor. Bellow is the point where you must insert the new line that will get the plugin able to show the shortcuts inside Google.
&amp;lt;Url type=&amp;quot;text/html&amp;quot; method=&amp;quot;GET&amp;quot; template=&amp;quot;http://www.google.com/search&amp;quot;&amp;gt;&amp;lt;Param name=&amp;quot;q&amp;quot; value=&amp;quot;{searchTerms}&amp;quot;/&amp;gt;&amp;lt;...&amp;gt;&amp;lt;Param name=&amp;quot;esrch&amp;quot; value=&amp;quot;BetaShortcuts&amp;quot;/&amp;gt; &amp;lt;!-- Google Shortcuts Here --&amp;gt;&amp;lt;!-- Dynamic parameters --&amp;gt;&amp;lt;...&amp;gt;&amp;lt;/Url&amp;gt; That&#39;s all. Now you can get all the best: the best search engine with shortcuts. How can we be even more productive?
</description>
</item>

     
        <item>
  <title>Disassembling the array operator</title>
  <link>http://www.caloni.com.br/disassembling-the-array-operator/</link>
  <pubDate>2007-06-22</pubDate>
  
  <guid>http://www.caloni.com.br/disassembling-the-array-operator/</guid>
  <description>Arrays are fascinating in C language because they are so simple and so powerful at the same time. When we start to really understand them and realize all its power we are very close to understand another awesome feature of the language: pointers.
When I was reading the K&amp;amp;R book (again) I was enjoying the language specification details in the Appendix A. It was specially odd the description as an array must be accessed:
 A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall have the type &amp;quot;pointer to T&amp;quot; and the other shall have enumeration or integral type. The result is an lvalue of type &amp;quot;T&amp;quot;. (...) The expression E1 [ E2 ] is identical (by definition) to *( (E1) &#43; (E2) ).
 Notice that the rules don&#39;t specify the order of expressions to access the array. In other words, it doesn&#39;t matter for the language if we use a pointer before the integer or an integer before the pointer.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cassert&amp;gt;int main(){char q[] = &amp;quot;Show me your Code, &amp;quot;&amp;quot;and I&#39;ll tell you who you are.&amp;quot;;int i = 13;std::cout &amp;lt;&amp;lt; &amp;quot;And the language is: &amp;quot; &amp;lt;&amp;lt; q [ i ] &amp;lt;&amp;lt; std::endl;assert( q[i] == i[q] );assert( q[13] == 13[q] );assert( *(q &#43; i) == &amp;quot;That&#39;s C!&amp;quot;[7] );return 13[q] - &amp;quot;CThings&amp;quot;[0];}  The q[i] bellow shows that we can use both orders and the code will compile successfully.
std::cout &amp;lt;&amp;lt; &amp;quot;And the language is: &amp;quot; &amp;lt;&amp;lt; i [ q ] &amp;lt;&amp;lt; std::endl; This code doesn&#39;t show how obscure we can be. If we use a constant integer replacing the i, by example, the code starts to be an IOCCC participant:
std::cout &amp;lt;&amp;lt; &amp;quot;And the language is: &amp;quot; &amp;lt;&amp;lt; 13 [ q ] &amp;lt;&amp;lt; std::endl; Is this a valid code yet, right? The expression types are following the rule. It is easy to see if we always think about using the &amp;quot;universal match&amp;quot; *( (E1) &#43; (E2) ). Even bizarre things like this are easy to realize:
std::cout &amp;lt;&amp;lt; 8[&amp;quot;Is this Code right?&amp;quot;] &amp;lt;&amp;lt; std::endl; Obs.: this kind of &amp;quot;obscure rule&amp;quot; hardly will pass in a code review since it is a useless feature. Be wise and don&#39;t use it in production code. This is just an amusing detail in the language specification scope. It can help in analysis, never in programming.
</description>
</item>

     
        <item>
  <title>O bom filho à casa retorna</title>
  <link>http://www.caloni.com.br/hello-world/</link>
  <pubDate>2007-06-15</pubDate>
  
  <guid>http://www.caloni.com.br/hello-world/</guid>
  <description>Depois de seis meses blogueando em um novo domínio, que seria totalmente focado em C&#43;&#43;, descobri que não consigo viver escrevendo apenas sobre a linguagem em que programo. Não é que falte assunto. Simplesmente meu dia-a-dia nunca se resume apenas em regras de sintaxe e erros de compilação.
Por outro lado, aprendi muitas coisas novas desde o começo desse ano. Decorei novos comandos do Windbg, novos atalhos no Google Reader. E fiz outras tantas coisas novas também. Projetei um sistema de comunicação entre processos -- versão alfa, tudo bem, mas projetei. Decifrei o formato do banco de dados do dicionário Houaiss para poder usá-lo no Babylon. E por aí vai.
E por falar em escovação de bits, apresentei mais duas vezes aquela palestra sobre engenharia reversa. O curioso é que, em vez de eu aumentar o conteúdo da transparência, eu diminuo. Talvez isso seja uma ingênua tentativa de tornar a apresentação menos enfadonha e mais interessante para o público em geral, por mais leigos que eles sejam. Nessa última versão (3.0) cheguei a explicar o processo de análise dos cavalos de tróia dentro da Open Security, desde a descoberta da ameaça até a implementação da cura.
Depois de todas essas aventuras percebi que meus conhecimentos em C&#43;&#43; não aumentaram nem um pouco. Talvez um pouco, mas culpa da nossa fascinante lista de discussão sobre C&#43;&#43; aqui no Brasil, que esmera nos detalhes. Porém, por mim mesmo não aprendi nenhuma biblioteca nova do Boost. Não desenvolvi nenhuma artimanha nova usando templates e herança múltipla (obs: com uma perna só). Enfim, não aprendi nem fiz nada relevante com o tema C&#43;&#43; nos últimos seis meses.
E isso me leva de volta para cá, o cantinho de onde nunca deveria ter saído. Mas aprendi a lição. Estarei por aqui de agora em diante, pronto para escrever sobre o que fizer parte dos meus dias de programador. Não irei cair novamente nas ilusões de um pensamento purista e inadequado à minha realidade de escovador-de-bits-estamos-aí-para-o-que-der-e-vier. Afinal de contas, a gente depura mas se diverte.
</description>
</item>

     
        <item>
  <title>Wanderley Caloni</title>
  <link>http://www.caloni.com.br/about/</link>
  <pubDate>2007-06-14</pubDate>
  
  <guid>http://www.caloni.com.br/about/</guid>
  <description>Quer entrar em contato? Mante o bom e velho email.
Wanderley Caloni é um programador C/C&#43;&#43; especializado em backend para Windows que decidiu ter seu próprio blogue técnico a pedidos insistentes do seu amigo Rodrigo Strauss, que estava blogando já fazia alguns anos no www.1bit.com.br. Busco mantê-lo atualizado por esses longos anos de programação, depuração e transpiração com minhas peripécias do dia-a-dia. Eventualmente me tornei crítico de cinema e juntei aqui essas duas escovas de dentes, textos técnicos e cinematográficos, o que acabou tornando o saite gigante a ponto de eu precisar trocar meu static site generator para algo mais rápido como Hugo.
Overview geral por cima Colaborador frequente do Grupo C/C&#43;&#43; Brasil, eu e o Strauss nos consideramos fundadores do grupo por organizar e participar do Primeiro Encontro de Programadores e Aficionados da Linguagem C/C&#43;&#43; do Brasil, que ocorreu em São Paulo exatamente no dia dezessete de dezembro de dois mil e cinco, às três horas da tarde, no restaurante Outback do Shopping Eldorado. Desde então o grupo vem realizando encontros mais técnicos no decorrer dos anos, com palestras e debates. A cerveja tradicional se manteve ao final do evento.
Trabalhei por dez anos na área de Segurança da Informação, principalmente em dois sistemas. O primeiro deles, que tenho mais carinho, foi o Sistema de Controle de Acesso a Usuários e Aplicações (aka SCUA), desenvolvido totalmente no Brasil desde a época do MS-DOS. O segundo, mais contemporâneo, desenvolvido pela Open CS, protege os usuários contra ameaças bancárias virtuais, onde meu papel foi fazer análise de trojans e ataques de phishing utilizando engenharia reversa.
Depois desses dez anos migrei para a área financeira e fui trabalhar na EzMarket, uma pequena empresa iniciada pelo meu amigo Anderson Silva (mais tarde ela foi comprada pela UOL). Desenvolvi um sistema de risco que roda em uma das maiores corretoras do país (a Easynvest) e me tornei sócio desenvolvedor de uma empresa especializada nessas soluções, a Intelitrader. Em meio a isso me tornei sócio de outra empresa, a BitForge, pela qual nutro um carinho especial porque ela auxilia empresas e equipes de desenvolvimento em problemas complexos, seja em arquitetura, metodologias ou a pura escovação de bits. A metodologia da BitForge é simplesmente fazer o serviço e resolver o problema, seja ele qual for, da maneira mais indolor possível para o cliente.
No mundo acadêmico mantenho teias de aranha por muitos anos. Participei de minha primeira faculdade aos dezoito anos, no século passado, na Faculdade de Filosofia, Letras e Ciências Humanas da USP (aka FFLCH). Cursei um ano e meio antes de me descobrir perdidamente apaixonado por computação. Eventualmente me formei em Arquitetura de Redes pelo Instituto Brasileiro de Tecnologia Avançada. Finalizando a seção sobre diplomas e troféus em geral, de 2013 a 2018 fui nomeado MVP (aka Most Valued Professional) pela Microsoft, um prêmio em consideração pelas colaborações à comunidade C/C&#43;&#43;.
Entre xadrez e andar de bicicleta, o hobby que levei mais a sério foi mesmo ser cinéfilo inveterado, e com isso escritor em formação. Tendo mantido por quase dez anos um blogue especializado no assunto, o Cine Tênis Verde, desde o finalzinho de 2014 sou colaborador de um site especializado, o CinemAqui, participando de cabines de imprensa e escrevendo críticas sobre cinema, geralmente sobre estreias de filmes fora do circuito hollywoodiano. A pandemia veio a pausar um pouco essa dinâmica, mas me considero extremamente grato pela oportunidade dada pelo Vinicius Carlos Vieira, editor do site.
No detalhe Caso esteja ainda curioso e tenha chegado até aqui, abaixo temos uma breve e não-exaustiva lista das coisas que eu andei fazendo na minha não tão breve vida de escovação de bits. E espero que essa lista continue crescendo.
Desenvolvi uma solução de cópia de arquivos entre máquinas famigeradamente conhecida como &amp;quot;CopyFile que não copia&amp;quot; usando tecnologia COM e expansão de macros. Foi meu primeiro sistema a ser lançado em produção e me orgulho bastante dele ter sido concebido ainda por um programador de nível Júnior que mal sabia compilar uma DLL.
Mantive um sistema de inventário de hardware que utiliza as tecnologias WMI e SMBIOS, além dele ser também um inventário de software, pois coleta dados pelo registro da máquina.
Criei uma proteção da área de transferência, o Ctrl&#43;C Ctrl&#43;V, além do PrintScreen, através de um hook de janelas e manipulação de mensagens globais do sistema. É muito bacana para proteção de cópias fáceis dos dados de uma empresa, ainda que sempre exista a cópia difícil, pelo cérebro do funcionário, impossível (até o momento) de ser protegida.
Escrevi alertas no log de eventos do sistema usando device drivers. Sim, isso parece trivial, mas nada que você desenvolva usando Microsoft em C ou C&#43;&#43; acaba sendo trivial no final das contas.
Me comuniquei entre o user mode e kernel mode através de chamadas à função Windows DeviceIoControl, o que engloba praticamente toda solução desses dez anos em segurança da informação e envolve níveis diferentes de conhecimento, dependendo do protocolo definido entre esses dois mundos.
Acessei remotamente desktops usando ferramenta similar ao VNC com código-fonte modificado, onde a maior dificuldade é compilar de primeira.
Fiz do zero uma ferramenta de execução remota similar ao PsExec. Em alguns casos até melhor, pois vem com o código-fonte.
Controlei a impressão de documentos através de regular expressions usando uma biblioteca da Boost junto de um hook do shell do sistema.
Gerenciei as diretivas de acesso do sistema durante o logon e o logoff dos usuários. Para isso, mais uma vez, apelei para o registro e os hooks que a vida nos dá.
Migrei entre as bases de dados CTree e SQL usando classes OLEDB. Migrei novamente utilizando camadas de abstração DCOM. Migrei mais uma vez desenvolvendo ferramentas de conversão. Havia algum problema de gerência nesse projeto que nunca conseguiu abandonar a tecnologia antiga.
Autentiquei no Windows usando serviço DCOM e GINA customizada, ou até mesmo a Credential Provider, desenvolvida no Windows Vista para substituir as técnicas anteriores.
Sincronizei remotamente duas bases de dados CTree usando serviço DCOM (olha o projeto de bases de dados CTree aí de novo).
Compilei um CD Linux bootável com scripts bash e ferramentas de criptografia de discos. Tudo em linguagem C.
Também mexi no driver de criptografia de discos rígidos e armazenamento USB, como o uso de pen drives.
Já realizei dezenas de análises de telas azuis ou dumps de memória usando WinDbg, seja em kernel mode ou user mode.
Certa vez fiz um serviço COM de execução de aplicativos na conta de sistema que foi muito útil para vários pontos de um sistema gigante.
Customizei a MBR, ou Master Boot Record, os primeiros bytes que ligam um PC, adaptando de acordo com as características da BIOS, o código que está na placa que liga um PC.
Mantive uma biblioteca de criptografia Blowfish e SHA-1 em C&#43;&#43; e Assembly 16 bits, o que me rendeu uma semana de análise de um bug em modo real e um ótimo artigo aqui no blog. Com isso aprendi a usar um carregador de boot em Assembly 16 bits e depuração usando o simplório debug.com.
Outro sistema que deu certo trabalho foi o driver de auditoria de acesso, que usa memória compartilhada e eventos entre user mode e kernel mode. Mais sessões intermináveis de depuração no WinDbg.
Trabalhei com um sistema que fazia hook de API (mais um hook) em kernel mode para ambas as plataformas Windows, NT e 9X.
Protegi os executáveis através de autenticação em domínio configurado no resource dos arquivos, uma solução muito boa para centralizar instalações em um ambiente.
Mantive DLLs de proteção à navegação em Internet Explorer 6 e 7, e Firefox 1 e 2. Tudo usando injeção de código Assembly 32 bits.
Desenvolvi uma biblioteca de proteção de código, strings na memória e execução monitorada. Isso envolvia desde o alto nível da ferramenta até o uso de interrupções Win32.
Também desenvolvi uma biblioteca de geração de log centralizado, o que parece fácil, mas não quando você precisa controlar todos os processos do sistema através de memória mapeada e eventos globais.
Já mexi com os BHOs, ou Browser Helper Objects, e ActiveX, para Internet Explorer 6 e 7. Para o Mozilla e Firefox usei um plugin XPI.
Já fiz muito gerenciamento de projetos usando Source Safe, Subversion, Mercurial, Bazaar e scripts batch. Atualmente meu maior conhecimento em controle de fonte é usando git na linha de comando.
Já fiz debug de kernel em plataformas NT usando SoftIce e WinDbg. Isso em NT, mas como em 9X não existem essas coisas a solução foi uma mistura entre SoftIce e um depurador obscuro, que quase ninguém deve saber que existe, chamado WDeb98. Rodei esse cara dentro de uma máquina virtual emulada em conjunto com a interpretação das instruções em Assembly.
Como citado na introdução, fiz engenharia reversa de trojans feitos em C&#43;&#43;, Visual Basic e Delphi usando WinDbg e IDA, e posso dizer com propriedade que os mais difíceis de entender são os feitos em VB.
Fiz certa vez uma ferramenta de diagnóstico muito simpática que lista arquivos, serviços, drivers, registro, partições, processos, tudo de uma máquina Windows.
Monitorei a execução de jobs em Windows 2000 ou superior para controle de instalação e atualização de produtos.
E por falar em monitoração, também registrei a frequência de uso de aplicações usando hook de janelas, de maneira invasiva e não-invasiva. O que não travasse estava bom.
Como pet project fiz a reversa do dicionário Houaiss e importei para o formato de outro dicionário eletrônico, o Babylon.
Controlei o sistema de build quando não havia muitas soluções open source por aí com Cruise Control .NET, e mantive um servidor de símbolos, talvez um dos únicos na época fora da Microsoft, usando Debugging Tools for Windows.
Documentei projetos através de Doxygen e uma solução wiki chamada Trac. Mantive os sistemas de documentação no ar e ativos enquanto estava no projeto, embora depois essas coisas se perdem e ninguém mais sabe como fazer as coisas.
Outro projeto que lembro com carinho, quando atingi a marca de dez mil linhas de código, foram as interfaces de gerenciamento para desktop que desenvolvi usando C&#43;&#43; Builder 5 e 6 e bibliotecas Visual C&#43;&#43;. O principal deles, conhecido como Manager, roda até hoje, em um mundo onde tudo está no browser. Já mexi com interfaces de análise também, feitas em Visual C&#43;&#43; com os frameworks MFC, ATL e WTL.
Fiz análise de e-mails usando expressões regulares, dessa vez com a biblioteca da ATL, que é muito curiosa e enxuta, além de bugada. Nessa época também me especializei em análise de logs e edição global de projetos utilizando regular expressions. É impressionante o quanto você consegue economizar de tempo analisando logs e projetos gigantes se conhecer regular expressions.
Como citado na introdução, desenvolvi um sistema de risco para o mercado financeiro, corretoras da bolsa de valores. Hoje roda em uma das maiores corretoras do país, e contém o conjunto mais rebuscado de regras que alguém da área de risco poderia querer, desenvolvido com a ajuda de um especialista na área. Este é outro projeto que me dá orgulho, principalmente pelo sistema que detecta travas de opções.
Escrevi muitos artigos em português no meu blogue técnico, e mais alguns em inglês, aqui e pelo Code Project, que por muitos anos era a comunidade mais ativa de projetos Microsoft.
Desenvolvi uma API de comunicação com dispositivos HID USB, o que permite navegar pela árvore de dispositivos hoje em dia que estão conectados pelo protocolo. Isso envolve pen drives, celulares, câmeras, qualquer coisa que tenha uma entrada ou saída USB.
Já programei para interfaces mobile do finado Windows Phone e para o Android. Para um usei Visual Studio e para o outro Android Studio. É impressionante como ainda são pesadas essas interfaces de desenvolvimento para mobile.
Venho mantendo as soluções de baixo nível da Intelitrader, principalmente as que envolvem market data, pois o fluxo de dados nesses sistemas é absurdamente alto em tempos de crise. Ou seja, atualmente, todo o tempo.
 &amp;quot;Não basta saber: temos que aplicar. Não basta querer: temos que fazer.&amp;quot; Goethe
 </description>
</item>

     
    
  </channel>
</rss>
