<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Blogue do Caloni</title>
    <link>http://www.caloni.com.br/categories/code/</link>
    <description>Recent content in code on Blogue do Caloni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright é invenção do capitalismo burguês opressor. Todos os direitos não serão reservados.</copyright>
    <lastBuildDate>Sun, 21 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.caloni.com.br/categories/code/" rel="self" type="application/rss+xml" />
    
     
        <item>
  <title>C&#43;&#43; Co Routines</title>
  <link>http://www.caloni.com.br/cpp-co-routines/</link>
  <pubDate>2020-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/cpp-co-routines/</guid>
  <description>Entre os gêneros mais famosos do cinema e da programação está o terror, esse estado mental que se caracteriza pelo medo ou pela aversão a uma situação que envolve a perda de controle. Nesse quesito se encaixam as novas corrotinas que serão adotadas pelo padrão C++.
No último Caloni Bode Cast Live Privado, aqueles que não estão publicados no YouTube, conversei com um amigo por mais uma vez (já perdi a conta quantas foram) sobre a famigerada implementação, mas acho que dessa vez detectei melhor o que torna essa nova biblioteca de C++ tão repugnante para os amantes de boas soluções de engenharia e do padrão da linguagem.</description>
</item>

     
        <item>
  <title>Printf</title>
  <link>http://www.caloni.com.br/printf/</link>
  <pubDate>2020-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/printf/</guid>
  <description>Entre os segredos escondidos das funções básicas da lib padrão da linguagem C o printf e o scanf lideram o ranking. O printf possui a capacidade de alinhamento de colunas das string impressas com tamanho variável. Sabia disso? Pois é, isso não se ensina nas escolas.
A impressão básica de uma string passada como argumento com printf deve ser feita usando na string de formatação &amp;ldquo;%s&amp;rdquo;. Agora, se você colocar um sinal de menos entre esses dois caracteres essa string será alinhada à esquerda.</description>
</item>

     
        <item>
  <title>Historical Price</title>
  <link>http://www.caloni.com.br/historical-price/</link>
  <pubDate>2020-06-13</pubDate>
  
  <guid>http://www.caloni.com.br/historical-price/</guid>
  <description>Havia um job esta semana de um assunto que me encanta desde a época de investidor: base histórica de cotações. Estamos falando de ações da Bovespa. Na época que era investidor frequente mantinha uma base que era atualizada por um programinha em Java (esqueci o nome), mas nunca tive certeza se os ajustes feitos pelo programa eram os corretos. Surgiu agora a possibilidade de eu realizar código que converte uma base histórica recebida com um minuto por linha em campos divididos por ponto-e-vírgula (o CSV do Windows) para candles de várias periodicidades.</description>
</item>

     
        <item>
  <title>Awk</title>
  <link>http://www.caloni.com.br/awk/</link>
  <pubDate>2020-06-07</pubDate>
  
  <guid>http://www.caloni.com.br/awk/</guid>
  <description>Meu amigo sugeriu que aprender awk poderia ser útil de várias maneiras. Uma delas para organizar finanças pessoais. Dei uma lida em alguns tutoriais, sendo que o melhor custo benefício foi o Awk in 20 Minutes, de Fred Hebert (ele é o mesmo autor de um livro sobre erlang). Gostei. É sobre tratamento de texto como sed, mas em uma versão estendida e criada na época com a mesma sintaxe de C.</description>
</item>

     
        <item>
  <title>Leak de Memória</title>
  <link>http://www.caloni.com.br/leak-de-memoria/</link>
  <pubDate>2020-06-07</pubDate>
  
  <guid>http://www.caloni.com.br/leak-de-memoria/</guid>
  <description>Esse fim de semana vi um programa, sem leak de memória, que só de ficar alocando e desalocando apresentava um consumo crescente no Process Explorer. Imaginando que poderia ser alguma lib externa, como o redis, fui eliminando uma por uma as variáveis do sistema, até chegar em um loop em que a única coisa feita no corpo do código era alocar e desalocar memória. E ela apenas subia.
Essa memória é alocada para um objeto acessível por uma interface.</description>
</item>

     
        <item>
  <title>Azure Missing Lines</title>
  <link>http://www.caloni.com.br/azure-missing-lines/</link>
  <pubDate>2020-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/azure-missing-lines/</guid>
  <description>É curioso como os problemas mais triviais não são resolvidos em ferramentas feitas para resolver esses problemas. No Azure Pipelines existe um fluxo padrão para configurar um build em que você primeiro cria uma tarefa para obter o código de um repositório git remoto e em seguida configura, compila e empacota através de uma máquina chamada de agente. O problema surge logo nesses primeiros passos, para desespero do iniciante.
Para se autenticar no repositório remoto, é claro que a ferramenta irá se integrar por algum endpoint com o serviço, seja BitBucket, GitHub ou outros.</description>
</item>

     
        <item>
  <title>Transmission</title>
  <link>http://www.caloni.com.br/transmission/</link>
  <pubDate>2020-06-01</pubDate>
  
  <guid>http://www.caloni.com.br/transmission/</guid>
  <description>Dia de fazer funcionar o download automágico de legendas depois que o Transmission baixou meu Netflix caseiro. O download funcionou, mas não foi dos melhores, pois o sincronismo e o encoding veio errado, e o rename de _pb para o nome do arquivo não está acontecendo rodando pelo transmission-daemon. Fora isso tá com tudo em cima.
No final do dia a correção era mais simples que imaginava: eu só precisava desabilitar duas flags: o uso de sufixo no nome do arquivo salvo e a flag que força todo arquivo a ser salvo como utf8 (os arquivos em português do Brasil são salvos no encoding do Windows, o ISO-8859-1 ou Windows 1252 para os mais íntimos).</description>
</item>

     
        <item>
  <title>Bug no Calonibot Rodando Como Serviço</title>
  <link>http://www.caloni.com.br/bug-no-calonibot-rodando-como-servico/</link>
  <pubDate>2020-05-10</pubDate>
  
  <guid>http://www.caloni.com.br/bug-no-calonibot-rodando-como-servico/</guid>
  <description>Esse não é o primeiro bug, nem será o último, mas serve de lição. Se quiser rodar um daemon no seu raspberrypi que atualize seu repo git de tempos em tempos ele poderá falhar, já que que roda em conta de root e essa conta não possui suas credenciais. Nem deveria, para ser sincero&amp;hellip;
Uma maneira de tornar a leitura de seu repo relativamente segura é entregar credenciais de somente leitura para seu serviço.</description>
</item>

     
        <item>
  <title>O Bug Mais Bizarro Que Já Resolvi</title>
  <link>http://www.caloni.com.br/o-bug-mais-bizarro-que-ja-resolvi/</link>
  <pubDate>2020-05-10</pubDate>
  
  <guid>http://www.caloni.com.br/o-bug-mais-bizarro-que-ja-resolvi/</guid>
  <description>Máquina IBM velha e empoeirada, criptografia blowfish, assembly 16 bits, programa residente e nenhum depurador funcionando. Tudo o que eu tinha era o conhecimento que ia adquirindo do sistema, e talvez um pouco de imaginação, naquela fatídica semana de abril de 2008. Isolado em uma sala, tudo que eu tinha em volta eram papéis com anotações que ia fazendo conforme observava algo que poderia ser uma pista. Qualquer coisa servia. Do outro lado da sala, uma estagiária recém-chegada na empresa observava de longe, talvez com uma certa curiosidade, talvez medo, aquele rapaz ligar e desligar um desktop empoeirado enquanto a cada vez que apertava o botão de Power ele olhava fixamente para a tela por uma, às vezes duas horas seguidas.</description>
</item>

     
        <item>
  <title>Cast Operator</title>
  <link>http://www.caloni.com.br/cast-operator/</link>
  <pubDate>2020-04-22</pubDate>
  
  <guid>http://www.caloni.com.br/cast-operator/</guid>
  <description>O código abaixo não é C++ moderno. É 98. Porém, ele já demonstra alguns problemas na linguagem que foram aumentados desde então. Não se sabe exatamente qual a tradução semântica de construções tão parecidas quanto o operador-função e o operador-cast. Enquanto o primeiro serve para transformar objetos em funções chamáveis o segundo serve para extrair tipos de maneira educada.
O operador de cast só funciona se um cast estiver envolvido. Caso ele seja um método com explicit o cast precisa ser explícito como no exemplo.</description>
</item>

     
        <item>
  <title>Minha palestra sobre Windbg</title>
  <link>http://www.caloni.com.br/mbconf-at-home-2020-palestra-windbg/</link>
  <pubDate>2020-04-18</pubDate>
  
  <guid>http://www.caloni.com.br/mbconf-at-home-2020-palestra-windbg/</guid>
  <description>A MBConf@Home2020 foi um sucesso. Parabéns aos organizadores, palestrantes e apoiadores. Eu nunca fui em um evento de tecnologia em que tudo funcionou do começo ao fim. Simplesmente fantástico o nível de qualidade da organização. Fora que trezentas pessoas ficaram em casa e participaram conosco dessa troca de conhecimento =).
Minhas palestra foi a seguinte: dei uma pincelada no que é o WinDbg para os que ainda não conhecem e realizei algumas manobras pouco usuais de depuração, tentando fugir um pouco da rotina do programador e me enfiando no que seriam minhas sessões antigas de hacking ou cracking da época que analisava trojans ou depurava serviços que saíam depois que meu depurador remoto já tinha ido embora.</description>
</item>

     
        <item>
  <title>Winmock</title>
  <link>http://www.caloni.com.br/winsock-mock/</link>
  <pubDate>2020-04-10</pubDate>
  
  <guid>http://www.caloni.com.br/winsock-mock/</guid>
  <description>Testar sistemas com rede simulada pode ser muito complexo ou muito simples. Se for feito em C ou se os endpoints forem em C é muito simples: basta trocar as funções originais pelas suas. Como tudo em C são funções com nome bem definido e assinatura flexível (você não precisa declarar a assinatura da função, ou pode mudar no meio do caminho).
Criei este pequeno projeto de mock da winsock para exemplificar.</description>
</item>

     
        <item>
  <title>Callback Hell</title>
  <link>http://www.caloni.com.br/callback-hell/</link>
  <pubDate>2020-04-09</pubDate>
  
  <guid>http://www.caloni.com.br/callback-hell/</guid>
  <description>Foi aprendendo sobre kernel do Windows que eu descobri que a linguagem C suporta todas as abstrações que um homem crescido precisa para desenvolver sistemas. Também aprendi que você precisa ser um homem crescido para saber usar direito.
A linguagem C possui 32 palavras-chave e nenhuma parafusadeira elétrica. Existe um motivo para isso: fazer tudo na mão desenvolve o caráter. Se não desenvolve, pelo menos escancara a má pessoa que você é.</description>
</item>

     
        <item>
  <title>Meu Try Lock de Pelúcia</title>
  <link>http://www.caloni.com.br/try-lock-de-pelucia/</link>
  <pubDate>2020-04-07</pubDate>
  
  <guid>http://www.caloni.com.br/try-lock-de-pelucia/</guid>
  <description>Alguns implementam mutex pero no mucho, que é aquele mutex que não faz nada porque ele sabe que só tem uma thread rodando no processo. É uma solução elegante para abstrair o uso de lock em um processo que pode ou não rodar multithread.
Já isso me lembra o try lock de pelúcia de um driver de uma empresa que trabalhei certa vez. Como havia situações onde o lock não era nunca liberado, e a thread estava rodando em um nível de interrupção que não poderia mais voltar, ou ela agendava uma execução menos prioritária ou obtia o lock.</description>
</item>

     
        <item>
  <title>Code Jam 2020</title>
  <link>http://www.caloni.com.br/code-jam-2020/</link>
  <pubDate>2020-04-05</pubDate>
  
  <guid>http://www.caloni.com.br/code-jam-2020/</guid>
  <description>O Code Jam esse ano terminou rápido para mim. Estou enferrujado? Nem tanto. Apenas dei menos atenção ao evento no seu início, mas apesar de me concentrar nas últimas 11 horas não tive um resultado satisfatório, obtendo 24 pontos ao total, o que não me dá direito para o torneio, que exige pelo menos 30.
Minha abordagem nesse problema foi o básico de ir lendo os valores e verificando para cada novo elemento da linha se havia repetição nos valores já lidos da mesma linha.</description>
</item>

     
        <item>
  <title>Golang e C</title>
  <link>http://www.caloni.com.br/golang-e-c/</link>
  <pubDate>2020-04-05</pubDate>
  
  <guid>http://www.caloni.com.br/golang-e-c/</guid>
  <description>É muito difícil configurar a linguagem Go no ambiente Windows para compilar código C. O único ambiente de compilação que o projeto leva a sério são os ports do GCC, e não o Visual Studio, que seria a ferramenta nativa. Dessa forma, realizei boa parte das travessuras desse artigo em Linux, usando o WSL com a distro Ubuntu ou CentOS. Deve funcionar em qualquer Unix da vida.
A linguagem Go na versão mais nova precisa que seja definida através da cgo, o backend C do ambiente de build da linguagem, uma função trampolim, que é uma função escrita em C que irá chamar uma função escrita em Go.</description>
</item>

     
        <item>
  <title>Git Subtree</title>
  <link>http://www.caloni.com.br/git-subtree/</link>
  <pubDate>2020-03-22</pubDate>
  
  <guid>http://www.caloni.com.br/git-subtree/</guid>
  <description>É a segunda vez que uso subtrees no Git. Não é algo que me acostumei usar por rotina, mas é uma técnica que eu recomendo que todo programador conheça para unir repositórios que não dependa dos pesadelos de configurar submodules.
Há vários tutoriais na internet sobre seu uso (como o da Atlasian), além do próprio manual do Git e sua ajuda. Só quero enfatizar neste post que ele existe, é fácil de usar, e pode resolver alguns problemas de gerenciamento de projeto:</description>
</item>

     
        <item>
  <title>Projeto Hu Cpp: Not Fast Enough</title>
  <link>http://www.caloni.com.br/projeto-hu-cpp-not-fast-enough/</link>
  <pubDate>2020-03-17</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-hu-cpp-not-fast-enough/</guid>
  <description>Continuando minhas aventuras em tentar ser mais rápido que o Hugo, fiz uma versão que gera um html porco com os parágrafos obtidos no parser porco de markdown, rodando em cima dos meus 2740 posts. Este é o código novo:
Lembrando o resultado do Hugo no post passado:
Agora executando o meu programinha caseiro (b.bat é uma batch que executa todos os posts usando o comando for do Windows; ptime é uma versão Windows do time do Linux, que mede performance na execução de um programa).</description>
</item>

     
        <item>
  <title>Projeto Hu Cpp</title>
  <link>http://www.caloni.com.br/projeto-hu-cpp/</link>
  <pubDate>2020-03-15</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-hu-cpp/</guid>
  <description>Utilizo o Hugo como renderizador do meu saite já faz um tempo. Depois que juntei os posts do finado Cine Tênis Verde e do meu blogue técnico a soma dos textos ultrapassou a marca dos dois mil. Atualmente levo cerca de quinze segundos para renderizar todo o saite antes de publicá-lo.
Não é uma marca ruim, considerando que estamos com quase três mil textos, e embora o leiaute do saite seja muito simples, é justamente o que eu desejo para rápido carregamento e busca.</description>
</item>

     
        <item>
  <title>Como Funciona o MPTunnel</title>
  <link>http://www.caloni.com.br/como-funciona-o-mptunnel/</link>
  <pubDate>2019-12-11</pubDate>
  
  <guid>http://www.caloni.com.br/como-funciona-o-mptunnel/</guid>
  <description>A ideia por trás de um sistema multipath de rede é fornecer mais de um caminho para o tráfego de pacotes. O objetivo pode ser diminuir a perda de pacotes por causa da instabilidade da rede, mas também isso irá fazer com que o throughput da comunicação seja maior pela diminuição da razão da perda de pacotes, além da melhor rota acabar sendo por onde os pacotes irão chegar primeiro, em uma espécie de seleção natural da arquitetura.</description>
</item>

     
        <item>
  <title>Vcpkg: Bootstrap</title>
  <link>http://www.caloni.com.br/vcpkg-bootstrap/</link>
  <pubDate>2019-11-29</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg-bootstrap/</guid>
  <description>A versatilidade do vcpkg, gerenciador de pacotes multiplataforma da Microsoft, é permitir modificar tudo no projeto, desde código-fonte, pacotes instaláveis e a própria origem do repositório. Através do controle de fonte um vcpkg pode ser alimentado por diversas fontes, e por cada pacote existir em uma pasta separada permite a coexistência de várias versões e origens. Além disso, a forma de compilar os projetos e o código-base pode ser alterado exatamente da forma com que o projeto precisa.</description>
</item>

     
        <item>
  <title>DTLS Simples... simples?</title>
  <link>http://www.caloni.com.br/dtls-simples/</link>
  <pubDate>2019-11-13</pubDate>
  
  <guid>http://www.caloni.com.br/dtls-simples/</guid>
  <description>O protocolo DTLS, grosso modo, é um addon do TLS, que é a versão mais nova e segura do SSL, só que em vez de usar por baixo o TCP, que garante entrega na ordem certa dos pacotes, além de outras garantias, o UDP é permitido. Ou seja, datagramas. Em teoria essa forma de usar TLS é uma versão mais light, com menos overheadh e tráfico de banda. E a pergunta que tento responder aqui é: será que isso é verdade?</description>
</item>

     
        <item>
  <title>Vcpkg: openssl.cnf</title>
  <link>http://www.caloni.com.br/vcpkg-openssl-cnf/</link>
  <pubDate>2019-09-17</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg-openssl-cnf/</guid>
  <description>Mais uma aventura em vcpkg. Dessa vez o projeto openssl, a biblioteca de SSL open-source multiplataforma. O vcpkg divide esse port por SO, sendo o openssl-windows o port que alterei. A alteração foi enviada como PR para a Microsoft, mas no momento está apenas no repo da BitForge.
O que acontece é que alguns comandos executados no openssl.exe compilado e instalado do vcpkg precisam conter o arquivo de configuração disponível, como o genrsa:</description>
</item>

     
        <item>
  <title>Vcpkg: Boost para Windows XP</title>
  <link>http://www.caloni.com.br/vcpkg-boost-windows-xp/</link>
  <pubDate>2019-09-16</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg-boost-windows-xp/</guid>
  <description>Quem programa em C++ no Brasil geralmente precisa estar preparado para manter velharias. Boa parte do parque de máquinas das empresas usam Windows, e não estou falando de Windows 10, mas muitas vezes XP. Apesar da Microsoft ter largado uma das melhores versões do seu SO para trás, milhares de máquinas ainda rodam esse bichinho, e muitos programadores precisam manter e desenvolver em nome da compatibilidade.
Porém, o desenvolvimento de libs C++ foram aos poucos largando o suporte ao XP (em C isso não existe muito, pois é mais fácil ser portável em C), pois muitos mecanismos de SOs modernos surgiram depois, como um mutex light ou mutex apenas de read.</description>
</item>

     
        <item>
  <title>Vcpkg: Atualizando Lib Asio</title>
  <link>http://www.caloni.com.br/vcpkg-atualizando-lib-asio/</link>
  <pubDate>2019-09-07</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg-atualizando-lib-asio/</guid>
  <description>Hoje tive que compilar a versão 1.13.0 do Asio para Windows, mas o vcpkg não suporta essa versão ainda, apesar de suportar uma versão (1.12.2.2). Daí entra os problemas que todo programador Windows tem para manter bibliotecas de terceiro compilando em seu ambiente, mas agora com o vcpkg isso nem é tão difícil assim. Vamos lá.
Primeiro de tudo, os pacotes disponíveis no vcpkg podem não ser os disponíveis no branch oficial, que é apenas uma base, que está sendo atualizado e mantido por uma equipe grande que responde os issues, é verdade, mas nem sempre possui as versões que precisamos no dia-a-dia.</description>
</item>

     
        <item>
  <title>Do Bit para o Código</title>
  <link>http://www.caloni.com.br/do-bit-para-o-codigo/</link>
  <pubDate>2019-09-03</pubDate>
  
  <guid>http://www.caloni.com.br/do-bit-para-o-codigo/</guid>
  <description>Olá. Esta é uma viagem para dentro do computador. Como funciona um computador? Você sabe? Pois é, nem eu. Mas vamos explorar alguns pontos onde nossa vã metafísica mal encosta na singularidade que é uma arquitetura Von Neumann.
Em primeiro lugar, um bit. O que é um bit? Um bit nada mais é que um dado que se traduz em uma informação com dois, e apenas dois, valores possíveis: ligado ou desligado.</description>
</item>

     
        <item>
  <title>Some things I learned in a Hacker Rank exercise</title>
  <link>http://www.caloni.com.br/hacker-rank/</link>
  <pubDate>2019-08-08</pubDate>
  
  <guid>http://www.caloni.com.br/hacker-rank/</guid>
  <description>A couple of days ago I subscribed to Hacker Hank, a website specialized in provide interview exercises. The site is as a better version of Code Jam, with the possibility to Compile &amp;amp; Run the code, as well as running several test cases.
Talking with friends about one of them proposed a interesting puzzle called Find the Running Median. This is a good problem because it is easy to understand and tricky to implement.</description>
</item>

     
        <item>
  <title>tiodb</title>
  <link>http://www.caloni.com.br/tiodb/</link>
  <pubDate>2019-07-27</pubDate>
  
  <guid>http://www.caloni.com.br/tiodb/</guid>
  <description>Antigamente ele era conhecido apenas como tio, mas seu nome foi trocado para a nova modinha dos hubs com o sufixo db: são os chamados nosql. De qualquer forma, o tio, ou The Information Overlord (pesquise na web para ver se acha essa referência), começou com um núcleo e uma ideia muito simples que continuam até hoje, e que ainda é difícil de achar por aí: um servidor que mantém em memória contêineres STL disponíveis via socket em um protocolo simples.</description>
</item>

     
        <item>
  <title>SLQLocalDB</title>
  <link>http://www.caloni.com.br/sqllocaldb/</link>
  <pubDate>2019-07-21</pubDate>
  
  <guid>http://www.caloni.com.br/sqllocaldb/</guid>
  <description>Hoje foi o dia de redescobrir meu velho ranço com a solução Microsoft para banco de dados. Já perdi horas, dias e semanas com problemas de conexão com algum servidor SQL Server porque a instalação possuía configurações de segurança específicas, a string de conexão não estava exatamente de acordo com a versão instalada ou uma combinação macabra desses e de mais alguns problemas.
Após degladiar novamente com problemas com o SQL Server Express 17 minha esperança para este projeto que requer este banco de dados foi uma versão mínima chamada de LocalDB [1].</description>
</item>

     
        <item>
  <title>Como Publicar Seu Blog Em Hugo Para Ebook</title>
  <link>http://www.caloni.com.br/como-publicar-seu-blog-em-hugo-para-ebook/</link>
  <pubDate>2019-07-10</pubDate>
  
  <guid>http://www.caloni.com.br/como-publicar-seu-blog-em-hugo-para-ebook/</guid>
  <description>Eu publico meu blog inteiro de tempos em tempos para um ebook que construo formatando primeiro em html através de um tema do Hugo, o parser de blog que estou usando no momento porque ele suporta 2500 posts sem reclamar. É uma receita simples de sucesso se você precisar ter todo seu conteúdo indexado para rápida referência ou leitura cronológica.
A primeira coisa a ser feita é preparar um tema para formatar seu html.</description>
</item>

     
        <item>
  <title>C Resolve Tudo: goto</title>
  <link>http://www.caloni.com.br/goto/</link>
  <pubDate>2019-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/goto/</guid>
  <description>Para quem decide usar a linguagem C para resolver tudo, a gota da água é o goto. Ele é flexível, cabe em (quase) qualquer ponto do código e tem 1001 utilidades. O goto é o bombril da engenharia de software.
O uso mais simples dessa importante construção da linguagem é pular de um ponto para outro do código em que esses pontos não estão diretamente relacionados, como geralmente ocorre, como sair de um laço, não entrar em um if ou selecionar um case do switch (lembrando que no caso do case do switch ele é no fundo um goto disfarçado).</description>
</item>

     
        <item>
  <title>C Resolve Tudo Clos</title>
  <link>http://www.caloni.com.br/c-resolve-tudo-clos/</link>
  <pubDate>2019-05-17</pubDate>
  
  <guid>http://www.caloni.com.br/c-resolve-tudo-clos/</guid>
  <description>Continuando nossa série, conforme sugerido pelo @colemaker do grupo C/C++/42/Império do Brasil, a próxima ideia a ser implementada em C é o sistema polimórfico de chamadas do Lisp orientado a objetos. Esse sistema permite realizar a seguinte manobra:
O aspecto-chave aqui, conforme eu descobri, é implementar a estratégia de prioridades entre as sobrecargas dos métodos de acordo com os tipos passados. Analisando bem por cima devemos sempre priorizar os métodos com os tipos mais específicos e ir realizando underpromotion até chegarmos no menos específico (se houver).</description>
</item>

     
        <item>
  <title>C Resolve Tudo: Orientação a Objetos (com Polimorfismo)</title>
  <link>http://www.caloni.com.br/c-resolve-tudo/</link>
  <pubDate>2019-05-17</pubDate>
  
  <guid>http://www.caloni.com.br/c-resolve-tudo/</guid>
  <description>Como programadores há um vício em nossas cabeças que é estar constantemente buscando a bala de prata, ou seja, a solução final e única para todos os nossos problemas de implementação. Com o tempo e alguma experiência descobrimos que tal coisa não existe, mas até lá nos encantamos com esse ou aquele framework, e claro, com essa ou aquela linguagem.
As linguagens que são criadas depois da revolução dos computadores pessoais querem facilitar a vida do programador médio embutindo soluções já testadas por programadores de verdade e evitando a todo custo que o código incorra em erros comuns.</description>
</item>

     
        <item>
  <title>Coroutines Em C: Picoro</title>
  <link>http://www.caloni.com.br/coroutines-em-c-picoro/</link>
  <pubDate>2019-05-08</pubDate>
  
  <guid>http://www.caloni.com.br/coroutines-em-c-picoro/</guid>
  <description>Tantas linguagens hoje em dia tentando implementar a abstração de corrotinas e inserindo mais camadas de abstração (fibras e cereais)&amp;hellip; há duas implementações já no Boost, ambas dependendo de uma biblioteca de contexto de stack que é dependente de arquitetura (programada em Assembly).
E aqui está a linguagem C com sua elegância, minimalismo e a filosofia &amp;ldquo;just works&amp;rdquo;, por mais ou menos 50 anos.
Estava pesquisando sobre bibliotecas de corrotinas em C e encontrei a Picoro, de Tony Finch.</description>
</item>

     
        <item>
  <title>Visual Studio Unit Test (C&#43;&#43;)</title>
  <link>http://www.caloni.com.br/visual-studio-unit-test/</link>
  <pubDate>2019-05-06</pubDate>
  
  <guid>http://www.caloni.com.br/visual-studio-unit-test/</guid>
  <description>Desde o Visual Studio 2015 há suporte a unit tests em C++ automatizado na IDE. Porém, a partir do VS 2017 15.5 o suporte aumentou drasticamente, vindo embutidos os suportes para as bibliotecas de teste Google Test, Boost.Test e CTest. Além, é claro, do Microsoft Unit Testing Framework for C++, o caseiro da M$.
Além disso, é possível você mesmo integrar o Visual Studio com outra lib de testes. Mas para que gastar tempo?</description>
</item>

     
        <item>
  <title>Const Int Pointer Var</title>
  <link>http://www.caloni.com.br/const-int-pointer-var/</link>
  <pubDate>2019-04-29</pubDate>
  
  <guid>http://www.caloni.com.br/const-int-pointer-var/</guid>
  <description>A melhor forma de declarar variáveis ponteiros (constante ou não, mas segue o exemplo) é const int pointer var. Explicação:
Quem diz o asterisco fazer parte do tipo e não da variável tem razão. Pensando dessa forma ele tem que ficar próximo do tipo.
Porém, outra forma de interpretar a variável é que ela equivale a um inteiro quando usado com asterisco, o que também é verdade. Ou seja, int pointer var significa que pointer var equivale a um int (constante ou não, mas preciso dessa variável não-const para o exemplo).</description>
</item>

     
        <item>
  <title>OpenSSH no Windows</title>
  <link>http://www.caloni.com.br/openssh-windows/</link>
  <pubDate>2019-04-29</pubDate>
  
  <guid>http://www.caloni.com.br/openssh-windows/</guid>
  <description>O Secure Shell (SSH) é um protocolo de sucesso nos unixes da vida para terminal remoto e seguro por décadas, mas no Windows nunca houve uma forma simples e protegida de abrir um terminal ou copiar arquivos. A opção é instalar um cygwin com esse componente ou tentar compilar um protocolo SSL e em cima dele o SSH. Porém, há detalhes na autenticação que estão relacionadas com o Sistema Operacional e que precisa ser feito.</description>
</item>

     
        <item>
  <title>Code Jam 2019 Qualification Round</title>
  <link>http://www.caloni.com.br/code-jam-2019-qualification-round/</link>
  <pubDate>2019-04-07</pubDate>
  
  <guid>http://www.caloni.com.br/code-jam-2019-qualification-round/</guid>
  <description>Estou viajando e com poucas horas de acesso a um computador, mas os dois primeiros desafios do Code Jam esse ano foram tão simples que sequer precisaram de meia-hora. Isso para um chinês, campeões em campeonatos de programação, deve ser equivalente a cinco minutos com um código C enxuto. Mas estou apenas aprendendo.
Resuminho: o problema é receber um número e retornar dois números cuja soma seja igual ao primeiro. A única restrição é que nesses números não poderá ter o algarismo quatro.</description>
</item>

     
        <item>
  <title>Free Pascal e VS Code</title>
  <link>http://www.caloni.com.br/free-pascal-e-vs-code/</link>
  <pubDate>2019-03-09</pubDate>
  
  <guid>http://www.caloni.com.br/free-pascal-e-vs-code/</guid>
  <description>Agora que o VS Code é a ferramenta universal para todas as plataformas e linguagens imagináveis, acreditem ou não, há até plugin para Pascal. Ao instalar a extensão mantida por Alessandro Fragnani você recebe o intelisense e algumas dicas durante erros de programação.
A própria integração com o Free Pascal Compiler, o compilador open source de Pascal multiplataforma, já é mostrada na Home desse plugin. É só seguir os modelos e alterar de acordo com o que pede o VS Code (que está sendo atualizado constantemente).</description>
</item>

     
        <item>
  <title>Debug Remoto no Visual Studio 2010 ou Superior</title>
  <link>http://www.caloni.com.br/debug-remoto-visual-studio-2010-superior/</link>
  <pubDate>2019-03-06</pubDate>
  
  <guid>http://www.caloni.com.br/debug-remoto-visual-studio-2010-superior/</guid>
  <description>Já escrevi sobre debug remoto no finado C++ Builder, sobre como usar o msvcmon.exe no VS 2003 e o msvsmon.exe no 2010+. Sobre como depurar um serviço quando a máquina está para desligar, e até sobre depurar através de um servidor de símbolos. Está na hora de tornar a depuração mais simples para programadores de serviços Win32.
Resumo dos comandos:
Hoje em dia, às vésperas do Visual Studio 2019, espero que todo mundo use pelo menos o Visual Studio 2010 porque a partir dessa versão tornou-se muito fácil depurar remotamente, pois um pacote feito para isso já é instalado junto do Visual Studo.</description>
</item>

     
        <item>
  <title>Bug no Boost Asio usando função AcceptEx do Winsock</title>
  <link>http://www.caloni.com.br/bug-boost-asio-acceptex-winsock/</link>
  <pubDate>2019-01-06</pubDate>
  
  <guid>http://www.caloni.com.br/bug-boost-asio-acceptex-winsock/</guid>
  <description>Depois de um mês de correção e mais um ou dois meses preparando um compilado do que ocorreu no software que estamos mantendo, foi descoberta uma situação muito peculiar que ocorre tanto em Windows XP quanto no Windows 10, mas que no 10 tem uma correção bem-educada e no XP&amp;hellip; bom, nem tanto.
O problema ocorreu em um uso padrão do Boost.Asio de modo assíncrono. Sem querer entrar muito em código nesse momento &amp;ndash; que teve como base nosso projeto de servidor de requisições mais rápido do universo, o motherforker &amp;ndash; se trata apenas de um listening que usa spawn de um lambda para tratar os accepts e dentro dele cria processos, redirecionando sua entrada e saída.</description>
</item>

     
        <item>
  <title>A Maneira Errada de Começar um Projeto é com Visual Studio</title>
  <link>http://www.caloni.com.br/a-maneira-errada-de-comecar-um-projeto-e-com-visual-studio/</link>
  <pubDate>2018-12-11</pubDate>
  
  <guid>http://www.caloni.com.br/a-maneira-errada-de-comecar-um-projeto-e-com-visual-studio/</guid>
  <description>Estava eu trabalhando com um sample e resolvi colocar controle de fonte para analisar as mudanças. E a mudança mais inesperada que eu vi quando digitei git diff foi que ele achou que meus arquivos de código-fonte estivessem em binário.
Essa lambança ocorreu com uma versão atual do Visual Studio 2017 após eu resolver ser preguiçoso e deixar o template dele criar o projeto para mim.
Particularmente não sou fã de deixar as IDEs criarem arquivos, porque geralmente elas estão cheias de más intenções disfarçadas de boas envolvendo alguma tecnologia proprietária.</description>
</item>

     
        <item>
  <title>Boost.Bind e os Erros Escrotos</title>
  <link>http://www.caloni.com.br/boost-bind-e-os-erros-escrotos/</link>
  <pubDate>2018-10-01</pubDate>
  
  <guid>http://www.caloni.com.br/boost-bind-e-os-erros-escrotos/</guid>
  <description>Estou voltando a programar algumas coisas no boost. Algo que eu perdi ao me isolar do movimento de modernização do C++ foi a capacidade brilhante da biblioteca boost em encapsular e abstrair conceitos de engenharia de software de maneira portável e mantendo a filosofia por trás da STL, que ainda é a melhor maneira de trabalhar algoritmos já criada em qualquer linguagem de programação séria.
Isso não quer dizer que a linguagem C++ está indo para um bom caminho.</description>
</item>

     
        <item>
  <title>Coroutine Internals</title>
  <link>http://www.caloni.com.br/coroutine-internals/</link>
  <pubDate>2018-09-18</pubDate>
  
  <guid>http://www.caloni.com.br/coroutine-internals/</guid>
  <description>Uma corrotinas é um mecanismo de troca de contexto onde apenas uma thread está envolvida. Ela me faz lembrar do Windows 3.0, não exatamente por não existirem threads (e não existiam mesmo), mas pelo caráter cooperativo dos diferentes códigos.
Só que no caso do Windows se a rotina de impressão travasse todo o sistema congelava.
A volta das corrotinas via C++ moderno ocorre, para variar, no Boost. E a arquitetura é simples: mantenha um histórico das stacks das diferentes tasks da thread.</description>
</item>

     
        <item>
  <title>Vcpkg Internals: como o gerenciador de pacotes da M$ funciona por dentro (e como fazer seu próprio pacote!)</title>
  <link>http://www.caloni.com.br/vcpkg-internals/</link>
  <pubDate>2018-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg-internals/</guid>
  <description>Depois de entender mais ou menos como funciona o vcpkg é hora de realmente entrar no código e entender qual a grande sacada dessa ferramenta da Microsoft.
Uma das formas mais divertidas de entender o funcionamento de um fonte é compilar e sair depurando. E foi o que eu fiz. Através dos step ins e step outs foi possível ter as primeiras impressões de em qual pé está o projeto, além de pegar boas ideias para meu próprio código.</description>
</item>

     
        <item>
  <title>GetArg: the ultimate badass argv/argc parser</title>
  <link>http://www.caloni.com.br/getarg/</link>
  <pubDate>2018-08-30</pubDate>
  
  <guid>http://www.caloni.com.br/getarg/</guid>
  <description>Sim, eu acho que já resumi o suficiente meu parseador de argv/argc no meu último artigo sobre o tema. Sim, eu também acho que a versão com STL bonitinha (mas ordinária). A questão agora não são as dependências, mas o uso no dia-a-dia: precisa ter o argc nessa equação?
A resposta é não. Pois, como sabemos, o padrão C/C++ nos informa que o argv é um array de ponteiros de strings C que termina em nulo.</description>
</item>

     
        <item>
  <title>Meu Novo Parseador de Argc Argv</title>
  <link>http://www.caloni.com.br/meu-novo-parseador-de-argc-argv/</link>
  <pubDate>2018-08-21</pubDate>
  
  <guid>http://www.caloni.com.br/meu-novo-parseador-de-argc-argv/</guid>
  <description>Eis que me deparo com um projeto onde não posso usar STL. Ou seja, nada de map nem string. Isso quer dizer que minha função bonita e completa de parseamento de argumentos argc/argv não pode ser usado. Essa é uma má notícia. A boa notícia é que achei uma forma muito mais simples e à prova de falhas de fazer isso. Quer ver?
Essa função é tão simples, e tem tão poucas dependências (strcmp) que você pode usá-la em praticamente qualquer programa que use argc/argv e que use os parâmetros dos mais complexos:</description>
</item>

     
        <item>
  <title>Vídeo: Visual Studio e seu depurador (comentado)</title>
  <link>http://www.caloni.com.br/video-depuracao-visualstudio-101-comentado/</link>
  <pubDate>2018-07-27</pubDate>
  
  <guid>http://www.caloni.com.br/video-depuracao-visualstudio-101-comentado/</guid>
  <description>Segue meu segundo vídeo curto onde estou apenas demonstrando como é o depurador do Visual Studio. Mas dessa vez com comentários =)</description>
</item>

     
        <item>
  <title>Vídeo: Depuração Visual Studio 101</title>
  <link>http://www.caloni.com.br/video-depuracao-visualstudio-101/</link>
  <pubDate>2018-07-24</pubDate>
  
  <guid>http://www.caloni.com.br/video-depuracao-visualstudio-101/</guid>
  <description>Redescobrindo meu canal no YouTube me empolguei em publicar mais alguma coisa. Os meu primeiros vídeos, no meu canal pessoal, são longos e possuem narração um pouco confusa, mas explicam bem alguns detalhes do Visual Studio. Agora com meu primeiro vídeo curto estou apenas demonstrando sem voz como é o depurador do Visual Studio. Enjoy =)</description>
</item>

     
        <item>
  <title>Stanford Encyclopedia of Philosophy Para Kindle</title>
  <link>http://www.caloni.com.br/stanford-encyclopedia-of-philosophy-para-kindle/</link>
  <pubDate>2018-07-15</pubDate>
  
  <guid>http://www.caloni.com.br/stanford-encyclopedia-of-philosophy-para-kindle/</guid>
  <description>A enciclopédia mais completa e de maior respeito da internet não é um enciclopédia geral, mas uma de filosofia. Está hospedada na Universidade de Stanford e possui revisão por pares e toda a autoridade de ser escrita por especialistas nos verbetes em questão. O único problema (até agora) era não ser possível baixá-la para degustar no Kindle. Até agora.
Para realizar esta operação será necessário usar as seguintes ferramentas:
 wget sed sort Calibre  O projeto de conversão (disponível aqui) foi feito pensando em usuários do Windows, mas pode ser adaptado facilmente para qualquer ambiente.</description>
</item>

     
        <item>
  <title>Python27, protobuf, py2exe e buildexe</title>
  <link>http://www.caloni.com.br/python27-protobuf-py2exe-cx_freeze/</link>
  <pubDate>2018-07-14</pubDate>
  
  <guid>http://www.caloni.com.br/python27-protobuf-py2exe-cx_freeze/</guid>
  <description>Para quem está tentando compilar um executável usando py2exe e protobuf, #ficadica: desista. Ele não vai funcionar ou se funcionar vai dar trabalho. Em vez disso melhor usar buildexe (através do pacote cxfreeze), que é um esquema marotinho que permite configurar tudo e há apenas um patchzinho que precisa ser feito.
Para entender como as coisas dão errado primeiro vamos instalar os requisitos de um pacote fictício em um ambiente virtualizado do Python (para evitar mexer na instalação padrão):</description>
</item>

     
        <item>
  <title>Vcpkg: gerenciador de libs c&#43;&#43; para Linux, Mac OS... e Windows!</title>
  <link>http://www.caloni.com.br/vcpkg/</link>
  <pubDate>2018-07-14</pubDate>
  
  <guid>http://www.caloni.com.br/vcpkg/</guid>
  <description>O ambiente padronizado de bibliotecas C/C++ dos sistemas UNIX é motivo de inveja dos programadores Windows por séculos. Mas, finalmente, a Microsoft tem acordado diante da ressurreição do C++, com seus novos bug fixes e new deprecated features.
E com isso uma série de atividades têm permeada a evolução da ferramenta de desenvolvimento da Microsoft, o Visual Studio:
 Updates frequentes Projetos internos lançados como open source no GitHub Compra do GitHub Suporte a mais de um compilador (como clang) Depuração Linux (Ubuntu) dentro do Windows Ambiente Linux (Ubuntu) dentro do Windows Pesado suporte ao CMake Ambiente padronizado de bibliotecas para Windows, Linux e Mac OS (vcpkg) Suporte à compilação de bibliotecas clássicas dos ambientes UNIX via vcpkg Deploy de suas próprias bibliotecas padronizadas via vcpkg  Usar o vcpkg no Windows é tão simples que parece mágica.</description>
</item>

     
        <item>
  <title>Manipulando Mouse e Teclado no Windows</title>
  <link>http://www.caloni.com.br/manipulando-mouse-e-teclado-no-windows/</link>
  <pubDate>2018-07-04</pubDate>
  
  <guid>http://www.caloni.com.br/manipulando-mouse-e-teclado-no-windows/</guid>
  <description>Uma forma extremamente bem comportada que o Windows tem para manipular entrada de mouse e teclado são as funções API BlockInput/SendInput [1][2]. Enquanto uma bloqueia todos os eventos de input vindo de todos os lugares do sistema, o outro consegue enviar inputs apenas por software. Imagine a peça que você pode pregar em seus amigos.
No entanto, estas funções não são para amadores. É preciso entender o que são threads, por exemplo, pois apenas a thread que chamou BlockInput pode depois chamar SendInput com sucesso.</description>
</item>

     
        <item>
  <title>SSL e seu limite de pacote</title>
  <link>http://www.caloni.com.br/ssl-limite-de-pacote/</link>
  <pubDate>2018-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/ssl-limite-de-pacote/</guid>
  <description>O protocolo TLS/SSL tem por objetivo criar uma camada de criptografia assimétrica para a aplicação. E quando eu falo em camada não estou me referindo às camadas OSI. Nem às camadas TCP/IP. Isso porque o SSL não se encaixa em nenhuma das duas. Ele interfere com muitas, inclusive a aplicação. E aprendi isso a duras penas: na ponta do depurador.
O pacote SSL tem um limite de 16 KB, ou 16384 bytes.</description>
</item>

     
        <item>
  <title>Boost Meta State Machine</title>
  <link>http://www.caloni.com.br/boost-meta-state-machine/</link>
  <pubDate>2018-05-21</pubDate>
  
  <guid>http://www.caloni.com.br/boost-meta-state-machine/</guid>
  <description>O Boost Meta State Machine (MSM for short) é uma das duas bibliotecas mais famosinhas de state machine do Boost. Ela é uma versão estática que permite incluir chamadas para as entradas e saídas de um estado baseado em eventos. A sua principal vantagem é poder visualizar toda a máquina de estado em um só lugar, e sua principal desvantagem é pertecer ao Boost, o que quer dizer que você vai precisar fazer seu terceiro doutorado e ler uma documentação imensa sobre UML antes de conseguir produzir alguma coisa.</description>
</item>

     
        <item>
  <title>Lista Ligada; tá ligado?</title>
  <link>http://www.caloni.com.br/lista-ligada/</link>
  <pubDate>2018-04-24</pubDate>
  
  <guid>http://www.caloni.com.br/lista-ligada/</guid>
  <description>Uma lista ligada é uma lista de alguma coisa. Essa alguma coisa podem ser inteiros, strings ou estruturas inteiras. Independente do que for, você vai precisar de uma estrutura. Sabe por quê? Porque existe além dos dados em si mais uma informação que você precisará guardar em cada elemento de sua lista: o próximo elemento.
Sua estrutura pode ser simples e direta. Digamos uma lista ligada de idades vai ter o endereço do próximo elemento e o dado propriamente dito deste elemento (a idade):</description>
</item>

     
        <item>
  <title>Projeto Aluno</title>
  <link>http://www.caloni.com.br/projetoaluno/</link>
  <pubDate>2018-03-21</pubDate>
  
  <guid>http://www.caloni.com.br/projetoaluno/</guid>
  <description>Observar um estudante de computação (qualquer curso) lutando nos primeiros meses para conseguir fazer seus programas compilarem em C é um misto de emoções. É uma mistura entre risos, risadas e gargalhadas. Há vários motivos para isso, mas o principal, o que vem à minha mente sempre que isso acontece, é a eterna questão: por que a pessoa encontra fórum de programação para perguntar sobre variável mas não consegue ler duas páginas de um livro?</description>
</item>

     
        <item>
  <title>Contra o &#39;Array de 100 bytes é suficiente&#39;</title>
  <link>http://www.caloni.com.br/contra-o-array-de-100-bytes-eh-suficiente/</link>
  <pubDate>2018-03-11</pubDate>
  
  <guid>http://www.caloni.com.br/contra-o-array-de-100-bytes-eh-suficiente/</guid>
  <description>Desde o C++ moderno (pós-03) o uso de arrays de tamanho fixo estão se tornando depreciados. E por um bom motivo: você nunca sabe realmente qual o tamanho que você precisa para um array de bytes até você saber. Daí a próxima grande questão é: &amp;ldquo;como gerenciar essa memória dinâmica de forma efetiva?&amp;quot;. E a resposta moderna sempre é: &amp;ldquo;não faça isso você mesmo&amp;rdquo;. Eis o porquê:
Quando lidamos com funções legadas elas se misturam de tal maneira com código novo que a merda da alocação/desalocação dinâmica manual vai se espalhando também.</description>
</item>

     
        <item>
  <title>Variáveis static local Nunca São Inicializadas Se Você Não Chama Sua Função</title>
  <link>http://www.caloni.com.br/variaveis-static-local-nunca-sao-inicializadas-se-voce-nao-chama-sua-funcao/</link>
  <pubDate>2018-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/variaveis-static-local-nunca-sao-inicializadas-se-voce-nao-chama-sua-funcao/</guid>
  <description>Uma dúvida muito comum dos programadores iniciantes em C/C++ diz respeito às variáveis static que são declaradas dentro de um escopo, como uma função. Sabemos que se ela fosse declarada global, fora de qualquer escopo, ela seria inicializada antes do main ser chamado, como diz este trecho de alguém que pesquisou a respeito:
 &amp;ldquo;C++ Primer says. Each local static variable is initialized before the first time execution passes through the object&amp;rsquo;s definition.</description>
</item>

     
        <item>
  <title>Como Parsear Argc Argv para um map STL</title>
  <link>http://www.caloni.com.br/como-parsear-argc-argv-para-um-map-stl/</link>
  <pubDate>2018-01-26</pubDate>
  
  <guid>http://www.caloni.com.br/como-parsear-argc-argv-para-um-map-stl/</guid>
  <description>Os clássicos argv/argc são úteis quando os parâmetros de um programa são conhecidos e geralmente obrigatórios (até a ordem pode ser obrigatória). Isso funciona muito bem para C. Porém, há a possibilidade de STLzar esses argumentos de forma simples, usando a lógica UNIX de fazer as coisas e transformando tudo em um map de string para string. E tudo isso cabe em uma função pequena que você pode copiar e levar com você em seu cinto de utilidades:</description>
</item>

     
        <item>
  <title>Como Achar Erros no Printf via Dump</title>
  <link>http://www.caloni.com.br/como-achar-erros-no-printf-via-dump/</link>
  <pubDate>2018-01-25</pubDate>
  
  <guid>http://www.caloni.com.br/como-achar-erros-no-printf-via-dump/</guid>
  <description>Às vezes, e apenas às vezes, é útil ter um dump do processo que acabou de capotar e ter um singelo backup do pdb (arquivo de símbolos) dos binários envolvidos nessa tragédia. Com alguns cliques pontuais e uma análise simples da stack, da variável e do código envolvido é possível chegar em um veredito sem muitas controversas se foi isso mesmo que gerou o crash. No caso peguei hoje um caso assim.</description>
</item>

     
        <item>
  <title>Como Apagar o Prompt do seu Programa Windows</title>
  <link>http://www.caloni.com.br/como-apagar-o-prompt-do-seu-programa-windows/</link>
  <pubDate>2018-01-23</pubDate>
  
  <guid>http://www.caloni.com.br/como-apagar-o-prompt-do-seu-programa-windows/</guid>
  <description>Geralmente se cria um projeto console/prompt quando há a necessidade de interfacear com o usuário com o uso da tela preta, saída padrão, etc. E no caso do Windows também há a possibilidade de criar um programa Win32 onde não há prompt, pois a função do programa ou é ser invisível ou criar, sabe como é, janelas. Mas nenhum dos dois possibilita ambos ao mesmo tempo. Este snippet permite que você faça isso.</description>
</item>

     
        <item>
  <title>Cmd e o encoding fake</title>
  <link>http://www.caloni.com.br/cmd-e-o-encoding-fake/</link>
  <pubDate>2017-12-26</pubDate>
  
  <guid>http://www.caloni.com.br/cmd-e-o-encoding-fake/</guid>
  <description>Qualquer um que já tenha mexido no prompt de comandos do Windows sabe que ele permite você escolher qual code page utilizar para enviar e receber comandos. O Windows é todo em UTF-16, mas as saídas podem vir de qualquer programa com qualquer encoding. A missão do cmd.exe é usar o encoding escolhido pelo usuário para exibir os caracteres na tela. Vamos supor que nós criemos uma pasta com acentos no nome (pelo Explorer para não ter erro):</description>
</item>

     
        <item>
  <title>Se você não precisa de classe você não precisa de classe</title>
  <link>http://www.caloni.com.br/se-voce-nao-precisa-de-classe-voce-nao-precisa-de-classe/</link>
  <pubDate>2017-12-17</pubDate>
  
  <guid>http://www.caloni.com.br/se-voce-nao-precisa-de-classe-voce-nao-precisa-de-classe/</guid>
  <description>Nos últimos dias me deparei com o seguinte (pseudo-)código:
Dentro de MyClass a seguinte estrutura:
Então eu me pergunto: qual a função da classe em um código desses?
Bjarne Stroustrup desde o começo, em seu livro The C++ Programming Language, sugere que C++ não é uma linguagem unicamente orientada a objetos, mas multi-paradigmas. Hoje, em 2017, ela é uma linguagem genérica e até funcional. Na época poderia ser usada como orientada a objetos, mas também como estruturada e imperativa comum.</description>
</item>

     
        <item>
  <title>C&#43;&#43; Moderno Arranca os Cabelos por Você (std::move e classes simples).</title>
  <link>http://www.caloni.com.br/cpp-arranca-os-cabelos-por-voce/</link>
  <pubDate>2017-09-26</pubDate>
  
  <guid>http://www.caloni.com.br/cpp-arranca-os-cabelos-por-voce/</guid>
  <description>Um dos últimos posts no grupo CCPPBR do Thiago Adams chama mais uma vez a atenção para a complexidade infinita que linguagens como C++ estão preferindo tomar. Esta é a geração que irá sofrer as dores de compatibilidade com o passado mais que todas as outras que virão.
Isso porque mudanças pontuais que vão sendo aplicadas na linguagem e biblioteca, como move semantics, não cabe mais em exemplos de livrinhos de C++ para iniciantes da década de 90:</description>
</item>

     
        <item>
  <title>Ativando Ubuntu No Windows 10</title>
  <link>http://www.caloni.com.br/ativando-ubuntu-no-windows-10/</link>
  <pubDate>2017-08-29</pubDate>
  
  <guid>http://www.caloni.com.br/ativando-ubuntu-no-windows-10/</guid>
  <description>Pensei que o Ubuntu já estivesse na Windows Store disponível para qualquer gamer instalar (não sei por que um gamer faria isso). Mas não. Ainda é necessário fazer os passos de desenvolvedor expert de Windows para ativar esta opção.
Primeiro, vá nas configurações e ative o Developer Mode:
Depois vá em Adicionar/Remover Programas e ative o Windows Subsystem for Linux (Beta):
Reinicie a máquina, abra o prompt de comando, digite bash e enter.</description>
</item>

     
        <item>
  <title>Migrando Imagens Para Imgur</title>
  <link>http://www.caloni.com.br/migrando-imagens-para-imgur/</link>
  <pubDate>2017-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/migrando-imagens-para-imgur/</guid>
  <description>Depois de migrar meus blogues para o Hugo decidi deixar o repositório mais magro migrando as imagens para um serviço de imagens. O imgur me pareceu uma solução simples com uma interface rápida (e uma API Python). Para realizar essa tarefa você vai precisar das ferramentas de sempre: grep, sed, python, vim. E lá vamos nós.
Meu primeiro passo foi realmente limpar a pasta de imagens, eliminando as que não estavam sendo usadas.</description>
</item>

     
        <item>
  <title>Forma Mais Simples De Depurar Processos Antes Do Logon</title>
  <link>http://www.caloni.com.br/forma-mais-simples-de-depurar-processos-antes-do-logon/</link>
  <pubDate>2017-07-27</pubDate>
  
  <guid>http://www.caloni.com.br/forma-mais-simples-de-depurar-processos-antes-do-logon/</guid>
  <description>No post anterior sobre debug eu havia me focado mais na depuração de processos remotos no Visual Studio 2003 de maneira convencional. Aqui eu vou abordar o assunto de uma maneira menos convencional: usando o Visual Studio 2017 mais novo e depurando uma DLL (C++) que é carregada por um serviço antes do logon no Windows 7.
Em primeiro lugar, como vimos anteriormente, a ponta server do depurador é um programa que você executa com alguns parâmetros e ele fica escutando em uma porta.</description>
</item>

     
        <item>
  <title>CppTests</title>
  <link>http://www.caloni.com.br/cpptests/</link>
  <pubDate>2017-07-25</pubDate>
  
  <guid>http://www.caloni.com.br/cpptests/</guid>
  <description>Iniciei um novo projeto no GitHub que tem por objetivo ser minha prancheta de trabalhos para minha palestra no próximo encontro ccpp. Há uma infinitude de coisinhas novas na linguagem C++, fora as adições à biblioteca STL, mas que devem passar despercebidas da maioria dos programadores, que está mais é querendo terminar seus próprio projetos. Enquanto alguns conceitos, sintaxes e métodos não se solidificam, vale a pena dar uma espiada no futuro?</description>
</item>

     
        <item>
  <title>Debugger remoto do Visual Studio</title>
  <link>http://www.caloni.com.br/debugger-remoto-do-visual-studio/</link>
  <pubDate>2017-06-13</pubDate>
  
  <guid>http://www.caloni.com.br/debugger-remoto-do-visual-studio/</guid>
  <description>Então você está quebrando a cabeça para descobrir por que seu código não faz o que deveria fazer? Então você é desses que acha que é melhor ficar imaginando com um bloquinho de papel na mão do que colocar logo a mão na massa e ver exatamente o código passando pelo processador? Talvez você mude de ideia ao ver como é ridiculamente fácil depurar código em uma máquina remota, seja uma VM ou a máquina do cliente.</description>
</item>

     
        <item>
  <title>Como acessar submódulos no git inacessíveis?</title>
  <link>http://www.caloni.com.br/submodules-locais-no-git/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/submodules-locais-no-git/</guid>
  <description>Quando projetos remotos usam submodules é possível que algum deles seja acessível apenas através de chaves criptográficas. Isso exige que os sub-projetos necessários para fazer funcionar seu projeto podem estar fora do seu alcance e acesso, o que irá gerar durante seus comandos pull recursivos erros de ssh (publickey access).
A solução é ler a documentação e descobrir que é possível editar o arquivo .git/config para mudar a url de um submódulo inacessível pela forma do .</description>
</item>

     
        <item>
  <title>SystemRescueCD: um CD cheio de ferramentas Linux para desenvolvedores e suporte</title>
  <link>http://www.caloni.com.br/systemrescuecd-um-cd-cheio-de-ferramentas/</link>
  <pubDate>2017-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/systemrescuecd-um-cd-cheio-de-ferramentas/</guid>
  <description>Há diversas distros Linux capazes de bootar via CD e com uma penca de ferramentas. Conheci há alguns anos uma delas: a SystemRescueCd: um disco de recuperação de HDs com diversas ferramentas embutidas. Dentro dele pode ser inserido outras ferramentas que achar interessante, e o mais importante, desenvolver através do próprio CD suas ferramentas.
A modificação do CD pode ser feita bootando com ele mesmo, seguinto o tutorial da própria SystemRescueCd.</description>
</item>

     
        <item>
  <title>Forma simples de baixar atualizações remotamente de um cliente para um servidor</title>
  <link>http://www.caloni.com.br/forma-simples-de-baixar-atualizacoes-remotamente-de-um-cliente-para-um-servidor/</link>
  <pubDate>2017-03-23</pubDate>
  
  <guid>http://www.caloni.com.br/forma-simples-de-baixar-atualizacoes-remotamente-de-um-cliente-para-um-servidor/</guid>
  <description>A forma mais simples e rápida para subir um servidor de arquivos é usar o file server embutido do python:
Para que não seja necessário instalar o Python no servidor é possível transformar essa chamada em um executável, com todas suas dependências embutidas:
Esse script pode ser compilado pela ferramenta py2exe, instalável pelo próprio Python. É necessário criar um arquivo setup.py na mesma pasta do script e através desse script gerar uma pasta dist com o script &amp;ldquo;compilado&amp;rdquo; e pronto para ser executado.</description>
</item>

     
        <item>
  <title>qt5.natvis</title>
  <link>http://www.caloni.com.br/qt5-natvis/</link>
  <pubDate>2017-03-15</pubDate>
  
  <guid>http://www.caloni.com.br/qt5-natvis/</guid>
  <description>A estratégia que utilizei em meu último artigo sobre Qt para expandir o tipo QString no depurador não existe mais no VS2017 RC. O arquivo autoexp.dat foi extirpado e em seu lugar foi deixado os já ativos arquivos natvis, que podem ser usados de forma global ou por usuário.
Existe um arquivo pronto circulando pela net chamado qt5.natvis. Alguns funcionam, outros não. As strings estão funcionando no meu depois que eu adaptei este arquivo com as dicas do help do qt.</description>
</item>

     
        <item>
  <title>Entrando na zona com Windows</title>
  <link>http://www.caloni.com.br/entrando-na-zona-com-windows/</link>
  <pubDate>2017-03-14</pubDate>
  
  <guid>http://www.caloni.com.br/entrando-na-zona-com-windows/</guid>
  <description>Update 2019-03-20: Adicionando programa para fazer tela cheia no Windows e retirados detalhes que não uso mais.
Um artigo anterior havia dado umas dicas de como transformar o Vim em uma ferramenta para toda obra, com isso limitando as distrações quando se está em um computador, e com isso facilitando a entrada e a permanência no estado de fluidez de produtividade que conhecemos como &amp;ldquo;flow&amp;rdquo;, ou estar na zona. Agora é a vez do Windows.</description>
</item>

     
        <item>
  <title>Atalhos no terminal do Linux/Unix</title>
  <link>http://www.caloni.com.br/atalhos-no-terminal-do-linux-unix-cygwin/</link>
  <pubDate>2017-02-27</pubDate>
  
  <guid>http://www.caloni.com.br/atalhos-no-terminal-do-linux-unix-cygwin/</guid>
  <description>Há pouca coisa que você pode fazer para manipular a linha de comando que está digitando em um terminal do Windows. Isso faz sentido. O terminal da Microsoft é apenas um resquício do MS-DOS, que foi herdado pelas inúmeras versões do Windows para que desenvolvedores e suporte pudessem executar alguns comandos não disponíveis pelo clique de um mouse. Já no Unix a história é inversa. Durante tantas décadas sendo usado, o sistema Unix, hoje, em sua mais nova reencarnação, Linux, foi acumulando diferentes teclas de atalho para conseguirmos refazer, desfazer e fazer melhor a montagem dos comandos digitados na linha de comando.</description>
</item>

     
        <item>
  <title>O velho problema do project out of date do Visual Studio</title>
  <link>http://www.caloni.com.br/o-velho-problema-do-project-out-of-date-do-visual-studio/</link>
  <pubDate>2017-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/o-velho-problema-do-project-out-of-date-do-visual-studio/</guid>
  <description>Acho que todo mundo já passou por isso. Você compila todo o projeto bonitinho e no final, ao depurar, ele faz aquela velha pergunta: &amp;ldquo;o projeto está desatualizado: deseja compilar novamente?&amp;quot;. Mas como assim? Eu acabei de compilar, não faz nem cinco segundos. Está quentinho, saiu do forno agora.
Quando vem aquela fatídica mensagem do Visual Studio indicando que algo de errado não está certo: &amp;ldquo;This project is out of date.</description>
</item>

     
        <item>
  <title>Visualizando QString no Visual Studio</title>
  <link>http://www.caloni.com.br/visualizando-qstring-no-visual-studio/</link>
  <pubDate>2017-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/visualizando-qstring-no-visual-studio/</guid>
  <description>O Qt não é um framework que pode apenas ser usado no QtCreator. Através de um projeto bem configurado pelo CMake, por exemplo, é possível ter um projeto que pode ser compilado e depurado tanto nas ferramentas do Qt quanto no Visual Studio. No entanto, na hora de depurar algumas coisas são difíceis de fazer. Por exemplo: como olhar o conteúdo de uma QString?
O Visual Studio utiliza um mecanismo que lembra os comandos bizarros que se usa no WinDbg, mexendo com registradores e tal.</description>
</item>

     
        <item>
  <title>Palestra: como criar moedas digitais em casa com C&#43;&#43; (kick-off)</title>
  <link>http://www.caloni.com.br/palestra-como-criar-moedas-digitais-em-casa-com-cpp-kick-off/</link>
  <pubDate>2017-02-19</pubDate>
  
  <guid>http://www.caloni.com.br/palestra-como-criar-moedas-digitais-em-casa-com-cpp-kick-off/</guid>
  <description>Esta palestra tem como objetivo ensinar o que são moedas digitais, como o bitcoin, e cada passo necessário o algoritmo e implementação para torná-la real. Será utilizado C++ como a linguagem-base e o foco está mais na implementação do que na matemática ou no algoritmo. Assim como foi criado o bitcoin, o importante a aprender é como unir diferentes tipos de conhecimento e tecnologia em torno de um objetivo único, simples e prático.</description>
</item>

     
        <item>
  <title>Convertendo Windows de UEFI para MBR</title>
  <link>http://www.caloni.com.br/convertendo-windows-de-uefi-para-mbr/</link>
  <pubDate>2017-02-13</pubDate>
  
  <guid>http://www.caloni.com.br/convertendo-windows-de-uefi-para-mbr/</guid>
  <description>Quando você pesquisa sobre isso no Google o que mais encontra é ferramentas &amp;ldquo;gratuitas&amp;rdquo; que prometem fazer a conversão ou algo do gênero. No entanto, há um procedimento simples em que o próprio Windows pode corrigir os problemas oriundos da conversão do boot UEFI/GPT. Depois, é claro, que você usar uma outra ferramenta esperta open-source =)
Entre as diferentes distros do Linux há uma chamada SystemRescueCD que é cheia dos paranauê para manutenção de micros.</description>
</item>

     
        <item>
  <title>UEFI: dê adeus à MBR</title>
  <link>http://www.caloni.com.br/uefi-de-adeus-a-mbr/</link>
  <pubDate>2017-02-09</pubDate>
  
  <guid>http://www.caloni.com.br/uefi-de-adeus-a-mbr/</guid>
  <description>Após depurar a BIOS e a MBR, eis que surge a UEFI: os GUIDs para SOs instalados no seu HD. Quantas siglas, não é mesmo?
A BIOS (Basic Input/Output System, Sistema Básico de Entrada e Saída) é o sistema-base que se comunica com o hardware diretamente e faz a ponte entre várias interrupções e o sistema operacional (se houver um). Uma das funções iniciais da BIOS era encontrar qual a MBR (Master Boot Record, Registro do Boot Mestre) válida para entregar o controle de um pedaço de código de 512 bytes (um pouco menos) cuja função clássica era procurar em uma tabela de quatro entradas dentro dela mesma qual o SO que está ativo.</description>
</item>

     
        <item>
  <title>Pacotes perdidos do NuGet em projetos C&#43;&#43; no Visual Studio</title>
  <link>http://www.caloni.com.br/pacotes-perdidos-nuget-em-projetos-cpp-no-visual-studio/</link>
  <pubDate>2017-02-08</pubDate>
  
  <guid>http://www.caloni.com.br/pacotes-perdidos-nuget-em-projetos-cpp-no-visual-studio/</guid>
  <description>É muito bom (para quem gosta) usar a IDE e viver feliz sem precisar se preocupar em digitar comandos estranhos no prompt. Porém, essa vida acaba quando ocorre o primeiro erro inexplicável, aquele tipo de erro que não importa onde você olhe, não há nada para olhar. Até você apelar para ferramentas de macho.
Que nem hoje de manhã, quando fui inocentemente baixar uma versão limpa do tiodb e após baixar todos os pacotes do NuGet, o gerenciador de pacotes do Visual Studio (inclusive para C++, agora) acusou a falta do boost, sendo que ele havia acabado de baixá-lo.</description>
</item>

     
        <item>
  <title>Android protobuf, mock configurável</title>
  <link>http://www.caloni.com.br/android-protobuf-mock-configuravel/</link>
  <pubDate>2017-02-06</pubDate>
  
  <guid>http://www.caloni.com.br/android-protobuf-mock-configuravel/</guid>
  <description>A comunicação oferecida pelo Protocol Buffers, uma maneira otimizada de codificar mensagens em alto nível, é uma das formas mais ideais de realizar a ponte entre cliente e servidor quando se fala de aplicativos mobile. A solução já suporta inúmeras linguagens, desde C++ (a linguagem oficial) até Java, passando por Python e .NET. Um mesmo arquivo de definição pode ser usado entre diferentes tipos de tecnologia. Este artigo mostra o caminho das pedras para compilar o protobuf para Android e de quebra mostra como é fácil fazer um mock de servidor local em uma configuração local com o gerenciador de builds do Android.</description>
</item>

     
        <item>
  <title>Um commit por feature</title>
  <link>http://www.caloni.com.br/um-commit-por-feature/</link>
  <pubDate>2017-02-04</pubDate>
  
  <guid>http://www.caloni.com.br/um-commit-por-feature/</guid>
  <description>Imagine que você vai começar a trabalhar em algo novo. Daí você baixa a última versão do branch de dev e começa a codar. Então chega um momento em que o primeiro, segundo, terceiro commits são necessários para manter a ordem em sua cabeça. &amp;ldquo;Fiz isso logo de manhã, testei algo diferente antes do almoço e de tarde fui incrementando a solução final até passar todos os testes.&amp;rdquo; Tudo bonito. Mas como fica na hora de subir essa bagaça pras pessoas verem?</description>
</item>

     
        <item>
  <title>Warning de nível 4</title>
  <link>http://www.caloni.com.br/warning-de-nivel-4/</link>
  <pubDate>2017-01-17</pubDate>
  
  <guid>http://www.caloni.com.br/warning-de-nivel-4/</guid>
  <description>Você já colocou aquele seu projeto favorito em /W4? Por padrão, o Visual Studio cria seus projetos com o nível de warnings e 3, porque o nível 4 é muito, muito chato. No entanto, algumas vezes ele serve para que seu código não fique apenas correto, mas bem documentado e apresentável. Vamos tentar?
OK, este foi o nível 3 do tioserver, o projeto principal do tiodb, uma ferramenta para manter contêineres assináveis na memória e acessíveis via socket.</description>
</item>

     
        <item>
  <title>ReadFile assíncrono pode ser síncrono quando você menos espera</title>
  <link>http://www.caloni.com.br/readfile-assincrono-pode-ser-sincrono-quando-voce-menos-espera/</link>
  <pubDate>2017-01-16</pubDate>
  
  <guid>http://www.caloni.com.br/readfile-assincrono-pode-ser-sincrono-quando-voce-menos-espera/</guid>
  <description>Ano passado tive alguns problemas em um projeto que se comunicava com um dispositivo em firmware pela USB. Estávamos utilizando uma biblioteca open source do GitHub que parecia estar bem testada e mantida. Porém, não exatamente para nossos objetivos.
O problema da lib hidapi era que a comunicação usb era feita de forma assíncrona. Isso no Windows é feito com a mesma função de I/O (ReadFile/WriteFile) só que passando um argumento opcional chamado de overlapped.</description>
</item>

     
        <item>
  <title>Entrando na zona com Vim</title>
  <link>http://www.caloni.com.br/entrando-na-zona-com-vim/</link>
  <pubDate>2017-01-05</pubDate>
  
  <guid>http://www.caloni.com.br/entrando-na-zona-com-vim/</guid>
  <description>Se você é programador é bem provável que já tenha ouvido falar em [Flow] 1 ou [The Zone] 2. Se for leitor assíduo do Hacker News, então, nem se fala. De qualquer forma, uma das maneira mais produtivas do programador programar é entrar na famosa &amp;ldquo;zona&amp;rdquo;. É lá que muito de nós nascemos. Lembra a primeira vez que mexeu em um computador ou afim e ficou tão obcecado que não viu o tempo passar?</description>
</item>

     
        <item>
  <title>Vídeo: Usando clang no Visual Studio</title>
  <link>http://www.caloni.com.br/video-usando-clang-no-visual-studio/</link>
  <pubDate>2016-12-27</pubDate>
  
  <guid>http://www.caloni.com.br/video-usando-clang-no-visual-studio/</guid>
  <description>Com o surgimento da infraestrutura LLVM, que possibilita a união entre diferentes ferramentas que suportam diferentes plataformas para o desenvolvimento de software, e o clang, um font-end para C/C++ que roda não só em UNIXes da vida, como também no Windows, como também no Visual Studio, tem sido uma vantagem para projetos que usam as novas features do C++ moderno, muitas ainda não implementadas no compilador da Microsoft, unir o útil (Visual Studio) ao agradável (C++ modernos via clang).</description>
</item>

     
        <item>
  <title>A Linguagem de Programação C&#43;&#43;: O Início</title>
  <link>http://www.caloni.com.br/a-linguagem-de-programacao-cpp-o-inicio/</link>
  <pubDate>2016-11-29</pubDate>
  
  <guid>http://www.caloni.com.br/a-linguagem-de-programacao-cpp-o-inicio/</guid>
  <description>O livro-base sobre a linguagem C++ e como programar nela tem o nome pouco criativo &amp;ldquo;The C++ Programming Language&amp;rdquo;, e é de Bjarne Stroustrup, o criador da linguagem. Ele começou a desenhar a linguagem em 1979, quando ainda a chamada de &amp;ldquo;C com Classes&amp;rdquo;. Havia um problema a ser resolvido na época em que Stroustrup estava fazendo sua tese de doutorado. Havia linguagens muito boas em abstração como Simula &amp;ndash; como o novo conceito de Orientação a Objetos &amp;ndash; que carecia do mais importante na época: velocidade (só na época?</description>
</item>

     
        <item>
  <title>Quantos handles sua aplicação está abrindo?</title>
  <link>http://www.caloni.com.br/quantos-handles/</link>
  <pubDate>2016-11-29</pubDate>
  
  <guid>http://www.caloni.com.br/quantos-handles/</guid>
  <description>Mesmo que você não programe em C/C++, mas programe para Windows (ex: .NET), sempre há a possibilidade de seu programa estar causando leaks de handles indefinidamente, o que não se traduz em aumento significativo de memória alocada para seu processo, mas é, sim, um problema a ser tratado.
Como isso pode ser causado? Bom, em C/C++ sempre é mais simples de entender esses conceitos. Um código simples que se esquece de fechar o handle usando CloseHandle ou a função equivalente do recurso obtido já seria o suficiente.</description>
</item>

     
        <item>
  <title>Guardando senhas com Vim</title>
  <link>http://www.caloni.com.br/guardando-senhas-com-vim/</link>
  <pubDate>2016-10-05</pubDate>
  
  <guid>http://www.caloni.com.br/guardando-senhas-com-vim/</guid>
  <description>Eu já sabia que havia um sistema de criptografia de arquivos no Vim. Isso pode ser útil para textos secretos, ou para enviar qualquer bobagem para outra pessoa que sabe de uma senha que só vocês conhecem. Porém, o método default de criptografia dele não me animava. O pkzip é usa um algoritmo fraco, e os inúmeros programas que quebram zips encriptados estão aí para demonstrar. Além do mais, o blowfish da versão 7 do Vim tem problemas em gerar seu salt que favorece ataques de força bruta tão baratos quanto um XOR.</description>
</item>

     
        <item>
  <title>Usando GVim com projetos do Visual Studio</title>
  <link>http://www.caloni.com.br/usando-gvim-com-projetos-do-visual-studio/</link>
  <pubDate>2016-09-18</pubDate>
  
  <guid>http://www.caloni.com.br/usando-gvim-com-projetos-do-visual-studio/</guid>
  <description>A vida dos programadores C/C++ Windows &amp;ndash; e que geralmente precisam do Visual Studio &amp;ndash; está um abandono total. A configuração de make dos projetos sempre foi baseada no uso de makefiles, assim como no Unix, e por isso mesmo o uso da ferramenta nmake do SDK do Windows era a maneira padrão de se compilar e ver o resultado de dentro do Vim para projetos Windows. Com o advento do .</description>
</item>

     
        <item>
  <title>unit-menos-menos</title>
  <link>http://www.caloni.com.br/unitmenosmenos/</link>
  <pubDate>2016-09-05</pubDate>
  
  <guid>http://www.caloni.com.br/unitmenosmenos/</guid>
  <description>Fazer o setup inicial de testes unitários em seu projeto C++ pode ser algo enfadonho se você precisa baixar e compilar uma lib do Google ou do Boost. Há uma alternativa mais leve e bem direta, que um dia apareceu nesses CodeProject da vida, mas que hoje está, até onde eu vi, no GitHub.
E como se faz para começar a montar os testes unitários? Bom, suponha que você tenha um projeto qualque que já compila, roda e faz alguma coisa de útil.</description>
</item>

     
        <item>
  <title>Vídeo: Resolvendo problemas em projetos desleixados</title>
  <link>http://www.caloni.com.br/video-resolvendo-problemas-em-projetos-desleixados/</link>
  <pubDate>2016-09-01</pubDate>
  
  <guid>http://www.caloni.com.br/video-resolvendo-problemas-em-projetos-desleixados/</guid>
  <description>Quem nunca teve que mexer em um projeto cheio de bugs de compilação, péssima organização, documentação e nomes de funções, classes e argumentos? Que você acaba de baixar em sua máquina e ele não compila (e você não tem a mínima noção por quê). Que a equipe que trabalha com você ouviu falar do projeto, mas nunca arregaçou as mangas e organizou. Que tal fazer isso agora?
Nesse vídeo eu exploro alguns dos erros mais comuns de projetos desleixados.</description>
</item>

     
        <item>
  <title>DBAccess</title>
  <link>http://www.caloni.com.br/dbaccess/</link>
  <pubDate>2016-08-16</pubDate>
  
  <guid>http://www.caloni.com.br/dbaccess/</guid>
  <description>Bancos de dados são uma dor de cabeça para o desenvolvedor acessar. Quase tão motivation killer que as configurações do .NET. Se for um programador em C++ para Windows, então, desista.
O DBAccess é mais um dos códigos-fonte desenterrados dos meus backups. Esse eu usei já em vários projetos, porque é simples e rápido de usar.
Sua função é abstrair a abertura de um banco de dados, sua execução e sua saída.</description>
</item>

     
        <item>
  <title>Vídeo: Depurando código C&#43;&#43; no Visual Studio</title>
  <link>http://www.caloni.com.br/depurando-codigo-c-no-visual-studio/</link>
  <pubDate>2016-08-12</pubDate>
  
  <guid>http://www.caloni.com.br/depurando-codigo-c-no-visual-studio/</guid>
  <description>Olá de novo. Este é o segundo vídeo da série &amp;ldquo;o que que eu tô fazendo no YouTube?&amp;quot;. Dessa vez abri o Visual Studio para depurar um código de 10 linhas com um bug absurdamente absurdo, mas que pode enganar muita gente. Há quem acredite que esse bug foi proposital, mas não foi. O importante é que ficou muito legal. Vamos ver?
https://www.youtube.com/embed/TpTNMj7ngc
Pra começo de conversa, é importante ressaltar que este é um vídeo introdutório, para quem deseja começar a programar em C++, ou até para quem quer alguma dica de uso da IDE do Visual Studio.</description>
</item>

     
        <item>
  <title>Vídeo: Criando Projeto C&#43;&#43; Console no Visual Studio 2015</title>
  <link>http://www.caloni.com.br/video-criando-projeto-c-console-no-visual-studio-2015/</link>
  <pubDate>2016-08-04</pubDate>
  
  <guid>http://www.caloni.com.br/video-criando-projeto-c-console-no-visual-studio-2015/</guid>
  <description>Esse vídeo é um experimento que estou fazendo para tentar começar a compartilhar conhecimento em vídeo. Para começar, acho que nada mais apropriado que criar um projeto novo no Visual Studio, não? Dúvidas, sugestões, críticas, todas bem-vindas. Compartilhem com aquele amigo que pensa em começar a programar (ainda mais se for em C++).
Essa primeira tentativa saiu um pouco longa &amp;ndash; 10 minutos &amp;ndash; mas era para ser mais sucinto. Me perdi em alguns detalhes da estrutura do projeto, mas o objetivo era entrar um pouco mais a fundo, mesmo, abrindo os arquivos do Visual Studio &amp;ldquo;na mão&amp;rdquo; para ver o que tem dentro, e já dando dicas de como a depuração pode começar já na compilação.</description>
</item>

     
        <item>
  <title>Palestra: Stack Overflow</title>
  <link>http://www.caloni.com.br/palestra-stack-overflow/</link>
  <pubDate>2016-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/palestra-stack-overflow/</guid>
  <description>Há umas semanas (sim, estava enrolado para falar sobre isso) ministrei uma nova palestra lá em Sorocaba. Cheguei no meio de uma greve de ônibus, o que atrasou o evento em uma hora e me deu tempo de sobre para pensar nas desgraças que serão cidades próximas da capital crescendo desordenadamente graças às regulações estatais.
Mas divago.
A ideia da palestra foi do meu amigo Alan Silva (a.k.a. jumpi), e era para a SEMANA DA COMPUTAÇÃO E TECNOLOGIA &amp;ndash; mas nada tem a ver com computação, nem tecnologia, mas com oportunidade de emprego de estagiários para empresas corporativistas da área.</description>
</item>

     
        <item>
  <title>Rank and File</title>
  <link>http://www.caloni.com.br/rank-and-file-code-jam/</link>
  <pubDate>2016-04-16</pubDate>
  
  <guid>http://www.caloni.com.br/rank-and-file-code-jam/</guid>
  <description>Passou o Round 1A do Code Jam, e para variar, fui muito mal, só respondendo a primeira questão. A segunda me fez ficar pensando um tempo desproporcional sobre como encaixar as diferentes linhas e colunas para achar a linha restante.
Basicamente, o problema pede que, dado um quadrado de tamanho N, e 2*N-1 linhas fornecidas (que podem ser linhas ou colunas), imprimir a Nésima linha. A regra das linhas é que ela possui números crescentes.</description>
</item>

     
        <item>
  <title>Testando sistema de postagem</title>
  <link>http://www.caloni.com.br/testando-sistema-de-postagem/</link>
  <pubDate>2016-04-10</pubDate>
  
  <guid>http://www.caloni.com.br/testando-sistema-de-postagem/</guid>
  <description>Bom, depois de criar um script para basicamente apenas escrever o texto dos filmes que assisto e buscar uma imagem agradável para meu finado blogue de Cinema, o próximo passo foi portar esse mesmo método para meus dois outros blogues: o da minha empresa, a BitForge e esse aqui. O processo envolve algo a mais: buscar as imagens usadas (que muitas vezes não é só uma). Porém, nada mais que isso.</description>
</item>

     
        <item>
  <title>Crash no Windows Explorer</title>
  <link>http://www.caloni.com.br/crash-no-windows-explorer/</link>
  <pubDate>2016-03-01</pubDate>
  
  <guid>http://www.caloni.com.br/crash-no-windows-explorer/</guid>
  <description>Quem nunca se deparou com um sistema Windows em que o Explorer travasse ou crashasse de vez em quando? O problema com esse tipo de problema (recursividade&amp;hellip;) é que ele pode ocorrer por infinitos motivos. Tão infinitos quanto os shell extensions, aquelas DLLs irritantes que são carregadas automaticamente por todo processo explorer.exe, e que portanto podem gerar infinitas maneiras de travar seu shell.
Um que estava me incomodando já há algum tempo era um deadlock que acabava em restart do Explorer (isso é automático no Windows 10).</description>
</item>

     
        <item>
  <title>Exportando repositórios antigos do Bazaar para Git</title>
  <link>http://www.caloni.com.br/exportando-repositorios-antigos-do-bazaar-para-git/</link>
  <pubDate>2016-01-27</pubDate>
  
  <guid>http://www.caloni.com.br/exportando-repositorios-antigos-do-bazaar-para-git/</guid>
  <description>Enquanto estudava sobre controle de fontes distribuído, experimentei e usei os projetos Mercurial e Bazaar, precursores desse modelo que funcionavam bem em Windows. Havia o Git, mas por conta da sua evolução assimétrica, o ambiente da Microsoft havia ficado para trás.
Hoje com o Git sendo praticamente o mainstream das conversões do SubVersion, e funcionando razoavelmente bem em ambientes Windows (64 ou 32), sobraram apenas os repositórios do Mercurial e do Bazaar.</description>
</item>

     
        <item>
  <title>Log de chamadas API direto do WinDbg</title>
  <link>http://www.caloni.com.br/log-de-apis-chamadas-direto-do-windbg/</link>
  <pubDate>2016-01-21</pubDate>
  
  <guid>http://www.caloni.com.br/log-de-apis-chamadas-direto-do-windbg/</guid>
  <description>Há muito tempo atrás eu havia falado sobre como a ferramenta logger.exe, do Debugging Tools for Windows, poderia ser usada para gerar um arquivo de log com centenas de APIs detalhadas em sua chamada, como parâmetros de entrada, retorno e tempo. Bom, testando isso hoje, me veio à lembrança o artigo e também a constatação que o logger é muito instável. Tão instável que não consegui logar as APIs que desejava nas inúmeras tentativas que fiz.</description>
</item>

     
        <item>
  <title>Templates em C no lugar de macros</title>
  <link>http://www.caloni.com.br/templates-em-c-no-lugar-de-macros/</link>
  <pubDate>2016-01-14</pubDate>
  
  <guid>http://www.caloni.com.br/templates-em-c-no-lugar-de-macros/</guid>
  <description>A grande vantagem dos templates é manter o tipo de seus argumentos. Infelizmente, eles não existem na linguagem C, mas podem ser usados em construções C feitas com a linguagem C++, como ocorre com quem desenvolve device drivers para Windows.
Imagine, por exemplo, a estrutura LISTENTRY.aspx), que é uma tentativa de generalizar não só o tipo de uma lista ligada, como seu posicionamento:
A lógica por trás de LISTENTRY é que esse membro pode ser inserido em qualquer lugar da estrutura que representará um elemento.</description>
</item>

     
        <item>
  <title>Gabaritos</title>
  <link>http://www.caloni.com.br/gabaritos/</link>
  <pubDate>2016-01-13</pubDate>
  
  <guid>http://www.caloni.com.br/gabaritos/</guid>
  <description>Um template &amp;ndash; ou, como é na tradução da primeira edição de The C++ Programming Language, de Bjarne Stroustrup, aqui no Brasil: gabarito &amp;ndash; é um molde que pode ser usado por diferentes tipos para traduzir o mesmo algoritmo, ou pelo menos a mesma intenção de algoritmo (por pela sobrecarga de operadores é possível que o comportamento de tipos diferentes pode ser diferente).
Em C++, fazer uma função template é muito simples:</description>
</item>

     
        <item>
  <title>Classe, objeto, contexto, método, polimorfismo</title>
  <link>http://www.caloni.com.br/classe-objeto-contexto-metodo-polimorfismo/</link>
  <pubDate>2016-01-12</pubDate>
  
  <guid>http://www.caloni.com.br/classe-objeto-contexto-metodo-polimorfismo/</guid>
  <description>No post anterior implementamos &amp;ldquo;métodos&amp;rdquo; em C usando ponteiros de função dentro de structs que eram passadas como parâmetro. Tudo isso embutido por um compilador que gera o que chamamos de instância de uma classe, ou objeto, em C++. Isso é possível graças ao contexto que é passado para uma função (que no caso de C++ é o operador implícito this, que sempre existe dentro de um método não-estático).
Para objetos não-polimórficos, o C++ não precisa mudar essa tabela de funções que os objetos de uma classe contém.</description>
</item>

     
        <item>
  <title>Classe, objeto, contexto, método</title>
  <link>http://www.caloni.com.br/classe-objeto-contexto-metodo/</link>
  <pubDate>2016-01-11</pubDate>
  
  <guid>http://www.caloni.com.br/classe-objeto-contexto-metodo/</guid>
  <description>No post anterior falamos como a passagem de um endereço de uma struct consegue nos passar o contexto de um &amp;ldquo;objeto&amp;rdquo;, seja em C (manualmente) ou em C++ (automagicamente pelo operador implícito this). Trocamos uma propriedade desse &amp;ldquo;objeto&amp;rdquo; em C, mas ainda não chamamos um método.
Hoje faremos isso.
Isso é relativamente simples quando se conhece ponteiros de função, existentes tanto em C quanto em C++. Ponteiros de função são tipos que contém endereço de uma função com assinatura específica (tipo de retorno e de argumentos).</description>
</item>

     
        <item>
  <title>Classe, objeto, contexto</title>
  <link>http://www.caloni.com.br/classe-objeto-contexto/</link>
  <pubDate>2016-01-10</pubDate>
  
  <guid>http://www.caloni.com.br/classe-objeto-contexto/</guid>
  <description>Para entender conceitos simples em C++, como métodos de uma classe, ajuda muito seguir o raciocínio dos programadores C e como eles lidavam com o tipo de problema que C++ resolve elegantemente implementando um novo compilador com uma nova linguagem. Tomemos, por exemplo, métodos. Um método é uma função chamada dentro de um contexto. Qual o contexto? O objeto. Ou seja, uma instância específica de uma classe, que é um molde para se fazer alguma coisa.</description>
</item>

     
        <item>
  <title>Como ser um hacker</title>
  <link>http://www.caloni.com.br/como-ser-um-hacker/</link>
  <pubDate>2015-11-18</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-hacker/</guid>
  <description>Talvez as pessoas estejam com preguiça de ler. Talvez estejam apenas inundadas por tanta informação que temos hoje. Talvez seja apenas falta de foco pelas interrupções consecutivas de novos &amp;ldquo;espertofones&amp;rdquo; ou nossas redes sociais viciantes, pois oferecem muito a troco de nada.
O fato é: se você precisa perguntar para alguém (no caso, eu) o que é preciso fazer para se tornar um hacker, algo como um guia passo-a-passo, eu vou encarar o desafio numa boa, pensar por alguns dias, semanas e talvez meses, e chegar à conclusão que a pessoa que precisa que alguém lhe ensine está percorrendo o caminho errado.</description>
</item>

     
        <item>
  <title>Indexando símbolos com rapidez</title>
  <link>http://www.caloni.com.br/indexando-simbolos-com-rapidez/</link>
  <pubDate>2015-10-28</pubDate>
  
  <guid>http://www.caloni.com.br/indexando-simbolos-com-rapidez/</guid>
  <description>Trabalhar com inúmeros projetos de diferentes clientes e diferentes binários pode ser uma loucura. Quando o mundo é Windows, algumas medidas precisam ser padronizadas para evitar a perda de informação durante todo o processo de desenvolvimento, testes, deploy e manutenção.
A respeito do deploy e manutenção, um dos principais é manter o código sempre atualizado, limpo e asseado, além de estar dentro de pelo menos um controle de fonte, de preferência distribuído (Mercurial, Git, Bazaar).</description>
</item>

     
        <item>
  <title>É o fonte, idiota!</title>
  <link>http://www.caloni.com.br/e-o-fonte-idiota/</link>
  <pubDate>2015-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/e-o-fonte-idiota/</guid>
  <description>Saiu um artigo recente no The Old New Thing (thanks Strauss pelo tuíte) que fala sobre não misturar runtimes do C de diferentes versões do compilador (especialmente se essas versões estão separadas pelo tempo em nada mais nada menos que dezenove anos!). Concordo. Aliás, a cultura Microsoftiana do uso de binários carece em C/C++ de um fundamento que facilite o reúso e compartilhamento de código exatamente por essa incompatibilidade inerente de uma biblioteca, se não em constante evolução, em constante aprimoramento pontual (como a STL).</description>
</item>

     
        <item>
  <title>O Estranho Caso do PDB Mal-Aformado</title>
  <link>http://www.caloni.com.br/o-estranho-caso-do-pdb-mal-formado/</link>
  <pubDate>2015-08-19</pubDate>
  
  <guid>http://www.caloni.com.br/o-estranho-caso-do-pdb-mal-formado/</guid>
  <description>Era uma vez, há 13 anos atrás, um tal de Visual Studio .NET, que iria trazer a felicidade para nós, meros mortais usuários de programinhas em C com ponteiro pra lá e ponteiro pra cá. Agora a Microsoft traria para o pessoal do &amp;ldquo;baixo nível&amp;rdquo; a mais nova novidade do verão: uma IDE lenta, bugada e&amp;hellip; bonita?
Bem, para os que estavam acostumados com o Visual C++ 6.0, nada foi mais incômodo do que esperar carregar o programa de manhã para conseguir finalmente compilar.</description>
</item>

     
        <item>
  <title>Você sabe o que está usando no seu código?</title>
  <link>http://www.caloni.com.br/voce-sabe-o-que-esta-usando-no-seu-codigo/</link>
  <pubDate>2015-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/voce-sabe-o-que-esta-usando-no-seu-codigo/</guid>
  <description>Quando se mexe com C++ em múltiplos fontes logo vem aquela bagunça do versionamento e do compartilhamento de código. LIBs, DLLs, COMs (de Component Object Model, da Microsoft). É difícil a partir de um binário saber quais os fontes envolvidos em sua construção, a não ser que você os amarre através de um sistema automatizado de build onde todos os binários devem ser obrigatoriamente compilados (e suas dependências, claro).
Porém, há maneiras mais descentralizadas de se trabalhar.</description>
</item>

     
        <item>
  <title>Logs em serviços (e outras coisas)</title>
  <link>http://www.caloni.com.br/logs-em-servicos-e-outras-coisas/</link>
  <pubDate>2015-06-05</pubDate>
  
  <guid>http://www.caloni.com.br/logs-em-servicos-e-outras-coisas/</guid>
  <description>Já uso logs há muito tempo. Me lembro muito bem que quando programava em BASIC o &amp;ldquo;passou por aqui&amp;rdquo; já era útil. Depois de fazer muitas bibliotecas super-flexíveis de escrita em saídas diferentes, níveis configuráveis e uso do mais complexo ao mais banal, cheguei à seguinte conclusão:
Vou tentar defender meu ponto de vista.
Esse artigo do Dr. Dobbs explica de uma maneira bem completa como fazer uma lib de log leve e configurável.</description>
</item>

     
        <item>
  <title>Depurando até o fim do mundo e de volta de novo: source server com GitHub</title>
  <link>http://www.caloni.com.br/depurando-ate-o-fim-do-mundo-e-de-volta-de-novo-source-server-com-github/</link>
  <pubDate>2015-05-26</pubDate>
  
  <guid>http://www.caloni.com.br/depurando-ate-o-fim-do-mundo-e-de-volta-de-novo-source-server-com-github/</guid>
  <description>Semana passada fiquei sabendo que o vídeo da minha palestra &amp;ldquo;Depurando até o fim do mundo&amp;rdquo; do TDC 2014 estava disponível online. Resolvi assistir para ver se aprendia alguma coisa. A despeito do palestrante ser muito ruim, ele disse uma coisa interessante: com o Debugging Tools (WinDbg para os íntimos) seria possível além de indexar os símbolos (PDBs para os íntimos) usando o esquema de Symbol Server que a própria Microsoft adota usar algumas ferramentas embutidas para conseguir obter o fonte através de um símbolo indexado.</description>
</item>

     
        <item>
  <title>Analisando erros pelo filtro do File Monitor</title>
  <link>http://www.caloni.com.br/analisando-erros-pelo-filtro-do-file-mon/</link>
  <pubDate>2015-05-06</pubDate>
  
  <guid>http://www.caloni.com.br/analisando-erros-pelo-filtro-do-file-mon/</guid>
  <description>As ferramentas da SysInternals fazem a gente economizar um tempo considerável na resolução de problemas. Não que elas sejam indispensáveis. Tudo que elas fazem é encurtar o caminho entre a análise de um bug e sua resolução, o que acaba sendo muito se considerarmos que programação é 20% codificação e 80% transpiração. Ela é um atalho para muitas coisas, desde achar uma ordem de includes no header errada durante a compilação ou descobrir que por que um processo morreu durante o login.</description>
</item>

     
        <item>
  <title>Convenção de Chamada</title>
  <link>http://www.caloni.com.br/convencao-de-chamada/</link>
  <pubDate>2015-04-20</pubDate>
  
  <guid>http://www.caloni.com.br/convencao-de-chamada/</guid>
  <description>Pergunta de um leitor:
Resposta do Autor: Por que C é zoado :P
OK, a verdade é que não existem (existiam?) muitas regras de sintaxe a serem respeitadas na linguagem pelo compilador. Antigamente, se não fosse colocado nenhum tipo de retorno era como se ele fosse int por default. Da mesma forma, se não colocar parâmetros vale tudo. É como se fossem os três pontinhos do printf. Afinal, você não ia querer ficar repetindo os parâmetros no .</description>
</item>

     
        <item>
  <title>Guia de alocação (nos clientes)</title>
  <link>http://www.caloni.com.br/guia-alocacao-nos-clientes/</link>
  <pubDate>2015-03-04</pubDate>
  
  <guid>http://www.caloni.com.br/guia-alocacao-nos-clientes/</guid>
  <description>Se você trabalha com T.I. (nem precisa ser programação) e mora em São Paulo (ou qualquer outro lugar com pessoas paranoicas) então talvez em algum momento da sua carreira teve que ficar alocado (como uma memória que contém um vírus) em algum de seus clientes (ou da empresa onde trabalha/ou). Usando seus apetrechos pessoais dentro de uma mochila para zarpar no final do dia sem deixar rastros.
Não é muito elegante deixar seus logins, seu perfil, seus favoritos e histórico no navegador que está usando, além de ser uma falha de segurança, já que trocar a senha de um perfil no Windows é procedimento natural , além da própria segurança do SO deixar a desejar em alguns momentos.</description>
</item>

     
        <item>
  <title>Origem do tipo char</title>
  <link>http://www.caloni.com.br/origem-do-tipo-char/</link>
  <pubDate>2015-01-26</pubDate>
  
  <guid>http://www.caloni.com.br/origem-do-tipo-char/</guid>
  <description>Programadores C e C++, preparem-se para explodir as cabeças!
No princípio&amp;hellip; não, não, não. Antes do princípio, quando C era considerada a terceira letra do alfabeto e o que tínhamos eram linguagens experimentais para todos os lados, dois famigerados srs. dos Laboratórios Bell, K. Thompson e D. Ritchie, criaram uma linguagem chamada B. E B era bom.
O bom de B estava em sua rica expressividade. Sua gramática extremamente simples. Tão simples que o manual da linguagem consistia de apenas 30 páginas.</description>
</item>

     
        <item>
  <title>Por que o Visual Studio gera executáveis mutantes</title>
  <link>http://www.caloni.com.br/por-que-o-visual-studio-gera-executaveis-mutantes/</link>
  <pubDate>2015-01-11</pubDate>
  
  <guid>http://www.caloni.com.br/por-que-o-visual-studio-gera-executaveis-mutantes/</guid>
  <description>Esse é um post antigo que encontrei no meio dos meus emails de 2006, mas que contém uma boa dica para quem já entendeu o passo-a-passo da compilação, mas ainda tem sérios problemas quando os projetos ficam gigantes.
 Essa é a segunda vez que encontro esse mesmo problema. Como acredito que outras almas podem estar sofrendo do mesmo mal, coloco aqui uma breve descrição de como o VC8 faz para gerar um executável que, mesmo não dependendo das DLLs de runtime, não são executados em sistemas que suportam a interpretação do &amp;ldquo;.</description>
</item>

     
        <item>
  <title>Entendendo a Compilação</title>
  <link>http://www.caloni.com.br/entendendo-a-compilacao/</link>
  <pubDate>2015-01-04</pubDate>
  
  <guid>http://www.caloni.com.br/entendendo-a-compilacao/</guid>
  <description>Fiz alguns slides a pedido dos organizadores do TDC 2014, já que a palestra que ministrei com esse tema foi para ajudar meu amigo-sócio Rodrigo Strauss que não havia preparado nenhum slide a respeito.Felizmente eu já havia explicado alguns conceitos-chave para quem programa em C/C++ e precisa &amp;ndash; eu disse: PRECISA &amp;ndash; conhecer todo o passo-a-passo que leva o seu código-fonte a gerar um executável com código de máquina pronto para rodar.</description>
</item>

     
        <item>
  <title>Houaiss Para *</title>
  <link>http://www.caloni.com.br/houaiss-para/</link>
  <pubDate>2014-10-25</pubDate>
  
  <guid>http://www.caloni.com.br/houaiss-para/</guid>
  <description>O projeto Houaiss2Babylon, iniciado há mais de 6 anos, já devia estar ultrapassado. Porém, cada vez mais pessoas compartilham seus usos e desusos do que foi um dia uma base de dados ofuscada e presa a apenas uma interface Windows. Agora, além de já ter sido convertido para Kindle, em Python e agora através do nodejs para o MySql!
O jornalista e programador Arthur da Paz desenvolveu esta última novidade no programa e gentilmente compartilhou conosco direto no repositório original do HouaissParaBabylon, colaborando felizmente para que esse nome perdesse um pouco mais do sentido (Babylon já está meio ultrapassado, não?</description>
</item>

     
        <item>
  <title>Shareando Ponteiros</title>
  <link>http://www.caloni.com.br/shareando-ponteiros/</link>
  <pubDate>2014-09-03</pubDate>
  
  <guid>http://www.caloni.com.br/shareando-ponteiros/</guid>
  <description>Apesar de já ter palestrado algumas vezes sobre Boost e STL, acho que eu nunca escrevi muito sobre esses assuntos no blogue. Acho que o tamanho dessas bibliotecas assusta um pouco. Mas temos que começar de algum lugar, certo? E já que é pra começar, eu gostaria muito de saber de você, programador miserável, que passou poucas e boas nesses 10 anos de padrão 98 brincando com templates quando eles ainda estavam em beta: se fosse para melhorar um aspecto da sua vida de código, qual seria?</description>
</item>

     
        <item>
  <title>O novo &#39;como não dar step into&#39; do Visual Studio 2012/13</title>
  <link>http://www.caloni.com.br/o-novo-como-nao-dar-step-into-do-visual-studio-201213/</link>
  <pubDate>2014-08-01</pubDate>
  
  <guid>http://www.caloni.com.br/o-novo-como-nao-dar-step-into-do-visual-studio-201213/</guid>
  <description>Toda vez que instalo um Visual Studio novo e começo a depurar sempre surge a necessidade de fazê-lo calar a boca nos step intos da STL, Boost, ATL e coisas que sei que não vai dar pau. (Obviamente, quando dá pau, preciso ir no disassembly e cutucar a STL para ela me entregar qual o problema com o meu contêiner.)
Nas edições antigas da IDE (até o 2010) existia uma configuração no registro para isso.</description>
</item>

     
        <item>
  <title>Integrando BitBucket/GitHub com Trello</title>
  <link>http://www.caloni.com.br/integrando-bitbucketgithub-com-trello/</link>
  <pubDate>2014-07-22</pubDate>
  
  <guid>http://www.caloni.com.br/integrando-bitbucketgithub-com-trello/</guid>
  <description>Eu nem acredito que estou escrevendo sobre desenvolvimento web, mas como foi algo que me fez dedicar algumas horas do meu fim-de-semana, e não encontrei facilmente uma solução já feita, acredito que pode ser útil para mais alguém que usa Trello e GitHub (ou BitBucket).
Mas o que é Trello? Basicamente é um TodoList feito da maneira mais inteligente possível: uma lista de listas de listas! Os espaços, ou desktops, onde você organiza suas tarefas são chamados de Boards.</description>
</item>

     
        <item>
  <title>Se iterando com os pseudo-ponteiros: uma breve introdução</title>
  <link>http://www.caloni.com.br/se-iterando-com-os-pseudo-ponteiros-uma-breve-introducao/</link>
  <pubDate>2014-06-24</pubDate>
  
  <guid>http://www.caloni.com.br/se-iterando-com-os-pseudo-ponteiros-uma-breve-introducao/</guid>
  <description>Como já vimos algumas vezes, a STL não prima por interfaces intuitivas, preferindo abstrações que criem um leque de ferramentas genéricas para tratamento uniformizado de coleções de dados através de algoritmos. O problema disso é que novos programadores da linguagem terão que aprender uma maneira nova de lidar com problemas baseada na percepção dos criadores do padrão na época em que foi lançado de como seria a evolução da ciência da computação nos próximos anos.</description>
</item>

     
        <item>
  <title>Dando cabo do WinDbg</title>
  <link>http://www.caloni.com.br/dando-cabo-do-windbg/</link>
  <pubDate>2014-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/dando-cabo-do-windbg/</guid>
  <description>Na semana passada falei sobre a ideia de comentar algumas mudanças entre o Windows XP e o novo mundo Vista/7/8/ que fizeram com que adaptássemos algum código que obviamente não funcionaria mais. Falamos sobre a famigerada GINA (ou famiGINADA), e agora apenas vou comentar brevemente sobre o sistema de boot, que também mudou.
Na verdade, pouca coisa mudou, mas foi o suficiente para dar problemas na hora de usar o WinDbg.</description>
</item>

     
        <item>
  <title>Eles querem que a GINA vá embora: três posts sobre evolução Windows</title>
  <link>http://www.caloni.com.br/eles-querem-que-a-gina-va-embora-tres-posts-sobre-evolucao-windows/</link>
  <pubDate>2014-06-11</pubDate>
  
  <guid>http://www.caloni.com.br/eles-querem-que-a-gina-va-embora-tres-posts-sobre-evolucao-windows/</guid>
  <description>Fui convidado pela Fernanda Saraiva do programa de MVPs da Microsoft Brasil a falar sobre alguma história a respeito da evolução do Windows e como isso impactou minha experiência profissional. Pesquisando em meu próprio blogue fui capaz de lembrar não apenas de uma, mas de três mudanças técnicas que fizeram com que eu e minha &amp;ldquo;equipe&amp;rdquo; da época (geralmente mais alguém, no máximo) matássemos alguns neurônios tentando descobrir novas maneiras do sistema fazer o que já fazia no Windows XP.</description>
</item>

     
        <item>
  <title>SS</title>
  <link>http://www.caloni.com.br/ss/</link>
  <pubDate>2014-06-03</pubDate>
  
  <guid>http://www.caloni.com.br/ss/</guid>
  <description>Uma das coisas mais cretinas e difíceis para os iniciantes em C++ é conseguir formatar strings de maneira fácil, rápida e indolor. Infelizmente, a biblioteca de printf da linguagem C está fechada para reforma, pois ela é extremamente error-prone e não-intuitiva. Porém, se a printf é não-intuitiva, o que dizer &amp;lt; &amp;lt; daqueles &amp;laquo; sinais &amp;laquo; de &amp;laquo; flechinhas apontando para cout? Bem melhor, não?
A resposta é, pra variar, depende.</description>
</item>

     
        <item>
  <title>Desmontando o Aulete Digital</title>
  <link>http://www.caloni.com.br/desmontando-o-aulete-digital/</link>
  <pubDate>2014-05-27</pubDate>
  
  <guid>http://www.caloni.com.br/desmontando-o-aulete-digital/</guid>
  <description>Este post não estará mais disponível devido ao mau uso de pessoas que se aproveitaram das minhas explicações didáticas a respeito do funcionamento da versão Desktop do dicionário e, agindo de má-fé, começaram a baixar a base de dados indiscriminadamente, fazendo com que o serviço que é disponibilizado gratuitamente aos usuários tivesse que ser desligado. É uma lástima que isso tenha ocorrido, e peço desculpas às pessoas que prejudiquei direta ou indiretamente.</description>
</item>

     
        <item>
  <title>Estruturas VS Classes: fight!</title>
  <link>http://www.caloni.com.br/estruturas-vs-classes-fight/</link>
  <pubDate>2014-05-20</pubDate>
  
  <guid>http://www.caloni.com.br/estruturas-vs-classes-fight/</guid>
  <description>Uma dúvida besta e importante ao mesmo tempo que muitos iniciantes em C++ possuem é saber qual a diferença entre um objeto declarado como class e um objeto declarado como struct. A causa dessa dúvida é uma linguagem que se derivou de outra (C) que não possuía classes, e portanto criou a palavra-chave class para &amp;ldquo;ficar bonito&amp;rdquo;, pois, na prática, não muda muita coisa. Tomemos como exemplo o código mais simples de todos:</description>
</item>

     
        <item>
  <title>50 Anos de BASIC</title>
  <link>http://www.caloni.com.br/50-anos-de-basic/</link>
  <pubDate>2014-05-13</pubDate>
  
  <guid>http://www.caloni.com.br/50-anos-de-basic/</guid>
  <description>Minha primeira linguagem de programação foi o BASIC. Aprendi durante minhas frequentes visitas à biblioteca lendo livros dos anos 80. Na verdade, eu não me lembro muito bem por que diabos resolvi aprender a programar, já que eu estava mais interessado em entender como um computador funciona. Por que? Não sei bem ao certo, parece que já nasci com um chip embutido que foi ativado quando comecei a tender muito para o lado de humanas ao iniciar a faculdade de Letras&amp;hellip; um chip salvador!</description>
</item>

     
        <item>
  <title>Poker Face</title>
  <link>http://www.caloni.com.br/poker-face/</link>
  <pubDate>2014-05-06</pubDate>
  
  <guid>http://www.caloni.com.br/poker-face/</guid>
  <description>O segundo round da segunda fase do Code Jam passou nesse sábado. Disléxico que sou, consegui fazer apenas 8 pontos ¿ como todo mundo ¿ no teste small do problema B, que envolvia apenas dois loops aninhados (a versão large fica para outro post). Na verdade, estou aqui para expressar minha gratidão ao campeonato por ter aprendido mais uma bela lição vendo o código do primeiro colocado do primeiro round, vulgo Kaizero, um coreano que deu uma solução simples, rápida e prática para um problema de probabilidade tão error-prone que até os juízes do Google deram uma lambuja de alguns testes errados (sem contar que houve apenas a categoria small), e me fez pensar em quantas vezes pensamos em demasiado tentando encontrar a solução perfeita para algo que simplesmente&amp;hellip; não precisa.</description>
</item>

     
        <item>
  <title>Que geleia de mocotó</title>
  <link>http://www.caloni.com.br/que-geleia-de-mocoto/</link>
  <pubDate>2014-04-29</pubDate>
  
  <guid>http://www.caloni.com.br/que-geleia-de-mocoto/</guid>
  <description>A primeira bateria de problemas da segunda fase do Code Jam me mostrou o porquê do seu nome: meu cérebro ficou feito geleia (ha ha ha). Não consegui resolver nenhum problema a tempo, mas não culpo o C++, que passei a usar para essa fase. É burrice aliada a pressão. Duas horas e meia para entender um problema é o tipo de coisa que me deixa pensando mais no tempo do que no problema.</description>
</item>

     
        <item>
  <title>2048 motivos para não programar</title>
  <link>http://www.caloni.com.br/2048-motivos-para-nao-programar/</link>
  <pubDate>2014-04-24</pubDate>
  
  <guid>http://www.caloni.com.br/2048-motivos-para-nao-programar/</guid>
  <description>Pronto, posso programar em paz. O jogo 2048 é uma lástima para todos os trabalhadores intelectuais que dependem de suas mentes para produzir algo que preste. Ele gerou mais posts no Hacker News do que a moda dos bitcoins (talvez não) e mais projetos no GitHub do que a busca para a cura do câncer (talvez não). (Obviamente que este post vai gerar mais um commit Python no repositório de artigos.</description>
</item>

     
        <item>
  <title>Geleia de Código</title>
  <link>http://www.caloni.com.br/geleia-de-codigo/</link>
  <pubDate>2014-04-15</pubDate>
  
  <guid>http://www.caloni.com.br/geleia-de-codigo/</guid>
  <description>Não costumo participar de campeonatos de programação por alguns motivos vagos: é perda de tempo (não ganho nada com isso), sou um péssimo programador (ou pasteleiro), dá preguiça (esse é o mais válido) e por aí vai o mimimi. Dessa forma, sempre passei ileso de eventos como o atual Google Code Jam, que pretende levar a categoria de código ofuscado para um novo patamar.
No entanto, esse ano apareceram dois motivos que me levaram a gastar cinco minutos de paciência com as historinhas bestas da equipe do Google.</description>
</item>

     
        <item>
  <title>Lambda: o Retorno!</title>
  <link>http://www.caloni.com.br/lambda-o-retorno/</link>
  <pubDate>2014-04-08</pubDate>
  
  <guid>http://www.caloni.com.br/lambda-o-retorno/</guid>
  <description>Na última vez que foi abordado o tema &amp;ldquo;lambda na ferida&amp;rdquo; falamos brevemente sobre como C++ agora permite criar funções dentro de funções. Hoje vamos apenas falar que aquela construção bizarra que criamos fica ainda mais bizarra se precisarmos retornar alguma coisa dessa função ou usá-la mais de uma vez.
O padrão do lambda é supor que sua função embutida e enlatada não precisa retornar nada, o que torna a sintaxe mais simples: é um void AlgumaCoisa(argumentos).</description>
</item>

     
        <item>
  <title>A moda agora é levar lambda na função</title>
  <link>http://www.caloni.com.br/a-moda-agora-e-levar-lambda-na-funcao/</link>
  <pubDate>2014-03-28</pubDate>
  
  <guid>http://www.caloni.com.br/a-moda-agora-e-levar-lambda-na-funcao/</guid>
  <description>A nova moda de programar C++ nos últimos anos com certeza é usar lambda. Mas, afinal, o que é lambda? Bom, pra começar, é um nome muito feio.
O que esse nome quer dizer basicamente é que agora é possível criar função dentro de função. Não só isso, mas passar funções inteiras, com protótipo, corpo e retorno, como parâmetro de função.
Isso significa que finalmente os algoritmo da STL vão ser úteis e não um &amp;ldquo;pain in the ass&amp;rdquo;.</description>
</item>

     
        <item>
  <title>Houaiss para Babylon em Python!</title>
  <link>http://www.caloni.com.br/houaiss-para-babylon-em-python/</link>
  <pubDate>2014-02-27</pubDate>
  
  <guid>http://www.caloni.com.br/houaiss-para-babylon-em-python/</guid>
  <description>O Fabio Montefuscolo expandiu mais ainda o acesso do conversor Houaiss para Babylon implementando uma versão em Python, uma linguagem que estou aprendendo a adorar. Tudo é mais simples, rápido e direto em Python, e o código que ele escreveu utiliza todo esse potencial:</description>
</item>

     
        <item>
  <title>Real Programmers Don&#39;t Use Java</title>
  <link>http://www.caloni.com.br/real-programmers-dont-use-java/</link>
  <pubDate>2014-02-20</pubDate>
  
  <guid>http://www.caloni.com.br/real-programmers-dont-use-java/</guid>
  <description>When I was a newbie (and a wanna-be) I enjoyed reading &amp;ldquo;Real Programmers Don&amp;rsquo;t Use Pascal&amp;rdquo;, a satiric text that influenced and encouraged me into the path of &amp;ldquo;C/C++ enlightenment&amp;rdquo;, most even than K&amp;amp;R&amp;rsquo;s book. Since then I thought that being a &amp;ldquo;Real Programmer&amp;rdquo; was something close to everything one needs to know to get (hard) things done (quickly). Being a &amp;ldquo;Quiche Eater&amp;rdquo; was, in couterpart, comparable to nothing. Real Programmers solve real problems!</description>
</item>

     
        <item>
  <title>removeif até remove, só que diferente</title>
  <link>http://www.caloni.com.br/remove_if-ate-remove-so-que-diferente/</link>
  <pubDate>2014-01-21</pubDate>
  
  <guid>http://www.caloni.com.br/remove_if-ate-remove-so-que-diferente/</guid>
  <description>A surpresa de hoje foi descobrir (vejam só) que o removeif, como todo algoritmo da STL, deve ser olhado de perto antes de usado. Nesse caso em específico porque, apesar do nome, a função NÃO remove elementos, mas os sobrescreve.
Imagine uma função que usa removeif para remover todas as idades de potenciais lolitas:
Ou até sua contraparte usando um array C:
Um uso trivial pode não cuspir um resultado trivial, ou seja, os elementos não serão removidos como se espera:</description>
</item>

     
        <item>
  <title>BovespaBacktesting</title>
  <link>http://www.caloni.com.br/bovespabacktesting/</link>
  <pubDate>2014-01-08</pubDate>
  
  <guid>http://www.caloni.com.br/bovespabacktesting/</guid>
  <description>Eu não sou apenas um programador: sou um especulador. Ou, para quem ficou com medo, um investidor. Ficou bonito, agora? Trocando em miúdos, isso quer dizer que muitas vezes aposto na bolsa de valores, aquela onde as pessoas ganham e perdem dinheiro loucamente. Porém, assim como faço com minha carreira de desenvolvedor, não deixo de estudar e aprimorar minhas habilidades. Tirando alguns anos de estudo com livros de finanças, economia e contabilidade, foi com base nisso que eu fiz uma série de scripts que realiza operações de backtesting nos papéis da Bovespa.</description>
</item>

     
        <item>
  <title>Uma nova linguagem</title>
  <link>http://www.caloni.com.br/uma-nova-linguagem/</link>
  <pubDate>2013-12-04</pubDate>
  
  <guid>http://www.caloni.com.br/uma-nova-linguagem/</guid>
  <description>Tenho que me atualizar. Faz um tempo (anos) em que deixei de lado esse mundo &amp;ldquo;frescurento&amp;rdquo; de C++2030 e me foquei única e exclusivamente em resolver problemas da melhor forma possível com o que a linguagem já tinha a oferecer em uma implementação estável de compilador e bibliotecas.
Agora o mundo está mudando. Para quem é do Universo Windows/Microsoft, a empresa do Uncle Bill vem liberando algumas versões interessantes do seu compilador (VS2012, 2013 e agora o CTP), cada vez mais próxima de um C++11/14 100% compliance.</description>
</item>

     
        <item>
  <title>Ponto Flutuante Afundando</title>
  <link>http://www.caloni.com.br/ponto-flutuante-afundando/</link>
  <pubDate>2013-11-07</pubDate>
  
  <guid>http://www.caloni.com.br/ponto-flutuante-afundando/</guid>
  <description>Quando armazenamos valores monetários em doubles seus cálculos conseguem manter a precisão e na maioria das vezes o ajuste de precisão funciona. Porém, encontrei alguns casos onde a subtração de dois valores fazia &amp;ldquo;perder&amp;rdquo; um centavo (ou comparações exatas) justamente pela limitação da precisão do ponto flutuante. Nesse exemplo os valores são 2.358,93 - 1.386,93, que em uma conta de padaria (mas correta) dá 972,00 (até a Calc do Windows e o Excel funcionam), mas pelo Visual Studio 2010 chega perto, mas erra o alvo:</description>
</item>

     
        <item>
  <title>Depuração na nuvem com o novo Visual Studio</title>
  <link>http://www.caloni.com.br/depuracao-na-nuvem/</link>
  <pubDate>2013-04-01</pubDate>
  
  <guid>http://www.caloni.com.br/depuracao-na-nuvem/</guid>
  <description>Uma das novidades do futuro Visual Studio pouco comentada ainda em fóruns por seu caráter sigiloso e ainda em testes (mas que pode facilmente ser observada pela engenharia reversa dos binários do Visual C++) é a possibilidade de depurar trechos de código &amp;ldquo;na nuvem&amp;rdquo;, ou seja, dentro dos gigantescos servidores de clusters de serviços de escalabilidade da Amazon, do Google e, claro, da Microsoft.
Já é conhecido que será possível inserir comentários no código-fonte com o formato @nickname e incluir na listagem de bugs o estilo das #hashtags para que programadores vinculados à sua rede social possam enxergar referências a outros programadores e verificar o Developer TrendTopics, como um #blame-joel-on-software.</description>
</item>

     
        <item>
  <title>eXtreme Go Horse</title>
  <link>http://www.caloni.com.br/extreme-go-horse/</link>
  <pubDate>2012-09-27</pubDate>
  
  <guid>http://www.caloni.com.br/extreme-go-horse/</guid>
  <description>O Go Horse Power (GHP) foi criado por um blogue hoje extinto. As premissas dessa nova metodologia de desenvolvimento era que o projeto fosse feito da maneira mais rápida possível.
Contudo, eles não contavam com a versão turbinada do desleixo humano.
A eXtreme Go Horse (XGP) é o suprassumo das metodologias do mercado brasileiro de desenvolvimento. Quem nunca trabalhou em uma empresa gerida por essas regras? (Bom, pelo menos XGH pelo jeito tem até controle de fonte, algo que era até meio raro uns anos atrás):</description>
</item>

     
        <item>
  <title>Minha palestra do TDC 2012</title>
  <link>http://www.caloni.com.br/minha-palestra-do-tdc-2012/</link>
  <pubDate>2012-07-21</pubDate>
  
  <guid>http://www.caloni.com.br/minha-palestra-do-tdc-2012/</guid>
  <description>Duas semanas atrás rolou a trilha C++ do TDC 2012, que contou com além da minha presença com a dos já conhecidos Fernando Roberto (DriverEntry), Rodrigo Strauss (1Bit), etc. Uma novidade: meu colega e programador .nerd Gabriel Guilherme também participou em uma palestra sobre um assunto que acredito que deveria ser mais promovido: interop. Afinal de contas, o poder de C++ não seria nada se não houvesse motivos práticos para usá-lo.</description>
</item>

     
        <item>
  <title>GetTickCount não é um gerador de IDs únicos</title>
  <link>http://www.caloni.com.br/gettickcount-nao-e-um-gerador-de-ids-unicos/</link>
  <pubDate>2012-06-25</pubDate>
  
  <guid>http://www.caloni.com.br/gettickcount-nao-e-um-gerador-de-ids-unicos/</guid>
  <description>Muitas vezes uma solução intuitiva não é exatamente o que esperamos que seja quando o código está rodando. Gerar IDs únicos, por exemplo. Se você analisar por 5 minutos pode chegar à conclusão que um simples GetTickCount, que tem resolução de clock boa e que se repete apenas depois de 50 dias pode ser um ótimo facilitador para gerar IDs exclusivos durante o dia.
Porém, nada como código para provar que estamos errados:</description>
</item>

     
        <item>
  <title>Novos atalhos aprendidos no Vim</title>
  <link>http://www.caloni.com.br/novos-atalhos-aprendidos-no-vim/</link>
  <pubDate>2012-06-09</pubDate>
  
  <guid>http://www.caloni.com.br/novos-atalhos-aprendidos-no-vim/</guid>
  <description>Sempre é bom reler as referências e tentar melhorar o que já está bom. No momento minha inspiração é o excelente Vim: From Essentials to Mastery, uma coleção de slides bem-humorada que a cada releitura fornece dicas importantes para aprimorar o dia-a-dia com um dos editores mais poderosos do planeta.
A lista abaixo é pessoal e, como disse Bram Moolenar, &amp;ldquo;You should not try to learn every command an editor offers.</description>
</item>

     
        <item>
  <title>Meus repositórios no GitHub</title>
  <link>http://www.caloni.com.br/meus-repositorios-no-github/</link>
  <pubDate>2012-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/meus-repositorios-no-github/</guid>
  <description>Depois de vacilar por alguns meses, incentivado pelo meu amigo Chico Pimenta, resolvi experimentar o tal do GitHub, e consequentemente o sistema de controle de fontes distribuído Git, que antes era meio exclusivo do Linux (continua meio sendo, mas com suporte um pouco melhor para Windows).
Com isso, dei uma pequena lida no livro de introdução e comecei a migrar meus fontes perdidos num canto do HD. O que notei de vantagem com relação a outros DRCSs foi que é muito fácil e rápido criar branches e que a comunicação remota e os commits são feitos de uma maneira mais organizada e estruturada, além da própria estrutura interna do repositório ser muito simples de entender: um bando de arquivos compactados cujo nome é o hash do que ele contém.</description>
</item>

     
        <item>
  <title>Problemas comuns no WinDbg e suas soluções</title>
  <link>http://www.caloni.com.br/problemas-comuns-no-windbg-e-suas-solucoes/</link>
  <pubDate>2012-05-27</pubDate>
  
  <guid>http://www.caloni.com.br/problemas-comuns-no-windbg-e-suas-solucoes/</guid>
  <description>Depois de uma agradável manhã e tarde acompanhando o curso de desenvolvimento de drivers do meu amigo Ferdinando voltei para a casa para brincar um pouco mais com o mundo kernel e voltar a encontrar problemas com o WinDbg &amp;amp; Cia que há mais ou menos 1 ano atrás não tinha.
Pesquisando por um problema específico envolvendo PDBs reencontrei o blogue do Ken Johnson, MVP Microsoft e analista por profissão e diversão, é conhecido por suas excelentes contribuições no mundo da depuração de sistema (notadamente WinDbg).</description>
</item>

     
        <item>
  <title>Sobrecarga de função às avessas</title>
  <link>http://www.caloni.com.br/sobrecarga-de-funcao-as-avessas/</link>
  <pubDate>2012-05-20</pubDate>
  
  <guid>http://www.caloni.com.br/sobrecarga-de-funcao-as-avessas/</guid>
  <description>Navegando pelo Archive.org, que possibilita viajar no tempo e encontrar coisas enterradas que seria melhor deixar por lá, consegui encontrar um post que se perdeu na dobra espaço-temporal entre o old-fashioned Caloni.com.br (com direito à velha joaninha psicodélica, desenho do meu amigo t@z) e o finado CThings. No final, consegui matar a marmota, chegar a 80 milhas por hora e voltar para o presente. Enjoy it!
 Alguém já se perguntou se é possível usar sobrecarga de função quando a diferença não está nos parâmetros recebidos, mas no tipo de retorno?</description>
</item>

     
        <item>
  <title>Consumo abusivo de memória</title>
  <link>http://www.caloni.com.br/consumo-abusivo-de-memoria/</link>
  <pubDate>2012-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/consumo-abusivo-de-memoria/</guid>
  <description>Era um belo dia em um ambiente de processamento fictício de filas fictícias e threads fictícias. Eis um belo código com filas, threads e processamentos feitos em stop-motion:
Se olharmos de perto o processamento e a memória consumida por esse processo, veremos que no início existe um boom de ambos, mas após um momento de pico, o processamento praticamente pára, mas a memória se mantém:
Depois de pesquisar por meus tweets favoritos, fica fácil ter a receita para verificarmos isso usando nosso depurador favorito: WinDbg!</description>
</item>

     
        <item>
  <title>Coletando dumps automaticamente</title>
  <link>http://www.caloni.com.br/coletando-dumps-automaticamente/</link>
  <pubDate>2012-05-17</pubDate>
  
  <guid>http://www.caloni.com.br/coletando-dumps-automaticamente/</guid>
  <description>Value Description Type Default value     DumpFolder [1] REGEXPANDSZ %LOCALAPPDATA%\CrashDumps   DumpCount [2] REGDWORD 10   DumpType [3] REGDWORD 1   CustomDumpFlags [4] REGDWORD [5]    Chave: HKEYLOCALMACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps.
 [1] The path where the dump files are to be stored. If you do not use the default path, then make sure that the folder contains ACLs that allow the crashing process to write data to the folder.</description>
</item>

     
        <item>
  <title>Header Inútil</title>
  <link>http://www.caloni.com.br/header-inutil/</link>
  <pubDate>2012-03-27</pubDate>
  
  <guid>http://www.caloni.com.br/header-inutil/</guid>
  <description>O Visual Studio é uma ótima ferramenta para depurar rapidamente programas sendo desenvolvidos e para o resto usamos Vim. No entanto, a versão 2010 do ambiente (ainda não testei a 2011 beta) possui um pequeno deslize com sua árvore de dependências que não chega a prejudica o desenvolvedor, mas o deixa com um bug atrás da orelha.
Vamos supor que você crie seu super-projeto ZeroMQ e no meio dele acabe evoluindo uma nova forma de vida inútil e descartável, que aqui iremos chamar de HeaderInutil e seu fiel companheiro CppInutil:</description>
</item>

     
        <item>
  <title>RValue é o novo LValue</title>
  <link>http://www.caloni.com.br/rvalue-e-o-novo-lvalue/</link>
  <pubDate>2012-01-11</pubDate>
  
  <guid>http://www.caloni.com.br/rvalue-e-o-novo-lvalue/</guid>
  <description>As grandes discussões filosóficas que participei durante meu estudo da linguagem C, e mais tarde de C++, muitas vezes convergiam para o significado místico daquela figura que nós da gramática da linguagem conhecemos como lvalue, ou l-value, ou left-value. Enfim, a definição de uma expressão que representa um lugar na memória e, portanto, pode ocupar o lado esquerdo de uma atribuição/cópia/passagem de argumentos qualquer. Porém, os &amp;ldquo;grandes&amp;rdquo; embates daquela época hoje parecem brincadeira de criança, como a diferença sutil entre ++x e x++ ou convergência de tipos em templates.</description>
</item>

     
        <item>
  <title>Depuração de emergência com receita de bolo no WinDbg</title>
  <link>http://www.caloni.com.br/depuracao-de-emergencia-receita-de-bolo/</link>
  <pubDate>2011-10-18</pubDate>
  
  <guid>http://www.caloni.com.br/depuracao-de-emergencia-receita-de-bolo/</guid>
  <description>Continuando o papo sobre o que fazer para analisar rapidamente um crash no servidor com o pacote WinDbg, na maioria das vezes a exceção lançada pelo processo está diretamente relacionada com um acesso indevido à memória, o que tem diversas vantagens sobre problemas mais complexos:
 Possui localização precisa de onde ocorreu a violação, incluindo o nome do arquivo e a linha do código; Não corrompe a pilha ou, se corrompe, não chega a afetá-la a ponto da thread ficar irreconhecível; A thread que contém a janela de crash é a culpada imediata, então basta olhar a pilha.</description>
</item>

     
        <item>
  <title>Coders at Work: Reflections on the Craft of Programming</title>
  <link>http://www.caloni.com.br/coders-at-work/</link>
  <pubDate>2011-10-14</pubDate>
  
  <guid>http://www.caloni.com.br/coders-at-work/</guid>
  <description>&amp;ldquo;Personally I have never believed that it is possible to be a good coder without being a good programmer nor a good programmer without being a good designer, communicator, and thinker.&amp;rdquo; - Jamie Zawinski
 Como Joel e Atwood disseram, a leitura de Coders At Work é tão útil quanto ler o código dos outros, só que em um estilo mais condensado, que se aproveita das décadas de experiência dessa gente para aprimorarmos nossos processos de desenvolvimento e, muitas vezes, a forma de pensarmos sobre software.</description>
</item>

     
        <item>
  <title>Cuidado com variáveis temporárias</title>
  <link>http://www.caloni.com.br/cuidado-com-variaveis-temporarias/</link>
  <pubDate>2011-07-26</pubDate>
  
  <guid>http://www.caloni.com.br/cuidado-com-variaveis-temporarias/</guid>
  <description>Um dos problemas que a linguagem C++ possui para seus iniciantes é o de não deixar muito explícito partes do seu comportamento, principalmente as partes que lidam com ponteiros/referências e o jogo da vida dos objetos. Às vezes a coisa fica de tal como complexa que fica até difícil explicar o porquê das coisas.
Por exemplo, vejamos o singelo caso de alguém que precisa formatar uma saída de erro e para isso escolheu um stringstream:</description>
</item>

     
        <item>
  <title>Depuração de emergência</title>
  <link>http://www.caloni.com.br/depuracao-de-emergencia/</link>
  <pubDate>2011-07-26</pubDate>
  
  <guid>http://www.caloni.com.br/depuracao-de-emergencia/</guid>
  <description>O programa está rodando no servidor do cliente, que é acessível por sessão remota do Windows, mas de repente ele capota. Existem aí duas possibilidades fora o debug remoto (que, nesse caso, não é possível):
  Analisar um dump gerado.
  Depurar localmente o problema.
  Para a primeira opção, basta abrir o Gerenciador de Tarefas, localizar o processo e gerar o dump através do menu de contexto.</description>
</item>

     
        <item>
  <title>Novo branch para projetos do Caloni.com.br</title>
  <link>http://www.caloni.com.br/novo-branch-para-projetos-do-caloni-com-br/</link>
  <pubDate>2011-05-29</pubDate>
  
  <guid>http://www.caloni.com.br/novo-branch-para-projetos-do-caloni-com-br/</guid>
  <description>Reestruturei meus projetos caseiros e coloquei todos em um branch no repositório do Assembla. A partir dele começarei a reestruturas os códigos de exemplo do saite, o deve facilitar o acesso. Para usuários do Bazaar, como eu, basta puxar o branch usando seu endereço:
Para os usuários do Subversion, ou qualquer outro controle de fonte que consiga ler um branch feito em SVN, google for it.</description>
</item>

     
        <item>
  <title>Comparando strings no WinDbg</title>
  <link>http://www.caloni.com.br/comparando-strings-no-windbg/</link>
  <pubDate>2011-05-22</pubDate>
  
  <guid>http://www.caloni.com.br/comparando-strings-no-windbg/</guid>
  <description>O WinDbg fornece aos programadores diversos meios (muitos redundantes) de comparar valores inteiros em quaquer lugar da memória, em qualquer tamanho (8, 16, 32, 64 bits). Porém, quando precisamos comparar strings, que todos sabem ser uma sequência de bytes de tamanho arbitrário (se for em C, até o zero terminador).
Uma solução simples e rápida é comparar os 4 primeiros bytes de uma string, ou os 4 primeiros bytes que diferem de uma lista grande.</description>
</item>

     
        <item>
  <title>Sem reflection</title>
  <link>http://www.caloni.com.br/sem-reflection/</link>
  <pubDate>2011-05-18</pubDate>
  
  <guid>http://www.caloni.com.br/sem-reflection/</guid>
  <description>Em C++ não temos (ainda) a possibilidade de listarmos, por exemplo, a lista de métodos de um determinado tipo, a fim de chamá-lo pelo nome em tempo de execução. Algo assim:
OK, foi apenas um exemplo tosco de como seria um reflection em C++.
Porém, existem algumas maneiras de contornar esse problema. A solução, é claro, depende de qual problema você está tentando resolver.
Vamos supor, por exemplo, que você queira cadastrar funções para serem chamadas de maneira uniforme pelo prompt de comando.</description>
</item>

     
        <item>
  <title>Houaiss 1.3</title>
  <link>http://www.caloni.com.br/houaiss-1-3/</link>
  <pubDate>2011-04-28</pubDate>
  
  <guid>http://www.caloni.com.br/houaiss-1-3/</guid>
  <description>Os problemas relacionados com acesso negado durante a conversão/construção do dicionário foram corrigidos na novíssima versão disponível no GitHub.
Erroneamente imaginando que a falta de acesso tinha alguma coisa a ver com a escrita de arquivos no disco, ou até mesmo com a execução de processos, descobri depurando (o bom e velho depurador) que a origem do acesso negado estava na função AssignProcessToJobObject.aspx). Misteriosamente, no Windows 7, ao chamar essa função ocorre esse erro, independente da execução ser como administrador ou não.</description>
</item>

     
        <item>
  <title>Bazaar com Subversion</title>
  <link>http://www.caloni.com.br/bazaar-com-subversion/</link>
  <pubDate>2011-03-23</pubDate>
  
  <guid>http://www.caloni.com.br/bazaar-com-subversion/</guid>
  <description>Para pessoas que ficaram viciadas em commits curtos e todo o histórico do fonte na própria máquina, foi uma surpresa descobrir que com o uso do plugin bzr-svn (já incluso no pacote de instalação), consigo ainda utilizar o Bazaar, mesmo que agora esteja trabalhando com um branch do Subversion.
Na verdade, melhor ainda: o bzr-svn baixa o SVN trunk com todo o histórico na máquina local, como se fosse um branch do próprio Bazaar, e permite a criação de branches desconectados para pequenos commits e o merge final para o servidor SVN.</description>
</item>

     
        <item>
  <title>Houaiss no Kindle</title>
  <link>http://www.caloni.com.br/houaiss-no-kindle/</link>
  <pubDate>2011-03-22</pubDate>
  
  <guid>http://www.caloni.com.br/houaiss-no-kindle/</guid>
  <description>O blogue de José Ribeiro Pena Neto, aparentemente recém-criado, conseguiu utilizar minha solução de conversão do dicionário Houaiss para Babylon em algo mais incrívei ainda: converter, em alguns passos, a base de dados do Houaiss para o Amazon Kindle.
De uma maneira simples e efetiva, ele cita o passo-a-passo para a conversão da base Houaiss para o formato Babylon e, a partir disso, reconverter para o formato usado pelo gratuito e multiplataforma Stardict.</description>
</item>

     
        <item>
  <title>Loucuras multithreading</title>
  <link>http://www.caloni.com.br/loucuras-multithreading/</link>
  <pubDate>2011-03-18</pubDate>
  
  <guid>http://www.caloni.com.br/loucuras-multithreading/</guid>
  <description>Estava eu depurando um sistema cliente/servidor com um tantão de threads e me veio à cabeça na volta pra casa como que um programador iniciante entenderia aquela bagunça de dar F10 em uma função e cair no meio de outra, dar outro F10 na outra e voltar pra primeira.
Loucura, não?
Nem tanto. O multithreading de um sistema operacional está aí pra isso. O que ocorre, no caso de depurações em uma única IDE, é que os breakpoints temporários que são definidos ao usar o comando de step into/over podem ser ativados em paralelo, simultaneamente.</description>
</item>

     
        <item>
  <title>Base64</title>
  <link>http://www.caloni.com.br/base64/</link>
  <pubDate>2011-03-09</pubDate>
  
  <guid>http://www.caloni.com.br/base64/</guid>
  <description>No meio dos meus artigos pendentes, encontrei esse, de Luiz Rocha, que fala sobre a dificuldade de entender o que seria Base64:
Não é a primeira pessoa que pede informações sobre algo específico demais para explicar (para isso existe a Wikipedia e o Google, não?). No meio da minha escrita, percebi que já havia escrito sobre os fundamentos do conhecimento por trás da criação do Base64, conhecimento esse, acredito eu, todo programador que quer sair do lugar com os próprios pés deve ter.</description>
</item>

     
        <item>
  <title>Projeto DayToDay</title>
  <link>http://www.caloni.com.br/projeto-daytoday/</link>
  <pubDate>2011-03-03</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-daytoday/</guid>
  <description>O DayToDay é um projetinho que criei para fazer tracking das minhas atividades diárias. Eu o criei há mais de 6 anos, e provavelmente se tivesse pensado em como isso seria útil para as pessoas compartilharem suas ideias e limitasse o número de caracteres para 140, estaria rico hoje.
O &amp;ldquo;conceito&amp;rdquo; é bem simples: executo o programa, ele exibe um campo texto para digitar o que estou fazendo, digito enter ou clico no botão de OK e ele fecha.</description>
</item>

     
        <item>
  <title>VTable</title>
  <link>http://www.caloni.com.br/vtable/</link>
  <pubDate>2011-03-01</pubDate>
  
  <guid>http://www.caloni.com.br/vtable/</guid>
  <description>Acho que na breve história desse blogue nunca contei a história do vtable. No máximo fizemos um hookzinho nos métodos de um componente COM. Mas só.
Não encontro uma analogia simples, assim, de cabeça. Então vou contar no cru, mesmo. Talvez seja até mais divertido.
A vtable foi um mecanismo criado para implementar o polimorfismo em C++ quando falamos de ponteiros para classes base cujos métodos virtuais foram sobrescritos por uma classe derivada.</description>
</item>

     
        <item>
  <title>Esse ponteiro vai até onde?</title>
  <link>http://www.caloni.com.br/esse-ponteiro-vai-ate-onde/</link>
  <pubDate>2011-01-17</pubDate>
  
  <guid>http://www.caloni.com.br/esse-ponteiro-vai-ate-onde/</guid>
  <description>Brincando com obtenções e conversões de SIDs, tive uma pequena dificuldade de usar a função ConvertStringSidToSid, de Sddl.h. Seu objetivo é receber uma string-SID no formato usado pela ferramenta PsGetSid e retornar uma sequência de bytes de tamanho arbitrário, que é o SID como o sistema o enxerga. Como ela retorna apenas o ponteiro final, do tipo PSID, o que parece fácil pode se tornar tricky se quisermos copiar o SID binário para algum buffer na pilha, já que não sabemos o número de bytes no buffer de origem.</description>
</item>

     
        <item>
  <title>Dependência pedindo carona</title>
  <link>http://www.caloni.com.br/dependencia-pedindo-carona/</link>
  <pubDate>2011-01-04</pubDate>
  
  <guid>http://www.caloni.com.br/dependencia-pedindo-carona/</guid>
  <description>Mesmo as vezes que você não queira, algumas dependências pedem carona e o compilador deixa entrar. Daí mesmo que você não use uma função API, ela acaba te atazanando a vida.
Foi o caso da ToolHelp32 no Windows NT 4.
Quando compilamos, cada CPP vira uma coleção de funções que serão usadas, mais tarde, pelo linker, para juntar a bagunça. Para mais detalhes dessa fascinante história, recomendo o fantástico artigo sobre Os diferentes erros na linguagem C, seção Linkedição.</description>
</item>

     
        <item>
  <title>Trabalhando em múltiplos ambientes</title>
  <link>http://www.caloni.com.br/trabalhando-em-multiplos-ambientes/</link>
  <pubDate>2010-12-27</pubDate>
  
  <guid>http://www.caloni.com.br/trabalhando-em-multiplos-ambientes/</guid>
  <description>Existem diversas maneiras de se trabalhar com o Bazaar. Eu já havia definido como fazer na máquina de desenvolvedor para modificar o mesmo código-fonte em projetos paralelos, onde basicamente tenho um branch principal conectado no servidor (assim todo commit vai pra lá) e crio branches paralelos e desconectados para fazer quantos commits eu tenho vontade durante o desenvolvimento. Após todas as mudanças e testes básicos, atualizo o branch principal (com mudanças dos meus colegas) e faço o merge com o branch paralelo onde fiz todas as mudanças.</description>
</item>

     
        <item>
  <title>Patch de emergência 2</title>
  <link>http://www.caloni.com.br/patch-de-emergencia-2/</link>
  <pubDate>2010-11-09</pubDate>
  
  <guid>http://www.caloni.com.br/patch-de-emergencia-2/</guid>
  <description>No artigo anterior fizemos um patch rapidinho na memória se aproveitando de um Sleep nojento que o código nos forneceu.
E se não houvesse Sleep?
As chances de estarmos escrevendo no momento em que a função está sendo executada são tremendas, de forma que não poderíamos sobrescrevê-la sem correr o risco de um crash.
Uma solução alternativa para isso é alocar um novo pedaço de memória para a versão corrigida e trocar o endereço de chamada na função main.</description>
</item>

     
        <item>
  <title>Patch de emergência</title>
  <link>http://www.caloni.com.br/patch-de-emergencia/</link>
  <pubDate>2010-11-08</pubDate>
  
  <guid>http://www.caloni.com.br/patch-de-emergencia/</guid>
  <description>Após um projeto muito bem sucedido, entregue no prazo e homologado em tempo recorde, você e sua equipe estão aproveitando suas devidas férias nas Bahamas, tomando água de coco na sombra de uma palmeira e apreciando a beleza natural da região. Ambas as belezas. =)
Mas eis que liga o seu gerente para o celular vermelho que te entregou no caso de emergências críticas e te avisa que um problema crítico foi detectado em um serviço crítico: o detector de pares.</description>
</item>

     
        <item>
  <title>Suporte técnico</title>
  <link>http://www.caloni.com.br/suporte-tecnico/</link>
  <pubDate>2010-11-05</pubDate>
  
  <guid>http://www.caloni.com.br/suporte-tecnico/</guid>
  <description>Máquina com parte do registro corrompida, notadamente alguma sub-chave de HKEYCLASSESROOT. Resultado: ao rodar um script que abre uma segunda janela e tenta usar seu método focus é exibida a seguinte mensagem:
Erro de automação? (&amp;ldquo;Mensagem do cliente - A classe não dá suporte para automação&amp;rdquo;)
Abaixo um exemplo simples para ter uma ideia em JS:
A primeira coisa que se faz nesse caso é pesquisar no Google por pessoas que já tiveram esse problema.</description>
</item>

     
        <item>
  <title>Então você ainda não usa controle de fonte?</title>
  <link>http://www.caloni.com.br/entao-voce-ainda-nao-usa-controle-de-fonte/</link>
  <pubDate>2010-11-02</pubDate>
  
  <guid>http://www.caloni.com.br/entao-voce-ainda-nao-usa-controle-de-fonte/</guid>
  <description>Não há nada de errado nisso. Projetos robustos com uma equipe moderada ¿ 5 a 10 programadores ¿ precisam desse tipo de organização, e tornam a resolução dos problemas do dia-a-dia mais problemática sem esse controle. A questão reside para o programador solitário ou a equipe minúscula ¿ 2 a 4 programadores. Esses geralmente questionam o custo-benefício de terem o trabalho de configurar e manter mais um sistema. Além disso, isso implica em uma mudança de grandes proporções em cada membro da equipe: uma mudança cultural.</description>
</item>

     
        <item>
  <title>FormatMessage para... dumies?</title>
  <link>http://www.caloni.com.br/formatmessage-para-dumies/</link>
  <pubDate>2010-10-26</pubDate>
  
  <guid>http://www.caloni.com.br/formatmessage-para-dumies/</guid>
  <description>Já foi comentado em alguns círculos de ótimos programadores que a função da Win32 API FormatMessage é uma das criaturas mais bizarras já criadas.
O objetivo da FormatMessage é formatar uma string, assim como sprintf, mas voltado mais a escrever uma descrição de um código de erro. Sendo assim ela é essencial para que o usuário não receba um número no lugar de uma explicação de por que a operação falhou.</description>
</item>

     
        <item>
  <title>Atualizando HouaissParaBabylon no saite</title>
  <link>http://www.caloni.com.br/atualizando-houaissparababylon-no-saite/</link>
  <pubDate>2010-10-22</pubDate>
  
  <guid>http://www.caloni.com.br/atualizando-houaissparababylon-no-saite/</guid>
  <description>O último comentário no meu último artigo sobre o conversor Houaiss para Babylon me fez lembrar de algo muito importante: eu não atualizei o branch do saite com a última versão. Deve ser por isso que as pessoas estão tendo problemas com o uso do código. Resolvo isso já:
Essa é a versão 1.2 descrita no meu último artigo sobre o projeto.
De qualquer forma, qual não foi minha surpresa quando tentei recompilar o projeto e ocorreram erros no atlcom.</description>
</item>

     
        <item>
  <title>Três em um</title>
  <link>http://www.caloni.com.br/tres-em-um/</link>
  <pubDate>2010-10-09</pubDate>
  
  <guid>http://www.caloni.com.br/tres-em-um/</guid>
  <description>Que vergonha passar tanto tempo sem postar nada. Parece que não fiz nada que valesse a pena comentar por aqui.
Na verdade, não fiz tanto, mesmo. Muitas mensagens do Outlook, gráficos UML e reuniões de alinhamento depois, sobrou um tempinho pra programar. Aprendi algumas coisas que tinha o desejo de saber há tanto tempo&amp;hellip; Agora eu sei, quem diria, criar linques suspensos nas janelas Win32! Que novidade, não? Pois é, isso exige, de acordo com o SDK, algumas artimanhas pra fazer funcionar.</description>
</item>

     
        <item>
  <title>Como ofuscar strings</title>
  <link>http://www.caloni.com.br/como-ofuscar-strings/</link>
  <pubDate>2010-08-30</pubDate>
  
  <guid>http://www.caloni.com.br/como-ofuscar-strings/</guid>
  <description>Já fiz ofuscamento e embaralhamento de dados acho que umas três ou quatro vezes. Dessa vez, parti para o batidíssimo esquema de fazer o pré-processamento de um header com defines que irão virar estruturas reaproveitadas por uma função padrão que desofusca e ofusca aquela tripa de bytes em algo legível: a string original.
Vamos ver um exemplo:
Conseguimos capturar os três elementos desse define (um descartável) por um simples scanf:</description>
</item>

     
        <item>
  <title>Gerando dumps automatizados</title>
  <link>http://www.caloni.com.br/gerando-dumps-automatizados/</link>
  <pubDate>2010-08-26</pubDate>
  
  <guid>http://www.caloni.com.br/gerando-dumps-automatizados/</guid>
  <description>Agora que a temporada das telas azuis passou estou às voltas com o nosso sistema de detecção de crashes, além de alguns dumps e logs pra relaxar de vez em quando.
Fiquei impressionado com a simplicidade com que podemos capturar qualquer exceção que ocorra em um programa, independente da thread, e gravar um minidump com o contexto exato em que o problema ocorreu. O uso da função API SetUnhandledExceptionFilter aliado com a já citada na palestra MiniDumpWriteDump pode agilizar muito a correção de crashes triviais como Access Violation.</description>
</item>

     
        <item>
  <title>Evento C&#43;&#43;</title>
  <link>http://www.caloni.com.br/evento-c/</link>
  <pubDate>2010-08-16</pubDate>
  
  <guid>http://www.caloni.com.br/evento-c/</guid>
  <description>Esse fim-de-semana houve o tão falado evento C++, com a presença de dezenas de pessoas, algo que eu sinceramente não esperava. O bom desse evento foi saber que existem tantas pessoas interessadas em manter contato com quem gosta e pratica essa linguagem e também em saber que o nível técnico das palestras estão de alto para avançado.
Infelizmente em nenhuma das duas palestras práticas (minha e do Fernando) houve participação interativa, e ninguém que eu saiba abriu meu pacote-surpresa com os dumps a serem analisados.</description>
</item>

     
        <item>
  <title>Foto dos melhores momentos</title>
  <link>http://www.caloni.com.br/foto-dos-melhores-momentos/</link>
  <pubDate>2010-08-12</pubDate>
  
  <guid>http://www.caloni.com.br/foto-dos-melhores-momentos/</guid>
  <description>Mais um quebra-cabeças antes da nossa palestra, esse &amp;ldquo;baseado em fatos reais&amp;rdquo;.
A história é a seguinte: o cliente instalou uma versão nova do produto em algumas máquinas que, ato contínuo, começaram a apresentar telas azuis constantemente. Como essas máquinas tinham que ser usadas pelos funcionários, a administradora rapidamente desinstalou essa versão buguenta, e logo em seguida pediu por uma correção.
Até aí tudo bem. O problema maior era que ninguém havia capturado dump de nada.</description>
</item>

     
        <item>
  <title>Não é minha culpa</title>
  <link>http://www.caloni.com.br/nao-e-minha-culpa/</link>
  <pubDate>2010-08-08</pubDate>
  
  <guid>http://www.caloni.com.br/nao-e-minha-culpa/</guid>
  <description>Recebi a dica de meu amigo kernel-mode sobre o aplicativo NotMyFault, escrito como ferramenta do livro Windows Internals e que basicamente gera telas azuis para análise.
Como os problemas gerados pela ferramenta são todos de kernel, resolvi escrever meu próprio conjunto de bugs para o pessoal da userland. E como nada na vida se cria, tudo se copia, tenho o orgulho de apresentar a vocês o NotMyFaultEither!
Seu uso é bem simples.</description>
</item>

     
        <item>
  <title>Novas diferenças no Bazaar</title>
  <link>http://www.caloni.com.br/novas-diferencas-no-bazaar/</link>
  <pubDate>2010-08-04</pubDate>
  
  <guid>http://www.caloni.com.br/novas-diferencas-no-bazaar/</guid>
  <description>Novidade incrível nas novas versões do Bazaar. Dando continuidade à sua versão boiola gráfica, agora é possível configurar quantos visualizadores de diferenças você quiser. Na hora de ver a diferença em algum código-fonte, você pode optar pelo enrustido embutido ou, no caso, o meu favorito, WinMerge.
E por que o WinMerge é meu favorito? Porque você pode ignorar toda aquela discussão se devemos usar tabs ou três espaços para indentar o código.</description>
</item>

     
        <item>
  <title>Como achar o código-fonte sem símbolos</title>
  <link>http://www.caloni.com.br/como-achar-o-codigo-fonte-sem-simbolos/</link>
  <pubDate>2010-08-03</pubDate>
  
  <guid>http://www.caloni.com.br/como-achar-o-codigo-fonte-sem-simbolos/</guid>
  <description>Continuo escovando bits. Dessa vez de forma mais nervosa. Se trata de um serviço que trava durante seu stop. Um colega muito esperto do suporte gerou um dump para mim, tornando as coisas mais fáceis. O problema era que não havia símbolos nem código-fonte que batessem exatamente com aquela compilação de 2004. Solução? Analisar as pilhas das threads restantes.
É sabido que esse serviço responde requisições de milhares de máquinas em um período curto de tempo, então por isso a primeira coisa que me atentei foi verificar quantas threads haviam:</description>
</item>

     
        <item>
  <title>Breakpoints promíscuos</title>
  <link>http://www.caloni.com.br/breakpoints-promiscuos/</link>
  <pubDate>2010-07-26</pubDate>
  
  <guid>http://www.caloni.com.br/breakpoints-promiscuos/</guid>
  <description>Ontem falei sobre como &amp;ldquo;brincar&amp;rdquo; com os breakpoints promíscuos, ou seja, aqueles que topam qualquer processo. Isso
é muito simples de se fazer:
 Configure uma VM para bootar em kernel debug. Encontre um processo qualquer (vamos usar o notepad pra variar?). Reabra os símbolos de user mode nele. Defina um breakpoint em alguma DLL de user mode.  Como meus leitores são muito espertos foi partir para o momento após rodarmos um notepad.</description>
</item>

     
        <item>
  <title>Const e Volatile</title>
  <link>http://www.caloni.com.br/const-e-volatile/</link>
  <pubDate>2010-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/const-e-volatile/</guid>
  <description>Padrão C (ISO/IEC 9899:1990)
Chamamos de qualificador de tipo as palavrinhas mágicas const e volatile. Na prática elas definem como uma determinada variável será usada e se comportará durante a vida do programa.
Uma variável const não pode ser alterada pelo programa durante sua execução, apenas durante sua inicialização:
No exemplo acima, o valor de pi não pode mais ser alterado. Só que repare que ele foi, em determinado momento, alterado com um valor constante: na sua inicialização.</description>
</item>

     
        <item>
  <title>Enum</title>
  <link>http://www.caloni.com.br/enum/</link>
  <pubDate>2010-05-31</pubDate>
  
  <guid>http://www.caloni.com.br/enum/</guid>
  <description>Padrão C (ISO/IEC 9899:1990)
Uma enumeração faz duas coisas: define um novo tipo, parecido com um inteiro, e cria uma lista de constantes com nomes significativos. A definição técnica do tipo de um enum é mais complicada, mas basicamente ele é um novo int.
Como funciona: definimos uma lista com cada elemento tendo um valor inteiro, geralmente único. Todos os nomes usados na lista passam a fazer parte do espaço de nomes atual e funcionam como constantes com o seu valor definido no início.</description>
</item>

     
        <item>
  <title>Modificadores e qualificadores de tipo</title>
  <link>http://www.caloni.com.br/modificadores-e-qualificadores-de-tipo/</link>
  <pubDate>2010-05-28</pubDate>
  
  <guid>http://www.caloni.com.br/modificadores-e-qualificadores-de-tipo/</guid>
  <description>@caloni poderia pensar em fazer um artigo sobre os modificadores de tipo em c? os mais complexo, acho eu: volatile, enum, union, extern, etc
Uma coisa de cada vez: existem modificadores (ou qualificadores) de tipo e especificadores de tipo. Volatile e extern se encaixam na primeira categoria, enum e union na segunda. Veremos um pouco desses dois lados da linguagem em doses paliativas.
Um modificador de tipo é opcional na definição de um tipo e deve estar sempre relacionado com a declaração de alguma variável.</description>
</item>

     
        <item>
  <title>Analogicamente perfeito</title>
  <link>http://www.caloni.com.br/analogicamente-perfeito/</link>
  <pubDate>2010-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/analogicamente-perfeito/</guid>
  <description>É possível explicar tudo no mundo da informática através de analogias? Pela minha singela experiência de professor informal, eu acredito que sim. Durante esses dois anos, explanei diversos assuntos e, em todos eles, difíceis ou não, consegui um certo grau de sucesso graças ao uso de metáforas e parábolas.
De memória (ou buscando no meu blogue) consigo lembrar alguns tópicos e a forma como os expliquei. Em alguns até fiz um artigo sobre o assunto:</description>
</item>

     
        <item>
  <title>Por que Long Pointer</title>
  <link>http://www.caloni.com.br/por-que-long-pointer/</link>
  <pubDate>2010-04-21</pubDate>
  
  <guid>http://www.caloni.com.br/por-que-long-pointer/</guid>
  <description>Esse artigo continua a explicação sobre os typedefs arcaicos, já que ainda falta explicar por que diabos os ponteiros da Microsoft começam com LP. Tentei explicar para minha pupila que, por ser código dos anos 80, as pessoas usavam LP para tudo, pois os CDs ainda não estavam tão difundidos.
Não colou. Então vou tentar explicar do jeito certo.
Antigamente, as pessoas mandavam cartas umas para as outras. Carta, para você, caro leitor de quinze anos, era um e-mail implementado em hardware.</description>
</item>

     
        <item>
  <title>Typedef arcaico</title>
  <link>http://www.caloni.com.br/typedef-arcaico/</link>
  <pubDate>2010-04-20</pubDate>
  
  <guid>http://www.caloni.com.br/typedef-arcaico/</guid>
  <description>A API do Windows geralmente prima pela excelência em maus exemplos. A Notação Húngara e o Typedef Arcaico são duas técnicas que, por motivos históricos, são usados a torto e a direito pelos códigos de exemplo.
Já foi escrito muita coisa sobre os prós e contras da notação húngara. Já o typedef arcaico, esse pedacinho imprestável de código, ficou esquecido, e hoje em dia traz mais dúvidas na cabeça dos principiantes em C++ do que deveria.</description>
</item>

     
        <item>
  <title>Using TodoList and Microsoft Project together</title>
  <link>http://www.caloni.com.br/using-todolist-and-microsoft-project-together/</link>
  <pubDate>2010-04-10</pubDate>
  
  <guid>http://www.caloni.com.br/using-todolist-and-microsoft-project-together/</guid>
  <description>The next article about bits is still in the oven. Taking vacation (40 days) had drop me out of ideas! At the moment, I can explain the tips and tricks using TodoList to manage my team and synchronize my tasks in a Microsoft Project timesheet.
The reasons why I am using TodoList are kind of obvious: it does everything I need to organize my day to day tasks and it is portable.</description>
</item>

     
        <item>
  <title>Houaiss Para Babylon!</title>
  <link>http://www.caloni.com.br/houaiss-para-babylon-12/</link>
  <pubDate>2010-04-08</pubDate>
  
  <guid>http://www.caloni.com.br/houaiss-para-babylon-12/</guid>
  <description>Os últimos comentários de Henrique Esteves (quando havia seção de comentários no blogue) sobre o HouaissParaBabylon me fizeram dar mais uma fuçada nele e ver se tento deixá-lo compatível com o Houaiss 3. Foram apenas algumas horas e acho que resolvi os probleminhas relacionados com a troca do registro de instalação e o nome dos arquivos que armazenam os verbetes.
Apenas para constar, segue a lista de artigos sobre este projeto:</description>
</item>

     
        <item>
  <title>Novidades no Windbg 7</title>
  <link>http://www.caloni.com.br/novidades-no-windbg-7/</link>
  <pubDate>2010-04-01</pubDate>
  
  <guid>http://www.caloni.com.br/novidades-no-windbg-7/</guid>
  <description>Semestre que vem deve sair uma nova versão do nosso depurador favorito. Alguns atrasos e novas definições do projeto fizeram com que tivéssemos mais um ou dois releases da finada versão 6 antes da revolução que será o Depurador 2010.
Entre as mudanças mais esperadas, e entre as mais inesperadas, encontramos essa pequena lista de novidades que, com certeza, deixarão o desenvolvedor de sistemas da Microsoft muito mais feliz:
Hoje em dia é um trabalho um pouco tedioso encontrar qual dos drivers possuía a memória de endereço 0xB8915423, mas agora, juntando o interpretador de símbolos internos e o sistema de tooltips do Windbg, será possível passar o mouse sobre um endereço qualquer e ele mostrará imediatamente quem possui a memória, como ela foi alocada e qual seu conteúdo.</description>
</item>

     
        <item>
  <title>Convivendo entre TodoList e Microsoft Project</title>
  <link>http://www.caloni.com.br/convivendo-entre-todolist-e-microsoft-project/</link>
  <pubDate>2010-03-15</pubDate>
  
  <guid>http://www.caloni.com.br/convivendo-entre-todolist-e-microsoft-project/</guid>
  <description>O próximo artigo sobre escovação de bits ainda está no forno. Tirar férias (de 40 dias) é uma escassez de ideias! No momento, posso explicar a facilidade que tive para continuar usando o TodoList para gerenciar minha equipe e ainda assim sincronizar nossas tarefas em um cronograma do Microsoft Project.
As razões de eu usar o TodoList são meio óbvias: ele faz tudo que eu preciso para organizar minhas tarefas do dia-a-dia e é portátil.</description>
</item>

     
        <item>
  <title>Bazaar gráfico</title>
  <link>http://www.caloni.com.br/bazaar-grafico/</link>
  <pubDate>2010-02-25</pubDate>
  
  <guid>http://www.caloni.com.br/bazaar-grafico/</guid>
  <description>Bom, já que por enquanto os assuntos de macho estão em falta (acabei de voltar de férias), apresento-lhes o maravilhoso mundo do Bazaar para boiolas user-friendly!
Ele é leve, vem enrustido embutido na última versão e pode economizar alguns page ups/downs no prompt do DOS. Ah, sim, antes que comentem, eu não uso o Tortoise for Bazaar porque instalar shell extensions, só os muito bem feitos. (Do contrário, bem-feito para quem instalou.</description>
</item>

     
        <item>
  <title>Restaurando o registro</title>
  <link>http://www.caloni.com.br/restauranto-o-registro/</link>
  <pubDate>2010-02-08</pubDate>
  
  <guid>http://www.caloni.com.br/restauranto-o-registro/</guid>
  <description>Algumas ferramentas viram essenciais quando o importante é tempo. As minhas favoritas são: Visual Studio e batch. Com esses dois eu faço virtualmente qualquer coisa que preciso em pouquíssimo tempo. É lógico que, na ausência dessas, alternativas são bem-vindas, como Notepad++, viM, grep, cygwin.
Ontem tive que resolver uma &amp;ldquo;situação&amp;rdquo; no cliente, e graças ao bom Deus (ele também é programador) existia um Notepad++ na bagagem que levávamos. Além, é claro, do Excel e do sistema batch do Windows.</description>
</item>

     
        <item>
  <title>Correção de bugs instantânea</title>
  <link>http://www.caloni.com.br/correcao-de-bugs-instantanea/</link>
  <pubDate>2010-02-01</pubDate>
  
  <guid>http://www.caloni.com.br/correcao-de-bugs-instantanea/</guid>
  <description>Um programador tarimbado sabe que a melhor situação da vida dele para corrigir um bug é quando esse bug acontece em sua máquina de desenvolvimento, na versão Debug e ainda passo-a-passo. Como nessa situação a correção é um verdadeiro &amp;ldquo;passeio no parque&amp;rdquo; (ou na mesa do café) ela tende a quase nunca acontecer. Isso é Murphy Aplicado.
Para quem programa para sistemas, então, só o fato de acontecer no mesmo processo toda vez que ele for executado já é o máximo (quem já programou serviços, plugins, GINAs e afins sabe do que eu estou falando).</description>
</item>

     
        <item>
  <title>Passagem por valor e emails com anexo</title>
  <link>http://www.caloni.com.br/passagem-por-valor-e-emails-com-anexo/</link>
  <pubDate>2010-01-18</pubDate>
  
  <guid>http://www.caloni.com.br/passagem-por-valor-e-emails-com-anexo/</guid>
  <description>Mais uma analogia vencedora para ponteiros, chamadas por valor e chamadas por referência: e-mails.
Quando passamos um parâmetro por valor, estamos enviando um e-mail com um arquivo em anexo. Não importa o que o destinatário faça com o arquivo: nós não vamos saber o que foi mudado se ele não enviar uma outra cópia.
Por outro lado, ao passar um parâmetro por referência, estamos enviando um e-mail com um endereço de onde está o arquivo.</description>
</item>

     
        <item>
  <title>Importando tipos de outros projetos</title>
  <link>http://www.caloni.com.br/importando-tipos-de-outros-projetos/</link>
  <pubDate>2010-01-11</pubDate>
  
  <guid>http://www.caloni.com.br/importando-tipos-de-outros-projetos/</guid>
  <description>A engenharia reversa das entranhas do kernel não tem limites se você sabe o que está fazendo. No entanto, algumas facilidades do depurador podem ajudar a minimizar o tempo que gastamos para analisar uma simples estrutura. Por exemplo, o Process Environment Block de um processo específico.
O comando !peb traz inúmeras informações sobre essa estrutura. Mas talvez estivéssemos interessados em coisas não mostradas por esse comando, mas que existem na estrutura.</description>
</item>

     
        <item>
  <title>Devaneio nerd rápido sobre profecias</title>
  <link>http://www.caloni.com.br/devaneio-nerd-rapido-sobre-profecias/</link>
  <pubDate>2009-12-30</pubDate>
  
  <guid>http://www.caloni.com.br/devaneio-nerd-rapido-sobre-profecias/</guid>
  <description>Para quem já analisou os dados de uma tela azul sabe que, quando o Windows acha um culpado (vulgo driver) a data de sua compilação é exibida em um formato conhecido como DateStamp ou TimeStamp. Nesse formato o que temos é um número hexadecimal que segue o formato de tempo do Unix, que no caso é o número de segundos desde o dia primeiro de Janeiro de 1970. Isso, por curiosidade, nos dá uma margem de 140 anos antes dos número se repetirem se usarmos 32 bits nessa contagem.</description>
</item>

     
        <item>
  <title>O boot no Windows: Kernel</title>
  <link>http://www.caloni.com.br/o-boot-no-windows-kernel/</link>
  <pubDate>2009-12-04</pubDate>
  
  <guid>http://www.caloni.com.br/o-boot-no-windows-kernel/</guid>
  <description>Finalmente chegamos em um pouco onde podemos usar o WinDbg.
Podemos espetar o depurador e fazê-lo parar assim que conectado. Se estiver rodando antes do próprio sistema operacional, teremos um sistema sem processos e sem threads, pois ele irá parar assim que o executivo puder enviar o sinal de início pela porta serial, após carregar na memória os módulos básicos.
Todos os módulos carregados antes dessa fase são os drivers que tiveram seu Start definido em zero no registro.</description>
</item>

     
        <item>
  <title>O boot no Windows: NTLDR</title>
  <link>http://www.caloni.com.br/o-boot-no-windows-ntldr/</link>
  <pubDate>2009-11-26</pubDate>
  
  <guid>http://www.caloni.com.br/o-boot-no-windows-ntldr/</guid>
  <description>Minhas análises estão demorando muito para ser feitas. Talvez seja a hora de revelar o pouco que sei (e pesquisei) sobre o próximo processo de boot do Windows: o NTLDR.
O nosso amigo NT Loader pode ser entendido através da leitura do já citado Windows Internals ou através de uma outra leitura que estou fazendo atualmente e que pouquíssimos amigos blogueiros irão se lembrar: o livro da galinha preta; formalmente conhecido como Windows Nt File System Internals.</description>
</item>

     
        <item>
  <title>O boot no Windows: pré-NTLDR</title>
  <link>http://www.caloni.com.br/o-boot-no-windows-pre-ntldr/</link>
  <pubDate>2009-09-09</pubDate>
  
  <guid>http://www.caloni.com.br/o-boot-no-windows-pre-ntldr/</guid>
  <description>Conforme fui estudando para recordar os momentos sublimes do boot do Windows me deparei com o artigo mais &amp;ldquo;espetaculoso&amp;rdquo; de todos os tempos sobre esse assunto, parte integrante do livro Windows Internals e escrito pelo nada mais nada menos Mark Russinovich: Boot Process, no capítulo 5, &amp;ldquo;Startup and Shutdown&amp;rdquo;.
O meu primeiro artigo sobre o boot sem Windows foi 80% escrito com o que eu já sabia de cabeça de tanto mexer na MBR e de tanto depurar o processo de boot em 16 bits.</description>
</item>

     
        <item>
  <title>O boot no Windows: sem Windows</title>
  <link>http://www.caloni.com.br/o-boot-no-windows-sem-windows/</link>
  <pubDate>2009-08-18</pubDate>
  
  <guid>http://www.caloni.com.br/o-boot-no-windows-sem-windows/</guid>
  <description>Desde quando o usuário liga o computador até o momento em que ele vê a barra de tarefas e aqueles fundos lindos de papel de parede existem diversas coisas sendo feitas por debaixo do pano. Essa série de artigos irá explicar essas diversas coisas, ou seja, como funciona e quais as fases do boot de uma máquina que possui Windows instalado (plataforma NT).
O que esses artigos não vão fazer muito bem é explicar o lado do kernel mode funcionando, até porque temos artigos melhores explicando esse ponto de vista.</description>
</item>

     
        <item>
  <title>What I&#39;ve been doing in the last 10 years</title>
  <link>http://www.caloni.com.br/what-ive-been-doing-in-the-last-10-years/</link>
  <pubDate>2009-08-17</pubDate>
  
  <guid>http://www.caloni.com.br/what-ive-been-doing-in-the-last-10-years/</guid>
  <description>This week I dedicate myself to update my resumè and I have the brilliant idea of put into it my technical historical, what resuming is a list of things I did or was involved with during my brief ten years stay in the programming world.
So I thought: &amp;ldquo;this could be useful to the people read me&amp;rdquo;. Why not? Perhaps you got some doubt waiting to be solved and is unable to find a guy who knows something about this.</description>
</item>

     
        <item>
  <title>AdPlus no cliente, não você!</title>
  <link>http://www.caloni.com.br/adplus-no-cliente-nao-voce/</link>
  <pubDate>2009-08-10</pubDate>
  
  <guid>http://www.caloni.com.br/adplus-no-cliente-nao-voce/</guid>
  <description>O AdPlus é uma das poderosas ferramentas do pacote Debugging Tools for Windows. Se trata basicamente de um script que serve para realizar múltiplas fotografias no estado de um programa em execução usando para isso os depuradores do próprio pacote. Quando alguma coisa estiver errada, principalmente um crash ou travamento, ele paralisa a execução e gera um dump final com toda a história contada desde o começo.
Ele pode ser usado na situação mais comum: o programa trava/quebra em um cliente específico e/ou em um momento específico que pode acontecer em cinco segundos ou daqui a quinze horas.</description>
</item>

     
        <item>
  <title>Cuidado com a cópia de arquivos na VMWare</title>
  <link>http://www.caloni.com.br/cuidado-com-a-copia-de-arquivos-na-vmware/</link>
  <pubDate>2009-07-27</pubDate>
  
  <guid>http://www.caloni.com.br/cuidado-com-a-copia-de-arquivos-na-vmware/</guid>
  <description>Quebrei a cabeça com uma DLL de hook que não estava funcionando para usuários comuns. No entanto, para qualquer administrador funcionava.
Isso acontece porque quando se arrasta uma DLL recém-compilada para a VMWare ela possui um mecanismo que primeiro cria esse arquivo no temporário do usuário atual e depois move esse arquivo para o lugar onde você de fato arrastou.
Como sabemos, a pasta temporária de um usuário fica em seu perfil, que possui direitos de uso apenas do usuário e dos administradores do sistema.</description>
</item>

     
        <item>
  <title>Name mangling</title>
  <link>http://www.caloni.com.br/name-mangling/</link>
  <pubDate>2009-07-13</pubDate>
  
  <guid>http://www.caloni.com.br/name-mangling/</guid>
  <description>A sobrecarga estática possui algumas desvantagens em relação ao sistema de nomes da boa e velha linguagem C: ela não foi padronizada entre compiladores. O que isso quer dizer na prática é que funções exportadas de bibliotecas dinâmicas (DLLs) vão possuir nomes diferentes dependendo do compilador utilizado (e sua versão). Isso é o que chamamos name mangling.
Em dois projetos usando Visual C++ 2008 e Borland C++ Builder 5 (última versão que funciona direito) eu fiz uma exportação da função soma em linguagem C (o fonte é um .</description>
</item>

     
        <item>
  <title>Polimorfismo estático</title>
  <link>http://www.caloni.com.br/polimorfismo-estatico/</link>
  <pubDate>2009-07-10</pubDate>
  
  <guid>http://www.caloni.com.br/polimorfismo-estatico/</guid>
  <description>Para explicar polimorfismo, nada como ver as coisas como elas eram. Se você fosse um programador C de vinte anos atrás e criasse as seguintes funções:
Imediatamente o compilador iria acusar os seguintes erros:
Isso acontece porque em C os identificadores são únicos por escopo. Esse é o motivo por que o seguinte código também está errado:
De volta aos anos 90, isso também está errado em C++. Até por uma questão de lógica: como o compilador pode saber a qual variável estamos nos referindo se usarmos o mesmo nome para duas delas?</description>
</item>

     
        <item>
  <title>Static Polymorphism</title>
  <link>http://www.caloni.com.br/static-polymorphism/</link>
  <pubDate>2009-07-10</pubDate>
  
  <guid>http://www.caloni.com.br/static-polymorphism/</guid>
  <description>To explain the polymorphism nothing is better than see how stuff used to be. If you were a twenty old C programmer in the past and created the following functions:
Immediately the compiler would blame you about the following errors:
This happens because in C the identifiers are unique into the scope. This is the reason why the following code is wrong also:
Back to the 90&amp;rsquo;s, this is also wrong in C++.</description>
</item>

     
        <item>
  <title>Strings</title>
  <link>http://www.caloni.com.br/strings/</link>
  <pubDate>2009-07-07</pubDate>
  
  <guid>http://www.caloni.com.br/strings/</guid>
  <description>Como já vimos centenas e centenas de vezes, memória é apenas memória até que alguém diga que isso vale alguma coisa. Em seu estado latente é o que chamamos formalmente de dados. E dados são bytes armazenados na memória.
No entanto, quando esses dados viram algo de útil em um determinado contexto, não necessariamente alterando-se seu conteúdo na memória, passamos a lidar com informação. Ou seja, é um dado com significado.</description>
</item>

     
        <item>
  <title>Bugs Difíceis de Achar</title>
  <link>http://www.caloni.com.br/bugs-dificeis-de-achar/</link>
  <pubDate>2009-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/bugs-dificeis-de-achar/</guid>
  <description>Saiu um artigo na Wired News sobre os piores bugs da história. Entre eles estão a explosão de um oleoduto soviético em plena guerra-fria (como se não bastasse chernobyl), o primeiro worm da Internet (que se aproveita de um buffer overflow da função gets) e o famoso erro de divisão em ponto flutuante do Pentium; um erro de cálculo de cerca de 0,006% que causou um prejuízo de 457 milhões de dólares para a Intel.</description>
</item>

     
        <item>
  <title>Programadores de verdade não usam Java</title>
  <link>http://www.caloni.com.br/programadores-de-verdade-nao-usam-java/</link>
  <pubDate>2009-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/programadores-de-verdade-nao-usam-java/</guid>
  <description>Quando era um newbie (e um wanna-be) gostava de ler o &amp;ldquo;Real Programmers Don&amp;rsquo;t Use Pascal&amp;rdquo;, um texto humorístico que mais me influenciou e encorajou a caminho da iluminação C/C++ do que o livro de K&amp;amp;R. A partir dele, supunha eu, ser um &amp;ldquo;programador de verdade&amp;rdquo; era ser tudo. Ser um Quiche Eater (Comedor de Torta) não era nada. Programadores de verdade é que resolvem os problemas de verdade! Quiche Eaters são os losers que estudam os conceitos acadêmicos da ciência da computação e nunca fazem um maldito programa que preste (conhece alguém assim?</description>
</item>

     
        <item>
  <title>Como compilar em somente um passo</title>
  <link>http://www.caloni.com.br/como-compilar-em-somente-um-passo/</link>
  <pubDate>2009-05-25</pubDate>
  
  <guid>http://www.caloni.com.br/como-compilar-em-somente-um-passo/</guid>
  <description>Uma das primeiras perguntas do teste do Joel é saber se você pode compilar todo o projeto em apenas um passo. Essa é uma questão essencial e um desafio para muitas equipes. Perdem-se horas sagradas para gerar um novo Release.
Compilação automática geralmente está disponível nas ferramentas de desenvolvimento. Se você estiver usando o Visual Studio, por exemplo, é possível fazer isso com uma linha:
Se não for exatamente o que você precisa, basta fazer uma pesquisa de quinze minutos e encontrar os parâmetros corretos.</description>
</item>

     
        <item>
  <title>Meu roteiro C&#43;&#43;</title>
  <link>http://www.caloni.com.br/meu-roteiro-c/</link>
  <pubDate>2009-05-20</pubDate>
  
  <guid>http://www.caloni.com.br/meu-roteiro-c/</guid>
  <description>Como não consigo mais ter ideias para artigos, resolvi catalogar todas as coisas que já falei nesse blogue e, o mais importante, todas as coisas que ainda não falei nesse blogue (e espero um dia falar ou talvez nunca fale), começando por C++, que era o intuito original (só que não é mais, porque eu uso mais a Win32 API que a STL):
  História
  Conceitos
  Linguagem</description>
</item>

     
        <item>
  <title>A sala da fila das threads</title>
  <link>http://www.caloni.com.br/a-sala-da-fila-das-threads/</link>
  <pubDate>2009-04-17</pubDate>
  
  <guid>http://www.caloni.com.br/a-sala-da-fila-das-threads/</guid>
  <description>Quando falei sobre a fila das threads, e como cada thread espera pacientemente em uma fila até chegar sua vez de ser atendida no guichê das CPUs, também vimos como é fácil fazer caquinhas em um programa que roda paralelamente duas threads ou mais.
Também falei que iríamos resolver esse problema, afinal de contas, temos que salvar todos aqueles programas que usam dezenas de threads trabalhando ao mesmo tempo para contar números de um até dez.</description>
</item>

     
        <item>
  <title>A fila das threads</title>
  <link>http://www.caloni.com.br/a-fila-das-threads/</link>
  <pubDate>2009-04-07</pubDate>
  
  <guid>http://www.caloni.com.br/a-fila-das-threads/</guid>
  <description>Em um ambiente multithreading, diversas threads disputam &amp;ldquo;a tapas&amp;rdquo; a atenção do processador (CPU). Certo? Podemos dizer que, em um ambiente com muito processamento a realizar, de certa forma é isso que acontece. São threads e mais threads rodando um pedacinho de código cada vez que passam pelo processador.
Um ambiente complexo como esse é repleto de pequenos detalhes que podem fazer o iniciante logo desanimar quando tentar depurar um programa com mais de uma thread.</description>
</item>

     
        <item>
  <title>Depurando até o último segundo</title>
  <link>http://www.caloni.com.br/depurando-ate-o-ultimo-segundo/</link>
  <pubDate>2009-03-31</pubDate>
  
  <guid>http://www.caloni.com.br/depurando-ate-o-ultimo-segundo/</guid>
  <description>Como depurar um programa que dá pau logo no final do desligamento de uma máquina?
No cenário em que isso se passa não existem usuários logados no momento, o que significa a impossibilidade de rodar qualquer programa em uma sessão prévia e mantê-lo no ar após o logoff. A não ser que se trate de um serviço.
O nosso programa é justamente um serviço, e por isso ele continua rodando até o final, ou bem perto dele.</description>
</item>

     
        <item>
  <title>Os problemas mais cabeludos</title>
  <link>http://www.caloni.com.br/os-problemas-mais-cabeludos/</link>
  <pubDate>2009-03-05</pubDate>
  
  <guid>http://www.caloni.com.br/os-problemas-mais-cabeludos/</guid>
  <description>Quase todos os problemas do Universo são resolvidos depois de um belo dia de depuração, código comentado, descomentado, recomentado e umas muitas e boas doses de café. Alguns outros problemas mais cabeludos precisam de uma boa noitada na frente do computador, e mais café. E, finalmente, existem aqueles que nem tomando o estoque inteiro de café a coisa anda.
Um exemplo: um hook global do Windows que quando ativado em determinados eventos envia mensagens para uma única janela que cataloga informações sobre diversas janelas e processos no sistema.</description>
</item>

     
        <item>
  <title>WinDbg.info</title>
  <link>http://www.caloni.com.br/windbginfo/</link>
  <pubDate>2009-02-10</pubDate>
  
  <guid>http://www.caloni.com.br/windbginfo/</guid>
  <description>Para os perdidos e desatualizados como eu, notei hoje que Robert Kuster possui um saite onde mantém diversas informações sobre o WinDbg; uma espécie de continuação de sua famosa transparência &amp;ldquo;WinDbg. From A to Z&amp;rdquo;.
Como eu descobri? Bom, ele me mandou um e-mail perguntando se poderia deixar sua tradução para inglês do meu artigo como Foreword para os slides =)</description>
</item>

     
        <item>
  <title>As funções-polegar</title>
  <link>http://www.caloni.com.br/as-funcoes-polegar/</link>
  <pubDate>2009-01-30</pubDate>
  
  <guid>http://www.caloni.com.br/as-funcoes-polegar/</guid>
  <description>Como já havia dito, não há nada mais prazeroso do que ensinar a alguém os velhos truques da profissão e relembrar o porquê de tantas coisas que guardamos na cabeça sobre programação. Hoje tive a oportunidade de explicar como funcionam as funções-polegar.
A função-polegar, uma categoria de função muito peculiar em várias APIs, possui um comportamento padrão de retorno de erros. Entre as diversas funções-polegar que conheço e uso, eis algumas que lembro de cor:</description>
</item>

     
        <item>
  <title>Básico do básico: assembly</title>
  <link>http://www.caloni.com.br/basico-do-basico-assembly/</link>
  <pubDate>2009-01-26</pubDate>
  
  <guid>http://www.caloni.com.br/basico-do-basico-assembly/</guid>
  <description>É lógico que não poderia faltar no cinto de utilidades de todo bom programador C conhecimentos básicos da linguagem assembly, sua mãe espiritual. São tantos conceitos em comum que, uma vez aprendido seu funcionamento, fica difícil não pensar no código-assembly gerado pelo compilador C. E é nesse ponto que as coisas começam a ficar mais claras.
Antes de tudo, é importantíssimo lembrar que o foco aqui é apenas a arquitetura 8086, um dos marcos na invenção de computadores de massa, mas que existem trocentros outros modelos de processadores e computadores funcionando mundo afora.</description>
</item>

     
        <item>
  <title>HouaissParaBabylon versão 1.1</title>
  <link>http://www.caloni.com.br/houaissparababylon-versao-11/</link>
  <pubDate>2008-12-30</pubDate>
  
  <guid>http://www.caloni.com.br/houaissparababylon-versao-11/</guid>
  <description>Saindo mais um do forno.
Essa nova versão do conversor do dicionário Houaiss para Babylon corrige o problema de não encontrar o Houaiss 1.0. O problema ocorria porque o conversor se baseava na localização do desinstalador para encontrar o dicionário. Na primeira versão do dicionário o desinstalador fica na pasta c:\Windows, onde obviamente não estava o dicionário.
Nessa nova versão, além de procurar o caminho do dicionário no registro (desinstalador) e antes de pedir para o usuário o caminho correto é tentado o caminho padrão de instalação, %programfiles%\Houaiss.</description>
</item>

     
        <item>
  <title>Básico do básico: binário</title>
  <link>http://www.caloni.com.br/basico-do-basico-binario/</link>
  <pubDate>2008-12-18</pubDate>
  
  <guid>http://www.caloni.com.br/basico-do-basico-binario/</guid>
  <description>Apesar do tema binário, o assunto de hoje no fundo remete-nos a todo e qualquer tipo de representação. É o faz-de-conta um pouco mais intenso, vindo das profundezas da matemática e dominado com maestria pela nossa mente e sua capacidade lógica de abstrair.
Como todos sabemos, nós, seres humanos, somos dotados de dez dedos: cinco em cada mão. Isso influenciou fortemente nosso sistema de contagem de coisas, e, como consequência, nossa forma de representar números.</description>
</item>

     
        <item>
  <title>Básico do básico: tipos</title>
  <link>http://www.caloni.com.br/basico-do-basico-tipos/</link>
  <pubDate>2008-12-12</pubDate>
  
  <guid>http://www.caloni.com.br/basico-do-basico-tipos/</guid>
  <description>Um tipo nada mais é que do que uma forma (ô) de bolo, que molda a memória como acharmos melhor moldá-la. Bom, para isso fazer sentido é necessário explicar memória, que é um conceito mais básico ainda.
A memória é qualquer lugar onde eu possa guardar alguma coisa. No artigo anterior era um punhado de gavetas. Mas poderiam muito bem ser caixas de presente. Ou um caderno. Ou até uma placa de memória RAM.</description>
</item>

     
        <item>
  <title>Básico do básico: ponteiros</title>
  <link>http://www.caloni.com.br/basico-do-basico-ponteiros/</link>
  <pubDate>2008-12-06</pubDate>
  
  <guid>http://www.caloni.com.br/basico-do-basico-ponteiros/</guid>
  <description>Nessas últimas semanas tenho gastado meu tempo junto da mais nova pupila da SCUA, aspirante a programadora em C e Install Shield Script. Minha tarefa? Explicar tudo, desde o mais simples, como variáveis, até as coisas não tão triviais, como símbolos de depuração.
Posso afirmar que tem sido muito compensador ativar algumas partes do meu cérebro que acreditava nem mais existirem. Rever velhos conceitos, apesar de manjados, nos dá a oportunidade de lembrar que as coisas mais complexas que construímos no dia-a-dia se baseiam em um punhado de preceitos básicos que é essencial ter na cabeça.</description>
</item>

     
        <item>
  <title>HouaissParaBabylon versão beta</title>
  <link>http://www.caloni.com.br/houaissparababylon-versao-beta/</link>
  <pubDate>2008-11-15</pubDate>
  
  <guid>http://www.caloni.com.br/houaissparababylon-versao-beta/</guid>
  <description>Depois de muitos fins-de-semana divididos em horas picadinhas de programação de lazer, está disponível em vosso saite a primeira versão para usuários do conversor do dicionário Houaiss para o aplicativo Babylon.
Foi uma longa jornada, sim, mas espero que valha a pena para quem esperou. Também espero poder receber inúmeras respostas com dúvidas, sugestões e até mesmo mais problemas que vierem a acontecer.
Segue um pequeno roteiro do funcionamento do programa, que é bem simples, aliás.</description>
</item>

     
        <item>
  <title>Como funciona o PsExec</title>
  <link>http://www.caloni.com.br/como-funciona-o-psexec/</link>
  <pubDate>2008-10-29</pubDate>
  
  <guid>http://www.caloni.com.br/como-funciona-o-psexec/</guid>
  <description>Semana passada precisei reproduzir o comportamento da ferramenta PsExec em um projeto, o que me fez sentir alguma nostalgia dos tempos em que eu fazia engenharia reversa todo dia. Este breve relato (espero) reproduz os passos que segui para descobrir o que esse programa tão útil quanto perigoso faz.
Sabe-se que o PsExec consegue executar um programa remotamente, ou seja, de uma máquina para outra, outra essa que chamaremos de máquina-alvo.</description>
</item>

     
        <item>
  <title>A alça dentro do fio gerou um bloqueio da morte</title>
  <link>http://www.caloni.com.br/a-alca-dentro-do-fio-gerou-um-bloqueio-da-morte/</link>
  <pubDate>2008-10-21</pubDate>
  
  <guid>http://www.caloni.com.br/a-alca-dentro-do-fio-gerou-um-bloqueio-da-morte/</guid>
  <description>Estava folheando um livro fenomenal que meu amigo havia pedido emprestado para ler quando me deparei com algumas traduções (o livro estava em português) no mínimo curiosas.
Se trata do primeiro Windows Internals publicado após o lançamento da primeira versão do Windows NT, uma plataforma escrita (quase) inteiramente do zero para suplantar as versões 9x, que herdaram do DOS algumas partes indesejáveis em sistemas operacionais modernos.
Sabe-se lá por que, essa edição foi traduzida.</description>
</item>

     
        <item>
  <title>Como usar WTL com o ATL do DDK</title>
  <link>http://www.caloni.com.br/como-usar-wtl-com-o-atl-do-ddk/</link>
  <pubDate>2008-10-15</pubDate>
  
  <guid>http://www.caloni.com.br/como-usar-wtl-com-o-atl-do-ddk/</guid>
  <description>No entanto, num belo dia, qual não foi minha surpresa ao notar umas pastinhas chamadas atl21, atl30 e atl71 dentro da distribuição do WDK (o finado DDK, renomeado sabe-se-lá-por-quê)? Pelo visto, tem alguém arrastando coisa errada pra onde não devia nos instaladores de Seattle. Esses estagiários!
O fato é que eles fizeram isso, e agora é possível ter o WTL mais novo compilado com o WDK. E nem é tão difícil assim.</description>
</item>

     
        <item>
  <title>Windows Jobs com Completion Port</title>
  <link>http://www.caloni.com.br/windows-jobs-com-completion-port/</link>
  <pubDate>2008-09-23</pubDate>
  
  <guid>http://www.caloni.com.br/windows-jobs-com-completion-port/</guid>
  <description>Ou &amp;ldquo;Como esperar o término de todos os processos-filho criados a partir de um conjunto de processos&amp;rdquo;.
Dessa vez confesso que esperava um pouco mais de documentação do MSDN, ou pelo menos um sistema de referências cruzadas eficiente. Outro dia demorei cerca de duas horas para conseguir criar um job.aspx), anexar o processo desejado e, a pior parte, esperar que todos os processos (o principal e seus filhos e netos) terminassem.</description>
</item>

     
        <item>
  <title>Reúna seus comandos mais usados no WinDbg com .cmdtree</title>
  <link>http://www.caloni.com.br/reuna-seus-comandos-mais-usados-no-windbg-com-cmdtree/</link>
  <pubDate>2008-09-19</pubDate>
  
  <guid>http://www.caloni.com.br/reuna-seus-comandos-mais-usados-no-windbg-com-cmdtree/</guid>
  <description>Tudo começou com o artigo de Roberto Farah sobre o comando &amp;ldquo;escondido&amp;rdquo; do WinDbg .cmdtree. Logo depois meus outros colegas do fã-clube do WinDbg Volker von Einem e Dmitry Vostokov comentaram sobre a imensa utilidade desse comando.
E não é pra menos. É de longe o melhor comando não-documentado do ano. Tão bom que sou obrigado a comentar em português sobre ele, apesar dos três artigos já citados.
E eu estava justamente falando sobre essa mania dos programadores sempre acharem soluções para tarefas repetitivas e monótonas que o computador possa fazer sozinho.</description>
</item>

     
        <item>
  <title>Retorno do PathIsDirectory</title>
  <link>http://www.caloni.com.br/retorno-do-pathisdirectory/</link>
  <pubDate>2008-09-10</pubDate>
  
  <guid>http://www.caloni.com.br/retorno-do-pathisdirectory/</guid>
  <description>Estava eu outro dia programando aquele código esperto &amp;ldquo;para ontem&amp;rdquo; quando me deparei com uma situação no mínimo inusitada. Ao testar se um caminho recebido era de fato um diretório.aspx) me foi retornado pela API um valor diferente de TRUE. E diferente de FALSE!
De acordo com a documentação, o retorno deveria ser TRUE caso o caminho enviado à função fosse de fato um diretório. Caso contrário, o retorno deveria ser FALSE.</description>
</item>

     
        <item>
  <title>ProcessLeaker</title>
  <link>http://www.caloni.com.br/processleaker/</link>
  <pubDate>2008-08-21</pubDate>
  
  <guid>http://www.caloni.com.br/processleaker/</guid>
  <description>O artigo anterior mostrava como detectar o leak de um processo gerado pela retenção e não-liberação de handles para o Windows Explorer. O problema fora causado por um serviço malcriado. No entanto, a título de demonstração, criei um pequeno programinha sem-vergonha para fazer as coisas parecerem difíceis. No entanto o programa é bem fácil:
Para usá-lo, basta abrir um Gerenciador de Tarefas com opção de exibir o PID dos processos.</description>
</item>

     
        <item>
  <title>Os processos-fantasma</title>
  <link>http://www.caloni.com.br/os-processos-fantasma/</link>
  <pubDate>2008-08-20</pubDate>
  
  <guid>http://www.caloni.com.br/os-processos-fantasma/</guid>
  <description>Estava eu outro belo dia tentando achar um problema em um driver que controla criação de processos quando, por acaso, listo os processos na máquina pelo depurador de kernel, após ter dado alguns logons e logoffs, quando me vem a seguinte lista de processos do Windows Explorer:
Analisando pelo Gerenciador de Tarefas, podemos detectar que o único processo de pé possui o PID (Process ID) do último elemento de nossa lista, curiosamente o único com um contador de handles diferente de zero.</description>
</item>

     
        <item>
  <title>Quando o navegador não quer largar um arquivo</title>
  <link>http://www.caloni.com.br/quando-o-navegador-nao-quer-largar-um-arquivo/</link>
  <pubDate>2008-08-13</pubDate>
  
  <guid>http://www.caloni.com.br/quando-o-navegador-nao-quer-largar-um-arquivo/</guid>
  <description>De vez em quando gosto muito de um vídeo que estou assistindo. Gosto tanto que faço questão de guardar para assistir mais vezes depois. O problema é que o meu Firefox ou, para ser mais técnico, o plugin de vídeo que roda em cima do meu navegador, não permite isso. Ele simplesmente cria um arquivo temporário para exibir o vídeo e logo depois o apaga, utilizando uma técnica muito útil da função CreateFile, que bloqueia o acesso do arquivo temporário e apaga-o logo após o uso:</description>
</item>

     
        <item>
  <title>Guia para iniciantes no DriverEntry</title>
  <link>http://www.caloni.com.br/guia-para-iniciantes-no-driverentry/</link>
  <pubDate>2008-08-11</pubDate>
  
  <guid>http://www.caloni.com.br/guia-para-iniciantes-no-driverentry/</guid>
  <description>A mensagem anterior deixou bem claro que tenho um roteiro de leituras bem hardcore a fazer nos próximos 20 anos. Pretendo, enquanto isso, programar alguma coisinha rodando em ring0, porque nem só de teoria vive o programador-escovador-de-bits. Pensando nisso, esse fim-de-semana comecei a me aventurar nos ótimos exemplos e explicações do DriverEntry.com.br, nossa referência kernel mode tupiniquim.
A exemplo do que Dmitry fez com os livros de drivers, acredito que a mesma coisa pode ser feita com os blogues.</description>
</item>

     
        <item>
  <title>Aprendizado em kernel mode</title>
  <link>http://www.caloni.com.br/aprendizado-em-kernel-mode/</link>
  <pubDate>2008-08-07</pubDate>
  
  <guid>http://www.caloni.com.br/aprendizado-em-kernel-mode/</guid>
  <description>Hoje terminei minha primeira leitura de Memory Dump Analysis Vol. 1, e qual não foi a minha surpresa ao encontrar entre os últimos posts justamente o que eu estava precisando: um guia de livros que se deve ler para começar a programar em kernel mode.
O melhor de tudo nem é a lista de livros, cujos títulos já estão batidos na minha cabeça de tanto meu amigo Ferdinando comentar a respeito.</description>
</item>

     
        <item>
  <title>Antidebugging during the process attach</title>
  <link>http://www.caloni.com.br/antidebugging-during-the-process-attach/</link>
  <pubDate>2008-08-05</pubDate>
  
  <guid>http://www.caloni.com.br/antidebugging-during-the-process-attach/</guid>
  <description>Today was a great day for reverse engineering and protection analysis. I&amp;rsquo;ve found two great programs to to these things: a API call monitor and a COM call monitor. Besides that, in the first program site - from a enthusiastic of the good for all Win32 Assembly - I&amp;rsquo;ve found the source code for one more antidebugging technique, what bring us back to our series of antidebugging techniques.
The purpose of this protection is to detect if some debugger tries to attach into our running process.</description>
</item>

     
        <item>
  <title>Antidebugging using the DebugPort</title>
  <link>http://www.caloni.com.br/antidebugging-using-the-debugport/</link>
  <pubDate>2008-08-01</pubDate>
  
  <guid>http://www.caloni.com.br/antidebugging-using-the-debugport/</guid>
  <description>When a debugger starts a process to be debugged or, the article case, connects to a already created process, the communication between these processes is made through an internal resource inside Windows called LPC (Local Procedure Call). The system creates a &amp;ldquo;magic&amp;rdquo; communication port for debugging and the debugging events pass throw it.
Among these events we can tell the most frequent:
  Activated breakpoints
  Thrown exceptions</description>
</item>

     
        <item>
  <title>Antidebugging using exceptions (part two)</title>
  <link>http://www.caloni.com.br/antidebugging-using-exceptions-part-two/</link>
  <pubDate>2008-07-30</pubDate>
  
  <guid>http://www.caloni.com.br/antidebugging-using-exceptions-part-two/</guid>
  <description>In the first article we saw how it&amp;rsquo;s possible to spoof the debugger through exceptions and let the attacker lose some considerable time trying to unbind the program from the fake breakpoints. However, we saw also that this is a difficult solution to keep in the source code, besides its main weakness to be easily bypassed if discovered. Now it&amp;rsquo;s time to put things easier to support and at the same time to guarantee tough times even if the attacker discover what is going on.</description>
</item>

     
        <item>
  <title>Antidebugging using exceptions (part one)</title>
  <link>http://www.caloni.com.br/antidebugging-using-exceptions-part-one/</link>
  <pubDate>2008-07-28</pubDate>
  
  <guid>http://www.caloni.com.br/antidebugging-using-exceptions-part-one/</guid>
  <description>A debugger puts breakpoints to stop for a moment the debuggee execution. In order to do this it makes use of a well known instruction: int 3. This instruction throws an exception - the breakpoint exception - that is caught by the operating system and bypassed to the handling code for this exception. For debuggee processes this code is inside the debugger. For free processes this code normally doesn&amp;rsquo;t exist and the application simply crashs.</description>
</item>

     
        <item>
  <title>Aprenda a usar sua API</title>
  <link>http://www.caloni.com.br/aprenda-a-usar-sua-api/</link>
  <pubDate>2008-07-22</pubDate>
  
  <guid>http://www.caloni.com.br/aprenda-a-usar-sua-api/</guid>
  <description>É conhecido que uma das desvantagens de se programar diretamente em Win32 API é a dificuldade de se entender os parâmetros e o retorno das funções. Concordo em parte. Constituída de boa documentação, parte da culpa dos programas mal-feitos reside na preguiça do programador em olhar a documentação por completo.
A Win32 API está longe de ser perfeita, mas pelo menos está razoavelmente documentada, e é na leitura atenta da documentação que iremos encontrar as respostas que precisamos para que o programa funcione.</description>
</item>

     
        <item>
  <title>O conhecido unresolved external</title>
  <link>http://www.caloni.com.br/o-conhecido-unresolved-external/</link>
  <pubDate>2008-07-18</pubDate>
  
  <guid>http://www.caloni.com.br/o-conhecido-unresolved-external/</guid>
  <description>O artigo anterior mostrou que nem sempre as coisas são simples de resolver, mas que sempre existe um caminho a seguir e que, eventualmente, todos os problemas se solucionarão.
Porém, resolver um problema por si só não basta: é preciso rapidez. E como conseguimos rapidez para resolver problemas? Um jeito que eu, meu cérebro e o Dmitry Vostokov conhecem é montando padrões.
Um padrão nos ajuda a não pensar novamente em coisas que sabemos a resposta, de tantas vezes que já fizemos.</description>
</item>

     
        <item>
  <title>O caso da função de Delay Load desaparecida</title>
  <link>http://www.caloni.com.br/o-caso-da-funcao-de-delay-load-desaparecida/</link>
  <pubDate>2008-07-16</pubDate>
  
  <guid>http://www.caloni.com.br/o-caso-da-funcao-de-delay-load-desaparecida/</guid>
  <description>Todos os projetos do Visual Studio 6 estavam compilando normalmente com a nova modificação do código-fonte, uma singela chamada a uma função.aspx) da DLL iphlpapi.dll. No entanto, ainda restava a compilação para Windows 95, um legado que não era permitido esquecer devido ao parque antigo de máquinas e sistemas operacionais de nossos clientes.
Ora, acontece que a função em questão não existe em Windows 95! O que fazer?
Essa é uma situação comum e controlada, que chega a ser quase um padrão de projeto: funções novas demais.</description>
</item>

     
        <item>
  <title>Segunda versão do Houaiss2Babylon</title>
  <link>http://www.caloni.com.br/segunda-versao-do-houaiss2babylon/</link>
  <pubDate>2008-07-14</pubDate>
  
  <guid>http://www.caloni.com.br/segunda-versao-do-houaiss2babylon/</guid>
  <description>Depois de vários comentários (na época que o saite tinha comentários) de pessoas tendo problemas em converter seus dicionários Houaiss para o formato Babylon, resolvi criar vergonha na cara e dar uma pequena melhora na versão beta do conversor.
Agora a maioria dos erros que houver será descrita por uma mensagem no seguinte formato:
O primeiro erro acima ocorre principalmente se não houver algum Houaiss instalado que o programa possa detectar.</description>
</item>

     
        <item>
  <title>Primeiros passos no VMware Workstation</title>
  <link>http://www.caloni.com.br/primeiros-passos-no-vmware-workstation/</link>
  <pubDate>2008-07-10</pubDate>
  
  <guid>http://www.caloni.com.br/primeiros-passos-no-vmware-workstation/</guid>
  <description>Como uma ferramenta essencial que uso todos os dias da minha vida de programador, sou obrigado a falar neste blogue sobre a VMware, ferramenta que tem me salvado algumas centenas de horas de depuração, testes e alguns cabelos brancos (a mais).
Para os que não sabem, o VMware é um software de virtualização que permite rodar diversos sistemas operacionais secundários (chamados de convidados, ou guests) em cima do sistema operacional primário (chamado de hospedeiro, ou host).</description>
</item>

     
        <item>
  <title>Projeto-modelo</title>
  <link>http://www.caloni.com.br/projeto-modelo/</link>
  <pubDate>2008-07-08</pubDate>
  
  <guid>http://www.caloni.com.br/projeto-modelo/</guid>
  <description>É muito difícil construir um modelo de pastas que sirva para a maioria dos projetos que tivermos que colocar na fôrma. Ainda mais se esses projetos tiverem que futuramente fazer parte da mesma ramificação. Foi pensando em várias coisas que chegamos a uma versão beta que pode ajudar aqueles que ficam pensando durantes dias antes mesmo de colocar as mãos no código.
Antes de começar a pensar em como as pastas estarão alinhadas, é importante saber como funcionará o controle de código do seu projeto.</description>
</item>

     
        <item>
  <title>VirtualBox</title>
  <link>http://www.caloni.com.br/virtualbox/</link>
  <pubDate>2008-07-04</pubDate>
  
  <guid>http://www.caloni.com.br/virtualbox/</guid>
  <description>O VirtualBox parece ser o concorrente mais próximo atualmente da VMWare. Descobrimos ele essa semana e resolvemos fazer alguns testes. O resultado foi bem animador.
Desenvolvido pela Sun Microsystems, as características do VirtualBox impressionam pelo cuidado que houve em torná-lo muito parecido com sua concorrente paga. Apenas para começar, ela suporta dispositivos USB, possui múltiplos snapshots e já suporta o modo do VMWare Fusion - chamado de &amp;ldquo;seamless mode&amp;rdquo; - , que estará integrado na versão 7 da VMWare.</description>
</item>

     
        <item>
  <title>Pesquisas sobre a GINA</title>
  <link>http://www.caloni.com.br/pesquisas-sobre-a-gina/</link>
  <pubDate>2008-07-02</pubDate>
  
  <guid>http://www.caloni.com.br/pesquisas-sobre-a-gina/</guid>
  <description>Já sabemos o que é uma GINA. Afinal, todo mundo já viu uma antes. E sabemos que hoje em dia ela está morta.
No entanto, algumas pequenas mudanças foram feitas nela no Windows XP que ainda almaldiçoam o código de quem tenta reproduzir a famosa GINA da Microsoft. Nem todos chegam no final e morrem tentando.
Eu sou um deles.
Uma explicação sobre como funciona o processo de logon (local e remoto) e os componentes envolvidos está no artigo &amp;ldquo;How Interactive Logon Works&amp;rdquo; da Technet.</description>
</item>

     
        <item>
  <title>Reflexão em C&#43;&#43;</title>
  <link>http://www.caloni.com.br/reflexao-em-c/</link>
  <pubDate>2008-06-30</pubDate>
  
  <guid>http://www.caloni.com.br/reflexao-em-c/</guid>
  <description>O termo e conceito de &amp;ldquo;reflection)&amp;rdquo; (reflexão), muito usado em linguagens modernas, é a capacidade de um programa de observar e até de alterar sua própria estrutura. Bom, isso você pode ler na Wikipédia. O interessante é o que podemos usar desse conceito na linguagem C++.
Infelizmente não muito.
O sistema de RTTI (Run Time Type Identification), a identificação de tipos em tempo de execução, seria o começo do reflection em C++.</description>
</item>

     
        <item>
  <title>Primeiros passos na documentação de código-fonte usando Doxygen</title>
  <link>http://www.caloni.com.br/primeiros-passos-na-documentacao-de-codigo-fonte-usando-doxygen/</link>
  <pubDate>2008-06-26</pubDate>
  
  <guid>http://www.caloni.com.br/primeiros-passos-na-documentacao-de-codigo-fonte-usando-doxygen/</guid>
  <description>Comentários são essenciais em um código-fonte bem feito. O código pode até fazer milagres, salvar vidas e multiplicar pães, mas se não tiver um apóstolo eficiente que escreva um evangelho para ele, as pessoas não vão conseguir usar!
OK, a analogia foi horrível.
Bom, já que é pra fazer comentários, porque não fazê-los de uma forma que seja possível extrair todo esse texto diretamente do fonte e transformá-lo em documentação? Dessa forma você evita ter que abrir o Word (arght!</description>
</item>

     
        <item>
  <title>Como estou trabalhando com o Bazaar</title>
  <link>http://www.caloni.com.br/como-estou-trabalhando-com-o-bazaar/</link>
  <pubDate>2008-06-24</pubDate>
  
  <guid>http://www.caloni.com.br/como-estou-trabalhando-com-o-bazaar/</guid>
  <description>Depois de alguns ajustes e muitas perguntas do meu amigo-colega desenvolvedor Rafael, conseguimos definir alguns usos e costumes em nosso código controlado pelo Bazaar. Este é um guia para Dummies de como é possível organizar um ou mais projetos de forma a favorecer o refactoring e a liberdade de uso.
Nosso padrão de diretórios utiliza um repositório compartilhado e dentro, na mesma ramificação, os branches. O branch principal tem o mesmo nome do projeto.</description>
</item>

     
        <item>
  <title>É possível carregar duas DLLs gêmeas no mesmo processo?</title>
  <link>http://www.caloni.com.br/e-possivel-carregar-duas-dlls-gemeas-no-mesmo-processo/</link>
  <pubDate>2008-06-21</pubDate>
  
  <guid>http://www.caloni.com.br/e-possivel-carregar-duas-dlls-gemeas-no-mesmo-processo/</guid>
  <description>Um dos últimos artigos de Dmitry Vostokov, e tenho que falar assim porque o cara escreve muito em pouco tempo, fala sobre os perigos de termos uma mesma DLL carregada duas vezes em um único processo, muitas vezes em versões diferentes. Para os observadores atentos como Dmitry esse é um perigo que muitas vezes temos que estar preparados. Para os espertinhos de plantão, a resposta padrão seria: &amp;ldquo;não vou me preocupar, porque o contador de instâncias cuida disso&amp;rdquo;.</description>
</item>

     
        <item>
  <title>Alinhamento de memória portável</title>
  <link>http://www.caloni.com.br/alinhamento-de-memoria-portavel/</link>
  <pubDate>2008-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/alinhamento-de-memoria-portavel/</guid>
  <description>Como vimos durante o seminário CCPP, o alinhamento de memória pode ser problemático durante momentos críticos, como migração de plataforma (16 para 32 bits) e de ambiente (compilador novo). A forma como a memória é alinhada influi diretamente em algoritmos de criptografia, por exemplo, fazendo com que o que funcionava antes não funcione mais sem mexer uma única linha de código. Eu já vi isso. E isso não é bom.</description>
</item>

     
        <item>
  <title>Como fazer merge de projetos distintos no Bazaar</title>
  <link>http://www.caloni.com.br/como-fazer-merge-de-projetos-distintos-no-bazaar/</link>
  <pubDate>2008-06-16</pubDate>
  
  <guid>http://www.caloni.com.br/como-fazer-merge-de-projetos-distintos-no-bazaar/</guid>
  <description>O problema foi o seguinte: Nós iniciamos o controle de fonte pelo Bazaar na parte Linux do projeto, já que ela não iria funcionar pelo Source Safe, mesmo. Dessa forma apenas um braço do projeto estava no controle de fonte e o resto não.
No segundo momento da evolução decidimos começar a migrar os projetos para o Bazaar, inclusive a parte daquele projeto que compila no Windows. Maravilha. Ambos sendo controlados é uma beleza, não é mesmo?</description>
</item>

     
        <item>
  <title>Guia básico de repositórios no Bazaar</title>
  <link>http://www.caloni.com.br/guia-basico-de-repositorios-no-bazaar/</link>
  <pubDate>2008-06-10</pubDate>
  
  <guid>http://www.caloni.com.br/guia-basico-de-repositorios-no-bazaar/</guid>
  <description>Alguns conceitos-chave antes de trabalhar com o Bazaar são:
 Revision (Revisão). Um snapshot dos arquivos que você está trabalhando. Working Tree (Árvore de Trabalho). Um diretório contendo seus arquivos controlados por versão e subdiretórios. Branch (Ramificação). Um grupo ordenado de revisões que descreve o histórico de um grupo de arquivos. Repository (Repositório). Um depósito de revisões.  Agora vamos brincar um pouco com os conceitos.
O uso mais simples que existe no Bazaar é o controle de uma pasta sozinha, conhecida como uma Standalone Tree.</description>
</item>

     
        <item>
  <title>Declaração x definição</title>
  <link>http://www.caloni.com.br/declaracao-x-definicao/</link>
  <pubDate>2008-06-06</pubDate>
  
  <guid>http://www.caloni.com.br/declaracao-x-definicao/</guid>
  <description>Uma diferença que eu considero crucial na linguagem C/C++ é a questão da declaração/definição (em inglês, declaration/definition). É a diferença entre esses dois conceitos que permite, por exemplo, que sejam criadas estruturas prontas para serem conectadas a listas ligadas:
Por outro lado, e mais importante ainda, é ela que permite que as funções sejam organizadas em unidades de tradução (cpps) distintas para depois se unirem durante o link, mesmo que entre elas exista uma relação de dependência indissociável:</description>
</item>

     
        <item>
  <title>Launchpad e a democracia do código-fonte</title>
  <link>http://www.caloni.com.br/launchpad-e-a-democracia-do-codigo-fonte/</link>
  <pubDate>2008-06-04</pubDate>
  
  <guid>http://www.caloni.com.br/launchpad-e-a-democracia-do-codigo-fonte/</guid>
  <description>Após a publicação dos projetos que ando mexendo no próprio saite do Caloni.com.br, recebi uma enxurrada de downloads e quase atingi meu limite de fluxo mensal no provedor.
Devido a esse problema inesperado, irei fazer o inevitável: publicar os projetos em um repositório sério. E aproveitando que já estou usando o Bazaar, nada melhor que usar o Launchpad.net.
O Launchpad nada mais é do que um lugar onde é possível publicar seus projetos de fonte aberto para que pessoas possam ter livre acesso ao seu histórico de mudanças, assim como a liberdade de criar sua própria ramificação (branch).</description>
</item>

     
        <item>
  <title>Como criar uma LIB no Visual Studio</title>
  <link>http://www.caloni.com.br/como-criar-uma-lib-no-visual-studio/</link>
  <pubDate>2008-05-29</pubDate>
  
  <guid>http://www.caloni.com.br/como-criar-uma-lib-no-visual-studio/</guid>
  <description>Quando se está começando no ramo, alguns detalhes nunca vêm à tona para o programador novato. Ele simplesmente vai codando até se sentir satisfeito com o prazer que é proporcionado pela prática da arte dos deuses de silício.
Isso, em termos práticos, quer dizer que todo o fonte vai ser escrito no mesmo &amp;ldquo;.c&amp;rdquo;, que aliás talvez nem se dê ao luxo de possuir seu próprio &amp;ldquo;.h&amp;rdquo;: pra quê, se as funções são todas amigas de infância e todas se conhecem?</description>
</item>

     
        <item>
  <title>How to run anything as a service</title>
  <link>http://www.caloni.com.br/how-to-run-anything-as-a-service/</link>
  <pubDate>2008-05-27</pubDate>
  
  <guid>http://www.caloni.com.br/how-to-run-anything-as-a-service/</guid>
  <description>The biggest advantage running an application as a service, interactive or not, is to allow its start before a logon be performed. An example that happens to me is the need of debugging a GINA. In order to do this, I need the Visual Studio remote debugger be started before logon. The easiest and fastest solution is to run Msvcmon, the server part of debugging, as a service.
Today I&amp;rsquo;ve figured out a pretty interesting shortcut to achieve it.</description>
</item>

     
        <item>
  <title>Aprendendo rapidamente conceitos essenciais do WinDbg</title>
  <link>http://www.caloni.com.br/aprendendo-rapidamente-conceitos-essenciais-do-windbg/</link>
  <pubDate>2008-05-23</pubDate>
  
  <guid>http://www.caloni.com.br/aprendendo-rapidamente-conceitos-essenciais-do-windbg/</guid>
  <description>Todo o poder e flexibilidade do pacote Debugging Tools da Microsoft pode ser ofuscado pela sua complexidade e curva de aprendizagem. Afinal de contas, usar o depurador do Visual Studio é muito fácil, quando se começa a usar, mas mesmo assim conheço muitos programadores que relutam em depurar passo-a-passo, preferindo a depuração por meio de &amp;ldquo;MessageBoxes&amp;rdquo; ou saídas na tela. Imagine, então, a dificuldade que não é para quem conseguiu às duras penas aprender a tornar um hábito a primeira passada do código novo em folha através do F10 começar a fazer coisas como configurar símbolos e digitar comandos exdrúxulos em uma tela em modo texto.</description>
</item>

     
        <item>
  <title>MouseTool: clique automático do seu rato</title>
  <link>http://www.caloni.com.br/mousetool-clique-automatico-do-seu-rato/</link>
  <pubDate>2008-05-21</pubDate>
  
  <guid>http://www.caloni.com.br/mousetool-clique-automatico-do-seu-rato/</guid>
  <description>Bem, como a maioria de você já sabe, eu realmente não gosto de mouses. Apesar disso respeito os usuário que usam-no e até gostam dele. Essa é a razão por que estou escrevendo mais uma vez sobre isso. Dessa vez, irei mostrar um programa que eu uso todos os dias: MouseTool, para os usuários que não usam o mouse, mas gostam dele [1].
O principal objetivo do programa é evitar de clicar no mouse, simulando um clique toda vez que o usuário pára de mover o ponteiro.</description>
</item>

     
        <item>
  <title>Busca do Google com atalhos</title>
  <link>http://www.caloni.com.br/busca-do-google-com-atalhos/</link>
  <pubDate>2008-05-19</pubDate>
  
  <guid>http://www.caloni.com.br/busca-do-google-com-atalhos/</guid>
  <description>Eu adoro atalhos de teclado. Desde meus primeiros anos usando computadores, atalhos têm se tornado minha obsessão. Sempre faço minha pesquisa pessoal de tempos em tempos, colecionando e usando novos atalhos descobertos. Por um bom tempo eu evitei ter que usar o mouse, treinando-me para lembrar de todas as seqüências de teclas que conhecia.
Eu não tenho nada contra o uso do mouse nem as pessoas que o usam. Eu apenas não sou tão entusiástico em usar o mouse.</description>
</item>

     
        <item>
  <title>Aquele do-while engraçado</title>
  <link>http://www.caloni.com.br/aquele-do-while-engracado/</link>
  <pubDate>2008-05-15</pubDate>
  
  <guid>http://www.caloni.com.br/aquele-do-while-engracado/</guid>
  <description>Nesses últimos dias andei conversando com um amigo que está estudando sistemas operacionais na faculdade. Melhor ainda, vendo o código real de um sistema operacional em funcionamento. A conseqüência é que, além de aprender um bocado de como as coisas funcionam de verdade debaixo dos panos, acaba-se aprendendo alguns truquezinhos básicos e tradicionais da linguagem C.
Por exemplo, é um hábito conhecido o uso de construções do-while quando existe a necessidade de definir uma macro que possui mais de um comando em vez de usar a igualmente conhecida { construção de múltiplos comandos entre chaves }.</description>
</item>

     
        <item>
  <title>Kernel Mode &gt;&gt; User Mode</title>
  <link>http://www.caloni.com.br/kernel-mode-user-mode/</link>
  <pubDate>2008-05-13</pubDate>
  
  <guid>http://www.caloni.com.br/kernel-mode-user-mode/</guid>
  <description>Existem algumas situações onde um depurador WYSIWYG é artigo de luxo.
Imagine o seguinte: temos um serviço que inicia automagicamente antes do login do Windows, e possivelmente antes mesmo do ambiente gráfico. Esse serviço tem algum problema que impede que ele funcione sob as circunstâncias de inicialização do sistema. O que fazer? Atachar o WinDbg no processo?
Mas que mané WinDbg? Que mané atachar? Nessa hora nós temos bem menos do que nossos sentidos são capazes de enxergar.</description>
</item>

     
        <item>
  <title>Como tratar um merge no Bazaar</title>
  <link>http://www.caloni.com.br/como-tratar-um-merge-no-bazaar/</link>
  <pubDate>2008-05-09</pubDate>
  
  <guid>http://www.caloni.com.br/como-tratar-um-merge-no-bazaar/</guid>
  <description>Hoje fizemos um merge de duas versões que entraram em conflito em nosso projeto-piloto usando bzr. Isso geralmente ocorre quando alguma coisa mudou no mesmo arquivo em lugares muito próximos um do outro. Veremos um exemplo de código para ter uma idéia de quão fácil é o processo:
A execução do programa contém uma saída parecida com as linhas abaixo:
Parece que está faltando algumas quebras de linha. Além de que sabemos que nossos arquivos de entrada poderão conter até 200 caracteres por linha, o que pode gerar um desastre em nosso buffer de 100 bytes.</description>
</item>

     
        <item>
  <title>Acessando memória física no WinDbg</title>
  <link>http://www.caloni.com.br/acessando-memoria-fisica-no-windbg/</link>
  <pubDate>2008-05-01</pubDate>
  
  <guid>http://www.caloni.com.br/acessando-memoria-fisica-no-windbg/</guid>
  <description>Como muitos devem saber, acessar memória virtual no WinDbg é coisa de criança, assim como em todo depurador decente. Se estamos falando de kernel mode então, nem se fala! A memória virtual é parte integrante do sistema operacional. Podemos saber mais sobre isso lendo o artigo do Strauss sobre gerenciamento de memória no Windows.
Porém, existem situações, como a que passei essa semana, onde é preciso saber e alterar o conteúdo da memória de verdade, mesmo.</description>
</item>

     
        <item>
  <title>Bazaar e Fedora 8: a saga</title>
  <link>http://www.caloni.com.br/bazaar-e-fedora-8-a-saga/</link>
  <pubDate>2008-04-29</pubDate>
  
  <guid>http://www.caloni.com.br/bazaar-e-fedora-8-a-saga/</guid>
  <description>Seria bom se as coisas simples da vida fossem simples, não é mesmo?
Ontem, sexta passada e quinta passada, no meio de outras tarefas &amp;ldquo;urgentes&amp;rdquo;, tentava desesperadamente conseguir instalar o Bazaar na minha VM de desenvolvimento, um Fedora 8 todinho configurado.
Para azar da minha pessoa, o guia simples e rápido de instalação do Bazaar não funcionava para minha distribuição Linux. Na verdade, funciona. Porém, é instalada uma versão tão antiga (0.</description>
</item>

     
        <item>
  <title>Ode ao C&#43;&#43;</title>
  <link>http://www.caloni.com.br/ode-ao-c/</link>
  <pubDate>2008-04-21</pubDate>
  
  <guid>http://www.caloni.com.br/ode-ao-c/</guid>
  <description>Strauss: lembra quando nós conversávamos sobre o assunto &amp;ldquo;Por que C++?&amp;quot;, há muitas décadas atrás, e seu blogue era um dos primeiros no Brasil que não ficava relatando o que o autor comia no café da manhã, além de falar sobre programação? Pois é, eu estava reorganizando meus g-mails e reencontrei nossa conversa e, pior, seu artigo &amp;ldquo;derivado&amp;rdquo; dela, que irei republicar aqui pois, assim como antes, acredito em tudo que escrevi naquela época.</description>
</item>

     
        <item>
  <title>Crash Dump Analysis</title>
  <link>http://www.caloni.com.br/crash-dump-analysis-o-livro/</link>
  <pubDate>2008-04-17</pubDate>
  
  <guid>http://www.caloni.com.br/crash-dump-analysis-o-livro/</guid>
  <description>Para quem acabou de terminar o Advanced Windows Debugging (como eu) e não consegue ler no computador os complicados artigos de Dmitry Vostokov (como eu), &amp;ldquo;seus problemas acabaram-se&amp;rdquo;: acabou de ser lançado o Memory Dump Analysis Volume 1 em hardware! Em modelos portáveis (paperback) e desktop (hardcover).
Se você perder um pouco de tempo lendo o índice online, perceberá que boa parte do conteúdo (se não todo) está em seu sítio, disponível gratuitamente.</description>
</item>

     
        <item>
  <title>Guia básico de controle de código (Mercurial)</title>
  <link>http://www.caloni.com.br/guia-basico-de-controle-de-codigo-mercurial/</link>
  <pubDate>2008-04-15</pubDate>
  
  <guid>http://www.caloni.com.br/guia-basico-de-controle-de-codigo-mercurial/</guid>
  <description>Houve um bom motivo para que, semana passada, eu estivesse caçando inúmeras versões de um projeto desenvolvido fora da empresa: falta de controle de código. Esse tipo de lapso pode consumir de horas a dias de tempo perdido, dependendo de em quantas cópias de máquinas virtuais ficou espalhado o código.
Já escrevi a respeito da importância de controlar e gerenciar o código-fonte para que a falta de um histórico exato das alterações não seja motivo de recorreções de problemas, binários no cliente sem contraparte para ajustes, além de uma série de dores de cabeça que costumam começar a ocorrer assim que nos damos conta que nosso software está uma bagunça que dói.</description>
</item>

     
        <item>
  <title>Aprendendo assembly com o depurador</title>
  <link>http://www.caloni.com.br/aprendendo-assembly-com-o-depurador/</link>
  <pubDate>2008-04-11</pubDate>
  
  <guid>http://www.caloni.com.br/aprendendo-assembly-com-o-depurador/</guid>
  <description>Além de servir para corrigir alguns bugs escabrosos, o nosso bom e fiel amigo depurador também possui uma utilidade inusitada: ensinar assembly! A pessoa interessada em aprender alguns conceitos básicos da arquitetura do 8086 pode se exercitar na frente de um depurador 16 ou 32 bits sem ter medo de ser feliz.
Vamos ver alguns exemplos?
Para quem está começando, recomendo usar um depurador simples, 16 bits e que existe em todo e qualquer Windows: o debug.</description>
</item>

     
        <item>
  <title>Linux e o DHCP</title>
  <link>http://www.caloni.com.br/linux-e-o-dhcp/</link>
  <pubDate>2008-04-09</pubDate>
  
  <guid>http://www.caloni.com.br/linux-e-o-dhcp/</guid>
  <description>Quando procuramos no google por &amp;ldquo;linux dhcp&amp;rdquo;, o que vem em resposta são diversas dicas, tutoriais, documentos oficiais e palpites sobre como configurar um servidor Linux.
Muito bem. E a outra ponta da história?
[Testes feitos em um Fedora 8, não me pergunte mais detalhes]
O primeiro linque útil encontrado foi a documentação da Red Hat. Além disso seguem alguns macetes que eu descobri no decorrer do percurso. A primeira coisa a ser configurada é o arquivo /etc/sysconfig/network.</description>
</item>

     
        <item>
  <title>Conversor de Houaiss para Babylon - parte 2</title>
  <link>http://www.caloni.com.br/conversor-de-houaiss-para-babylon-parte-2/</link>
  <pubDate>2008-04-08</pubDate>
  
  <guid>http://www.caloni.com.br/conversor-de-houaiss-para-babylon-parte-2/</guid>
  <description>Após algumas semanas de suspense, chegamos finalmente à nossa segunda e última parte da saga do dicionário Houaiss.
Como devem estar lembrados, a primeira parte se dispôs a desmontar a ofuscação usada nos arquivos do dicionário para permitir nossa posterior análise, com o simples e justo objetivo de importá-lo para o Babylon, cujas funcionalidades de busca são bem superiores.
Feito isso, agora nos resta entender a estrutura interna do Houaiss para montar um conversor que irá ajudar o Babylon Builder a construir nosso Houaiss-Babylon.</description>
</item>

     
        <item>
  <title>Try-catch flutuante</title>
  <link>http://www.caloni.com.br/try-catch-flutuante/</link>
  <pubDate>2008-04-03</pubDate>
  
  <guid>http://www.caloni.com.br/try-catch-flutuante/</guid>
  <description>Esse detalhe da linguagem quem me fez descobrir foi o Yorick, que costuma comentar no blogue (na época que o blogue tinha comentários) e tive o prazer de conhecer no 4o. EPA-CCPP.
É possível, apesar de bizarro, colocar um bloco try-catch em torno da lista de inicialização de variáveis de um construtor. Essa característica da linguagem permite que possamos capturar alguma exceção lançada por algum construtor de algum membro da classe.</description>
</item>

     
        <item>
  <title>Backup de pobre</title>
  <link>http://www.caloni.com.br/backup-de-pobre/</link>
  <pubDate>2008-03-28</pubDate>
  
  <guid>http://www.caloni.com.br/backup-de-pobre/</guid>
  <description>O backup - ato de fazer cópia(s) de segurança de dados considerados importantes -, como tudo na vida, para se tornar efetivo e transformador deve antes se tornar um hábito.
Hábitos, por definição, ao serem realizados repetidamente muitas vezes, podem se tornar poderosos catalisadores de tarefas, sejam elas cozinhar um bolo, compilar um programa ou fazer backups. Por isso é muito importante que o backup, antes de ser 100% seguro, seja 100% previsível e habitual.</description>
</item>

     
        <item>
  <title>WinDbg a distância</title>
  <link>http://www.caloni.com.br/windbg-a-distancia/</link>
  <pubDate>2008-03-26</pubDate>
  
  <guid>http://www.caloni.com.br/windbg-a-distancia/</guid>
  <description>Acho que o que mais me impressionou até hoje a respeito do WinDbg é a sua capacidade de depuração remota. Não há nada como depurar problemas sentado confortavelmente na sua cadeira de programador em frente à sua mesa de programador.
Já é fato consumado que os maiores problemas da humanidade ocorrem sempre no cliente, com uma relação de dificuldade diretamente proporcional ao cargo ocupado pelo usuário da máquina que está dando problemas.</description>
</item>

     
        <item>
  <title>Depuração da MBR</title>
  <link>http://www.caloni.com.br/depuracao-da-mbr/</link>
  <pubDate>2008-03-24</pubDate>
  
  <guid>http://www.caloni.com.br/depuracao-da-mbr/</guid>
  <description>Dando continuidade a um artigo beeeem antigo sobre depuração da BIOS usando SoftIce, como já vimos, podemos igualmente depurar a MBR após a chamada da INT13. Porém, devo atentar para o fato que, em algumas VMs, e sob determinadas condições do tempo e quantidade de ectoplasma na atmosfera, é possível que a máquina trave após o hot boot iniciado pelo depurador. Isso provavelmente tem cura usando o espaço de endereçamento alto da memória com a ajuda de aplicativos como LH e UMB.</description>
</item>

     
        <item>
  <title>Como rodar qualquer coisa como serviço</title>
  <link>http://www.caloni.com.br/como-rodar-qualquer-coisa-como-servico/</link>
  <pubDate>2008-03-20</pubDate>
  
  <guid>http://www.caloni.com.br/como-rodar-qualquer-coisa-como-servico/</guid>
  <description>A maior vantagem de se rodar um aplicativo como serviço, interativo ou não, é permitir que ele seja iniciado antes que seja feito um logon na máquina. Um exemplo que acontece comigo é a necessidade de depurar a GINA. Para isso, preciso que o depurador remoto do Visual Studio seja iniciado antes do logon. A solução mais fácil e rápida é rodar o Msvcmon, a parte servidora da depuração, como um serviço.</description>
</item>

     
        <item>
  <title>Influence Board</title>
  <link>http://www.caloni.com.br/influence-board/</link>
  <pubDate>2008-03-14</pubDate>
  
  <guid>http://www.caloni.com.br/influence-board/</guid>
  <description>Há muito tempo sou enxadrista não-praticante. Acho que os anos de programação me deixaram mais viciado em codar do que pensar no xeque-mate. No entanto, sempre que posso, dou uma escapulida do Visual Studio e jogo uma partida ou duas na rede, quase sempre, é claro, tomando um piau psicológico.
A falta de prática e estudos pesa muito para um enxadrista amador, já que facilmente esquecemos das combinações mortíferas que podemos aplicar e levar.</description>
</item>

     
        <item>
  <title>O mistério das pilhas diferentes</title>
  <link>http://www.caloni.com.br/o-misterio-das-pilhas-diferentes/</link>
  <pubDate>2008-03-12</pubDate>
  
  <guid>http://www.caloni.com.br/o-misterio-das-pilhas-diferentes/</guid>
  <description>Mal comecei a leitura do meu mais novo &amp;ldquo;mother-fucker&amp;rdquo; livro e já encontrei a solução para nunca mais viver o terror que vivi quando tive que testar minha engenharia reversa do artigo sobre o Houaiss. Se trata de uma simples questão que não sei por que não sigo todas as vezes religiosamente: configure seus símbolos corretamente.
Esse é o primeiro ponto abordado pelo autor, por se tratar de algo que, caso não seja bem feito, pode dar dores de cabeça piores do que o próprio problema que originou a sessão de debugging.</description>
</item>

     
        <item>
  <title>Sed, Grep e afins</title>
  <link>http://www.caloni.com.br/sed-grep-e-afins/</link>
  <pubDate>2008-03-10</pubDate>
  
  <guid>http://www.caloni.com.br/sed-grep-e-afins/</guid>
  <description>Esse artigo é resultado de eu ter me matado para conseguir encontrar a forma correta de usar o aplicativo sed para fazer uma filtragem simples nos resultados de uma listagem de arquivos.
Primeiramente, eu gostaria de expressar minha total surpresa ao não conseguir encontrar um guia simples e confiável de uso dessas ferramentas na web. Existem três teorias: ou eu não sei usar as palavras mágicas certas no Google, ou a indexação das páginas realmente importantes sobre o assunto não funcionam com o Google, ou de fato não existe documentação fácil sobre o tema.</description>
</item>

     
        <item>
  <title>Iteradores não são constantes</title>
  <link>http://www.caloni.com.br/iteradores-nao-sao-constantes/</link>
  <pubDate>2008-03-04</pubDate>
  
  <guid>http://www.caloni.com.br/iteradores-nao-sao-constantes/</guid>
  <description>Um bug que já encontrei uma dúzia de vezes entre os novatos da STL é a utilização de iteradores como se eles não fossem mudar nunca. Porém, a verdade é bem diferente: iteradores se tornam inválidos sim, e com muito mais freqüência do que normalmente se imagina. Entre as situações em que iteradores podem mudar estão as seguintes:
  Inserção de novo elemento no contêiner
  Remoção de novo elemento no contêiner</description>
</item>

     
        <item>
  <title>Quando o ponteiro nulo não é inválido</title>
  <link>http://www.caloni.com.br/quando-o-ponteiro-nulo-nao-e-invalido/</link>
  <pubDate>2008-02-29</pubDate>
  
  <guid>http://www.caloni.com.br/quando-o-ponteiro-nulo-nao-e-invalido/</guid>
  <description>Pois bem. O mesmo amigo que me recomendou que escrevesse sobre o assunto do ponteiro nulo achou um livro sobre armadilhas em C com um exemplo que demonstra exatamente o contrário: dependendo da plataforma, ponteiros nulos são sim válidos.
Nesse caso, se tratava de um programa que iria rodar em um microprocessador, daqueles que o DQ costuma programar. Pois bem. Quando o dito cujo ligava era necessário chamar uma rotina que estava localizada exatamente no endereço 0.</description>
</item>

     
        <item>
  <title>Conversor de Houaiss para Babylon - parte 1</title>
  <link>http://www.caloni.com.br/conversor-de-houaiss-para-babylon-parte-1/</link>
  <pubDate>2008-02-27</pubDate>
  
  <guid>http://www.caloni.com.br/conversor-de-houaiss-para-babylon-parte-1/</guid>
  <description>Este artigo é sobre desmontar e montar novamente. Iremos descobrir como as entradas do dicionário Houaiss eletrônico estão gravadas em um primeiro momento, para depois remontarmos essa informação de maneira que ela possa ser usada em outro dicionário de uso mais flexível, o Babylon. Ou seja, este não é um guia de vandalismo. Estava apenas querendo usar um dicionário de qualidade excelente em outro dicionário cuja interface é muito boa.</description>
</item>

     
        <item>
  <title>Códigos de entrevista - o ponteiro nulo</title>
  <link>http://www.caloni.com.br/codigos-de-entrevista-o-ponteiro-nulo/</link>
  <pubDate>2008-02-25</pubDate>
  
  <guid>http://www.caloni.com.br/codigos-de-entrevista-o-ponteiro-nulo/</guid>
  <description>Bom, parece que o &amp;ldquo;mother-fucker&amp;rdquo; wordpress ferrou com meu artigo sobre o Houaiss. Enquanto eu choro as pitangas aqui vai um outro artigo um pouco mais simples, mas igualmente interessante.
&amp;ldquo;Wanderley, tenho umas sugestões para teu blog. A primeira: Que tal analisar o código abaixo e dizer se compila ou não. Se não compilar, explicar porquê não compila. Se compilar, o que acontecerá e por quê.&amp;rdquo;
O código é o que veremos abaixo:</description>
</item>

     
        <item>
  <title>Configurando seus projetos no Visual Studio</title>
  <link>http://www.caloni.com.br/configurando-seus-projetos-no-visual-studio/</link>
  <pubDate>2008-02-21</pubDate>
  
  <guid>http://www.caloni.com.br/configurando-seus-projetos-no-visual-studio/</guid>
  <description>Ao iniciar na arte da programação em C no Visual Studio, eventualmente o programador irá querer testar seus programas rodando em outra máquina que não seja a de desenvolvimento, mandar uma versão beta para amigos, pra namorada e pro seu cachorro. Geralmente, por padrão, existem algumas dependências do programa compilado com uma DLL de runtime da versão do ambiente em que foi compilado o dito cujo, dificultando um pouco a distribuição do seu motherfucker-program.</description>
</item>

     
        <item>
  <title>Os diferentes erros na linguagem C</title>
  <link>http://www.caloni.com.br/os-diferentes-erros-na-linguagem-c/</link>
  <pubDate>2008-02-15</pubDate>
  
  <guid>http://www.caloni.com.br/os-diferentes-erros-na-linguagem-c/</guid>
  <description>Uma coisa que me espanta de vez em quando é o total desconhecimento por programadores mais ou menos experientes dos níveis de erros que podem ocorrer em um fonte escrito em C ou C++. Desconheço o motivo, mas desconfio que o fato de outras linguagens não terem essa divisão de processos pode causar alguma nivelação entre as linguagens e fazer pensar que o processo de compilação em C é como em qualquer outra linguagem.</description>
</item>

     
        <item>
  <title>Funky do-while</title>
  <link>http://www.caloni.com.br/funky-do-while/</link>
  <pubDate>2008-02-13</pubDate>
  
  <guid>http://www.caloni.com.br/funky-do-while/</guid>
  <description>It&amp;rsquo;s a known habit to use do-while constructions when there&amp;rsquo;s a need to define a macro that has more than one command instead of using the { simple multicommand brackets }. What was never clear is why this is so.
Let&amp;rsquo;s imagine a trace macro that&amp;rsquo;s enabled in debug mode, whilst kept in silence in release builds:
Nothing much, but it seems to work. But, as we going to see in the following lines, it is really a buggy piece of code, since a call inside an if-else construction simply doesn&amp;rsquo;t work.</description>
</item>

     
        <item>
  <title>Desconstruindo IOCCC</title>
  <link>http://www.caloni.com.br/desconstruindo-ioccc/</link>
  <pubDate>2008-02-11</pubDate>
  
  <guid>http://www.caloni.com.br/desconstruindo-ioccc/</guid>
  <description>Como alguns devem saber, e outros não (ou não deveriam), existe uma competição internacional para escolher quem escreve o código em C mais ofuscado. Isso mesmo. O evento se chama The International Obfuscated C Code Contest (IOCCC resumidamente) e costuma premiar anualmente os melhores &amp;ldquo;do ramo&amp;rdquo; com a chamada &amp;ldquo;menção desonrosa&amp;rdquo;.
Acredito que a real valia de um campeonato desse porte é fazer as pessoas pensarem mais a fundo sobre as regras da linguagem.</description>
</item>

     
        <item>
  <title>Silly regex trick: finding the project who failed inside a big VS solution</title>
  <link>http://www.caloni.com.br/silly-regex-trick-finding-the-project-who-failed-inside-a-vs-big-solution/</link>
  <pubDate>2008-02-07</pubDate>
  
  <guid>http://www.caloni.com.br/silly-regex-trick-finding-the-project-who-failed-inside-a-vs-big-solution/</guid>
  <description>I know what you going to think about this one: &amp;ldquo;silly trick&amp;rdquo;. That&amp;rsquo;s why I just put it in the title. Anyway, that is something I use everyday, so I thought it might be useful to who cares about productivity.
Let&amp;rsquo;s say you have to manage a big solution in Visual Studio made of more than 30 projects, and needs to rebuild all them. Suddenly, something goes wrong. The question is: how to discover, in a heartbeat, what project has failed?</description>
</item>

     
        <item>
  <title>Process Monitor e o monopólio malcriado</title>
  <link>http://www.caloni.com.br/process-monitor-e-o-monopolio-malcriado/</link>
  <pubDate>2008-02-05</pubDate>
  
  <guid>http://www.caloni.com.br/process-monitor-e-o-monopolio-malcriado/</guid>
  <description>Essa é uma regra básica, mas não é fácil de cumpri-la. Só quem já tentou fazer isso sabe do que estou falando. Inúmeros programas mal-escritos vão tentar, de uma hora pra outra, acessar áreas do sistema de arquivos e registro que não possuem acesso, pois agora estão rodando em uma conta mais restrita. E não são programas de administração ou manutenção do sistema. Estou falando de programas de escritório e jogos.</description>
</item>

     
        <item>
  <title>Compartilhando variáveis com o mundo v2</title>
  <link>http://www.caloni.com.br/compartilhando-variaveis-com-o-mundo-v2/</link>
  <pubDate>2008-02-01</pubDate>
  
  <guid>http://www.caloni.com.br/compartilhando-variaveis-com-o-mundo-v2/</guid>
  <description>Nota de desempenho: esse artigo finaliza (finalmente) a republicação de todos os artigos do antigo blogue. Isso quer dizer que a partir de agora eu sou obrigado a trabalhar, e, se quiser manter meu ritmo atual, vou ter que fazer mais do que cinco cliques do mouse.
Como todas as coisas que fazemos e pensamos depois, descobrimos que sempre existe uma outra maneira de fazer a mesma coisa. Se é melhor ou não, pode ser uma questão de gosto, estética, objetivos de vida, etc.</description>
</item>

     
        <item>
  <title>Compartilhando variáveis com o mundo</title>
  <link>http://www.caloni.com.br/compartilhando-variaveis-com-o-mundo/</link>
  <pubDate>2008-01-30</pubDate>
  
  <guid>http://www.caloni.com.br/compartilhando-variaveis-com-o-mundo/</guid>
  <description>Desde que comecei a programar, para compartilhar variáveis entre processo é meio que consenso usar-se a milenar técnica do crie uma seção compartilhada no seu executável/DLL. Isso funciona desde a época em que o Windows era em preto e branco. Mas, como tudo em programação, existem mil maneiras de assar o pato. Esse artigo explica uma delas, a não-tão-milenar técnica do use memória mapeada nomeada misturada com templates.
Era comum (talvez ainda seja) fazer um código assim:</description>
</item>

     
        <item>
  <title>RmThread: rode código em processo vizinho</title>
  <link>http://www.caloni.com.br/rmthread-rode-codigo-em-processo-vizinho/</link>
  <pubDate>2008-01-28</pubDate>
  
  <guid>http://www.caloni.com.br/rmthread-rode-codigo-em-processo-vizinho/</guid>
  <description>Aproveitando que utilizei a mesma técnica semana passada para desenvolver um vírus para Ethical Hacking, republico aqui este artigo que já está mofando no Code Projet, mas que espero que sirva de ajuda pra muita gente que gosta de fuçar nos internals do sistema. Boa leitura!
RmThread é um projeto que fiz baseado em uma das três idéias do artigo de Robert Kuster , &amp;ldquo;Three Ways to Inject Your Code into Another Process&amp;rdquo;.</description>
</item>

     
        <item>
  <title>Keychanger de criança</title>
  <link>http://www.caloni.com.br/keychanger-de-crianca/</link>
  <pubDate>2008-01-24</pubDate>
  
  <guid>http://www.caloni.com.br/keychanger-de-crianca/</guid>
  <description>Às vezes na vida a vontade de fazer alguma coisa besta acaba sendo mais forte do que o senso de ridículo. Então, resolvi ressuscitar o quase apodrecido RusKey, um programa que fiz para trocar letras digitadas no teclado. A idéia é muito simples: o sujeito digita &amp;lsquo;i&amp;rsquo; e sai um &amp;lsquo;c&amp;rsquo;, digita um &amp;lsquo;f&amp;rsquo; e sai um &amp;lsquo;u&amp;rsquo;, e assim por diante. Se estiver programando e for criar um if, por exemplo, no lugar da palavra if vai aparecer&amp;hellip; bom, não é exatamente um if que vai aparecer na tela =).</description>
</item>

     
        <item>
  <title>Otimização em funções recursivas</title>
  <link>http://www.caloni.com.br/otimizacao-em-funcoes-recursivas/</link>
  <pubDate>2008-01-18</pubDate>
  
  <guid>http://www.caloni.com.br/otimizacao-em-funcoes-recursivas/</guid>
  <description>O livro que estou lendo fala sobre algoritmos em C. Os primeiros capítulos são praticamente uma revisão para quem já programou em C, pois tratam de coisas que programadores com mais de cinco anos de casa devem ter na memória cachê (listas, pilhas, recursão, etc). Porém, tive uma agradável surpresa de achar um truque muito sabido que não conhecia, chamado de tail recursion. Fiz questão de testar nos dois compiladores mais conhecidos e eis o resultado.</description>
</item>

     
        <item>
  <title>Encontrando as respostas do Flash Pops</title>
  <link>http://www.caloni.com.br/encontrando-as-respostas-do-flash-pops/</link>
  <pubDate>2008-01-16</pubDate>
  
  <guid>http://www.caloni.com.br/encontrando-as-respostas-do-flash-pops/</guid>
  <description>Existe uma série de jogos no sítio da UOL onde você deve acertar o nome de filmes, programas de televisão, entre outros, que vão da década de 40 até a atualidade. É divertido e viciante fazer pesquisa na internet para encontrar os resultados, ainda mais quando já se é viciado em cinema. Ficamos jogando, eu e minha namorada, por semanas a fio. Quase chegamos a preencher tudo, e por um bom tempo ficamos travados para terminar.</description>
</item>

     
        <item>
  <title>Temas no WinDbg</title>
  <link>http://www.caloni.com.br/temas-no-windbg/</link>
  <pubDate>2008-01-14</pubDate>
  
  <guid>http://www.caloni.com.br/temas-no-windbg/</guid>
  <description>Desde a versão 6.4.7.2 que o WinDbg fornece uma subpasta chamada Themes, onde lá estão diversos workspaces configurados. Existe até um passo-a-passo de como organizar esses temas e escolher o seu favorito. Segue algumas dicas de como transformar corretamente sua área de trabalho para depuração (e mantê-la).
O WinDbg salva suas configurações no registro. Para apagar os valores previamente gravados, rode o seguinte comando:
Você pode gravar um tema, rodar o WinDbg (sem parâmetros), ver se gosta do que viu, e tentar novamente.</description>
</item>

     
        <item>
  <title>Analisando dumps com WinDbg e IDA</title>
  <link>http://www.caloni.com.br/analisando-dumps-com-windbg-e-ida/</link>
  <pubDate>2008-01-10</pubDate>
  
  <guid>http://www.caloni.com.br/analisando-dumps-com-windbg-e-ida/</guid>
  <description>Apesar de ser recomendado que 100% dos componentes de um software esteja configurado corretamente para gerar símbolos na versão release, possibilitando assim a visualização do nome das funções internas através de um arquivo de dump (despejo) gerado na ocorrência de um crash, essa verdade só ocorre em 80% das vezes. Quis Murphy que dessa vez a única parte não &amp;ldquo;simbolizada&amp;rdquo; fosse a que gerou a tela azul em um Intel Quad Core que estou analisando esses dias.</description>
</item>

     
        <item>
  <title>Como ser um melhor desenvolvedor em 2008</title>
  <link>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-em-2008/</link>
  <pubDate>2008-01-02</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-em-2008/</guid>
  <description>Aproveitando que está se aproximando meu prazo final para minhas resoluções de seis meses atrás, e o DQ já fez o checklist dele, vou dar uma espiada na minha lista de desejos atual e fazer uma nova lista para 2008.
Comecei, fiz vários exercícios, mas ainda não acabei todas as aulas. Descobri que a memória pode ser muito mais bem treinada do que realmente é, e existem técnicas bem pensadas que fazem isso sem muito mais esforço do que apenas tempo despendido.</description>
</item>

     
        <item>
  <title>Gambi do dia: swap com apenas duas variáveis</title>
  <link>http://www.caloni.com.br/gambi-do-dia-swap-com-apenas-duas-variaveis/</link>
  <pubDate>2007-12-31</pubDate>
  
  <guid>http://www.caloni.com.br/gambi-do-dia-swap-com-apenas-duas-variaveis/</guid>
  <description>Este artigo é uma reedição de meu blogue antigo, guardado para ser republicado durante minhas miniférias. Esteja à vontade para sugerir outros temas obscuros sobre a linguagem C ou C++ de sua preferência. Boa leitura!
Essa interessantíssima questão veio do meu amigo Kabloc: como trocar o valor entre duas variáveis do tipo int sem utilizar uma variável intermediária? O algoritmo ordinário para um swap entre tipos inteiros é:
Uma das soluções que eu conheço é utilizar o operador de ou exclusivo, o conhecido XOR.</description>
</item>

     
        <item>
  <title>Curiosidades inúteis: o operador de subscrito em C&#43;&#43;</title>
  <link>http://www.caloni.com.br/curiosidades-inuteis-o-operador-de-subscrito-em-c/</link>
  <pubDate>2007-12-27</pubDate>
  
  <guid>http://www.caloni.com.br/curiosidades-inuteis-o-operador-de-subscrito-em-c/</guid>
  <description>Este artigo é uma reedição de meu blogue antigo, guardado para ser republicado durante minhas miniférias. Esteja à vontade para sugerir outros temas obscuros sobre a linguagem C ou C++ de sua preferência. Boa leitura!
Em C e C++ as regras de sintaxe são extremamente flexíveis. Essa liberdade toda se manteve no decorrer dos tempos porque se trata de uma das idéias fundamentais da linguagem C, motivo de sua criação. Me lembro certa vez que, bitolado em C Standard 89, usei uma sintaxe não lá muito usual para acessar um elemento de um array.</description>
</item>

     
        <item>
  <title>O que acontece quando o contador estoura</title>
  <link>http://www.caloni.com.br/o-que-acontece-quando-o-contador-estoura/</link>
  <pubDate>2007-12-25</pubDate>
  
  <guid>http://www.caloni.com.br/o-que-acontece-quando-o-contador-estoura/</guid>
  <description>Dois conceitos de programação relacionados a limites computacionais são bem conhecidos do programador: o famigerado overflow e o não-tão-famoso underflow (embora seja fácil imaginar que ele é o oposto do primeiro). O primeiro ocorre quando somamos a uma variável inteira não-nula um valor cujo resultado não consegue ser representado pelo tamanho de memória usado para armazenar esse tipo inteiro (que pode ser um caractere, um inteiro curto, inteiro longo e por aí vai).</description>
</item>

     
        <item>
  <title>Banco de dados no C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/banco-de-dados-no-c-builder/</link>
  <pubDate>2007-12-21</pubDate>
  
  <guid>http://www.caloni.com.br/banco-de-dados-no-c-builder/</guid>
  <description>Um banco de dados é qualquer lugar onde podemos ler e escrever informação geralmente persistente. Pode ser um arquivo INI, uma estrutura binária ou uma plantação de servidores para fazer busca na internet.
O uso de banco de dados em programação é mais que essencial, pois permite que armazenemos os resultados de um processamento e utilizemos esses mesmos resultados em futuras execuções.
Visando preencher algumas lacunas na internet sobre esse tema, iremos agora nos aventurar na configuração e uso de um banco de dados no C++ Builder.</description>
</item>

     
        <item>
  <title>Drag and drop no C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/drag-and-drop-no-c-builder/</link>
  <pubDate>2007-12-19</pubDate>
  
  <guid>http://www.caloni.com.br/drag-and-drop-no-c-builder/</guid>
  <description>O sistema de drag and drop do C++ Builder é muito fácil de usar, integrado que está com o sistema de classes e objetos do framework. Tanto para o objeto de drag quanto para o objeto de drop tudo que temos que fazer é definirmos a propriedade DragMode para dmAutomatic como mostra a figura. Isso fará com que toda a troca de mensagens seja manipulada automaticamente pela VCL.
A parte (ridídula) do código fica por conta da manipulação do evento de drop.</description>
</item>

     
        <item>
  <title>Sizeof (de novo)</title>
  <link>http://www.caloni.com.br/sizeof-de-novo/</link>
  <pubDate>2007-12-17</pubDate>
  
  <guid>http://www.caloni.com.br/sizeof-de-novo/</guid>
  <description>Algumas coisas em C parecem tão simples na programação do dia-a-dia que em alguns momentos podem existir situações confusas e misteriosas. O uso obscuro do operador sizeof, por exemplo, pode dar margens a interpretações erradas a respeito do que está acontecendo por baixo dos panos. Apesar do padrão ter sido elaborado para tentar tornar a linguagem uma coisa intuitiva e de fácil dedução, isso não acontece todas as vezes.
Vamos tomar, por exemplo, o seguinte minicódigo:</description>
</item>

     
        <item>
  <title>Debug remoto no C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/debug-remoto-no-c-builder/</link>
  <pubDate>2007-12-13</pubDate>
  
  <guid>http://www.caloni.com.br/debug-remoto-no-c-builder/</guid>
  <description>Esse é um detalhe que pode passar despercebido da maioria da população Borland, mas o Builder, assim como o Visual Studio, possui sua suíte para depuração remota. E tudo o que você precisa fazer é instalar um pacote no cliente.
  No CD de instalação, existe uma pasta chamada RDEBUG.
  Na máquina cliente, execute o arquivo setup.exe contido nesta pasta. De preferência, não instale como um serviço (a menos que tenha um motivo).</description>
</item>

     
        <item>
  <title>Gerenciamento de janelas em C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/gerenciamento-de-janelas-em-c-builder/</link>
  <pubDate>2007-12-11</pubDate>
  
  <guid>http://www.caloni.com.br/gerenciamento-de-janelas-em-c-builder/</guid>
  <description>As janelas criadas no C++ Builder são equivalentes às janelas criadas pela API, com o detalhe que a VCL gerencia tudo automaticamente. Isso não quer dizer que não podemos tomar controle de tudo. Quer dizer que não precisamos.
Abra o Builder. Um projeto padrão é criado. Agora no menu File, vá em New, Form. Isso adicionará um novo formulário ao projeto padrão. Pronto! Temos dois formulários. Agora se formos dar uma passeada no WinMain, vemos que o código para iniciar a VCL se alterou conforme a música:</description>
</item>

     
        <item>
  <title>Interação entre controles no C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/interacao-entre-controles-no-c-builder/</link>
  <pubDate>2007-12-05</pubDate>
  
  <guid>http://www.caloni.com.br/interacao-entre-controles-no-c-builder/</guid>
  <description>Para essa proeza precisaremos de:
Bom, sabemos já como colocar esses caras no form principal. Apenas espalhe-os de maneira que eles não fiquem uns em cima dos outros (essa técnica de espalhamento chama-se design).
Agora no evento default do Button1 (duplo-clique nele) colocaremos o seguinte código:
Percebeu? Não? Então rode e note o que acontece quando você aperta o botão.
Agora iremos fazer algo mais interessante ainda com o segundo botão.</description>
</item>

     
        <item>
  <title>Conceitos básicos na programação com C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/conceitos-basicos-na-programacao-com-c-builder/</link>
  <pubDate>2007-12-03</pubDate>
  
  <guid>http://www.caloni.com.br/conceitos-basicos-na-programacao-com-c-builder/</guid>
  <description>No projeto que é criado quando iniciamos a IDE três arquivos-fonte são gerados: Project1.cpp, Unit1.cpp e Unit1.h. Desses três, vamos analisar o primeiro:
Sim, existe um WinMain e ele não está escondido! Nele você pode fazer o que quiser. A IDE apenas auxilia você a gerenciar seus forms. Note que também existe a inclusão de um cabeçalho chamado vcl.h (obrigatório), o que nos leva diretamente para a base de toda a programação Delphi/Builder.</description>
</item>

     
        <item>
  <title>Desenhando em C&#43;&#43; Builder</title>
  <link>http://www.caloni.com.br/desenhando-em-c-builder/</link>
  <pubDate>2007-11-29</pubDate>
  
  <guid>http://www.caloni.com.br/desenhando-em-c-builder/</guid>
  <description>Uma das partes mais fáceis e divertidas de se mexer no C++ Builder é a que lida com gráficos. A abstração da VCL toma conta da alocação e liberação dos objetos gráficos da GDI e nos fornece uma interface para desenhar linhas e figuras geométricas, mexer com bitmaps, usar fontes etc. Concomitantemente, temos acesso ao handles &amp;ldquo;crus&amp;rdquo; da Win32 API para que possamos chamar alguma função esotérica necessária para o seu programa, o que nos garante flexibilidade suficiente.</description>
</item>

     
        <item>
  <title>Carregando DLLs arbitrárias pelo WinDbg - parte 2</title>
  <link>http://www.caloni.com.br/carregando-dlls-arbitrarias-pelo-windbg-parte-2/</link>
  <pubDate>2007-11-27</pubDate>
  
  <guid>http://www.caloni.com.br/carregando-dlls-arbitrarias-pelo-windbg-parte-2/</guid>
  <description>Como pudemos ver no artigo anterior, o processo para carregar uma DLL pelo WinDbg é muito extenso, enfadonho e sujeito a erros. Por esse motivo, e para tornar as coisas mais divertidas, resolvi transformar tudo aquilo em um simples script que pode ser executado digitando apenas uma linha.
Se trata do meu primeiro script grande para o WinDbg, por isso, peço que tenham dó de mim =).
Um script no WinDbg nada mais é que uma execução em batch: um arquivo texto cheio de comandos que poderíamos digitar manualmente, mas que preferimos guardar para poupar nossos dedos.</description>
</item>

     
        <item>
  <title>Carregando DLLs arbitrárias pelo WinDbg</title>
  <link>http://www.caloni.com.br/carregando-dlls-arbitrarias-pelo-windbg/</link>
  <pubDate>2007-11-23</pubDate>
  
  <guid>http://www.caloni.com.br/carregando-dlls-arbitrarias-pelo-windbg/</guid>
  <description>Durante meus testes para a correção de um bug me deparei com a necessidade de carregar uma DLL desenvolvida por mim no processo depurado. O detalhe é que o processo depurado é de terceiros e não possuo o fonte. Portanto, as opções para mim mais simples são:
 Usar o projeto RmThread para injetar a DLL (nesse caso iniciando o processo através dele). Fazer um módulo wrapper para uma DLL qualquer e ser carregado de brinde.</description>
</item>

     
        <item>
  <title>Usando a LIBC nativa do Windows</title>
  <link>http://www.caloni.com.br/usando-a-libc-nativa-do-windows/</link>
  <pubDate>2007-11-21</pubDate>
  
  <guid>http://www.caloni.com.br/usando-a-libc-nativa-do-windows/</guid>
  <description>Por padrão, todo projeto no Visual Studio depende da LIBC. Isso quer dizer que, mesmo que você não use nem um mísero printf em todos os projetos criados, está atrelado a essa dependência. Em tempos onde fazer um &amp;ldquo;Hello World&amp;rdquo; pode custar 56 KB em Release - Visual Studio 2005, configuração padrão sem &amp;ldquo;buffer security check&amp;rdquo; - vale a pena economizar alguns KBytes que não se vão usar. Principalmente se essa possibilidade existe desde o cavernoso Windows 95.</description>
</item>

     
        <item>
  <title>História do Windows - parte 5.1</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-51/</link>
  <pubDate>2007-11-19</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-51/</guid>
  <description>Chega às lojas no dia 25 de outubro de 2001 a unificação entre as plataformas de uso doméstico e corporativo do sistema. O Windows XP usa o kernel de 32 bits de seus antecessores Windows NT e Windows 2000. É vendido em duas edições: Home e Professional Edition. O design do sistema foi totalmente remodulado para suportar ao mesmo tempo a facilidade de uso do usuário doméstico e a robustez e confiabilidade dos clientes corporativos.</description>
</item>

     
        <item>
  <title>SDelete</title>
  <link>http://www.caloni.com.br/sdelete/</link>
  <pubDate>2007-11-15</pubDate>
  
  <guid>http://www.caloni.com.br/sdelete/</guid>
  <description>Minha vida tem que ser portátil. Existem pelo menos três lugares diferentes onde costumo ficar com um computador (não o mesmo). Por causa disso, os dados mais relevantes e que precisam fazer parte do meu sistema biológico eu carrego comigo pra cima e pra baixo em meu PenDrive/MP3Player.
Até aí tudo bem. Quer dizer, mais ou menos. Dados relevantes costumam ser sensíveis, e busco sempre manter todos os arquivos sensíveis encriptados ou com uma senha específica do programa que o abre.</description>
</item>

     
        <item>
  <title>MouseTool</title>
  <link>http://www.caloni.com.br/mousetool/</link>
  <pubDate>2007-11-13</pubDate>
  
  <guid>http://www.caloni.com.br/mousetool/</guid>
  <description>Well, as most of you already know, I really don&amp;rsquo;t like mice. Nevertheless I respect the users who use it and like it. That is the reason why I am writing a little more about it. This time, I going to show a program I use every day: MouseTool, for the users who does not use the mouse and like it.
The program main purpose is to avoid clicking the mouse, simulating a click every time the user stops to move the cursor.</description>
</item>

     
        <item>
  <title>Detectando hooks globais no WinDbg</title>
  <link>http://www.caloni.com.br/detectando-hooks-globais-no-windbg/</link>
  <pubDate>2007-11-09</pubDate>
  
  <guid>http://www.caloni.com.br/detectando-hooks-globais-no-windbg/</guid>
  <description>Nada como um comando prático para aprender rapidamente uma técnica. Nesse caso, tive que usar o comando abaixo para localizar o momento em que um executável instala um hook global:
Vamos analisar cada um dos subcomandos novos um a um.
No WinDbg é possível definir um ou mais comandos que são executados quando um breakpoint é acionado. Esses comandos ficam entre aspas duplas e podem conter as mesmas coisas que digitamos na linha de comando.</description>
</item>

     
        <item>
  <title>Ponteiro de método: qual this é usado?</title>
  <link>http://www.caloni.com.br/ponteiro-de-metodo-qual-this-e-usado/</link>
  <pubDate>2007-11-07</pubDate>
  
  <guid>http://www.caloni.com.br/ponteiro-de-metodo-qual-this-e-usado/</guid>
  <description>Depois de publicado o artigo anterior sobre ponteiros de métodos surgiu uma dúvida muito pertinente do autor do blogue CodeBehind, um escovador de bits disfarçado de programador .NET: qual objeto que vale na hora de chamar um método pelo ponteiro?
Isso me estimulou a desdobrar um pouco mais os mistérios por trás dos ponteiro de métodos e de membros, e descobrir os detalhes mais ocultos desse lado esotérico da linguagem.</description>
</item>

     
        <item>
  <title>Ponteiros de método: conceito fundamental</title>
  <link>http://www.caloni.com.br/ponteiros-de-metodo-conceito-fundamental/</link>
  <pubDate>2007-11-05</pubDate>
  
  <guid>http://www.caloni.com.br/ponteiros-de-metodo-conceito-fundamental/</guid>
  <description>Diferente de ponteiros de função (funções globais ou estáticas) - que são a grosso modo ponteiros como qualquer um - os ponteiros de método possuem uma semântica toda especial que costuma intimidar até quem está acostumado com a aritmética de ponteiros avançada. Não é pra menos: é praticamente uma definição à parte, com algumas limitações e que deixa a desejar os quase sempre criativos programadores da linguagem, que vira e mexe estão pedindo mudanças no C++0x.</description>
</item>

     
        <item>
  <title>Desenvolvendo em linha de comando</title>
  <link>http://www.caloni.com.br/desenvolvendo-em-linha-de-comando/</link>
  <pubDate>2007-11-01</pubDate>
  
  <guid>http://www.caloni.com.br/desenvolvendo-em-linha-de-comando/</guid>
  <description>Desde uns tempos para cá o Visual Studio tem se tornado uma das ferramentas mais pesadas de desenvolvimento já criadas. Como se não bastasse, a compilação de pequenos trechos de código é algo desnecessariamente complicado no ambiente. Por esse motivo estou ganhando o costume de usar a linha de comando para esse tipo de tarefa. Afinal de contas, na maioria das vezes a única coisa que eu preciso fazer é abrir o atalho &amp;ldquo;Visual Studio Command Prompt&amp;rdquo; e digitar uma linha:</description>
</item>

     
        <item>
  <title>Brincando com o WinDbg</title>
  <link>http://www.caloni.com.br/brincando-com-o-windbg/</link>
  <pubDate>2007-10-30</pubDate>
  
  <guid>http://www.caloni.com.br/brincando-com-o-windbg/</guid>
  <description>No primeiro artigo sobre o WinDbg usamos o aplicativo Logger para verificar as funções APIs que são chamadas por um determinado programa. Agora iremos dar um passo adiante e depurar de fato um aplicativo qualquer, com o detalhe que não teremos o código-fonte.
Existem duas maneiras de depurar um programa localmente usando o WinDbg: iniciá-lo pelo próprio WinDbg ou conectar o depurador (attach) em um programa já em execução. Podemos especificar o que faremos direto na linha de comando ou pela sua interface.</description>
</item>

     
        <item>
  <title>Proteção dos membros protected</title>
  <link>http://www.caloni.com.br/protecao-dos-membros-protected/</link>
  <pubDate>2007-10-26</pubDate>
  
  <guid>http://www.caloni.com.br/protecao-dos-membros-protected/</guid>
  <description>Quando queremos que um membro de nossa classe seja visível apenas dentro dos métodos da classe e dentro dos métodos das classes derivadas dessa classe usamos o nível de proteção protected. Isso, é claro, não quer dizer que uma classe derivada vá ter acesso aos membros protegidos de outra:
Esse é o motivo fundamental do porquê não podermos fazer isso:
Ao acessar membros protegidos é importante o tipo da expressão que está do lado esquerdo do &amp;ldquo;.</description>
</item>

     
        <item>
  <title>Typeid e os perigos do não-polimorfismo</title>
  <link>http://www.caloni.com.br/typeid-e-os-perigos-do-nao-polimorfismo/</link>
  <pubDate>2007-10-24</pubDate>
  
  <guid>http://www.caloni.com.br/typeid-e-os-perigos-do-nao-polimorfismo/</guid>
  <description>Quando usamos o operador typeid geralmente desejamos conhecer informações sobre o tipo exato do objeto que temos em mãos, independente da hierarquia de herança a qual seu tipo pertença. Só que por ignorar, assim como o sizeof, que esse operador possui duas caras, às vezes damos com os burros n&#39;água e compramos gato por lebre. Não é pra menos. Uma sutil diferença entre classes polimórficas e estáticas pode dar aquele susto que só C++ pode proporcionar.</description>
</item>

     
        <item>
  <title>Guia básico para programadores de primeiro breakpoint</title>
  <link>http://www.caloni.com.br/guia-basico-para-programadores-de-primeiro-breakpoint/</link>
  <pubDate>2007-10-22</pubDate>
  
  <guid>http://www.caloni.com.br/guia-basico-para-programadores-de-primeiro-breakpoint/</guid>
  <description>Aproveitando um dos últimos artigos que fala sobre conceitos básicos de programação, lembro que, tão importante quanto, é possuir habilidades básicas de depuração, uma arte por muitos programadores ignorada.
É interessante notar como muitos programadores e instituições de ensino ignoram a utilidade e conveniência das tradicionais e poderosas ferramentas de depuração passo-a-passo. O motivo pode ser puro desdém ou ignorância (no sentido de desconhecimento). Se for pelo segundo, aí vão algumas dicas para dar uma passada geral no seu programa e, quem sabe, encontrar um ou outro bug pelo caminho.</description>
</item>

     
        <item>
  <title>Por que minha DLL travou?</title>
  <link>http://www.caloni.com.br/por-que-minha-dll-travou/</link>
  <pubDate>2007-10-18</pubDate>
  
  <guid>http://www.caloni.com.br/por-que-minha-dll-travou/</guid>
  <description>Saiu um documento da Microsoft alertando sobre os perigos em colocar código no DllMain. É algo mais completo e didático do que as simples observações do help do MSDN. Vale a pena dar uma lida, especialmente por causa das explicações sobre o loader lock e seus efeitos colaterais.
O resumo da ópera é que o código do Windows chamador do DllMain das DLLs carregadas/descarregadas utiliza um objeto de acesso exclusivo (leia &amp;ldquo;mutex&amp;rdquo;) para sincronizar as chamadas.</description>
</item>

     
        <item>
  <title>Guia básico para programadores de primeiro int main</title>
  <link>http://www.caloni.com.br/guia-basico-para-programadores-de-primeiro-int-main/</link>
  <pubDate>2007-10-16</pubDate>
  
  <guid>http://www.caloni.com.br/guia-basico-para-programadores-de-primeiro-int-main/</guid>
  <description>Vou aproveitar que meu amigo DQ publicou um artigo muito bom sobre como fazer programas fáceis de manter (merece ser lido!) e vou republicar um artigo do blogue antigo sobre o básico do básico para quem deseja entender como os programas funcionam. Não é nada sofisticado, apenas alguns conceitos comuns que, se você deseja ser programador, deveria procurar saber.
 A primeira coisa a saber é o que é um programa.</description>
</item>

     
        <item>
  <title>A Linguagem de Programação C</title>
  <link>http://www.caloni.com.br/the-c-programming-language/</link>
  <pubDate>2007-10-12</pubDate>
  
  <guid>http://www.caloni.com.br/the-c-programming-language/</guid>
  <description>O clássico de Ritchie e Kernighan, criadores da linguagem C, não foi meu primeiro livro de programação. E nem deveria ser. Não o recomendo para iniciantes, pois é necessário possuir algun conhecimento e prática para realmente aproveitar os conceitos desse livro.
Então, o que ler antes disso? Existem tantos livros bons para iniciantes (e tantos livros péssimos). Eu comecei com C Completo e Total, de Herbert Schildt. Não me arrependi. O autor vai descrevendo C para quem já tentou fazer algumas coisas, já programou outras e está afim de tirar as principais dúvidas sobre essa linguagem que tantos abominam por ser difícil, e tantos idolatram por ser poderosa.</description>
</item>

     
        <item>
  <title>Engenharia reversa para principiantes</title>
  <link>http://www.caloni.com.br/engenharia-reversa-para-principiantes/</link>
  <pubDate>2007-10-10</pubDate>
  
  <guid>http://www.caloni.com.br/engenharia-reversa-para-principiantes/</guid>
  <description>Dei uma reformada em minha última palestra sobre engenharia reversa. O tema escolhido foi tentar abranger os níveis de conhecimento que uma pessoa disposta a se dedicar à engenharia reversa de programas deveria ter, desde programação, passando pelo sistema operacional e terminando no uso de ferramentas. Achei interessante abordar esse tipo de conteúdo pelo fato de existirem pessoas que gostariam de começar ou já começaram e não sabem para onde ir.</description>
</item>

     
        <item>
  <title>História do Windows - parte 5.0</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-50/</link>
  <pubDate>2007-10-08</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-50/</guid>
  <description>Em novembro de 1998 (apenas para parceiros Microsoft) é lançada a versão 5.0 do Windows NT, conhecida como Windows 2000. Melhorias significativas foram feitas no acesso à internet, intranet e extranet. Aplicações de gerenciamento se integram fortemente e a grande novidade em termos de estruturação de dados é o Active Directory, uma tecnologia compatível com o conceito de Distributed File System, que viabiliza uma nova forma das empresas organizarem seus dados de maneira mais transparente à rede.</description>
</item>

     
        <item>
  <title>Debug da BIOS com o SoftIce 16 bits</title>
  <link>http://www.caloni.com.br/debug-da-bios-com-o-softice-16-bits/</link>
  <pubDate>2007-10-02</pubDate>
  
  <guid>http://www.caloni.com.br/debug-da-bios-com-o-softice-16-bits/</guid>
  <description>Para quem ainda acha que não desceu demais o nível, existe um ótimo artigo de ShalomZ, do Code Project, sobre como construir seu próprio sistema operacional. É simples, direta e empolgante a maneira com que ele explica e trata os detalhes básicos, desde quando o computador é ligado até quando o boot loader carrega e entrega o controle de execução. Eu mesmo fiz o teste com a imagem que foi disponibilizada para download e funcionou direitinho.</description>
</item>

     
        <item>
  <title>Introdução ao C&#43;&#43; Builder...Turbo C&#43;&#43;</title>
  <link>http://www.caloni.com.br/introducao-ao-c-builderturbo-c/</link>
  <pubDate>2007-09-26</pubDate>
  
  <guid>http://www.caloni.com.br/introducao-ao-c-builderturbo-c/</guid>
  <description>Após mais de um ano de tentativas, finalmente consegui instalar e iniciar com sucesso o Borland Developer Studio. Esse foi o nome pomposo dado pela Borland para a &amp;ldquo;continuação&amp;rdquo; do velho C++ Builder e seus parentes, o Delphi e o C# Builder.
Existem muitas coisas novas ainda para ver, mas não é a usabilidade. Assim como a IDE antiga, é fácil de sair mexendo e fazendo janelas, no bom estilo WYSIWYG dos produtos da Borland.</description>
</item>

     
        <item>
  <title>Why is my DLL locked?</title>
  <link>http://www.caloni.com.br/why-is-my-dll-locked/</link>
  <pubDate>2007-09-24</pubDate>
  
  <guid>http://www.caloni.com.br/why-is-my-dll-locked/</guid>
  <description>There is a document from Microsoft alerting about the hazards in putting your code inside a DllMain function. what is more comprehensive and easier to read than the MSDN observations. It is worth reading, even because the explanations about the loader lock and its side effects can do very good for your code health.
In short, the Windows code responsible to call DllMain for each loaded/unloaded DLLs uses an exclusive access object (the so-called &amp;ldquo;mutex&amp;rdquo;) to synchronize its calls.</description>
</item>

     
        <item>
  <title>A mobilidade das variáveis no printf</title>
  <link>http://www.caloni.com.br/a-mobilidade-das-variaveis-no-printf/</link>
  <pubDate>2007-09-20</pubDate>
  
  <guid>http://www.caloni.com.br/a-mobilidade-das-variaveis-no-printf/</guid>
  <description>O printf (e derivados) tem sérios problemas por conta de sua falta de tipagem. Não vou aqui dizer que cout é a alternativa óbvia e melhorada porque não é. Mas isso é uma discussão que eu não deveria começar aqui. E não começarei. Portanto, ignorem essa linha =).
O mais comum de todos é a passagem de tipo na string de formatação diferente da variável passada:
Isso costuma ser mais comum quando existem centenas de milhares de parâmetros na chamada, o que confunde o programador (e o leitor de certos blogues especializados em confundir):</description>
</item>

     
        <item>
  <title>Hook de COM no WinDbg</title>
  <link>http://www.caloni.com.br/hook-de-com-no-windbg/</link>
  <pubDate>2007-09-18</pubDate>
  
  <guid>http://www.caloni.com.br/hook-de-com-no-windbg/</guid>
  <description>Continuando com o tema hooks no WinDbg, vamos aqui &amp;ldquo;hookear&amp;rdquo; e analisar as chamadas de métodos de um objeto COM. O que será feito aqui é o mesmo experimento feito para uma palestra de engenharia reversa que apresentei há um tempo atrás [1], mas com as opções de pause, rewind, replay e câmera lenta habilitadas.
Antes de começar, se você não sabe nada sobre COM, não deveria estar aqui, mas aqui, aqui e aqui.</description>
</item>

     
        <item>
  <title>Aquisição de recurso é inicialização</title>
  <link>http://www.caloni.com.br/aquisicao-de-recurso-e-inicializacao/</link>
  <pubDate>2007-09-14</pubDate>
  
  <guid>http://www.caloni.com.br/aquisicao-de-recurso-e-inicializacao/</guid>
  <description>O título desse artigo é uma técnica presente no paradigma da programação em C++, razão pela qual não temos o operador finally. A idéia por trás dessa técnica é conseguirmos usar recursos representados por objetos locais de maneira que ao final da função esses objetos sejam destruídos e, junto com eles, os recursos que foram alocados. Podemos chamar de recursos aquele arquivo que necessita ser aberto para escrita, o bitmap que é exibido na tela, o ponteiro de uma interface COM, etc.</description>
</item>

     
        <item>
  <title>Guia básico de controle de código (Source Safe)</title>
  <link>http://www.caloni.com.br/guia-basico-de-controle-de-codigo-source-safe/</link>
  <pubDate>2007-09-12</pubDate>
  
  <guid>http://www.caloni.com.br/guia-basico-de-controle-de-codigo-source-safe/</guid>
  <description>O primeiro passo para se passar no Teste do Joel é possuir algum tipo de controle de código. E ele está mais do que certo. Não existe nada mais frustrante do que não ter exatamente o código-fonte da versão que está rodando no cliente ou não saber o que mudou desde que a versão foi entregue. Esse tipo de coisa pode acabar com uma empresa ou fazer com que ela fique muito mal vista no mercado.</description>
</item>

     
        <item>
  <title>Antidebug: detectando attach</title>
  <link>http://www.caloni.com.br/antidebug-detectando-attach/</link>
  <pubDate>2007-09-10</pubDate>
  
  <guid>http://www.caloni.com.br/antidebug-detectando-attach/</guid>
  <description>Hoje foi um belo dia para engenharia reversa e análise de proteções. Dois ótimos programas vieram ao meu conhecimento: um monitor de chamadas de API e um monitor de chamadas de COM (complementando o primeiro, que não monitora funções depois que CoCreateInstance foi chamado). Além de que no sítio do primeiro programa - de algum entusiasta do bom e velho Assembly Win32, diga-se de passagem - encontrei o código-fonte para mais uma técnica antidebugging, o que nos leva de volta para a já consagrada série de técnicas antidepuração.</description>
</item>

     
        <item>
  <title>História do Windows - parte 4.0</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-40/</link>
  <pubDate>2007-09-04</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-40/</guid>
  <description>Em meio a uma febre de consumismo, no dia 24 de agosto de 1995, foi lançado a revolução no sistema gráfico da Microsoft: a interface do Windows 95. Ela foi considerada muito mais amigável que suas versões anteriores. Ainda possuía a vantagem de não necessitar mais de uma instalação prévia do DOS, passou a suportar nomes de arquivos longos, incluir suporte a TCP/IP e dial-up networking integrados. Muitas mudanças foram feitas no sistema em si, como a passagem para 32 bits (como já vimos, parcial) e o novo conceito de threads, que é o que veremos com mais detalhes nesse artigo.</description>
</item>

     
        <item>
  <title>Hook de API no WinDbg</title>
  <link>http://www.caloni.com.br/hook-de-api-no-windbg/</link>
  <pubDate>2007-08-29</pubDate>
  
  <guid>http://www.caloni.com.br/hook-de-api-no-windbg/</guid>
  <description>Basicamente existem duas maneiras de um executável obter o endereço de uma função API do Windows: ou ele usa uma lib de interface com a DLL (o chamado &amp;ldquo;link estático&amp;rdquo;) ou ele chama a função kernel32!GetProcAddress explicitamente [1].
Para conseguir saber as funções das quais um executável obtém o endereço através da primeira técnica podemos utilizar o mundialmente famoso Dependency Walker. Ele nos mostrará quais DLLs ele utiliza e quais funções por DLL ele quer o endereço.</description>
</item>

     
        <item>
  <title>Antidebug: ocupando a DebugPort</title>
  <link>http://www.caloni.com.br/antidebug-ocupando-a-debugport/</link>
  <pubDate>2007-08-23</pubDate>
  
  <guid>http://www.caloni.com.br/antidebug-ocupando-a-debugport/</guid>
  <description>Quando um depurador inicia um processo para ser depurado ou, o caso abordado por este artigo, se conecta em um processo já iniciado, as comunicações entre esses dois processos é feita através de um recurso interno do Windows chamado de LPC (Local Procedure Call). O sistema cria uma &amp;ldquo;porta mágica&amp;rdquo; de comunicação específica para a depuração e os eventos trafegam por meio dela.
Entre esses eventos podemos citar os seguintes:</description>
</item>

     
        <item>
  <title>Erro de compilação: funções muito novas na Win32 API</title>
  <link>http://www.caloni.com.br/erro-de-compilacao-funcoes-muito-novas-na-win32-api/</link>
  <pubDate>2007-08-21</pubDate>
  
  <guid>http://www.caloni.com.br/erro-de-compilacao-funcoes-muito-novas-na-win32-api/</guid>
  <description>Quando fala-se em depuração geralmente o pensamento que vem é de um código que já foi compilado e está rodando em alguma outra máquina e gerando problemas não detectados nos testes de desenvolvedor. Mas nem sempre é assim. Depuração pode envolver problemas durante a própria compilação. Afinal de contas, se não está compilando, ou foi compilado errado, é porque já existem problemas antes mesmo da execução começar.
O fonte abaixo, por exemplo, envolve um detalhe que costuma atormentar alguns programadores, ou por falta de observação ou documentação (ou ambos).</description>
</item>

     
        <item>
  <title>Junctions</title>
  <link>http://www.caloni.com.br/junctions/</link>
  <pubDate>2007-08-17</pubDate>
  
  <guid>http://www.caloni.com.br/junctions/</guid>
  <description>Semana passada baixei uma nova imagem para minha máquina de desenvolvimento. Esse esquema do pessoal da engenharia instalar as coisas para você facilita muito as coisas, mas existe o risco de algo ser instalado no lugar errado, que foram os casos do DDK e do SDK do Windows. Aqui no desenvolvimento, para efeito de padronização, utilizamos a seguinte estrutura de diretórios para esses dois aplicativos:
Porém, por algum motivo desconhecido os instaladores da Microsoft não seguem o nosso padrão: o SDK é instalado em &amp;ldquo;%programfiles%\Microsoft Platform SDK&amp;rdquo; e o DDK em &amp;ldquo;C:\WINDDK\3790.</description>
</item>

     
        <item>
  <title>História da linguagem C - parte 2</title>
  <link>http://www.caloni.com.br/historia-da-linguagem-c-parte-2/</link>
  <pubDate>2007-08-15</pubDate>
  
  <guid>http://www.caloni.com.br/historia-da-linguagem-c-parte-2/</guid>
  <description>No princípio&amp;hellip; não, não, não. Antes do princípio, quando C era considerada a terceira letra do alfabeto e o que tínhamos eram linguagens experimentais para todos os lados, dois famigerados Srs. dos Laboratórios Bell, K. Thompson e D. Ritchie, criaram uma linguagem chamada B. E B era bom.
O bom de B era sua rica expressividade e sua simples gramática. Tão simples que o manual da linguagem consistia de apenas 30 páginas.</description>
</item>

     
        <item>
  <title>GINA x Credential Provider</title>
  <link>http://www.caloni.com.br/gina-x-credential-provider/</link>
  <pubDate>2007-08-13</pubDate>
  
  <guid>http://www.caloni.com.br/gina-x-credential-provider/</guid>
  <description>Não fui convidado a participar do tema, mas como já faz algum tempo que o rascunho deste artigo está no molho, e aproveitando que meu amigo Ferdinando resolveu escrever sobre nossa amiga em comum, darei continuidade à minha empolgação sobre o tagging e largarei aqui este pequeno adendo.
Com a chegada do Windows Vista, uma velha conhecida minha e dos meus colegas deixou de fazer parte do sistema de autenticação do sistema operacional: a velha GINA, Graphical Identification aNd Autentication.</description>
</item>

     
        <item>
  <title>Antidebug: interpretação baseada em exceção (parte 2)</title>
  <link>http://www.caloni.com.br/antidebug-interpretacao-baseada-em-excecao-parte-2/</link>
  <pubDate>2007-08-09</pubDate>
  
  <guid>http://www.caloni.com.br/antidebug-interpretacao-baseada-em-excecao-parte-2/</guid>
  <description>No primeiro artigo vimos como é possível &amp;ldquo;enganar&amp;rdquo; o depurador através de exceções e assim fazer o atacante perder um tempo considerável tentando se desvencilhar dos breakpoints de mentira. Porém, vimos também que essa é uma solução difícil de manter no código-fonte, além de possuir o ponto fraco de ser facilmente contornada se descoberta. Agora é a hora de tornar as coisas mais fáceis de manter e ao mesmo tempo garantir maior dificuldade mesmo que o atacante descubra o que está acontecendo debaixo do seu nariz.</description>
</item>

     
        <item>
  <title>História do Windows - parte 3.51</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-351/</link>
  <pubDate>2007-08-07</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-351/</guid>
  <description>Nos anos 90, a relação IBM/Microsoft era muito próxima por causa do desenvolvimento do OS/2, o projeto de um novo sistema operacional. As empresas cooperavam entre si e tinham acesso uma ao código da outra. A Microsoft desejava avançar seu desenvolvimento no Windows, enquanto a IBM desejava que todo trabalho futuro fosse baseado em OS/2. Para resolver essa tensão, as duas combinaram que a IBM iria desenvolver o OS/2 versão 2.</description>
</item>

     
        <item>
  <title>História do Windows - parte 3.0</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-30/</link>
  <pubDate>2007-08-03</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-30/</guid>
  <description>Em 22 de maio de 1990 a versão 3.0 do Windows foi lançada. Foi melhorado o gerenciador de programas e o sistema de ícones, além de um novo gerenciador de arquivos e suporte a 16 cores. Entre as mudanças internas podemos citar a velocidade e a confiabilidade. Como a partir dessa versão apareceram muitos desenvolvedores que passaram a suportar a plataforma, o número de programas disponíveis aumentou, o que conseqüentemente fez com que as vendas alavancassem.</description>
</item>

     
        <item>
  <title>História da linguagem C - parte 1</title>
  <link>http://www.caloni.com.br/historia-da-linguagem-c-parte-1/</link>
  <pubDate>2007-08-01</pubDate>
  
  <guid>http://www.caloni.com.br/historia-da-linguagem-c-parte-1/</guid>
  <description>Confesso que adoro estudar sobre a história da linguagem C. Essa verdadeira adoração pela linguagem me fez estudar suas precursoras, como as linguagens BCPL e B. Posso dizer que todo esse conhecimento, no final das contas, valeu a pena. Hoje entendo muito melhor as decisões tomadas na criação da linguagem e, principalmente, a origem de algumas idiossincrasias e boas idéias que permaneceram até hoje.
Em 21 de julho de 1967 Martin Richards libera o manual da sua recém-criada linguagem BCLP.</description>
</item>

     
        <item>
  <title>C and C&#43;&#43; Operators Precedence Table</title>
  <link>http://www.caloni.com.br/c-and-c-operators-precedence-table/</link>
  <pubDate>2007-07-30</pubDate>
  
  <guid>http://www.caloni.com.br/c-and-c-operators-precedence-table/</guid>
  <description>Wanderley, your explanation about why a program compiles in C++ and not in C seems to me logic and correct, but gave me some doubts, because I always learned that the C and C++ operator precedence are the same thing. I checked out the Appendix A in the &amp;ldquo;C ++ - How To Program&amp;rdquo; (sixth edition) and the book table is equal to the C operators precedence table and it is different from the C++ precedence table presented by you in the article.</description>
</item>

     
        <item>
  <title>Movendo o cursor do mouse com o teclado</title>
  <link>http://www.caloni.com.br/movendo-o-cursor-do-mouse-com-o-teclado/</link>
  <pubDate>2007-07-26</pubDate>
  
  <guid>http://www.caloni.com.br/movendo-o-cursor-do-mouse-com-o-teclado/</guid>
  <description>Bom, vamos deixar de papo furado e &amp;ldquo;codar&amp;rdquo;. Para essa primeira tentativa iremos desenvolver um programa que move o cursor do mouse quando pressionada uma tecla de atalho e voltar à sua posição original quando pressionada outra tecla.
Nota de desculpas: eu sei que estou sendo rabugento demais com o mouse. Já é o segundo artigo que escrevo falando como evitar o mouse e isso deve realmente irritar os fãs desse ponteirinho irritante.</description>
</item>

     
        <item>
  <title>C&#43;&#43;0x parcial no novo GCC 4.3</title>
  <link>http://www.caloni.com.br/c0x-parcial-no-novo-gcc-43/</link>
  <pubDate>2007-07-24</pubDate>
  
  <guid>http://www.caloni.com.br/c0x-parcial-no-novo-gcc-43/</guid>
  <description>A nova versão do GCC implementa em caráter de teste algumas novas características da nova versão da linguagem C++, que será lançada ainda nesta década (provavelmente em 2009). As novas funcionalidades são empolgantes e já fazem parte do imaginário dos programadores C++ já há algum tempo.
Atualmente temos duas maneiras de fazer asserções: usando a função assert (assert.h) ou utilizando a diretiva do pré-processador #error. Nenhum desses dois serve para templates.</description>
</item>

     
        <item>
  <title>Antidebug: interpretação baseada em exceção (parte 1)</title>
  <link>http://www.caloni.com.br/antidebug-interpretacao-baseada-em-excecao-parte-1/</link>
  <pubDate>2007-07-20</pubDate>
  
  <guid>http://www.caloni.com.br/antidebug-interpretacao-baseada-em-excecao-parte-1/</guid>
  <description>Um depurador utiliza breakpoints para &amp;ldquo;paralisar&amp;rdquo; momentaneamente a execução do programa sendo depurado. Para isso ele se utiliza de uma bem conhecida instrução conhecida como int 3. Essa instrução gera uma exceção - exceção de breakpoint - que é capturada pelo sistema operacional e repassada para o código de tratamento dessa exceção. Em programas sendo depurados esse código está localizado no depurador. Em programas &amp;ldquo;livres&amp;rdquo; esse código normalmente não existe e ao acontecer essa exceção o aplicativo simplesmente &amp;ldquo;capota&amp;rdquo;.</description>
</item>

     
        <item>
  <title>Como ser um melhor desenvolvedor nos próximos seis meses</title>
  <link>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-nos-proximos-seis-meses/</link>
  <pubDate>2007-07-18</pubDate>
  
  <guid>http://www.caloni.com.br/como-ser-um-melhor-desenvolvedor-nos-proximos-seis-meses/</guid>
  <description>Graças ao meu amigo Thiago estive acompanhando uma série de posts de gente renomada sobre o tema deste artigo. Eles fazem parte de uma nova modalidade entre os blogueiros (pelo menos para mim) chamada de tagging. Funciona assim: você escreve sobre algo (por exemplo, &amp;ldquo;como ser um melhor cozinheiro em 6 meses&amp;rdquo;) e manda uma tag para que outras pessoas também escrevam sobre o mesmo assunto, o que pode ser feito referenciando o sítio dessas pessoas.</description>
</item>

     
        <item>
  <title>What happens inside the sizeof operator</title>
  <link>http://www.caloni.com.br/what-happens-inside-the-sizeof-operator/</link>
  <pubDate>2007-07-16</pubDate>
  
  <guid>http://www.caloni.com.br/what-happens-inside-the-sizeof-operator/</guid>
  <description>The question: how to get the size of a struct member without declaring it as a variable in memory? In pseudocode:
In this first try (even being a nice one) we can clearly see by instinct that the construction is not supposed to work. The compiler error is not even clear. The member access operator (the point sign) needs to have as its left some variable or constant of the same type of the struct.</description>
</item>

     
        <item>
  <title>Desejo insano de programar no kernel</title>
  <link>http://www.caloni.com.br/desejo-insano-de-programar-no-kernel/</link>
  <pubDate>2007-07-12</pubDate>
  
  <guid>http://www.caloni.com.br/desejo-insano-de-programar-no-kernel/</guid>
  <description>Muitas vezes meus amigos (um em particular) me perguntam por que não me interesso em programar em kernel mode, como se isso fosse um objetivo a ser alcançado por qualquer programador em user mode. Bom, não é.
Claro que sempre me empenho em entender como o sistema funciona, nos menores detalhes e sempre que posso, o que nem sempre me leva para o kernel mode (entender como a CLR funciona, por exemplo).</description>
</item>

     
        <item>
  <title>Precedence difference</title>
  <link>http://www.caloni.com.br/precedence-difference/</link>
  <pubDate>2007-07-10</pubDate>
  
  <guid>http://www.caloni.com.br/precedence-difference/</guid>
  <description>Once upon a time my old friend Kabloc wrote this little and &amp;ldquo;harmless&amp;rdquo; function in order to print the multiplication table:
Despite the fact the result is a strong candidate to &amp;ldquo;The International Obfuscated C Code Contest&amp;rdquo;, the linux guys told him the code was not successful on GCC, and somewhere inside those four lines there was a non-standard piece of code.
Asked to solve the problem, given my congenital inclination to random subjects involving C++, I decided to fix the things up in my old-n-good Visual Studio 2003.</description>
</item>

     
        <item>
  <title>Google shortcuts</title>
  <link>http://www.caloni.com.br/google-shortcuts/</link>
  <pubDate>2007-07-06</pubDate>
  
  <guid>http://www.caloni.com.br/google-shortcuts/</guid>
  <description>I do love shortcuts. Since my very first years using computers, shortcuts had become my obsession. I research them through the time, collecting them, using them. For a long time I avoid myself from touching the mouse, trainning to remember all keystroke sequences I know.
 I have nothing against using the mouse neither the people that do it. I&amp;rsquo;m just not very much enthusiastic in using mice. For sometime, I even believed that the cursor pointer was getting me annoyed, so I developed a program to get rid of it from the screen (using a shortcut, of course).</description>
</item>

     
        <item>
  <title>História do Windows - parte 2.0</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-20/</link>
  <pubDate>2007-07-04</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-20/</guid>
  <description>Eu seu, eu sei. A maioria dos meus leitores odiou o tema história do Windows na era paleozóica. Porém, como eu disse na parte 1.0, estou apenas satisfazendo a outra parte de leitores que procurou no Google por esse tema e acabou caindo no meu antigo blog. Mas vejamos o lado bom: a partir da próxima versão iremos destrinchar a API do sistema, entendendo o porquê das coisas serem como elas são.</description>
</item>

     
        <item>
  <title>Introdução ao SoftICE</title>
  <link>http://www.caloni.com.br/introducao-ao-softice/</link>
  <pubDate>2007-07-02</pubDate>
  
  <guid>http://www.caloni.com.br/introducao-ao-softice/</guid>
  <description>O que acontece quando você precisa depurar um programa e não tem o Visual Studio instalado na máquina onde o problema está ocorrendo? Ora, para isso que existe o Remote Debugging.aspx). Eu uso direto. Você só precisa rodar um pequeno programa na máquina que vai ser depurada e abrir uma porta ou duas. O resto o Visual Studio da máquina que vai depurar faz.
Tudo bem, mas e se estamos falando de depuração em kernel mode?</description>
</item>

     
        <item>
  <title>A inteligência do if - parte 2</title>
  <link>http://www.caloni.com.br/a-inteligencia-do-if-parte-2/</link>
  <pubDate>2007-06-29</pubDate>
  
  <guid>http://www.caloni.com.br/a-inteligencia-do-if-parte-2/</guid>
  <description>Vimos na primeira parte desse artigo como o if revolucionou o mundo da computação trazendo um salto que depende de condições anteriores e, portanto, depende do estado do programa. A ele chamamos de salto condicional. Agora veremos como implementar uma condição baseando-se no fato de que o computador pode apenas realizar operações matemáticas.
Uma condição, item necessário para o funcionamento do salto condicional, nada mais é do que um cálculo matemático e o seu resultado, sendo o salto dependente desse resultado.</description>
</item>

     
        <item>
  <title>História do Windows - parte 1.0</title>
  <link>http://www.caloni.com.br/historia-do-windows-parte-10/</link>
  <pubDate>2007-06-26</pubDate>
  
  <guid>http://www.caloni.com.br/historia-do-windows-parte-10/</guid>
  <description>Devido à grande procura através de mecanismos de busca (vulgo Google), estarei republicando esse artigo dividido em partes (até porque existem partes não acabadas), cada parte descrevendo um conceito geral do que representou cada versão do sistema operacional.
Tudo começou em 1981, quando chegou às lojas o primeiro IBM PC, uma poderosa máquina de 4.7mhz, 64(KB!) de RAM e um drive de disquete de 160KB. Já havia sido lançado em agosto o MS-DOS, sistema operacional encomendado pela IBM à empresa recém-criada por Paul Allen e Bill Gates, a Microsoft Corporation.</description>
</item>

     
        <item>
  <title>Disassembling the array operator</title>
  <link>http://www.caloni.com.br/disassembling-the-array-operator/</link>
  <pubDate>2007-06-22</pubDate>
  
  <guid>http://www.caloni.com.br/disassembling-the-array-operator/</guid>
  <description>Arrays are fascinating in C language because they are so simple and so powerful at the same time. When we start to really understand them and realize all its power we are very close to understand another awesome feature of the language: pointers.
When I was reading the K&amp;amp;R book (again) I was enjoying the language specification details in the Appendix A. It was specially odd the description as an array must be accessed:</description>
</item>

     
        <item>
  <title>Introdução ao Debugging Tools for Windows</title>
  <link>http://www.caloni.com.br/introducao-ao-debugging-tools-for-windows/</link>
  <pubDate>2007-06-20</pubDate>
  
  <guid>http://www.caloni.com.br/introducao-ao-debugging-tools-for-windows/</guid>
  <description>O WinDbg é uma ferramenta obrigatória em uma das minhas mais divertidas tarefas aqui na Open: engenharia reversa de cavalos de tróia. Não tenho o código-fonte desses programas, não posso executá-los em minha própria máquina e não consigo fazer tudo que preciso usando apenas o depurador integrado do Visual Studio (como remontar o assembly do programa, por exemplo). Tudo isso faz do WinDbg a alternativa perfeita (senão uma das únicas). É um depurador que permite ser usado tanto através de janelas quanto através de comandos, o que permite um aprendizado em doses homeopáticas: comece com as janelas e aos poucos ganhe o controle total.</description>
</item>

     
        <item>
  <title>A inteligência do if - parte 1</title>
  <link>http://www.caloni.com.br/a-inteligencia-do-if-parte-1/</link>
  <pubDate>2007-06-18</pubDate>
  
  <guid>http://www.caloni.com.br/a-inteligencia-do-if-parte-1/</guid>
  <description>No nível mais baixo, podemos dizer que as instruções de um computador se baseiam simplesmente em cálculos matemáticos e manipulação de memória. E entre os tipos de manipulação existe aquela que muda o endereço da próxima instrução que será executada. A essa manipulação damos o nome de salto.
O salto simples e direto permite a organização do código em subrotinas e assim seu reaproveitamento, o que economiza memória, mas computacionalmente é inútil, já que pode ser implementado simplesmente pela repetição das subrotinas.</description>
</item>

     
    
  </channel>
</rss>
